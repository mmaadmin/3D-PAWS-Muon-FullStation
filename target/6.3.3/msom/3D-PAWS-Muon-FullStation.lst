
/Users/rjbubon/Documents/Particle/3D-PAWS-Muon-FullStation/target/6.3.3/msom/3D-PAWS-Muon-FullStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085e3000  085e3000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085e3018  085e3018  00003018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085e30a4  085e30a4  000030a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023e41c0  085e30b0  000041c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0001be2c  023e41c8  085e30b8  000041c8  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  7 .data         0000013c  1006a0f8  085feee4  0002a0f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010dc4  1006a238  1006a238  0003a238  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007d000  1007d000  00030000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff020  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000f94  085ff024  085ff024  0002f024  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0048957e  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00045ed4  00000000  00000000  004b957e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000ac777  00000000  00000000  004ff452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00006a30  00000000  00000000  005abbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0001a790  00000000  00000000  005b25f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000c2281  00000000  00000000  005ccd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000fe449  00000000  00000000  0068f00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00168dcd  00000000  00000000  0078d453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00014a18  00000000  00000000  008f6220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085e3018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e3018:	4813      	ldr	r0, [pc, #76]	; (85e3068 <module_user_pre_init+0x50>)
 85e301a:	4914      	ldr	r1, [pc, #80]	; (85e306c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85e301c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e301e:	4288      	cmp	r0, r1
 85e3020:	d005      	beq.n	85e302e <module_user_pre_init+0x16>
 85e3022:	4a13      	ldr	r2, [pc, #76]	; (85e3070 <module_user_pre_init+0x58>)
 85e3024:	4282      	cmp	r2, r0
 85e3026:	d002      	beq.n	85e302e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85e3028:	4b12      	ldr	r3, [pc, #72]	; (85e3074 <module_user_pre_init+0x5c>)
 85e302a:	1a12      	subs	r2, r2, r0
 85e302c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85e302e:	4812      	ldr	r0, [pc, #72]	; (85e3078 <module_user_pre_init+0x60>)
 85e3030:	4a12      	ldr	r2, [pc, #72]	; (85e307c <module_user_pre_init+0x64>)
 85e3032:	2100      	movs	r1, #0
 85e3034:	4b12      	ldr	r3, [pc, #72]	; (85e3080 <module_user_pre_init+0x68>)
 85e3036:	1a12      	subs	r2, r2, r0
 85e3038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85e303a:	4812      	ldr	r0, [pc, #72]	; (85e3084 <module_user_pre_init+0x6c>)
 85e303c:	4912      	ldr	r1, [pc, #72]	; (85e3088 <module_user_pre_init+0x70>)
 85e303e:	4288      	cmp	r0, r1
 85e3040:	d005      	beq.n	85e304e <module_user_pre_init+0x36>
 85e3042:	4a12      	ldr	r2, [pc, #72]	; (85e308c <module_user_pre_init+0x74>)
 85e3044:	4282      	cmp	r2, r0
 85e3046:	d002      	beq.n	85e304e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85e3048:	4b0a      	ldr	r3, [pc, #40]	; (85e3074 <module_user_pre_init+0x5c>)
 85e304a:	1a12      	subs	r2, r2, r0
 85e304c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85e304e:	4810      	ldr	r0, [pc, #64]	; (85e3090 <module_user_pre_init+0x78>)
 85e3050:	4910      	ldr	r1, [pc, #64]	; (85e3094 <module_user_pre_init+0x7c>)
 85e3052:	4288      	cmp	r0, r1
 85e3054:	d005      	beq.n	85e3062 <module_user_pre_init+0x4a>
 85e3056:	4a10      	ldr	r2, [pc, #64]	; (85e3098 <module_user_pre_init+0x80>)
 85e3058:	4282      	cmp	r2, r0
 85e305a:	d002      	beq.n	85e3062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85e305c:	4b05      	ldr	r3, [pc, #20]	; (85e3074 <module_user_pre_init+0x5c>)
 85e305e:	1a12      	subs	r2, r2, r0
 85e3060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85e3062:	4801      	ldr	r0, [pc, #4]	; (85e3068 <module_user_pre_init+0x50>)
 85e3064:	bd08      	pop	{r3, pc}
 85e3066:	bf00      	nop
 85e3068:	1006a0f8 	.word	0x1006a0f8
 85e306c:	085feee4 	.word	0x085feee4
 85e3070:	1006a234 	.word	0x1006a234
 85e3074:	10110d2d 	.word	0x10110d2d
 85e3078:	1006a238 	.word	0x1006a238
 85e307c:	1007affc 	.word	0x1007affc
 85e3080:	10110ea1 	.word	0x10110ea1
 85e3084:	023e41c0 	.word	0x023e41c0
 85e3088:	085e30b0 	.word	0x085e30b0
 85e308c:	023e41c8 	.word	0x023e41c8
 85e3090:	023e41c8 	.word	0x023e41c8
 85e3094:	085e30b8 	.word	0x085e30b8
 85e3098:	023ffff4 	.word	0x023ffff4

085e309c <dynalib_preinit>:
 85e309c:	085e3019 00000000                       .0^.....

Disassembly of section .psram_text:

023e41c8 <__aeabi_drsub>:
 23e41c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23e41cc:	e002      	b.n	23e41d4 <__adddf3>
 23e41ce:	bf00      	nop

023e41d0 <__aeabi_dsub>:
 23e41d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023e41d4 <__adddf3>:
 23e41d4:	b530      	push	{r4, r5, lr}
 23e41d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23e41da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23e41de:	ea94 0f05 	teq	r4, r5
 23e41e2:	bf08      	it	eq
 23e41e4:	ea90 0f02 	teqeq	r0, r2
 23e41e8:	bf1f      	itttt	ne
 23e41ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 23e41ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 23e41f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23e41f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e41fa:	f000 80e2 	beq.w	23e43c2 <__adddf3+0x1ee>
 23e41fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23e4202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23e4206:	bfb8      	it	lt
 23e4208:	426d      	neglt	r5, r5
 23e420a:	dd0c      	ble.n	23e4226 <__adddf3+0x52>
 23e420c:	442c      	add	r4, r5
 23e420e:	ea80 0202 	eor.w	r2, r0, r2
 23e4212:	ea81 0303 	eor.w	r3, r1, r3
 23e4216:	ea82 0000 	eor.w	r0, r2, r0
 23e421a:	ea83 0101 	eor.w	r1, r3, r1
 23e421e:	ea80 0202 	eor.w	r2, r0, r2
 23e4222:	ea81 0303 	eor.w	r3, r1, r3
 23e4226:	2d36      	cmp	r5, #54	; 0x36
 23e4228:	bf88      	it	hi
 23e422a:	bd30      	pophi	{r4, r5, pc}
 23e422c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e4230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e4234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23e4238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23e423c:	d002      	beq.n	23e4244 <__adddf3+0x70>
 23e423e:	4240      	negs	r0, r0
 23e4240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e4244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23e4248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e424c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23e4250:	d002      	beq.n	23e4258 <__adddf3+0x84>
 23e4252:	4252      	negs	r2, r2
 23e4254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e4258:	ea94 0f05 	teq	r4, r5
 23e425c:	f000 80a7 	beq.w	23e43ae <__adddf3+0x1da>
 23e4260:	f1a4 0401 	sub.w	r4, r4, #1
 23e4264:	f1d5 0e20 	rsbs	lr, r5, #32
 23e4268:	db0d      	blt.n	23e4286 <__adddf3+0xb2>
 23e426a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23e426e:	fa22 f205 	lsr.w	r2, r2, r5
 23e4272:	1880      	adds	r0, r0, r2
 23e4274:	f141 0100 	adc.w	r1, r1, #0
 23e4278:	fa03 f20e 	lsl.w	r2, r3, lr
 23e427c:	1880      	adds	r0, r0, r2
 23e427e:	fa43 f305 	asr.w	r3, r3, r5
 23e4282:	4159      	adcs	r1, r3
 23e4284:	e00e      	b.n	23e42a4 <__adddf3+0xd0>
 23e4286:	f1a5 0520 	sub.w	r5, r5, #32
 23e428a:	f10e 0e20 	add.w	lr, lr, #32
 23e428e:	2a01      	cmp	r2, #1
 23e4290:	fa03 fc0e 	lsl.w	ip, r3, lr
 23e4294:	bf28      	it	cs
 23e4296:	f04c 0c02 	orrcs.w	ip, ip, #2
 23e429a:	fa43 f305 	asr.w	r3, r3, r5
 23e429e:	18c0      	adds	r0, r0, r3
 23e42a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23e42a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e42a8:	d507      	bpl.n	23e42ba <__adddf3+0xe6>
 23e42aa:	f04f 0e00 	mov.w	lr, #0
 23e42ae:	f1dc 0c00 	rsbs	ip, ip, #0
 23e42b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23e42b6:	eb6e 0101 	sbc.w	r1, lr, r1
 23e42ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23e42be:	d31b      	bcc.n	23e42f8 <__adddf3+0x124>
 23e42c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23e42c4:	d30c      	bcc.n	23e42e0 <__adddf3+0x10c>
 23e42c6:	0849      	lsrs	r1, r1, #1
 23e42c8:	ea5f 0030 	movs.w	r0, r0, rrx
 23e42cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23e42d0:	f104 0401 	add.w	r4, r4, #1
 23e42d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23e42d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23e42dc:	f080 809a 	bcs.w	23e4414 <__adddf3+0x240>
 23e42e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e42e4:	bf08      	it	eq
 23e42e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e42ea:	f150 0000 	adcs.w	r0, r0, #0
 23e42ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e42f2:	ea41 0105 	orr.w	r1, r1, r5
 23e42f6:	bd30      	pop	{r4, r5, pc}
 23e42f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23e42fc:	4140      	adcs	r0, r0
 23e42fe:	eb41 0101 	adc.w	r1, r1, r1
 23e4302:	3c01      	subs	r4, #1
 23e4304:	bf28      	it	cs
 23e4306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23e430a:	d2e9      	bcs.n	23e42e0 <__adddf3+0x10c>
 23e430c:	f091 0f00 	teq	r1, #0
 23e4310:	bf04      	itt	eq
 23e4312:	4601      	moveq	r1, r0
 23e4314:	2000      	moveq	r0, #0
 23e4316:	fab1 f381 	clz	r3, r1
 23e431a:	bf08      	it	eq
 23e431c:	3320      	addeq	r3, #32
 23e431e:	f1a3 030b 	sub.w	r3, r3, #11
 23e4322:	f1b3 0220 	subs.w	r2, r3, #32
 23e4326:	da0c      	bge.n	23e4342 <__adddf3+0x16e>
 23e4328:	320c      	adds	r2, #12
 23e432a:	dd08      	ble.n	23e433e <__adddf3+0x16a>
 23e432c:	f102 0c14 	add.w	ip, r2, #20
 23e4330:	f1c2 020c 	rsb	r2, r2, #12
 23e4334:	fa01 f00c 	lsl.w	r0, r1, ip
 23e4338:	fa21 f102 	lsr.w	r1, r1, r2
 23e433c:	e00c      	b.n	23e4358 <__adddf3+0x184>
 23e433e:	f102 0214 	add.w	r2, r2, #20
 23e4342:	bfd8      	it	le
 23e4344:	f1c2 0c20 	rsble	ip, r2, #32
 23e4348:	fa01 f102 	lsl.w	r1, r1, r2
 23e434c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23e4350:	bfdc      	itt	le
 23e4352:	ea41 010c 	orrle.w	r1, r1, ip
 23e4356:	4090      	lslle	r0, r2
 23e4358:	1ae4      	subs	r4, r4, r3
 23e435a:	bfa2      	ittt	ge
 23e435c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23e4360:	4329      	orrge	r1, r5
 23e4362:	bd30      	popge	{r4, r5, pc}
 23e4364:	ea6f 0404 	mvn.w	r4, r4
 23e4368:	3c1f      	subs	r4, #31
 23e436a:	da1c      	bge.n	23e43a6 <__adddf3+0x1d2>
 23e436c:	340c      	adds	r4, #12
 23e436e:	dc0e      	bgt.n	23e438e <__adddf3+0x1ba>
 23e4370:	f104 0414 	add.w	r4, r4, #20
 23e4374:	f1c4 0220 	rsb	r2, r4, #32
 23e4378:	fa20 f004 	lsr.w	r0, r0, r4
 23e437c:	fa01 f302 	lsl.w	r3, r1, r2
 23e4380:	ea40 0003 	orr.w	r0, r0, r3
 23e4384:	fa21 f304 	lsr.w	r3, r1, r4
 23e4388:	ea45 0103 	orr.w	r1, r5, r3
 23e438c:	bd30      	pop	{r4, r5, pc}
 23e438e:	f1c4 040c 	rsb	r4, r4, #12
 23e4392:	f1c4 0220 	rsb	r2, r4, #32
 23e4396:	fa20 f002 	lsr.w	r0, r0, r2
 23e439a:	fa01 f304 	lsl.w	r3, r1, r4
 23e439e:	ea40 0003 	orr.w	r0, r0, r3
 23e43a2:	4629      	mov	r1, r5
 23e43a4:	bd30      	pop	{r4, r5, pc}
 23e43a6:	fa21 f004 	lsr.w	r0, r1, r4
 23e43aa:	4629      	mov	r1, r5
 23e43ac:	bd30      	pop	{r4, r5, pc}
 23e43ae:	f094 0f00 	teq	r4, #0
 23e43b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23e43b6:	bf06      	itte	eq
 23e43b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23e43bc:	3401      	addeq	r4, #1
 23e43be:	3d01      	subne	r5, #1
 23e43c0:	e74e      	b.n	23e4260 <__adddf3+0x8c>
 23e43c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e43c6:	bf18      	it	ne
 23e43c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e43cc:	d029      	beq.n	23e4422 <__adddf3+0x24e>
 23e43ce:	ea94 0f05 	teq	r4, r5
 23e43d2:	bf08      	it	eq
 23e43d4:	ea90 0f02 	teqeq	r0, r2
 23e43d8:	d005      	beq.n	23e43e6 <__adddf3+0x212>
 23e43da:	ea54 0c00 	orrs.w	ip, r4, r0
 23e43de:	bf04      	itt	eq
 23e43e0:	4619      	moveq	r1, r3
 23e43e2:	4610      	moveq	r0, r2
 23e43e4:	bd30      	pop	{r4, r5, pc}
 23e43e6:	ea91 0f03 	teq	r1, r3
 23e43ea:	bf1e      	ittt	ne
 23e43ec:	2100      	movne	r1, #0
 23e43ee:	2000      	movne	r0, #0
 23e43f0:	bd30      	popne	{r4, r5, pc}
 23e43f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23e43f6:	d105      	bne.n	23e4404 <__adddf3+0x230>
 23e43f8:	0040      	lsls	r0, r0, #1
 23e43fa:	4149      	adcs	r1, r1
 23e43fc:	bf28      	it	cs
 23e43fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23e4402:	bd30      	pop	{r4, r5, pc}
 23e4404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23e4408:	bf3c      	itt	cc
 23e440a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23e440e:	bd30      	popcc	{r4, r5, pc}
 23e4410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e4414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23e4418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e441c:	f04f 0000 	mov.w	r0, #0
 23e4420:	bd30      	pop	{r4, r5, pc}
 23e4422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e4426:	bf1a      	itte	ne
 23e4428:	4619      	movne	r1, r3
 23e442a:	4610      	movne	r0, r2
 23e442c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23e4430:	bf1c      	itt	ne
 23e4432:	460b      	movne	r3, r1
 23e4434:	4602      	movne	r2, r0
 23e4436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e443a:	bf06      	itte	eq
 23e443c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23e4440:	ea91 0f03 	teqeq	r1, r3
 23e4444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23e4448:	bd30      	pop	{r4, r5, pc}
 23e444a:	bf00      	nop

023e444c <__aeabi_ui2d>:
 23e444c:	f090 0f00 	teq	r0, #0
 23e4450:	bf04      	itt	eq
 23e4452:	2100      	moveq	r1, #0
 23e4454:	4770      	bxeq	lr
 23e4456:	b530      	push	{r4, r5, lr}
 23e4458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e445c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e4460:	f04f 0500 	mov.w	r5, #0
 23e4464:	f04f 0100 	mov.w	r1, #0
 23e4468:	e750      	b.n	23e430c <__adddf3+0x138>
 23e446a:	bf00      	nop

023e446c <__aeabi_i2d>:
 23e446c:	f090 0f00 	teq	r0, #0
 23e4470:	bf04      	itt	eq
 23e4472:	2100      	moveq	r1, #0
 23e4474:	4770      	bxeq	lr
 23e4476:	b530      	push	{r4, r5, lr}
 23e4478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e447c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e4480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23e4484:	bf48      	it	mi
 23e4486:	4240      	negmi	r0, r0
 23e4488:	f04f 0100 	mov.w	r1, #0
 23e448c:	e73e      	b.n	23e430c <__adddf3+0x138>
 23e448e:	bf00      	nop

023e4490 <__aeabi_f2d>:
 23e4490:	0042      	lsls	r2, r0, #1
 23e4492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23e4496:	ea4f 0131 	mov.w	r1, r1, rrx
 23e449a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23e449e:	bf1f      	itttt	ne
 23e44a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23e44a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23e44a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23e44ac:	4770      	bxne	lr
 23e44ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23e44b2:	bf08      	it	eq
 23e44b4:	4770      	bxeq	lr
 23e44b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23e44ba:	bf04      	itt	eq
 23e44bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23e44c0:	4770      	bxeq	lr
 23e44c2:	b530      	push	{r4, r5, lr}
 23e44c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23e44c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e44cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e44d0:	e71c      	b.n	23e430c <__adddf3+0x138>
 23e44d2:	bf00      	nop

023e44d4 <__aeabi_ul2d>:
 23e44d4:	ea50 0201 	orrs.w	r2, r0, r1
 23e44d8:	bf08      	it	eq
 23e44da:	4770      	bxeq	lr
 23e44dc:	b530      	push	{r4, r5, lr}
 23e44de:	f04f 0500 	mov.w	r5, #0
 23e44e2:	e00a      	b.n	23e44fa <__aeabi_l2d+0x16>

023e44e4 <__aeabi_l2d>:
 23e44e4:	ea50 0201 	orrs.w	r2, r0, r1
 23e44e8:	bf08      	it	eq
 23e44ea:	4770      	bxeq	lr
 23e44ec:	b530      	push	{r4, r5, lr}
 23e44ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23e44f2:	d502      	bpl.n	23e44fa <__aeabi_l2d+0x16>
 23e44f4:	4240      	negs	r0, r0
 23e44f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e44fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e44fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e4502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23e4506:	f43f aed8 	beq.w	23e42ba <__adddf3+0xe6>
 23e450a:	f04f 0203 	mov.w	r2, #3
 23e450e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e4512:	bf18      	it	ne
 23e4514:	3203      	addne	r2, #3
 23e4516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e451a:	bf18      	it	ne
 23e451c:	3203      	addne	r2, #3
 23e451e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23e4522:	f1c2 0320 	rsb	r3, r2, #32
 23e4526:	fa00 fc03 	lsl.w	ip, r0, r3
 23e452a:	fa20 f002 	lsr.w	r0, r0, r2
 23e452e:	fa01 fe03 	lsl.w	lr, r1, r3
 23e4532:	ea40 000e 	orr.w	r0, r0, lr
 23e4536:	fa21 f102 	lsr.w	r1, r1, r2
 23e453a:	4414      	add	r4, r2
 23e453c:	e6bd      	b.n	23e42ba <__adddf3+0xe6>
 23e453e:	bf00      	nop

023e4540 <__aeabi_dmul>:
 23e4540:	b570      	push	{r4, r5, r6, lr}
 23e4542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e4546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e454a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e454e:	bf1d      	ittte	ne
 23e4550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e4554:	ea94 0f0c 	teqne	r4, ip
 23e4558:	ea95 0f0c 	teqne	r5, ip
 23e455c:	f000 f8de 	bleq	23e471c <__aeabi_dmul+0x1dc>
 23e4560:	442c      	add	r4, r5
 23e4562:	ea81 0603 	eor.w	r6, r1, r3
 23e4566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23e456a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23e456e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23e4572:	bf18      	it	ne
 23e4574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23e4578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e457c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e4580:	d038      	beq.n	23e45f4 <__aeabi_dmul+0xb4>
 23e4582:	fba0 ce02 	umull	ip, lr, r0, r2
 23e4586:	f04f 0500 	mov.w	r5, #0
 23e458a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23e458e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23e4592:	fbe0 e503 	umlal	lr, r5, r0, r3
 23e4596:	f04f 0600 	mov.w	r6, #0
 23e459a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23e459e:	f09c 0f00 	teq	ip, #0
 23e45a2:	bf18      	it	ne
 23e45a4:	f04e 0e01 	orrne.w	lr, lr, #1
 23e45a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23e45ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23e45b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23e45b4:	d204      	bcs.n	23e45c0 <__aeabi_dmul+0x80>
 23e45b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23e45ba:	416d      	adcs	r5, r5
 23e45bc:	eb46 0606 	adc.w	r6, r6, r6
 23e45c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23e45c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23e45c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23e45cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23e45d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23e45d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e45d8:	bf88      	it	hi
 23e45da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e45de:	d81e      	bhi.n	23e461e <__aeabi_dmul+0xde>
 23e45e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23e45e4:	bf08      	it	eq
 23e45e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23e45ea:	f150 0000 	adcs.w	r0, r0, #0
 23e45ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e45f2:	bd70      	pop	{r4, r5, r6, pc}
 23e45f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23e45f8:	ea46 0101 	orr.w	r1, r6, r1
 23e45fc:	ea40 0002 	orr.w	r0, r0, r2
 23e4600:	ea81 0103 	eor.w	r1, r1, r3
 23e4604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23e4608:	bfc2      	ittt	gt
 23e460a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e460e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e4612:	bd70      	popgt	{r4, r5, r6, pc}
 23e4614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e4618:	f04f 0e00 	mov.w	lr, #0
 23e461c:	3c01      	subs	r4, #1
 23e461e:	f300 80ab 	bgt.w	23e4778 <__aeabi_dmul+0x238>
 23e4622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23e4626:	bfde      	ittt	le
 23e4628:	2000      	movle	r0, #0
 23e462a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23e462e:	bd70      	pople	{r4, r5, r6, pc}
 23e4630:	f1c4 0400 	rsb	r4, r4, #0
 23e4634:	3c20      	subs	r4, #32
 23e4636:	da35      	bge.n	23e46a4 <__aeabi_dmul+0x164>
 23e4638:	340c      	adds	r4, #12
 23e463a:	dc1b      	bgt.n	23e4674 <__aeabi_dmul+0x134>
 23e463c:	f104 0414 	add.w	r4, r4, #20
 23e4640:	f1c4 0520 	rsb	r5, r4, #32
 23e4644:	fa00 f305 	lsl.w	r3, r0, r5
 23e4648:	fa20 f004 	lsr.w	r0, r0, r4
 23e464c:	fa01 f205 	lsl.w	r2, r1, r5
 23e4650:	ea40 0002 	orr.w	r0, r0, r2
 23e4654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23e4658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e465c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e4660:	fa21 f604 	lsr.w	r6, r1, r4
 23e4664:	eb42 0106 	adc.w	r1, r2, r6
 23e4668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e466c:	bf08      	it	eq
 23e466e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e4672:	bd70      	pop	{r4, r5, r6, pc}
 23e4674:	f1c4 040c 	rsb	r4, r4, #12
 23e4678:	f1c4 0520 	rsb	r5, r4, #32
 23e467c:	fa00 f304 	lsl.w	r3, r0, r4
 23e4680:	fa20 f005 	lsr.w	r0, r0, r5
 23e4684:	fa01 f204 	lsl.w	r2, r1, r4
 23e4688:	ea40 0002 	orr.w	r0, r0, r2
 23e468c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e4690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e4694:	f141 0100 	adc.w	r1, r1, #0
 23e4698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e469c:	bf08      	it	eq
 23e469e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e46a2:	bd70      	pop	{r4, r5, r6, pc}
 23e46a4:	f1c4 0520 	rsb	r5, r4, #32
 23e46a8:	fa00 f205 	lsl.w	r2, r0, r5
 23e46ac:	ea4e 0e02 	orr.w	lr, lr, r2
 23e46b0:	fa20 f304 	lsr.w	r3, r0, r4
 23e46b4:	fa01 f205 	lsl.w	r2, r1, r5
 23e46b8:	ea43 0302 	orr.w	r3, r3, r2
 23e46bc:	fa21 f004 	lsr.w	r0, r1, r4
 23e46c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e46c4:	fa21 f204 	lsr.w	r2, r1, r4
 23e46c8:	ea20 0002 	bic.w	r0, r0, r2
 23e46cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23e46d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e46d4:	bf08      	it	eq
 23e46d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e46da:	bd70      	pop	{r4, r5, r6, pc}
 23e46dc:	f094 0f00 	teq	r4, #0
 23e46e0:	d10f      	bne.n	23e4702 <__aeabi_dmul+0x1c2>
 23e46e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23e46e6:	0040      	lsls	r0, r0, #1
 23e46e8:	eb41 0101 	adc.w	r1, r1, r1
 23e46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e46f0:	bf08      	it	eq
 23e46f2:	3c01      	subeq	r4, #1
 23e46f4:	d0f7      	beq.n	23e46e6 <__aeabi_dmul+0x1a6>
 23e46f6:	ea41 0106 	orr.w	r1, r1, r6
 23e46fa:	f095 0f00 	teq	r5, #0
 23e46fe:	bf18      	it	ne
 23e4700:	4770      	bxne	lr
 23e4702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23e4706:	0052      	lsls	r2, r2, #1
 23e4708:	eb43 0303 	adc.w	r3, r3, r3
 23e470c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23e4710:	bf08      	it	eq
 23e4712:	3d01      	subeq	r5, #1
 23e4714:	d0f7      	beq.n	23e4706 <__aeabi_dmul+0x1c6>
 23e4716:	ea43 0306 	orr.w	r3, r3, r6
 23e471a:	4770      	bx	lr
 23e471c:	ea94 0f0c 	teq	r4, ip
 23e4720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e4724:	bf18      	it	ne
 23e4726:	ea95 0f0c 	teqne	r5, ip
 23e472a:	d00c      	beq.n	23e4746 <__aeabi_dmul+0x206>
 23e472c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e4730:	bf18      	it	ne
 23e4732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e4736:	d1d1      	bne.n	23e46dc <__aeabi_dmul+0x19c>
 23e4738:	ea81 0103 	eor.w	r1, r1, r3
 23e473c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e4740:	f04f 0000 	mov.w	r0, #0
 23e4744:	bd70      	pop	{r4, r5, r6, pc}
 23e4746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e474a:	bf06      	itte	eq
 23e474c:	4610      	moveq	r0, r2
 23e474e:	4619      	moveq	r1, r3
 23e4750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e4754:	d019      	beq.n	23e478a <__aeabi_dmul+0x24a>
 23e4756:	ea94 0f0c 	teq	r4, ip
 23e475a:	d102      	bne.n	23e4762 <__aeabi_dmul+0x222>
 23e475c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23e4760:	d113      	bne.n	23e478a <__aeabi_dmul+0x24a>
 23e4762:	ea95 0f0c 	teq	r5, ip
 23e4766:	d105      	bne.n	23e4774 <__aeabi_dmul+0x234>
 23e4768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23e476c:	bf1c      	itt	ne
 23e476e:	4610      	movne	r0, r2
 23e4770:	4619      	movne	r1, r3
 23e4772:	d10a      	bne.n	23e478a <__aeabi_dmul+0x24a>
 23e4774:	ea81 0103 	eor.w	r1, r1, r3
 23e4778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e477c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e4780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e4784:	f04f 0000 	mov.w	r0, #0
 23e4788:	bd70      	pop	{r4, r5, r6, pc}
 23e478a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e478e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23e4792:	bd70      	pop	{r4, r5, r6, pc}

023e4794 <__aeabi_ddiv>:
 23e4794:	b570      	push	{r4, r5, r6, lr}
 23e4796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e479a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e479e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e47a2:	bf1d      	ittte	ne
 23e47a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e47a8:	ea94 0f0c 	teqne	r4, ip
 23e47ac:	ea95 0f0c 	teqne	r5, ip
 23e47b0:	f000 f8a7 	bleq	23e4902 <__aeabi_ddiv+0x16e>
 23e47b4:	eba4 0405 	sub.w	r4, r4, r5
 23e47b8:	ea81 0e03 	eor.w	lr, r1, r3
 23e47bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e47c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e47c4:	f000 8088 	beq.w	23e48d8 <__aeabi_ddiv+0x144>
 23e47c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e47cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23e47d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23e47d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23e47d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23e47dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23e47e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23e47e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23e47e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23e47ec:	429d      	cmp	r5, r3
 23e47ee:	bf08      	it	eq
 23e47f0:	4296      	cmpeq	r6, r2
 23e47f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23e47f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23e47fa:	d202      	bcs.n	23e4802 <__aeabi_ddiv+0x6e>
 23e47fc:	085b      	lsrs	r3, r3, #1
 23e47fe:	ea4f 0232 	mov.w	r2, r2, rrx
 23e4802:	1ab6      	subs	r6, r6, r2
 23e4804:	eb65 0503 	sbc.w	r5, r5, r3
 23e4808:	085b      	lsrs	r3, r3, #1
 23e480a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e480e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23e4812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23e4816:	ebb6 0e02 	subs.w	lr, r6, r2
 23e481a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e481e:	bf22      	ittt	cs
 23e4820:	1ab6      	subcs	r6, r6, r2
 23e4822:	4675      	movcs	r5, lr
 23e4824:	ea40 000c 	orrcs.w	r0, r0, ip
 23e4828:	085b      	lsrs	r3, r3, #1
 23e482a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e482e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e4832:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e4836:	bf22      	ittt	cs
 23e4838:	1ab6      	subcs	r6, r6, r2
 23e483a:	4675      	movcs	r5, lr
 23e483c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23e4840:	085b      	lsrs	r3, r3, #1
 23e4842:	ea4f 0232 	mov.w	r2, r2, rrx
 23e4846:	ebb6 0e02 	subs.w	lr, r6, r2
 23e484a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e484e:	bf22      	ittt	cs
 23e4850:	1ab6      	subcs	r6, r6, r2
 23e4852:	4675      	movcs	r5, lr
 23e4854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23e4858:	085b      	lsrs	r3, r3, #1
 23e485a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e485e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e4862:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e4866:	bf22      	ittt	cs
 23e4868:	1ab6      	subcs	r6, r6, r2
 23e486a:	4675      	movcs	r5, lr
 23e486c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23e4870:	ea55 0e06 	orrs.w	lr, r5, r6
 23e4874:	d018      	beq.n	23e48a8 <__aeabi_ddiv+0x114>
 23e4876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23e487a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23e487e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23e4882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23e4886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23e488a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23e488e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23e4892:	d1c0      	bne.n	23e4816 <__aeabi_ddiv+0x82>
 23e4894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e4898:	d10b      	bne.n	23e48b2 <__aeabi_ddiv+0x11e>
 23e489a:	ea41 0100 	orr.w	r1, r1, r0
 23e489e:	f04f 0000 	mov.w	r0, #0
 23e48a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23e48a6:	e7b6      	b.n	23e4816 <__aeabi_ddiv+0x82>
 23e48a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e48ac:	bf04      	itt	eq
 23e48ae:	4301      	orreq	r1, r0
 23e48b0:	2000      	moveq	r0, #0
 23e48b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e48b6:	bf88      	it	hi
 23e48b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e48bc:	f63f aeaf 	bhi.w	23e461e <__aeabi_dmul+0xde>
 23e48c0:	ebb5 0c03 	subs.w	ip, r5, r3
 23e48c4:	bf04      	itt	eq
 23e48c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23e48ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e48ce:	f150 0000 	adcs.w	r0, r0, #0
 23e48d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e48d6:	bd70      	pop	{r4, r5, r6, pc}
 23e48d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23e48dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23e48e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23e48e4:	bfc2      	ittt	gt
 23e48e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e48ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e48ee:	bd70      	popgt	{r4, r5, r6, pc}
 23e48f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e48f4:	f04f 0e00 	mov.w	lr, #0
 23e48f8:	3c01      	subs	r4, #1
 23e48fa:	e690      	b.n	23e461e <__aeabi_dmul+0xde>
 23e48fc:	ea45 0e06 	orr.w	lr, r5, r6
 23e4900:	e68d      	b.n	23e461e <__aeabi_dmul+0xde>
 23e4902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e4906:	ea94 0f0c 	teq	r4, ip
 23e490a:	bf08      	it	eq
 23e490c:	ea95 0f0c 	teqeq	r5, ip
 23e4910:	f43f af3b 	beq.w	23e478a <__aeabi_dmul+0x24a>
 23e4914:	ea94 0f0c 	teq	r4, ip
 23e4918:	d10a      	bne.n	23e4930 <__aeabi_ddiv+0x19c>
 23e491a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e491e:	f47f af34 	bne.w	23e478a <__aeabi_dmul+0x24a>
 23e4922:	ea95 0f0c 	teq	r5, ip
 23e4926:	f47f af25 	bne.w	23e4774 <__aeabi_dmul+0x234>
 23e492a:	4610      	mov	r0, r2
 23e492c:	4619      	mov	r1, r3
 23e492e:	e72c      	b.n	23e478a <__aeabi_dmul+0x24a>
 23e4930:	ea95 0f0c 	teq	r5, ip
 23e4934:	d106      	bne.n	23e4944 <__aeabi_ddiv+0x1b0>
 23e4936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e493a:	f43f aefd 	beq.w	23e4738 <__aeabi_dmul+0x1f8>
 23e493e:	4610      	mov	r0, r2
 23e4940:	4619      	mov	r1, r3
 23e4942:	e722      	b.n	23e478a <__aeabi_dmul+0x24a>
 23e4944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e4948:	bf18      	it	ne
 23e494a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e494e:	f47f aec5 	bne.w	23e46dc <__aeabi_dmul+0x19c>
 23e4952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23e4956:	f47f af0d 	bne.w	23e4774 <__aeabi_dmul+0x234>
 23e495a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23e495e:	f47f aeeb 	bne.w	23e4738 <__aeabi_dmul+0x1f8>
 23e4962:	e712      	b.n	23e478a <__aeabi_dmul+0x24a>

023e4964 <__gedf2>:
 23e4964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23e4968:	e006      	b.n	23e4978 <__cmpdf2+0x4>
 23e496a:	bf00      	nop

023e496c <__ledf2>:
 23e496c:	f04f 0c01 	mov.w	ip, #1
 23e4970:	e002      	b.n	23e4978 <__cmpdf2+0x4>
 23e4972:	bf00      	nop

023e4974 <__cmpdf2>:
 23e4974:	f04f 0c01 	mov.w	ip, #1
 23e4978:	f84d cd04 	str.w	ip, [sp, #-4]!
 23e497c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e4980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e4984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e4988:	bf18      	it	ne
 23e498a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23e498e:	d01b      	beq.n	23e49c8 <__cmpdf2+0x54>
 23e4990:	b001      	add	sp, #4
 23e4992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23e4996:	bf0c      	ite	eq
 23e4998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23e499c:	ea91 0f03 	teqne	r1, r3
 23e49a0:	bf02      	ittt	eq
 23e49a2:	ea90 0f02 	teqeq	r0, r2
 23e49a6:	2000      	moveq	r0, #0
 23e49a8:	4770      	bxeq	lr
 23e49aa:	f110 0f00 	cmn.w	r0, #0
 23e49ae:	ea91 0f03 	teq	r1, r3
 23e49b2:	bf58      	it	pl
 23e49b4:	4299      	cmppl	r1, r3
 23e49b6:	bf08      	it	eq
 23e49b8:	4290      	cmpeq	r0, r2
 23e49ba:	bf2c      	ite	cs
 23e49bc:	17d8      	asrcs	r0, r3, #31
 23e49be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23e49c2:	f040 0001 	orr.w	r0, r0, #1
 23e49c6:	4770      	bx	lr
 23e49c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e49cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e49d0:	d102      	bne.n	23e49d8 <__cmpdf2+0x64>
 23e49d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e49d6:	d107      	bne.n	23e49e8 <__cmpdf2+0x74>
 23e49d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e49dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e49e0:	d1d6      	bne.n	23e4990 <__cmpdf2+0x1c>
 23e49e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e49e6:	d0d3      	beq.n	23e4990 <__cmpdf2+0x1c>
 23e49e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 23e49ec:	4770      	bx	lr
 23e49ee:	bf00      	nop

023e49f0 <__aeabi_cdrcmple>:
 23e49f0:	4684      	mov	ip, r0
 23e49f2:	4610      	mov	r0, r2
 23e49f4:	4662      	mov	r2, ip
 23e49f6:	468c      	mov	ip, r1
 23e49f8:	4619      	mov	r1, r3
 23e49fa:	4663      	mov	r3, ip
 23e49fc:	e000      	b.n	23e4a00 <__aeabi_cdcmpeq>
 23e49fe:	bf00      	nop

023e4a00 <__aeabi_cdcmpeq>:
 23e4a00:	b501      	push	{r0, lr}
 23e4a02:	f7ff ffb7 	bl	23e4974 <__cmpdf2>
 23e4a06:	2800      	cmp	r0, #0
 23e4a08:	bf48      	it	mi
 23e4a0a:	f110 0f00 	cmnmi.w	r0, #0
 23e4a0e:	bd01      	pop	{r0, pc}

023e4a10 <__aeabi_dcmpeq>:
 23e4a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e4a14:	f7ff fff4 	bl	23e4a00 <__aeabi_cdcmpeq>
 23e4a18:	bf0c      	ite	eq
 23e4a1a:	2001      	moveq	r0, #1
 23e4a1c:	2000      	movne	r0, #0
 23e4a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e4a22:	bf00      	nop

023e4a24 <__aeabi_dcmplt>:
 23e4a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e4a28:	f7ff ffea 	bl	23e4a00 <__aeabi_cdcmpeq>
 23e4a2c:	bf34      	ite	cc
 23e4a2e:	2001      	movcc	r0, #1
 23e4a30:	2000      	movcs	r0, #0
 23e4a32:	f85d fb08 	ldr.w	pc, [sp], #8
 23e4a36:	bf00      	nop

023e4a38 <__aeabi_dcmple>:
 23e4a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e4a3c:	f7ff ffe0 	bl	23e4a00 <__aeabi_cdcmpeq>
 23e4a40:	bf94      	ite	ls
 23e4a42:	2001      	movls	r0, #1
 23e4a44:	2000      	movhi	r0, #0
 23e4a46:	f85d fb08 	ldr.w	pc, [sp], #8
 23e4a4a:	bf00      	nop

023e4a4c <__aeabi_dcmpge>:
 23e4a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e4a50:	f7ff ffce 	bl	23e49f0 <__aeabi_cdrcmple>
 23e4a54:	bf94      	ite	ls
 23e4a56:	2001      	movls	r0, #1
 23e4a58:	2000      	movhi	r0, #0
 23e4a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 23e4a5e:	bf00      	nop

023e4a60 <__aeabi_dcmpgt>:
 23e4a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e4a64:	f7ff ffc4 	bl	23e49f0 <__aeabi_cdrcmple>
 23e4a68:	bf34      	ite	cc
 23e4a6a:	2001      	movcc	r0, #1
 23e4a6c:	2000      	movcs	r0, #0
 23e4a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e4a72:	bf00      	nop

023e4a74 <__aeabi_dcmpun>:
 23e4a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e4a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e4a7c:	d102      	bne.n	23e4a84 <__aeabi_dcmpun+0x10>
 23e4a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e4a82:	d10a      	bne.n	23e4a9a <__aeabi_dcmpun+0x26>
 23e4a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e4a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e4a8c:	d102      	bne.n	23e4a94 <__aeabi_dcmpun+0x20>
 23e4a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e4a92:	d102      	bne.n	23e4a9a <__aeabi_dcmpun+0x26>
 23e4a94:	f04f 0000 	mov.w	r0, #0
 23e4a98:	4770      	bx	lr
 23e4a9a:	f04f 0001 	mov.w	r0, #1
 23e4a9e:	4770      	bx	lr

023e4aa0 <__aeabi_d2iz>:
 23e4aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e4aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e4aa8:	d215      	bcs.n	23e4ad6 <__aeabi_d2iz+0x36>
 23e4aaa:	d511      	bpl.n	23e4ad0 <__aeabi_d2iz+0x30>
 23e4aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e4ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e4ab4:	d912      	bls.n	23e4adc <__aeabi_d2iz+0x3c>
 23e4ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e4aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e4abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e4ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e4ac6:	fa23 f002 	lsr.w	r0, r3, r2
 23e4aca:	bf18      	it	ne
 23e4acc:	4240      	negne	r0, r0
 23e4ace:	4770      	bx	lr
 23e4ad0:	f04f 0000 	mov.w	r0, #0
 23e4ad4:	4770      	bx	lr
 23e4ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e4ada:	d105      	bne.n	23e4ae8 <__aeabi_d2iz+0x48>
 23e4adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23e4ae0:	bf08      	it	eq
 23e4ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23e4ae6:	4770      	bx	lr
 23e4ae8:	f04f 0000 	mov.w	r0, #0
 23e4aec:	4770      	bx	lr
 23e4aee:	bf00      	nop

023e4af0 <__aeabi_d2uiz>:
 23e4af0:	004a      	lsls	r2, r1, #1
 23e4af2:	d211      	bcs.n	23e4b18 <__aeabi_d2uiz+0x28>
 23e4af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e4af8:	d211      	bcs.n	23e4b1e <__aeabi_d2uiz+0x2e>
 23e4afa:	d50d      	bpl.n	23e4b18 <__aeabi_d2uiz+0x28>
 23e4afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e4b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e4b04:	d40e      	bmi.n	23e4b24 <__aeabi_d2uiz+0x34>
 23e4b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e4b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e4b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e4b12:	fa23 f002 	lsr.w	r0, r3, r2
 23e4b16:	4770      	bx	lr
 23e4b18:	f04f 0000 	mov.w	r0, #0
 23e4b1c:	4770      	bx	lr
 23e4b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e4b22:	d102      	bne.n	23e4b2a <__aeabi_d2uiz+0x3a>
 23e4b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e4b28:	4770      	bx	lr
 23e4b2a:	f04f 0000 	mov.w	r0, #0
 23e4b2e:	4770      	bx	lr

023e4b30 <__aeabi_d2f>:
 23e4b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e4b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23e4b38:	bf24      	itt	cs
 23e4b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23e4b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23e4b42:	d90d      	bls.n	23e4b60 <__aeabi_d2f+0x30>
 23e4b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23e4b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23e4b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23e4b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23e4b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23e4b58:	bf08      	it	eq
 23e4b5a:	f020 0001 	biceq.w	r0, r0, #1
 23e4b5e:	4770      	bx	lr
 23e4b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23e4b64:	d121      	bne.n	23e4baa <__aeabi_d2f+0x7a>
 23e4b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23e4b6a:	bfbc      	itt	lt
 23e4b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23e4b70:	4770      	bxlt	lr
 23e4b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e4b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23e4b7a:	f1c2 0218 	rsb	r2, r2, #24
 23e4b7e:	f1c2 0c20 	rsb	ip, r2, #32
 23e4b82:	fa10 f30c 	lsls.w	r3, r0, ip
 23e4b86:	fa20 f002 	lsr.w	r0, r0, r2
 23e4b8a:	bf18      	it	ne
 23e4b8c:	f040 0001 	orrne.w	r0, r0, #1
 23e4b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e4b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23e4b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 23e4b9c:	ea40 000c 	orr.w	r0, r0, ip
 23e4ba0:	fa23 f302 	lsr.w	r3, r3, r2
 23e4ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23e4ba8:	e7cc      	b.n	23e4b44 <__aeabi_d2f+0x14>
 23e4baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23e4bae:	d107      	bne.n	23e4bc0 <__aeabi_d2f+0x90>
 23e4bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23e4bb4:	bf1e      	ittt	ne
 23e4bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23e4bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23e4bbe:	4770      	bxne	lr
 23e4bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23e4bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23e4bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e4bcc:	4770      	bx	lr
 23e4bce:	bf00      	nop

023e4bd0 <__aeabi_frsub>:
 23e4bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 23e4bd4:	e002      	b.n	23e4bdc <__addsf3>
 23e4bd6:	bf00      	nop

023e4bd8 <__aeabi_fsub>:
 23e4bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

023e4bdc <__addsf3>:
 23e4bdc:	0042      	lsls	r2, r0, #1
 23e4bde:	bf1f      	itttt	ne
 23e4be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 23e4be4:	ea92 0f03 	teqne	r2, r3
 23e4be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 23e4bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e4bf0:	d06a      	beq.n	23e4cc8 <__addsf3+0xec>
 23e4bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 23e4bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 23e4bfa:	bfc1      	itttt	gt
 23e4bfc:	18d2      	addgt	r2, r2, r3
 23e4bfe:	4041      	eorgt	r1, r0
 23e4c00:	4048      	eorgt	r0, r1
 23e4c02:	4041      	eorgt	r1, r0
 23e4c04:	bfb8      	it	lt
 23e4c06:	425b      	neglt	r3, r3
 23e4c08:	2b19      	cmp	r3, #25
 23e4c0a:	bf88      	it	hi
 23e4c0c:	4770      	bxhi	lr
 23e4c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 23e4c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e4c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 23e4c1a:	bf18      	it	ne
 23e4c1c:	4240      	negne	r0, r0
 23e4c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e4c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 23e4c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 23e4c2a:	bf18      	it	ne
 23e4c2c:	4249      	negne	r1, r1
 23e4c2e:	ea92 0f03 	teq	r2, r3
 23e4c32:	d03f      	beq.n	23e4cb4 <__addsf3+0xd8>
 23e4c34:	f1a2 0201 	sub.w	r2, r2, #1
 23e4c38:	fa41 fc03 	asr.w	ip, r1, r3
 23e4c3c:	eb10 000c 	adds.w	r0, r0, ip
 23e4c40:	f1c3 0320 	rsb	r3, r3, #32
 23e4c44:	fa01 f103 	lsl.w	r1, r1, r3
 23e4c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e4c4c:	d502      	bpl.n	23e4c54 <__addsf3+0x78>
 23e4c4e:	4249      	negs	r1, r1
 23e4c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 23e4c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23e4c58:	d313      	bcc.n	23e4c82 <__addsf3+0xa6>
 23e4c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 23e4c5e:	d306      	bcc.n	23e4c6e <__addsf3+0x92>
 23e4c60:	0840      	lsrs	r0, r0, #1
 23e4c62:	ea4f 0131 	mov.w	r1, r1, rrx
 23e4c66:	f102 0201 	add.w	r2, r2, #1
 23e4c6a:	2afe      	cmp	r2, #254	; 0xfe
 23e4c6c:	d251      	bcs.n	23e4d12 <__addsf3+0x136>
 23e4c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 23e4c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 23e4c76:	bf08      	it	eq
 23e4c78:	f020 0001 	biceq.w	r0, r0, #1
 23e4c7c:	ea40 0003 	orr.w	r0, r0, r3
 23e4c80:	4770      	bx	lr
 23e4c82:	0049      	lsls	r1, r1, #1
 23e4c84:	eb40 0000 	adc.w	r0, r0, r0
 23e4c88:	3a01      	subs	r2, #1
 23e4c8a:	bf28      	it	cs
 23e4c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 23e4c90:	d2ed      	bcs.n	23e4c6e <__addsf3+0x92>
 23e4c92:	fab0 fc80 	clz	ip, r0
 23e4c96:	f1ac 0c08 	sub.w	ip, ip, #8
 23e4c9a:	ebb2 020c 	subs.w	r2, r2, ip
 23e4c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 23e4ca2:	bfaa      	itet	ge
 23e4ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 23e4ca8:	4252      	neglt	r2, r2
 23e4caa:	4318      	orrge	r0, r3
 23e4cac:	bfbc      	itt	lt
 23e4cae:	40d0      	lsrlt	r0, r2
 23e4cb0:	4318      	orrlt	r0, r3
 23e4cb2:	4770      	bx	lr
 23e4cb4:	f092 0f00 	teq	r2, #0
 23e4cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 23e4cbc:	bf06      	itte	eq
 23e4cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 23e4cc2:	3201      	addeq	r2, #1
 23e4cc4:	3b01      	subne	r3, #1
 23e4cc6:	e7b5      	b.n	23e4c34 <__addsf3+0x58>
 23e4cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 23e4ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 23e4cd0:	bf18      	it	ne
 23e4cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e4cd6:	d021      	beq.n	23e4d1c <__addsf3+0x140>
 23e4cd8:	ea92 0f03 	teq	r2, r3
 23e4cdc:	d004      	beq.n	23e4ce8 <__addsf3+0x10c>
 23e4cde:	f092 0f00 	teq	r2, #0
 23e4ce2:	bf08      	it	eq
 23e4ce4:	4608      	moveq	r0, r1
 23e4ce6:	4770      	bx	lr
 23e4ce8:	ea90 0f01 	teq	r0, r1
 23e4cec:	bf1c      	itt	ne
 23e4cee:	2000      	movne	r0, #0
 23e4cf0:	4770      	bxne	lr
 23e4cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 23e4cf6:	d104      	bne.n	23e4d02 <__addsf3+0x126>
 23e4cf8:	0040      	lsls	r0, r0, #1
 23e4cfa:	bf28      	it	cs
 23e4cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 23e4d00:	4770      	bx	lr
 23e4d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 23e4d06:	bf3c      	itt	cc
 23e4d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 23e4d0c:	4770      	bxcc	lr
 23e4d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e4d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 23e4d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e4d1a:	4770      	bx	lr
 23e4d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 23e4d20:	bf16      	itet	ne
 23e4d22:	4608      	movne	r0, r1
 23e4d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 23e4d28:	4601      	movne	r1, r0
 23e4d2a:	0242      	lsls	r2, r0, #9
 23e4d2c:	bf06      	itte	eq
 23e4d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 23e4d32:	ea90 0f01 	teqeq	r0, r1
 23e4d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 23e4d3a:	4770      	bx	lr

023e4d3c <__aeabi_ui2f>:
 23e4d3c:	f04f 0300 	mov.w	r3, #0
 23e4d40:	e004      	b.n	23e4d4c <__aeabi_i2f+0x8>
 23e4d42:	bf00      	nop

023e4d44 <__aeabi_i2f>:
 23e4d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 23e4d48:	bf48      	it	mi
 23e4d4a:	4240      	negmi	r0, r0
 23e4d4c:	ea5f 0c00 	movs.w	ip, r0
 23e4d50:	bf08      	it	eq
 23e4d52:	4770      	bxeq	lr
 23e4d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 23e4d58:	4601      	mov	r1, r0
 23e4d5a:	f04f 0000 	mov.w	r0, #0
 23e4d5e:	e01c      	b.n	23e4d9a <__aeabi_l2f+0x2a>

023e4d60 <__aeabi_ul2f>:
 23e4d60:	ea50 0201 	orrs.w	r2, r0, r1
 23e4d64:	bf08      	it	eq
 23e4d66:	4770      	bxeq	lr
 23e4d68:	f04f 0300 	mov.w	r3, #0
 23e4d6c:	e00a      	b.n	23e4d84 <__aeabi_l2f+0x14>
 23e4d6e:	bf00      	nop

023e4d70 <__aeabi_l2f>:
 23e4d70:	ea50 0201 	orrs.w	r2, r0, r1
 23e4d74:	bf08      	it	eq
 23e4d76:	4770      	bxeq	lr
 23e4d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 23e4d7c:	d502      	bpl.n	23e4d84 <__aeabi_l2f+0x14>
 23e4d7e:	4240      	negs	r0, r0
 23e4d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e4d84:	ea5f 0c01 	movs.w	ip, r1
 23e4d88:	bf02      	ittt	eq
 23e4d8a:	4684      	moveq	ip, r0
 23e4d8c:	4601      	moveq	r1, r0
 23e4d8e:	2000      	moveq	r0, #0
 23e4d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 23e4d94:	bf08      	it	eq
 23e4d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 23e4d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 23e4d9e:	fabc f28c 	clz	r2, ip
 23e4da2:	3a08      	subs	r2, #8
 23e4da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 23e4da8:	db10      	blt.n	23e4dcc <__aeabi_l2f+0x5c>
 23e4daa:	fa01 fc02 	lsl.w	ip, r1, r2
 23e4dae:	4463      	add	r3, ip
 23e4db0:	fa00 fc02 	lsl.w	ip, r0, r2
 23e4db4:	f1c2 0220 	rsb	r2, r2, #32
 23e4db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e4dbc:	fa20 f202 	lsr.w	r2, r0, r2
 23e4dc0:	eb43 0002 	adc.w	r0, r3, r2
 23e4dc4:	bf08      	it	eq
 23e4dc6:	f020 0001 	biceq.w	r0, r0, #1
 23e4dca:	4770      	bx	lr
 23e4dcc:	f102 0220 	add.w	r2, r2, #32
 23e4dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 23e4dd4:	f1c2 0220 	rsb	r2, r2, #32
 23e4dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 23e4ddc:	fa21 f202 	lsr.w	r2, r1, r2
 23e4de0:	eb43 0002 	adc.w	r0, r3, r2
 23e4de4:	bf08      	it	eq
 23e4de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 23e4dea:	4770      	bx	lr

023e4dec <__aeabi_ldivmod>:
 23e4dec:	b97b      	cbnz	r3, 23e4e0e <__aeabi_ldivmod+0x22>
 23e4dee:	b972      	cbnz	r2, 23e4e0e <__aeabi_ldivmod+0x22>
 23e4df0:	2900      	cmp	r1, #0
 23e4df2:	bfbe      	ittt	lt
 23e4df4:	2000      	movlt	r0, #0
 23e4df6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23e4dfa:	e006      	blt.n	23e4e0a <__aeabi_ldivmod+0x1e>
 23e4dfc:	bf08      	it	eq
 23e4dfe:	2800      	cmpeq	r0, #0
 23e4e00:	bf1c      	itt	ne
 23e4e02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23e4e06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e4e0a:	f000 b9cd 	b.w	23e51a8 <__aeabi_idiv0>
 23e4e0e:	f1ad 0c08 	sub.w	ip, sp, #8
 23e4e12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e4e16:	2900      	cmp	r1, #0
 23e4e18:	db09      	blt.n	23e4e2e <__aeabi_ldivmod+0x42>
 23e4e1a:	2b00      	cmp	r3, #0
 23e4e1c:	db1a      	blt.n	23e4e54 <__aeabi_ldivmod+0x68>
 23e4e1e:	f000 f84d 	bl	23e4ebc <__udivmoddi4>
 23e4e22:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e4e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e4e2a:	b004      	add	sp, #16
 23e4e2c:	4770      	bx	lr
 23e4e2e:	4240      	negs	r0, r0
 23e4e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e4e34:	2b00      	cmp	r3, #0
 23e4e36:	db1b      	blt.n	23e4e70 <__aeabi_ldivmod+0x84>
 23e4e38:	f000 f840 	bl	23e4ebc <__udivmoddi4>
 23e4e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e4e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e4e44:	b004      	add	sp, #16
 23e4e46:	4240      	negs	r0, r0
 23e4e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e4e4c:	4252      	negs	r2, r2
 23e4e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e4e52:	4770      	bx	lr
 23e4e54:	4252      	negs	r2, r2
 23e4e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e4e5a:	f000 f82f 	bl	23e4ebc <__udivmoddi4>
 23e4e5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e4e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e4e66:	b004      	add	sp, #16
 23e4e68:	4240      	negs	r0, r0
 23e4e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e4e6e:	4770      	bx	lr
 23e4e70:	4252      	negs	r2, r2
 23e4e72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e4e76:	f000 f821 	bl	23e4ebc <__udivmoddi4>
 23e4e7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e4e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e4e82:	b004      	add	sp, #16
 23e4e84:	4252      	negs	r2, r2
 23e4e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e4e8a:	4770      	bx	lr

023e4e8c <__aeabi_uldivmod>:
 23e4e8c:	b953      	cbnz	r3, 23e4ea4 <__aeabi_uldivmod+0x18>
 23e4e8e:	b94a      	cbnz	r2, 23e4ea4 <__aeabi_uldivmod+0x18>
 23e4e90:	2900      	cmp	r1, #0
 23e4e92:	bf08      	it	eq
 23e4e94:	2800      	cmpeq	r0, #0
 23e4e96:	bf1c      	itt	ne
 23e4e98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23e4e9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e4ea0:	f000 b982 	b.w	23e51a8 <__aeabi_idiv0>
 23e4ea4:	f1ad 0c08 	sub.w	ip, sp, #8
 23e4ea8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e4eac:	f000 f806 	bl	23e4ebc <__udivmoddi4>
 23e4eb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e4eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e4eb8:	b004      	add	sp, #16
 23e4eba:	4770      	bx	lr

023e4ebc <__udivmoddi4>:
 23e4ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e4ec0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e4ec2:	4604      	mov	r4, r0
 23e4ec4:	460f      	mov	r7, r1
 23e4ec6:	2b00      	cmp	r3, #0
 23e4ec8:	d148      	bne.n	23e4f5c <__udivmoddi4+0xa0>
 23e4eca:	428a      	cmp	r2, r1
 23e4ecc:	4694      	mov	ip, r2
 23e4ece:	d961      	bls.n	23e4f94 <__udivmoddi4+0xd8>
 23e4ed0:	fab2 f382 	clz	r3, r2
 23e4ed4:	b143      	cbz	r3, 23e4ee8 <__udivmoddi4+0x2c>
 23e4ed6:	f1c3 0120 	rsb	r1, r3, #32
 23e4eda:	409f      	lsls	r7, r3
 23e4edc:	fa02 fc03 	lsl.w	ip, r2, r3
 23e4ee0:	409c      	lsls	r4, r3
 23e4ee2:	fa20 f101 	lsr.w	r1, r0, r1
 23e4ee6:	430f      	orrs	r7, r1
 23e4ee8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23e4eec:	fa1f fe8c 	uxth.w	lr, ip
 23e4ef0:	0c22      	lsrs	r2, r4, #16
 23e4ef2:	fbb7 f6f1 	udiv	r6, r7, r1
 23e4ef6:	fb01 7716 	mls	r7, r1, r6, r7
 23e4efa:	fb06 f00e 	mul.w	r0, r6, lr
 23e4efe:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23e4f02:	4290      	cmp	r0, r2
 23e4f04:	d908      	bls.n	23e4f18 <__udivmoddi4+0x5c>
 23e4f06:	eb1c 0202 	adds.w	r2, ip, r2
 23e4f0a:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23e4f0e:	d202      	bcs.n	23e4f16 <__udivmoddi4+0x5a>
 23e4f10:	4290      	cmp	r0, r2
 23e4f12:	f200 8137 	bhi.w	23e5184 <__udivmoddi4+0x2c8>
 23e4f16:	463e      	mov	r6, r7
 23e4f18:	1a12      	subs	r2, r2, r0
 23e4f1a:	b2a4      	uxth	r4, r4
 23e4f1c:	fbb2 f0f1 	udiv	r0, r2, r1
 23e4f20:	fb01 2210 	mls	r2, r1, r0, r2
 23e4f24:	fb00 fe0e 	mul.w	lr, r0, lr
 23e4f28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23e4f2c:	45a6      	cmp	lr, r4
 23e4f2e:	d908      	bls.n	23e4f42 <__udivmoddi4+0x86>
 23e4f30:	eb1c 0404 	adds.w	r4, ip, r4
 23e4f34:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23e4f38:	d202      	bcs.n	23e4f40 <__udivmoddi4+0x84>
 23e4f3a:	45a6      	cmp	lr, r4
 23e4f3c:	f200 811c 	bhi.w	23e5178 <__udivmoddi4+0x2bc>
 23e4f40:	4610      	mov	r0, r2
 23e4f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23e4f46:	eba4 040e 	sub.w	r4, r4, lr
 23e4f4a:	2600      	movs	r6, #0
 23e4f4c:	b11d      	cbz	r5, 23e4f56 <__udivmoddi4+0x9a>
 23e4f4e:	40dc      	lsrs	r4, r3
 23e4f50:	2300      	movs	r3, #0
 23e4f52:	e9c5 4300 	strd	r4, r3, [r5]
 23e4f56:	4631      	mov	r1, r6
 23e4f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e4f5c:	428b      	cmp	r3, r1
 23e4f5e:	d909      	bls.n	23e4f74 <__udivmoddi4+0xb8>
 23e4f60:	2d00      	cmp	r5, #0
 23e4f62:	f000 80fd 	beq.w	23e5160 <__udivmoddi4+0x2a4>
 23e4f66:	2600      	movs	r6, #0
 23e4f68:	e9c5 0100 	strd	r0, r1, [r5]
 23e4f6c:	4630      	mov	r0, r6
 23e4f6e:	4631      	mov	r1, r6
 23e4f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e4f74:	fab3 f683 	clz	r6, r3
 23e4f78:	2e00      	cmp	r6, #0
 23e4f7a:	d14b      	bne.n	23e5014 <__udivmoddi4+0x158>
 23e4f7c:	428b      	cmp	r3, r1
 23e4f7e:	f0c0 80f2 	bcc.w	23e5166 <__udivmoddi4+0x2aa>
 23e4f82:	4282      	cmp	r2, r0
 23e4f84:	f240 80ef 	bls.w	23e5166 <__udivmoddi4+0x2aa>
 23e4f88:	4630      	mov	r0, r6
 23e4f8a:	2d00      	cmp	r5, #0
 23e4f8c:	d0e3      	beq.n	23e4f56 <__udivmoddi4+0x9a>
 23e4f8e:	e9c5 4700 	strd	r4, r7, [r5]
 23e4f92:	e7e0      	b.n	23e4f56 <__udivmoddi4+0x9a>
 23e4f94:	b902      	cbnz	r2, 23e4f98 <__udivmoddi4+0xdc>
 23e4f96:	deff      	udf	#255	; 0xff
 23e4f98:	fab2 f382 	clz	r3, r2
 23e4f9c:	2b00      	cmp	r3, #0
 23e4f9e:	f040 809d 	bne.w	23e50dc <__udivmoddi4+0x220>
 23e4fa2:	1a89      	subs	r1, r1, r2
 23e4fa4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23e4fa8:	b297      	uxth	r7, r2
 23e4faa:	2601      	movs	r6, #1
 23e4fac:	0c20      	lsrs	r0, r4, #16
 23e4fae:	fbb1 f2fe 	udiv	r2, r1, lr
 23e4fb2:	fb0e 1112 	mls	r1, lr, r2, r1
 23e4fb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e4fba:	fb07 f002 	mul.w	r0, r7, r2
 23e4fbe:	4288      	cmp	r0, r1
 23e4fc0:	d90f      	bls.n	23e4fe2 <__udivmoddi4+0x126>
 23e4fc2:	eb1c 0101 	adds.w	r1, ip, r1
 23e4fc6:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23e4fca:	bf2c      	ite	cs
 23e4fcc:	f04f 0901 	movcs.w	r9, #1
 23e4fd0:	f04f 0900 	movcc.w	r9, #0
 23e4fd4:	4288      	cmp	r0, r1
 23e4fd6:	d903      	bls.n	23e4fe0 <__udivmoddi4+0x124>
 23e4fd8:	f1b9 0f00 	cmp.w	r9, #0
 23e4fdc:	f000 80cf 	beq.w	23e517e <__udivmoddi4+0x2c2>
 23e4fe0:	4642      	mov	r2, r8
 23e4fe2:	1a09      	subs	r1, r1, r0
 23e4fe4:	b2a4      	uxth	r4, r4
 23e4fe6:	fbb1 f0fe 	udiv	r0, r1, lr
 23e4fea:	fb0e 1110 	mls	r1, lr, r0, r1
 23e4fee:	fb00 f707 	mul.w	r7, r0, r7
 23e4ff2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23e4ff6:	42a7      	cmp	r7, r4
 23e4ff8:	d908      	bls.n	23e500c <__udivmoddi4+0x150>
 23e4ffa:	eb1c 0404 	adds.w	r4, ip, r4
 23e4ffe:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23e5002:	d202      	bcs.n	23e500a <__udivmoddi4+0x14e>
 23e5004:	42a7      	cmp	r7, r4
 23e5006:	f200 80b4 	bhi.w	23e5172 <__udivmoddi4+0x2b6>
 23e500a:	4608      	mov	r0, r1
 23e500c:	1be4      	subs	r4, r4, r7
 23e500e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23e5012:	e79b      	b.n	23e4f4c <__udivmoddi4+0x90>
 23e5014:	f1c6 0720 	rsb	r7, r6, #32
 23e5018:	40b3      	lsls	r3, r6
 23e501a:	fa01 f406 	lsl.w	r4, r1, r6
 23e501e:	fa22 fc07 	lsr.w	ip, r2, r7
 23e5022:	40f9      	lsrs	r1, r7
 23e5024:	40b2      	lsls	r2, r6
 23e5026:	ea4c 0c03 	orr.w	ip, ip, r3
 23e502a:	fa20 f307 	lsr.w	r3, r0, r7
 23e502e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23e5032:	431c      	orrs	r4, r3
 23e5034:	fa1f fe8c 	uxth.w	lr, ip
 23e5038:	fa00 f306 	lsl.w	r3, r0, r6
 23e503c:	0c20      	lsrs	r0, r4, #16
 23e503e:	fbb1 f8f9 	udiv	r8, r1, r9
 23e5042:	fb09 1118 	mls	r1, r9, r8, r1
 23e5046:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e504a:	fb08 f00e 	mul.w	r0, r8, lr
 23e504e:	4288      	cmp	r0, r1
 23e5050:	d90f      	bls.n	23e5072 <__udivmoddi4+0x1b6>
 23e5052:	eb1c 0101 	adds.w	r1, ip, r1
 23e5056:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23e505a:	bf2c      	ite	cs
 23e505c:	f04f 0b01 	movcs.w	fp, #1
 23e5060:	f04f 0b00 	movcc.w	fp, #0
 23e5064:	4288      	cmp	r0, r1
 23e5066:	d903      	bls.n	23e5070 <__udivmoddi4+0x1b4>
 23e5068:	f1bb 0f00 	cmp.w	fp, #0
 23e506c:	f000 808d 	beq.w	23e518a <__udivmoddi4+0x2ce>
 23e5070:	46d0      	mov	r8, sl
 23e5072:	1a09      	subs	r1, r1, r0
 23e5074:	b2a4      	uxth	r4, r4
 23e5076:	fbb1 f0f9 	udiv	r0, r1, r9
 23e507a:	fb09 1110 	mls	r1, r9, r0, r1
 23e507e:	fb00 fe0e 	mul.w	lr, r0, lr
 23e5082:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23e5086:	458e      	cmp	lr, r1
 23e5088:	d907      	bls.n	23e509a <__udivmoddi4+0x1de>
 23e508a:	eb1c 0101 	adds.w	r1, ip, r1
 23e508e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23e5092:	d201      	bcs.n	23e5098 <__udivmoddi4+0x1dc>
 23e5094:	458e      	cmp	lr, r1
 23e5096:	d87f      	bhi.n	23e5198 <__udivmoddi4+0x2dc>
 23e5098:	4620      	mov	r0, r4
 23e509a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23e509e:	eba1 010e 	sub.w	r1, r1, lr
 23e50a2:	fba0 9802 	umull	r9, r8, r0, r2
 23e50a6:	4541      	cmp	r1, r8
 23e50a8:	464c      	mov	r4, r9
 23e50aa:	46c6      	mov	lr, r8
 23e50ac:	d302      	bcc.n	23e50b4 <__udivmoddi4+0x1f8>
 23e50ae:	d106      	bne.n	23e50be <__udivmoddi4+0x202>
 23e50b0:	454b      	cmp	r3, r9
 23e50b2:	d204      	bcs.n	23e50be <__udivmoddi4+0x202>
 23e50b4:	3801      	subs	r0, #1
 23e50b6:	ebb9 0402 	subs.w	r4, r9, r2
 23e50ba:	eb68 0e0c 	sbc.w	lr, r8, ip
 23e50be:	2d00      	cmp	r5, #0
 23e50c0:	d070      	beq.n	23e51a4 <__udivmoddi4+0x2e8>
 23e50c2:	1b1a      	subs	r2, r3, r4
 23e50c4:	eb61 010e 	sbc.w	r1, r1, lr
 23e50c8:	fa22 f306 	lsr.w	r3, r2, r6
 23e50cc:	fa01 f707 	lsl.w	r7, r1, r7
 23e50d0:	40f1      	lsrs	r1, r6
 23e50d2:	2600      	movs	r6, #0
 23e50d4:	431f      	orrs	r7, r3
 23e50d6:	e9c5 7100 	strd	r7, r1, [r5]
 23e50da:	e73c      	b.n	23e4f56 <__udivmoddi4+0x9a>
 23e50dc:	fa02 fc03 	lsl.w	ip, r2, r3
 23e50e0:	f1c3 0020 	rsb	r0, r3, #32
 23e50e4:	fa01 f203 	lsl.w	r2, r1, r3
 23e50e8:	fa21 f600 	lsr.w	r6, r1, r0
 23e50ec:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23e50f0:	fa24 f100 	lsr.w	r1, r4, r0
 23e50f4:	fa1f f78c 	uxth.w	r7, ip
 23e50f8:	409c      	lsls	r4, r3
 23e50fa:	4311      	orrs	r1, r2
 23e50fc:	fbb6 f0fe 	udiv	r0, r6, lr
 23e5100:	0c0a      	lsrs	r2, r1, #16
 23e5102:	fb0e 6610 	mls	r6, lr, r0, r6
 23e5106:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23e510a:	fb00 f607 	mul.w	r6, r0, r7
 23e510e:	4296      	cmp	r6, r2
 23e5110:	d90e      	bls.n	23e5130 <__udivmoddi4+0x274>
 23e5112:	eb1c 0202 	adds.w	r2, ip, r2
 23e5116:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23e511a:	bf2c      	ite	cs
 23e511c:	f04f 0901 	movcs.w	r9, #1
 23e5120:	f04f 0900 	movcc.w	r9, #0
 23e5124:	4296      	cmp	r6, r2
 23e5126:	d902      	bls.n	23e512e <__udivmoddi4+0x272>
 23e5128:	f1b9 0f00 	cmp.w	r9, #0
 23e512c:	d031      	beq.n	23e5192 <__udivmoddi4+0x2d6>
 23e512e:	4640      	mov	r0, r8
 23e5130:	1b92      	subs	r2, r2, r6
 23e5132:	b289      	uxth	r1, r1
 23e5134:	fbb2 f6fe 	udiv	r6, r2, lr
 23e5138:	fb0e 2216 	mls	r2, lr, r6, r2
 23e513c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23e5140:	fb06 f207 	mul.w	r2, r6, r7
 23e5144:	428a      	cmp	r2, r1
 23e5146:	d907      	bls.n	23e5158 <__udivmoddi4+0x29c>
 23e5148:	eb1c 0101 	adds.w	r1, ip, r1
 23e514c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23e5150:	d201      	bcs.n	23e5156 <__udivmoddi4+0x29a>
 23e5152:	428a      	cmp	r2, r1
 23e5154:	d823      	bhi.n	23e519e <__udivmoddi4+0x2e2>
 23e5156:	4646      	mov	r6, r8
 23e5158:	1a89      	subs	r1, r1, r2
 23e515a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23e515e:	e725      	b.n	23e4fac <__udivmoddi4+0xf0>
 23e5160:	462e      	mov	r6, r5
 23e5162:	4628      	mov	r0, r5
 23e5164:	e6f7      	b.n	23e4f56 <__udivmoddi4+0x9a>
 23e5166:	1a84      	subs	r4, r0, r2
 23e5168:	eb61 0303 	sbc.w	r3, r1, r3
 23e516c:	2001      	movs	r0, #1
 23e516e:	461f      	mov	r7, r3
 23e5170:	e70b      	b.n	23e4f8a <__udivmoddi4+0xce>
 23e5172:	4464      	add	r4, ip
 23e5174:	3802      	subs	r0, #2
 23e5176:	e749      	b.n	23e500c <__udivmoddi4+0x150>
 23e5178:	4464      	add	r4, ip
 23e517a:	3802      	subs	r0, #2
 23e517c:	e6e1      	b.n	23e4f42 <__udivmoddi4+0x86>
 23e517e:	3a02      	subs	r2, #2
 23e5180:	4461      	add	r1, ip
 23e5182:	e72e      	b.n	23e4fe2 <__udivmoddi4+0x126>
 23e5184:	3e02      	subs	r6, #2
 23e5186:	4462      	add	r2, ip
 23e5188:	e6c6      	b.n	23e4f18 <__udivmoddi4+0x5c>
 23e518a:	f1a8 0802 	sub.w	r8, r8, #2
 23e518e:	4461      	add	r1, ip
 23e5190:	e76f      	b.n	23e5072 <__udivmoddi4+0x1b6>
 23e5192:	3802      	subs	r0, #2
 23e5194:	4462      	add	r2, ip
 23e5196:	e7cb      	b.n	23e5130 <__udivmoddi4+0x274>
 23e5198:	3802      	subs	r0, #2
 23e519a:	4461      	add	r1, ip
 23e519c:	e77d      	b.n	23e509a <__udivmoddi4+0x1de>
 23e519e:	3e02      	subs	r6, #2
 23e51a0:	4461      	add	r1, ip
 23e51a2:	e7d9      	b.n	23e5158 <__udivmoddi4+0x29c>
 23e51a4:	462e      	mov	r6, r5
 23e51a6:	e6d6      	b.n	23e4f56 <__udivmoddi4+0x9a>

023e51a8 <__aeabi_idiv0>:
 23e51a8:	4770      	bx	lr
 23e51aa:	bf00      	nop

023e51ac <strcmp>:
 23e51ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 23e51b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 23e51b4:	2a01      	cmp	r2, #1
 23e51b6:	bf28      	it	cs
 23e51b8:	429a      	cmpcs	r2, r3
 23e51ba:	d0f7      	beq.n	23e51ac <strcmp>
 23e51bc:	1ad0      	subs	r0, r2, r3
 23e51be:	4770      	bx	lr

023e51c0 <strlen>:
 23e51c0:	4603      	mov	r3, r0
 23e51c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 23e51c6:	2a00      	cmp	r2, #0
 23e51c8:	d1fb      	bne.n	23e51c2 <strlen+0x2>
 23e51ca:	1a18      	subs	r0, r3, r0
 23e51cc:	3801      	subs	r0, #1
 23e51ce:	4770      	bx	lr

023e51d0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23e51d0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23e51d2:	f014 fd6d 	bl	23f9cb0 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e51d6:	2500      	movs	r5, #0
 23e51d8:	4e05      	ldr	r6, [pc, #20]	; (23e51f0 <module_user_init+0x20>)
 23e51da:	4c06      	ldr	r4, [pc, #24]	; (23e51f4 <module_user_init+0x24>)
 23e51dc:	1ba4      	subs	r4, r4, r6
 23e51de:	08a4      	lsrs	r4, r4, #2
 23e51e0:	42ac      	cmp	r4, r5
 23e51e2:	d100      	bne.n	23e51e6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23e51e4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23e51e6:	f856 3b04 	ldr.w	r3, [r6], #4
 23e51ea:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e51ec:	3501      	adds	r5, #1
 23e51ee:	e7f7      	b.n	23e51e0 <module_user_init+0x10>
 23e51f0:	023fffbc 	.word	0x023fffbc
 23e51f4:	023ffff4 	.word	0x023ffff4

023e51f8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23e51f8:	f008 bd10 	b.w	23edc1c <setup>

023e51fc <module_user_loop>:
}

void module_user_loop() {
 23e51fc:	b508      	push	{r3, lr}
    loop();
 23e51fe:	f008 feef 	bl	23edfe0 <loop>
    _post_loop();
}
 23e5202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23e5206:	f014 bd0b 	b.w	23f9c20 <_post_loop>

023e520a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23e520a:	f012 bc31 	b.w	23f7a70 <malloc>

023e520e <_Znaj>:
 23e520e:	f012 bc2f 	b.w	23f7a70 <malloc>

023e5212 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23e5212:	f012 bc3b 	b.w	23f7a8c <free>
	...

023e5218 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e5218:	4674      	mov	r4, lr
void __cxa_pure_virtual() {
 23e521a:	b500      	push	{lr}
 23e521c:	b08d      	sub	sp, #52	; 0x34
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e521e:	222c      	movs	r2, #44	; 0x2c
 23e5220:	2100      	movs	r1, #0
 23e5222:	a801      	add	r0, sp, #4
 23e5224:	f017 fc3f 	bl	23fcaa6 <memset>
 23e5228:	4b05      	ldr	r3, [pc, #20]	; (23e5240 <__cxa_pure_virtual+0x28>)
 23e522a:	9404      	str	r4, [sp, #16]
 23e522c:	9301      	str	r3, [sp, #4]
 23e522e:	4b05      	ldr	r3, [pc, #20]	; (23e5244 <__cxa_pure_virtual+0x2c>)
 23e5230:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23e5232:	467b      	mov	r3, pc
 23e5234:	2100      	movs	r1, #0
 23e5236:	a801      	add	r0, sp, #4
 23e5238:	9303      	str	r3, [sp, #12]
 23e523a:	f012 f9db 	bl	23f75f4 <panic_ext>
  while (1);
 23e523e:	e7fe      	b.n	23e523e <__cxa_pure_virtual+0x26>
 23e5240:	000c002c 	.word	0x000c002c
 23e5244:	023fcf80 	.word	0x023fcf80

023e5248 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
 23e5248:	4770      	bx	lr

023e524a <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 23e524a:	b158      	cbz	r0, 23e5264 <null_ptr_check+0x1a>
 23e524c:	68c3      	ldr	r3, [r0, #12]
 23e524e:	b14b      	cbz	r3, 23e5264 <null_ptr_check+0x1a>
 23e5250:	6903      	ldr	r3, [r0, #16]
 23e5252:	b13b      	cbz	r3, 23e5264 <null_ptr_check+0x1a>
 23e5254:	6943      	ldr	r3, [r0, #20]
 23e5256:	b12b      	cbz	r3, 23e5264 <null_ptr_check+0x1a>
 23e5258:	6840      	ldr	r0, [r0, #4]
 23e525a:	fab0 f080 	clz	r0, r0
 23e525e:	0940      	lsrs	r0, r0, #5
 23e5260:	4240      	negs	r0, r0
 23e5262:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 23e5264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
 23e5268:	4770      	bx	lr

023e526a <compensate_data>:
{
 23e526a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e526e:	4682      	mov	sl, r0
 23e5270:	ed2d 8b06 	vpush	{d8-d10}
 23e5274:	4688      	mov	r8, r1
 23e5276:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 23e5278:	4615      	mov	r5, r2
 23e527a:	2a00      	cmp	r2, #0
 23e527c:	f000 80dd 	beq.w	23e543a <compensate_data+0x1d0>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 23e5280:	f010 0f03 	tst.w	r0, #3
 23e5284:	d022      	beq.n	23e52cc <compensate_data+0x62>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e5286:	6848      	ldr	r0, [r1, #4]
 23e5288:	f7ff f8e0 	bl	23e444c <__aeabi_ui2d>
 23e528c:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e5290:	f7fe ff9e 	bl	23e41d0 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e5294:	4602      	mov	r2, r0
 23e5296:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e5298:	4606      	mov	r6, r0
 23e529a:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e529c:	f7ff f950 	bl	23e4540 <__aeabi_dmul>
 23e52a0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23e52a4:	f7ff f94c 	bl	23e4540 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e52a8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e52ac:	ec41 0b18 	vmov	d8, r0, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e52b0:	4630      	mov	r0, r6
 23e52b2:	4639      	mov	r1, r7
 23e52b4:	f7ff f944 	bl	23e4540 <__aeabi_dmul>
 23e52b8:	4602      	mov	r2, r0
 23e52ba:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e52bc:	ec51 0b18 	vmov	r0, r1, d8
 23e52c0:	f7fe ff88 	bl	23e41d4 <__adddf3>
 23e52c4:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 23e52c8:	e9c5 0100 	strd	r0, r1, [r5]
        if (sensor_comp & BMP3_PRESS)
 23e52cc:	f01a 0001 	ands.w	r0, sl, #1
 23e52d0:	f000 80af 	beq.w	23e5432 <compensate_data+0x1c8>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e52d4:	e9d4 ab1c 	ldrd	sl, fp, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
 23e52d8:	4659      	mov	r1, fp
 23e52da:	4650      	mov	r0, sl
 23e52dc:	f7ff fc28 	bl	23e4b30 <__aeabi_d2f>
 23e52e0:	ee08 0a10 	vmov	s16, r0
 23e52e4:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e52e8:	ee18 0a90 	vmov	r0, s17
 23e52ec:	f7ff f8d0 	bl	23e4490 <__aeabi_f2d>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e52f0:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e52f4:	ec41 0b19 	vmov	d9, r0, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e52f8:	ee17 0a90 	vmov	r0, s15
 23e52fc:	f7ff f8c8 	bl	23e4490 <__aeabi_f2d>
 23e5300:	ec41 0b1a 	vmov	d10, r0, r1
    partial_out2 = uncomp_data->pressure *
 23e5304:	f8d8 0000 	ldr.w	r0, [r8]
 23e5308:	f7ff f8a0 	bl	23e444c <__aeabi_ui2d>
 23e530c:	4689      	mov	r9, r1
 23e530e:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
 23e5310:	f7ff fc0e 	bl	23e4b30 <__aeabi_d2f>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e5314:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
 23e5318:	ee08 0a10 	vmov	s16, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e531c:	4659      	mov	r1, fp
 23e531e:	4650      	mov	r0, sl
 23e5320:	f7ff f90e 	bl	23e4540 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e5324:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 23e5328:	f7fe ff54 	bl	23e41d4 <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e532c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e5330:	4606      	mov	r6, r0
 23e5332:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e5334:	ec51 0b19 	vmov	r0, r1, d9
 23e5338:	f7ff f902 	bl	23e4540 <__aeabi_dmul>
 23e533c:	4602      	mov	r2, r0
 23e533e:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e5340:	4630      	mov	r0, r6
 23e5342:	4639      	mov	r1, r7
 23e5344:	f7fe ff46 	bl	23e41d4 <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e5348:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e534c:	4606      	mov	r6, r0
 23e534e:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e5350:	ec51 0b1a 	vmov	r0, r1, d10
 23e5354:	f7ff f8f4 	bl	23e4540 <__aeabi_dmul>
 23e5358:	4602      	mov	r2, r0
 23e535a:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e535c:	4630      	mov	r0, r6
 23e535e:	4639      	mov	r1, r7
 23e5360:	f7fe ff38 	bl	23e41d4 <__adddf3>
    partial_out2 = uncomp_data->pressure *
 23e5364:	4642      	mov	r2, r8
 23e5366:	464b      	mov	r3, r9
 23e5368:	f7ff f8ea 	bl	23e4540 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e536c:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
 23e5370:	4606      	mov	r6, r0
 23e5372:	460f      	mov	r7, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e5374:	4650      	mov	r0, sl
 23e5376:	4659      	mov	r1, fp
 23e5378:	f7ff f8e2 	bl	23e4540 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e537c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 23e5380:	f7fe ff28 	bl	23e41d4 <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e5384:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e5388:	4680      	mov	r8, r0
 23e538a:	4689      	mov	r9, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e538c:	ec51 0b19 	vmov	r0, r1, d9
 23e5390:	f7ff f8d6 	bl	23e4540 <__aeabi_dmul>
 23e5394:	4602      	mov	r2, r0
 23e5396:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e5398:	4640      	mov	r0, r8
 23e539a:	4649      	mov	r1, r9
 23e539c:	f7fe ff1a 	bl	23e41d4 <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e53a0:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e53a4:	4680      	mov	r8, r0
 23e53a6:	4689      	mov	r9, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e53a8:	ec51 0b1a 	vmov	r0, r1, d10
 23e53ac:	f7ff f8c8 	bl	23e4540 <__aeabi_dmul>
 23e53b0:	4602      	mov	r2, r0
 23e53b2:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e53b4:	4640      	mov	r0, r8
 23e53b6:	4649      	mov	r1, r9
 23e53b8:	f7fe ff0c 	bl	23e41d4 <__adddf3>
 23e53bc:	4602      	mov	r2, r0
 23e53be:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e53c0:	4630      	mov	r0, r6
 23e53c2:	4639      	mov	r1, r7
 23e53c4:	f7fe ff06 	bl	23e41d4 <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e53c8:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e53cc:	4606      	mov	r6, r0
 23e53ce:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e53d0:	4650      	mov	r0, sl
 23e53d2:	4659      	mov	r1, fp
 23e53d4:	f7ff f8b4 	bl	23e4540 <__aeabi_dmul>
 23e53d8:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 23e53dc:	f7fe fefa 	bl	23e41d4 <__adddf3>
        pow_output = (float) base * pow_output;
 23e53e0:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e53e4:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e53e6:	ee18 0a90 	vmov	r0, s17
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e53ea:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e53ec:	f7ff f850 	bl	23e4490 <__aeabi_f2d>
 23e53f0:	4602      	mov	r2, r0
 23e53f2:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
 23e53f4:	4640      	mov	r0, r8
 23e53f6:	4649      	mov	r1, r9
 23e53f8:	f7ff f8a2 	bl	23e4540 <__aeabi_dmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e53fc:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data3 = partial_data1 * partial_data2;
 23e5400:	4680      	mov	r8, r0
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e5402:	ee17 0a90 	vmov	r0, s15
    partial_data3 = partial_data1 * partial_data2;
 23e5406:	4689      	mov	r9, r1
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e5408:	f7ff f842 	bl	23e4490 <__aeabi_f2d>
 23e540c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 23e5410:	f7ff f896 	bl	23e4540 <__aeabi_dmul>
 23e5414:	4602      	mov	r2, r0
 23e5416:	460b      	mov	r3, r1
 23e5418:	4640      	mov	r0, r8
 23e541a:	4649      	mov	r1, r9
 23e541c:	f7fe feda 	bl	23e41d4 <__adddf3>
 23e5420:	4602      	mov	r2, r0
 23e5422:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e5424:	4630      	mov	r0, r6
 23e5426:	4639      	mov	r1, r7
 23e5428:	f7fe fed4 	bl	23e41d4 <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 23e542c:	e9c5 0102 	strd	r0, r1, [r5, #8]
    int8_t rslt = BMP3_OK;
 23e5430:	2000      	movs	r0, #0
}
 23e5432:	ecbd 8b06 	vpop	{d8-d10}
 23e5436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
 23e543a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e543e:	e7f8      	b.n	23e5432 <compensate_data+0x1c8>

023e5440 <validate_osr_and_odr_settings>:
{
 23e5440:	b510      	push	{r4, lr}
 23e5442:	4604      	mov	r4, r0
 23e5444:	b092      	sub	sp, #72	; 0x48
    uint32_t odr[18] = {
 23e5446:	2248      	movs	r2, #72	; 0x48
 23e5448:	4668      	mov	r0, sp
 23e544a:	4920      	ldr	r1, [pc, #128]	; (23e54cc <validate_osr_and_odr_settings+0x8c>)
 23e544c:	f017 fb1e 	bl	23fca8c <memcpy>
    if (dev->settings.press_en)
 23e5450:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 23e5454:	b173      	cbz	r3, 23e5474 <validate_osr_and_odr_settings+0x34>
    float pow_output = 1;
 23e5456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e545a:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
    while (power != 0)
 23e545e:	bb5b      	cbnz	r3, 23e54b8 <validate_osr_and_odr_settings+0x78>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 23e5460:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23e54d0 <validate_osr_and_odr_settings+0x90>
 23e5464:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23e54d4 <validate_osr_and_odr_settings+0x94>
 23e5468:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e546c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e5470:	ee17 3a90 	vmov	r3, s15
    if (dev->settings.temp_en)
 23e5474:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
 23e5478:	b17a      	cbz	r2, 23e549a <validate_osr_and_odr_settings+0x5a>
    float pow_output = 1;
 23e547a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e547e:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
    while (power != 0)
 23e5482:	b9f2      	cbnz	r2, 23e54c2 <validate_osr_and_odr_settings+0x82>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 23e5484:	eddf 6a12 	vldr	s13, [pc, #72]	; 23e54d0 <validate_osr_and_odr_settings+0x90>
 23e5488:	eddf 7a13 	vldr	s15, [pc, #76]	; 23e54d8 <validate_osr_and_odr_settings+0x98>
 23e548c:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e5490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        meas_t_p += calculate_temp_meas_time(dev);
 23e5494:	ee17 2a90 	vmov	r2, s15
 23e5498:	4413      	add	r3, r2
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 23e549a:	f894 20b6 	ldrb.w	r2, [r4, #182]	; 0xb6
 23e549e:	a912      	add	r1, sp, #72	; 0x48
 23e54a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (meas_t < odr_duration)
 23e54a4:	f852 2c48 	ldr.w	r2, [r2, #-72]
    meas_t += meas_t_p;
 23e54a8:	33ea      	adds	r3, #234	; 0xea
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 23e54aa:	429a      	cmp	r2, r3
}
 23e54ac:	bf94      	ite	ls
 23e54ae:	f06f 0002 	mvnls.w	r0, #2
 23e54b2:	2000      	movhi	r0, #0
 23e54b4:	b012      	add	sp, #72	; 0x48
 23e54b6:	bd10      	pop	{r4, pc}
        power--;
 23e54b8:	3b01      	subs	r3, #1
        pow_output = (float) base * pow_output;
 23e54ba:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e54be:	b2db      	uxtb	r3, r3
 23e54c0:	e7cd      	b.n	23e545e <validate_osr_and_odr_settings+0x1e>
 23e54c2:	3a01      	subs	r2, #1
        pow_output = (float) base * pow_output;
 23e54c4:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e54c8:	b2d2      	uxtb	r2, r2
 23e54ca:	e7da      	b.n	23e5482 <validate_osr_and_odr_settings+0x42>
 23e54cc:	023fcd98 	.word	0x023fcd98
 23e54d0:	44fa0000 	.word	0x44fa0000
 23e54d4:	43c40000 	.word	0x43c40000
 23e54d8:	439c8000 	.word	0x439c8000

023e54dc <bmp3_get_regs>:
{
 23e54dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e54e0:	4606      	mov	r6, r0
 23e54e2:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
 23e54e4:	4618      	mov	r0, r3
{
 23e54e6:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 23e54e8:	f7ff feaf 	bl	23e524a <null_ptr_check>
{
 23e54ec:	4688      	mov	r8, r1
 23e54ee:	4691      	mov	r9, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 23e54f0:	4605      	mov	r5, r0
 23e54f2:	bb88      	cbnz	r0, 23e5558 <bmp3_get_regs+0x7c>
 23e54f4:	b381      	cbz	r1, 23e5558 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
 23e54f6:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
 23e54f8:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
 23e54fc:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
 23e54fe:	1dc3      	adds	r3, r0, #7
 23e5500:	f023 0307 	bic.w	r3, r3, #7
    {
 23e5504:	46ea      	mov	sl, sp
        uint8_t temp_buff[len + dev->dummy_byte];
 23e5506:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e550a:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
 23e550c:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e5510:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
 23e5512:	46eb      	mov	fp, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e5514:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
 23e5516:	d01a      	beq.n	23e554e <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e5518:	4602      	mov	r2, r0
 23e551a:	4669      	mov	r1, sp
 23e551c:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 23e5520:	4676      	mov	r6, lr
 23e5522:	47b0      	blx	r6
 23e5524:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
 23e5526:	454d      	cmp	r5, r9
 23e5528:	d109      	bne.n	23e553e <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 23e552a:	f994 0009 	ldrsb.w	r0, [r4, #9]
 23e552e:	46d5      	mov	sp, sl
            rslt = BMP3_E_COMM_FAIL;
 23e5530:	2800      	cmp	r0, #0
 23e5532:	bf18      	it	ne
 23e5534:	f06f 0006 	mvnne.w	r0, #6
}
 23e5538:	46bd      	mov	sp, r7
 23e553a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 23e553e:	7aa3      	ldrb	r3, [r4, #10]
 23e5540:	eb0b 0205 	add.w	r2, fp, r5
 23e5544:	5cd3      	ldrb	r3, [r2, r3]
 23e5546:	f808 3005 	strb.w	r3, [r8, r5]
            for (idx = 0; idx < len; idx++)
 23e554a:	3501      	adds	r5, #1
 23e554c:	e7eb      	b.n	23e5526 <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 23e554e:	4630      	mov	r0, r6
 23e5550:	4675      	mov	r5, lr
 23e5552:	47a8      	blx	r5
 23e5554:	7260      	strb	r0, [r4, #9]
 23e5556:	e7e8      	b.n	23e552a <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
 23e5558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e555c:	e7ec      	b.n	23e5538 <bmp3_get_regs+0x5c>

023e555e <bmp3_set_regs>:
{
 23e555e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e5562:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
 23e5564:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23e5568:	f108 0307 	add.w	r3, r8, #7
 23e556c:	f023 0307 	bic.w	r3, r3, #7
{
 23e5570:	af00      	add	r7, sp, #0
 23e5572:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
 23e5574:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
 23e5578:	4620      	mov	r0, r4
{
 23e557a:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
 23e557c:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
 23e557e:	f7ff fe64 	bl	23e524a <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 23e5582:	bb70      	cbnz	r0, 23e55e2 <bmp3_set_regs+0x84>
 23e5584:	b36e      	cbz	r6, 23e55e2 <bmp3_set_regs+0x84>
 23e5586:	b365      	cbz	r5, 23e55e2 <bmp3_set_regs+0x84>
        if (len != 0)
 23e5588:	b372      	cbz	r2, 23e55e8 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
 23e558a:	782b      	ldrb	r3, [r5, #0]
 23e558c:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
 23e5590:	7a23      	ldrb	r3, [r4, #8]
 23e5592:	b303      	cbz	r3, 23e55d6 <bmp3_set_regs+0x78>
            if (len > 1)
 23e5594:	2a01      	cmp	r2, #1
 23e5596:	d00c      	beq.n	23e55b2 <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
 23e5598:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 23e559a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 23e559e:	5cf0      	ldrb	r0, [r6, r3]
 23e55a0:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
 23e55a4:	5ce8      	ldrb	r0, [r5, r3]
 23e55a6:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
 23e55aa:	3301      	adds	r3, #1
 23e55ac:	429a      	cmp	r2, r3
 23e55ae:	d8f6      	bhi.n	23e559e <bmp3_set_regs+0x40>
                temp_len = len * 2;
 23e55b0:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e55b2:	6925      	ldr	r5, [r4, #16]
 23e55b4:	6863      	ldr	r3, [r4, #4]
 23e55b6:	7830      	ldrb	r0, [r6, #0]
 23e55b8:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
 23e55ba:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e55bc:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
 23e55be:	bf18      	it	ne
 23e55c0:	f06f 0006 	mvnne.w	r0, #6
}
 23e55c4:	46bd      	mov	sp, r7
 23e55c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 23e55ca:	f816 c000 	ldrb.w	ip, [r6, r0]
 23e55ce:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 23e55d2:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 23e55d6:	b2d8      	uxtb	r0, r3
 23e55d8:	4282      	cmp	r2, r0
 23e55da:	f103 0301 	add.w	r3, r3, #1
 23e55de:	d8f4      	bhi.n	23e55ca <bmp3_set_regs+0x6c>
 23e55e0:	e7d8      	b.n	23e5594 <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
 23e55e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e55e6:	e7ed      	b.n	23e55c4 <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
 23e55e8:	f06f 0005 	mvn.w	r0, #5
 23e55ec:	e7ea      	b.n	23e55c4 <bmp3_set_regs+0x66>

023e55ee <write_power_mode>:
{
 23e55ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23e55f0:	4603      	mov	r3, r0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e55f2:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e55f4:	2201      	movs	r2, #1
 23e55f6:	f10d 010f 	add.w	r1, sp, #15
    uint8_t op_mode = dev->settings.op_mode;
 23e55fa:	f893 40b0 	ldrb.w	r4, [r3, #176]	; 0xb0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e55fe:	9301      	str	r3, [sp, #4]
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e5600:	f88d 000e 	strb.w	r0, [sp, #14]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e5604:	f7ff ff6a 	bl	23e54dc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e5608:	9b01      	ldr	r3, [sp, #4]
 23e560a:	b980      	cbnz	r0, 23e562e <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 23e560c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23e5610:	0124      	lsls	r4, r4, #4
 23e5612:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 23e5616:	f004 0430 	and.w	r4, r4, #48	; 0x30
 23e561a:	4322      	orrs	r2, r4
 23e561c:	f88d 200f 	strb.w	r2, [sp, #15]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e5620:	f10d 010f 	add.w	r1, sp, #15
 23e5624:	2201      	movs	r2, #1
 23e5626:	f10d 000e 	add.w	r0, sp, #14
 23e562a:	f7ff ff98 	bl	23e555e <bmp3_set_regs>
}
 23e562e:	b004      	add	sp, #16
 23e5630:	bd10      	pop	{r4, pc}
	...

023e5634 <bmp3_set_sensor_settings>:
{
 23e5634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23e5636:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e5638:	4608      	mov	r0, r1
{
 23e563a:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
 23e563c:	f7ff fe05 	bl	23e524a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e5640:	2800      	cmp	r0, #0
 23e5642:	f040 811e 	bne.w	23e5882 <bmp3_set_sensor_settings+0x24e>
    if (sub_settings & desired_settings)
 23e5646:	f014 0f06 	tst.w	r4, #6
 23e564a:	d029      	beq.n	23e56a0 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e564c:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e564e:	460b      	mov	r3, r1
 23e5650:	2201      	movs	r2, #1
 23e5652:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e5654:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e5658:	f7ff ff40 	bl	23e54dc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e565c:	bb00      	cbnz	r0, 23e56a0 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
 23e565e:	07a7      	lsls	r7, r4, #30
 23e5660:	d50a      	bpl.n	23e5678 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 23e5662:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e5666:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
 23e566a:	f023 0301 	bic.w	r3, r3, #1
 23e566e:	f002 0201 	and.w	r2, r2, #1
 23e5672:	4313      	orrs	r3, r2
 23e5674:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
 23e5678:	0766      	lsls	r6, r4, #29
 23e567a:	d50b      	bpl.n	23e5694 <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 23e567c:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
 23e5680:	f89d 2004 	ldrb.w	r2, [sp, #4]
 23e5684:	005b      	lsls	r3, r3, #1
 23e5686:	f003 0302 	and.w	r3, r3, #2
 23e568a:	f022 0202 	bic.w	r2, r2, #2
 23e568e:	4313      	orrs	r3, r2
 23e5690:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e5694:	462b      	mov	r3, r5
 23e5696:	2201      	movs	r2, #1
 23e5698:	4668      	mov	r0, sp
 23e569a:	a901      	add	r1, sp, #4
 23e569c:	f7ff ff5f 	bl	23e555e <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e56a0:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 23e56a4:	d072      	beq.n	23e578c <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 23e56a6:	2800      	cmp	r0, #0
 23e56a8:	d170      	bne.n	23e578c <bmp3_set_sensor_settings+0x158>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e56aa:	2204      	movs	r2, #4
    uint8_t reg_addr[3] = { 0 };
 23e56ac:	4b77      	ldr	r3, [pc, #476]	; (23e588c <bmp3_set_sensor_settings+0x258>)
 23e56ae:	f88d 0002 	strb.w	r0, [sp, #2]
 23e56b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e56b6:	201c      	movs	r0, #28
    uint8_t reg_addr[3] = { 0 };
 23e56b8:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e56bc:	eb0d 0102 	add.w	r1, sp, r2
 23e56c0:	462b      	mov	r3, r5
 23e56c2:	f7ff ff0b 	bl	23e54dc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e56c6:	2800      	cmp	r0, #0
 23e56c8:	d160      	bne.n	23e578c <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
 23e56ca:	f014 0f30 	tst.w	r4, #48	; 0x30
 23e56ce:	f000 80da 	beq.w	23e5886 <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
 23e56d2:	06e0      	lsls	r0, r4, #27
 23e56d4:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 23e56d8:	d50a      	bpl.n	23e56f0 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 23e56da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e56de:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
 23e56e2:	f023 0307 	bic.w	r3, r3, #7
 23e56e6:	f001 0107 	and.w	r1, r1, #7
 23e56ea:	430b      	orrs	r3, r1
 23e56ec:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
 23e56f0:	06a1      	lsls	r1, r4, #26
 23e56f2:	d509      	bpl.n	23e5708 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 23e56f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e56f8:	00d2      	lsls	r2, r2, #3
 23e56fa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 23e56fe:	f002 0238 	and.w	r2, r2, #56	; 0x38
 23e5702:	4313      	orrs	r3, r2
 23e5704:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
 23e5708:	231c      	movs	r3, #28
}
 23e570a:	2601      	movs	r6, #1
        addr[*len] = BMP3_REG_OSR;
 23e570c:	f88d 3000 	strb.w	r3, [sp]
    if (sub_settings & desired_settings)
 23e5710:	0622      	lsls	r2, r4, #24
 23e5712:	d518      	bpl.n	23e5746 <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 23e5714:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 23e5718:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 23e571a:	bf84      	itt	hi
 23e571c:	2311      	movhi	r3, #17
 23e571e:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 23e5722:	ab02      	add	r3, sp, #8
 23e5724:	1999      	adds	r1, r3, r6
 23e5726:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
 23e572a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23e572e:	f002 021f 	and.w	r2, r2, #31
 23e5732:	f023 031f 	bic.w	r3, r3, #31
 23e5736:	4313      	orrs	r3, r2
 23e5738:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_ODR;
 23e573c:	231d      	movs	r3, #29
    (*len)++;
 23e573e:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
 23e5740:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e5744:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
 23e5746:	0663      	lsls	r3, r4, #25
 23e5748:	d512      	bpl.n	23e5770 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 23e574a:	ab02      	add	r3, sp, #8
 23e574c:	1999      	adds	r1, r3, r6
 23e574e:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
 23e5752:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23e5756:	005b      	lsls	r3, r3, #1
 23e5758:	f003 030e 	and.w	r3, r3, #14
 23e575c:	f022 020e 	bic.w	r2, r2, #14
 23e5760:	4313      	orrs	r3, r2
 23e5762:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_CONFIG;
 23e5766:	231f      	movs	r3, #31
    (*len)++;
 23e5768:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
 23e576a:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e576e:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 23e5770:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
 23e5774:	2b03      	cmp	r3, #3
 23e5776:	d103      	bne.n	23e5780 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
 23e5778:	4628      	mov	r0, r5
 23e577a:	f7ff fe61 	bl	23e5440 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
 23e577e:	b928      	cbnz	r0, 23e578c <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 23e5780:	462b      	mov	r3, r5
 23e5782:	4632      	mov	r2, r6
 23e5784:	4668      	mov	r0, sp
 23e5786:	a901      	add	r1, sp, #4
 23e5788:	f7ff fee9 	bl	23e555e <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e578c:	f414 6fe1 	tst.w	r4, #1800	; 0x708
 23e5790:	d048      	beq.n	23e5824 <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 23e5792:	2800      	cmp	r0, #0
 23e5794:	d146      	bne.n	23e5824 <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
 23e5796:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e5798:	462b      	mov	r3, r5
 23e579a:	2201      	movs	r2, #1
 23e579c:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
 23e579e:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e57a2:	f7ff fe9b 	bl	23e54dc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e57a6:	2800      	cmp	r0, #0
 23e57a8:	d13c      	bne.n	23e5824 <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e57aa:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
 23e57ac:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
 23e57b0:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
 23e57b4:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e57b8:	d50a      	bpl.n	23e57d0 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 23e57ba:	f89d 3000 	ldrb.w	r3, [sp]
 23e57be:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
 23e57c2:	f023 0301 	bic.w	r3, r3, #1
 23e57c6:	f006 0601 	and.w	r6, r6, #1
 23e57ca:	4333      	orrs	r3, r6
 23e57cc:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
 23e57d0:	05a6      	lsls	r6, r4, #22
 23e57d2:	d509      	bpl.n	23e57e8 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 23e57d4:	f89d 3000 	ldrb.w	r3, [sp]
 23e57d8:	0040      	lsls	r0, r0, #1
 23e57da:	f023 0302 	bic.w	r3, r3, #2
 23e57de:	f000 0002 	and.w	r0, r0, #2
 23e57e2:	4303      	orrs	r3, r0
 23e57e4:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
 23e57e8:	0560      	lsls	r0, r4, #21
 23e57ea:	d509      	bpl.n	23e5800 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 23e57ec:	f89d 3000 	ldrb.w	r3, [sp]
 23e57f0:	0089      	lsls	r1, r1, #2
 23e57f2:	f023 0304 	bic.w	r3, r3, #4
 23e57f6:	f001 0104 	and.w	r1, r1, #4
 23e57fa:	430b      	orrs	r3, r1
 23e57fc:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
 23e5800:	0721      	lsls	r1, r4, #28
 23e5802:	d509      	bpl.n	23e5818 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 23e5804:	f89d 3000 	ldrb.w	r3, [sp]
 23e5808:	0192      	lsls	r2, r2, #6
 23e580a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e580e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 23e5812:	4313      	orrs	r3, r2
 23e5814:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e5818:	462b      	mov	r3, r5
 23e581a:	2201      	movs	r2, #1
 23e581c:	4669      	mov	r1, sp
 23e581e:	a801      	add	r0, sp, #4
 23e5820:	f7ff fe9d 	bl	23e555e <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e5824:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
 23e5828:	d02b      	beq.n	23e5882 <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 23e582a:	bb50      	cbnz	r0, 23e5882 <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
 23e582c:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e582e:	462b      	mov	r3, r5
 23e5830:	2201      	movs	r2, #1
 23e5832:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 23e5834:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
 23e5838:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
 23e583c:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e5840:	f7ff fe4c 	bl	23e54dc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e5844:	b9e8      	cbnz	r0, 23e5882 <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 23e5846:	0522      	lsls	r2, r4, #20
 23e5848:	d509      	bpl.n	23e585e <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 23e584a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e584e:	007f      	lsls	r7, r7, #1
 23e5850:	f023 0302 	bic.w	r3, r3, #2
 23e5854:	f007 0702 	and.w	r7, r7, #2
 23e5858:	433b      	orrs	r3, r7
 23e585a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
 23e585e:	04e3      	lsls	r3, r4, #19
 23e5860:	d509      	bpl.n	23e5876 <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 23e5862:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e5866:	00b6      	lsls	r6, r6, #2
 23e5868:	f023 0304 	bic.w	r3, r3, #4
 23e586c:	f006 0604 	and.w	r6, r6, #4
 23e5870:	4333      	orrs	r3, r6
 23e5872:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e5876:	462b      	mov	r3, r5
 23e5878:	2201      	movs	r2, #1
 23e587a:	4668      	mov	r0, sp
 23e587c:	a901      	add	r1, sp, #4
 23e587e:	f7ff fe6e 	bl	23e555e <bmp3_set_regs>
}
 23e5882:	b003      	add	sp, #12
 23e5884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
 23e5886:	4606      	mov	r6, r0
 23e5888:	e742      	b.n	23e5710 <bmp3_set_sensor_settings+0xdc>
 23e588a:	bf00      	nop
 23e588c:	023fcd98 	.word	0x023fcd98

023e5890 <bmp3_soft_reset>:
    uint8_t reg_addr = BMP3_REG_CMD;
 23e5890:	237e      	movs	r3, #126	; 0x7e
{
 23e5892:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
 23e5894:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e5898:	23b6      	movs	r3, #182	; 0xb6
{
 23e589a:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e589c:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
 23e58a0:	f7ff fcd3 	bl	23e524a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e58a4:	4604      	mov	r4, r0
 23e58a6:	b960      	cbnz	r0, 23e58c2 <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 23e58a8:	462b      	mov	r3, r5
 23e58aa:	2201      	movs	r2, #1
 23e58ac:	2003      	movs	r0, #3
 23e58ae:	f10d 0106 	add.w	r1, sp, #6
 23e58b2:	f7ff fe13 	bl	23e54dc <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e58b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23e58ba:	06db      	lsls	r3, r3, #27
 23e58bc:	d404      	bmi.n	23e58c8 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
 23e58be:	f06f 0403 	mvn.w	r4, #3
}
 23e58c2:	4620      	mov	r0, r4
 23e58c4:	b003      	add	sp, #12
 23e58c6:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e58c8:	2800      	cmp	r0, #0
 23e58ca:	d1f8      	bne.n	23e58be <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 23e58cc:	462b      	mov	r3, r5
 23e58ce:	2201      	movs	r2, #1
 23e58d0:	f10d 0105 	add.w	r1, sp, #5
 23e58d4:	a801      	add	r0, sp, #4
 23e58d6:	f7ff fe42 	bl	23e555e <bmp3_set_regs>
            if (rslt == BMP3_OK)
 23e58da:	4604      	mov	r4, r0
 23e58dc:	2800      	cmp	r0, #0
 23e58de:	d1f0      	bne.n	23e58c2 <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
 23e58e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e58e4:	696b      	ldr	r3, [r5, #20]
 23e58e6:	6869      	ldr	r1, [r5, #4]
 23e58e8:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 23e58ea:	462b      	mov	r3, r5
 23e58ec:	2201      	movs	r2, #1
 23e58ee:	2002      	movs	r0, #2
 23e58f0:	f10d 0107 	add.w	r1, sp, #7
 23e58f4:	f7ff fdf2 	bl	23e54dc <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 23e58f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e58fc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 23e5900:	4318      	orrs	r0, r3
 23e5902:	b2c0      	uxtb	r0, r0
 23e5904:	2800      	cmp	r0, #0
 23e5906:	d0dc      	beq.n	23e58c2 <bmp3_soft_reset+0x32>
 23e5908:	e7d9      	b.n	23e58be <bmp3_soft_reset+0x2e>
	...

023e590c <bmp3_init>:
    uint8_t chip_id = 0;
 23e590c:	2300      	movs	r3, #0
{
 23e590e:	b530      	push	{r4, r5, lr}
 23e5910:	b089      	sub	sp, #36	; 0x24
 23e5912:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 23e5914:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 23e5918:	f7ff fc97 	bl	23e524a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e591c:	4605      	mov	r5, r0
 23e591e:	2800      	cmp	r0, #0
 23e5920:	f040 80d8 	bne.w	23e5ad4 <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
 23e5924:	7a23      	ldrb	r3, [r4, #8]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e5926:	2201      	movs	r2, #1
        if (dev->intf != BMP3_I2C_INTF)
 23e5928:	3b01      	subs	r3, #1
 23e592a:	bf18      	it	ne
 23e592c:	2301      	movne	r3, #1
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e592e:	f10d 0107 	add.w	r1, sp, #7
        if (dev->intf != BMP3_I2C_INTF)
 23e5932:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e5934:	4623      	mov	r3, r4
 23e5936:	f7ff fdd1 	bl	23e54dc <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e593a:	4605      	mov	r5, r0
 23e593c:	2800      	cmp	r0, #0
 23e593e:	f040 80c9 	bne.w	23e5ad4 <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 23e5942:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e5946:	2b50      	cmp	r3, #80	; 0x50
 23e5948:	d002      	beq.n	23e5950 <bmp3_init+0x44>
 23e594a:	2b60      	cmp	r3, #96	; 0x60
 23e594c:	f040 80c5 	bne.w	23e5ada <bmp3_init+0x1ce>
                rslt = bmp3_soft_reset(dev);
 23e5950:	4620      	mov	r0, r4
                dev->chip_id = chip_id;
 23e5952:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
 23e5954:	f7ff ff9c 	bl	23e5890 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
 23e5958:	4605      	mov	r5, r0
 23e595a:	2800      	cmp	r0, #0
 23e595c:	f040 80ba 	bne.w	23e5ad4 <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 23e5960:	4601      	mov	r1, r0
 23e5962:	2211      	movs	r2, #17
 23e5964:	9002      	str	r0, [sp, #8]
 23e5966:	a803      	add	r0, sp, #12
 23e5968:	f017 f89d 	bl	23fcaa6 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 23e596c:	4623      	mov	r3, r4
 23e596e:	2215      	movs	r2, #21
 23e5970:	a902      	add	r1, sp, #8
 23e5972:	2031      	movs	r0, #49	; 0x31
 23e5974:	f7ff fdb2 	bl	23e54dc <bmp3_get_regs>
 23e5978:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 23e597a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 23e597e:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 23e5982:	f7fe fd63 	bl	23e444c <__aeabi_ui2d>
 23e5986:	2200      	movs	r2, #0
 23e5988:	4b55      	ldr	r3, [pc, #340]	; (23e5ae0 <bmp3_init+0x1d4>)
 23e598a:	f7fe fdd9 	bl	23e4540 <__aeabi_dmul>
 23e598e:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 23e5992:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 23e5996:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 23e599a:	f7fe fd57 	bl	23e444c <__aeabi_ui2d>
 23e599e:	2200      	movs	r2, #0
 23e59a0:	4b50      	ldr	r3, [pc, #320]	; (23e5ae4 <bmp3_init+0x1d8>)
 23e59a2:	f7fe fdcd 	bl	23e4540 <__aeabi_dmul>
 23e59a6:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 23e59aa:	f99d 000c 	ldrsb.w	r0, [sp, #12]
 23e59ae:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 23e59b2:	f7fe fd5b 	bl	23e446c <__aeabi_i2d>
 23e59b6:	2200      	movs	r2, #0
 23e59b8:	4b4b      	ldr	r3, [pc, #300]	; (23e5ae8 <bmp3_init+0x1dc>)
 23e59ba:	f7fe fdc1 	bl	23e4540 <__aeabi_dmul>
 23e59be:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 23e59c2:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
 23e59c6:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 23e59ca:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e59ce:	f7fe fd4d 	bl	23e446c <__aeabi_i2d>
 23e59d2:	2200      	movs	r2, #0
 23e59d4:	4b45      	ldr	r3, [pc, #276]	; (23e5aec <bmp3_init+0x1e0>)
 23e59d6:	f7fe fdb3 	bl	23e4540 <__aeabi_dmul>
 23e59da:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 23e59de:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
 23e59e2:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 23e59e6:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e59ea:	f7fe fd3f 	bl	23e446c <__aeabi_i2d>
 23e59ee:	2200      	movs	r2, #0
 23e59f0:	4b3f      	ldr	r3, [pc, #252]	; (23e5af0 <bmp3_init+0x1e4>)
 23e59f2:	f7fe fda5 	bl	23e4540 <__aeabi_dmul>
 23e59f6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 23e59fa:	f99d 0011 	ldrsb.w	r0, [sp, #17]
 23e59fe:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 23e5a02:	f7fe fd33 	bl	23e446c <__aeabi_i2d>
 23e5a06:	2200      	movs	r2, #0
 23e5a08:	4b3a      	ldr	r3, [pc, #232]	; (23e5af4 <bmp3_init+0x1e8>)
 23e5a0a:	f7fe fd99 	bl	23e4540 <__aeabi_dmul>
 23e5a0e:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 23e5a12:	f99d 0012 	ldrsb.w	r0, [sp, #18]
 23e5a16:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 23e5a1a:	f7fe fd27 	bl	23e446c <__aeabi_i2d>
 23e5a1e:	2200      	movs	r2, #0
 23e5a20:	4b35      	ldr	r3, [pc, #212]	; (23e5af8 <bmp3_init+0x1ec>)
 23e5a22:	f7fe fd8d 	bl	23e4540 <__aeabi_dmul>
 23e5a26:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 23e5a2a:	f8bd 0013 	ldrh.w	r0, [sp, #19]
 23e5a2e:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 23e5a32:	f7fe fd0b 	bl	23e444c <__aeabi_ui2d>
 23e5a36:	2200      	movs	r2, #0
 23e5a38:	4b30      	ldr	r3, [pc, #192]	; (23e5afc <bmp3_init+0x1f0>)
 23e5a3a:	f7fe fd81 	bl	23e4540 <__aeabi_dmul>
 23e5a3e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 23e5a42:	f8bd 0015 	ldrh.w	r0, [sp, #21]
 23e5a46:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 23e5a4a:	f7fe fcff 	bl	23e444c <__aeabi_ui2d>
 23e5a4e:	2200      	movs	r2, #0
 23e5a50:	4b2b      	ldr	r3, [pc, #172]	; (23e5b00 <bmp3_init+0x1f4>)
 23e5a52:	f7fe fd75 	bl	23e4540 <__aeabi_dmul>
 23e5a56:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 23e5a5a:	f99d 0017 	ldrsb.w	r0, [sp, #23]
 23e5a5e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 23e5a62:	f7fe fd03 	bl	23e446c <__aeabi_i2d>
 23e5a66:	2200      	movs	r2, #0
 23e5a68:	4b26      	ldr	r3, [pc, #152]	; (23e5b04 <bmp3_init+0x1f8>)
 23e5a6a:	f7fe fd69 	bl	23e4540 <__aeabi_dmul>
 23e5a6e:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 23e5a72:	f99d 0018 	ldrsb.w	r0, [sp, #24]
 23e5a76:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 23e5a7a:	f7fe fcf7 	bl	23e446c <__aeabi_i2d>
 23e5a7e:	2200      	movs	r2, #0
 23e5a80:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 23e5a84:	f7fe fd5c 	bl	23e4540 <__aeabi_dmul>
 23e5a88:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 23e5a8c:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
 23e5a90:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 23e5a94:	f7fe fcea 	bl	23e446c <__aeabi_i2d>
 23e5a98:	2200      	movs	r2, #0
 23e5a9a:	4b13      	ldr	r3, [pc, #76]	; (23e5ae8 <bmp3_init+0x1dc>)
 23e5a9c:	f7fe fd50 	bl	23e4540 <__aeabi_dmul>
 23e5aa0:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 23e5aa4:	f99d 001b 	ldrsb.w	r0, [sp, #27]
 23e5aa8:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 23e5aac:	f7fe fcde 	bl	23e446c <__aeabi_i2d>
 23e5ab0:	2200      	movs	r2, #0
 23e5ab2:	4b0d      	ldr	r3, [pc, #52]	; (23e5ae8 <bmp3_init+0x1dc>)
 23e5ab4:	f7fe fd44 	bl	23e4540 <__aeabi_dmul>
 23e5ab8:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 23e5abc:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 23e5ac0:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 23e5ac4:	f7fe fcd2 	bl	23e446c <__aeabi_i2d>
 23e5ac8:	2200      	movs	r2, #0
 23e5aca:	4b0f      	ldr	r3, [pc, #60]	; (23e5b08 <bmp3_init+0x1fc>)
 23e5acc:	f7fe fd38 	bl	23e4540 <__aeabi_dmul>
 23e5ad0:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
 23e5ad4:	4628      	mov	r0, r5
 23e5ad6:	b009      	add	sp, #36	; 0x24
 23e5ad8:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
 23e5ada:	f06f 0501 	mvn.w	r5, #1
 23e5ade:	e7f9      	b.n	23e5ad4 <bmp3_init+0x1c8>
 23e5ae0:	40700000 	.word	0x40700000
 23e5ae4:	3e100000 	.word	0x3e100000
 23e5ae8:	3cf00000 	.word	0x3cf00000
 23e5aec:	3eb00000 	.word	0x3eb00000
 23e5af0:	3e200000 	.word	0x3e200000
 23e5af4:	3df00000 	.word	0x3df00000
 23e5af8:	3da00000 	.word	0x3da00000
 23e5afc:	40200000 	.word	0x40200000
 23e5b00:	3f900000 	.word	0x3f900000
 23e5b04:	3f700000 	.word	0x3f700000
 23e5b08:	3be00000 	.word	0x3be00000

023e5b0c <bmp3_get_op_mode>:
{
 23e5b0c:	b513      	push	{r0, r1, r4, lr}
 23e5b0e:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e5b10:	4608      	mov	r0, r1
 23e5b12:	9101      	str	r1, [sp, #4]
 23e5b14:	f7ff fb99 	bl	23e524a <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
 23e5b18:	b960      	cbnz	r0, 23e5b34 <bmp3_get_op_mode+0x28>
 23e5b1a:	b15c      	cbz	r4, 23e5b34 <bmp3_get_op_mode+0x28>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 23e5b1c:	460b      	mov	r3, r1
 23e5b1e:	2201      	movs	r2, #1
 23e5b20:	4621      	mov	r1, r4
 23e5b22:	201b      	movs	r0, #27
 23e5b24:	f7ff fcda 	bl	23e54dc <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 23e5b28:	7823      	ldrb	r3, [r4, #0]
 23e5b2a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 23e5b2e:	7023      	strb	r3, [r4, #0]
}
 23e5b30:	b002      	add	sp, #8
 23e5b32:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
 23e5b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e5b38:	e7fa      	b.n	23e5b30 <bmp3_get_op_mode+0x24>

023e5b3a <bmp3_set_op_mode>:
{
 23e5b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e5b3c:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 23e5b3e:	f7ff fb84 	bl	23e524a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e5b42:	4604      	mov	r4, r0
 23e5b44:	2800      	cmp	r0, #0
 23e5b46:	d163      	bne.n	23e5c10 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e5b48:	4629      	mov	r1, r5
 23e5b4a:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
 23e5b4e:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e5b52:	f7ff ffdb 	bl	23e5b0c <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e5b56:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e5b5a:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e5b5c:	b1e3      	cbz	r3, 23e5b98 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e5b5e:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e5b60:	462b      	mov	r3, r5
 23e5b62:	2201      	movs	r2, #1
 23e5b64:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e5b66:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e5b6a:	f7ff fcb7 	bl	23e54dc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e5b6e:	4604      	mov	r4, r0
 23e5b70:	b968      	cbnz	r0, 23e5b8e <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e5b72:	f89d 3004 	ldrb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e5b76:	2201      	movs	r2, #1
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e5b78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 23e5b7c:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e5b80:	a901      	add	r1, sp, #4
 23e5b82:	462b      	mov	r3, r5
 23e5b84:	f10d 0003 	add.w	r0, sp, #3
 23e5b88:	f7ff fce9 	bl	23e555e <bmp3_set_regs>
 23e5b8c:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
 23e5b8e:	f241 3088 	movw	r0, #5000	; 0x1388
 23e5b92:	696b      	ldr	r3, [r5, #20]
 23e5b94:	6869      	ldr	r1, [r5, #4]
 23e5b96:	4798      	blx	r3
        if (rslt == BMP3_OK)
 23e5b98:	bbd4      	cbnz	r4, 23e5c10 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
 23e5b9a:	2e03      	cmp	r6, #3
 23e5b9c:	d13b      	bne.n	23e5c16 <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e5b9e:	2204      	movs	r2, #4
 23e5ba0:	462b      	mov	r3, r5
 23e5ba2:	eb0d 0102 	add.w	r1, sp, r2
 23e5ba6:	201c      	movs	r0, #28
 23e5ba8:	f7ff fc98 	bl	23e54dc <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e5bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (rslt == BMP3_OK)
 23e5bb0:	4604      	mov	r4, r0
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e5bb2:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 23e5bb6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 23e5bba:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e5bbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e5bc2:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e5bc6:	f003 031f 	and.w	r3, r3, #31
 23e5bca:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 23e5bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e5bd2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 23e5bd6:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
 23e5bda:	b9c8      	cbnz	r0, 23e5c10 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
 23e5bdc:	4628      	mov	r0, r5
 23e5bde:	f7ff fc2f 	bl	23e5440 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
 23e5be2:	4604      	mov	r4, r0
 23e5be4:	b9a0      	cbnz	r0, 23e5c10 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
 23e5be6:	4628      	mov	r0, r5
 23e5be8:	f7ff fd01 	bl	23e55ee <write_power_mode>
        if (rslt == BMP3_OK)
 23e5bec:	4604      	mov	r4, r0
 23e5bee:	b978      	cbnz	r0, 23e5c10 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 23e5bf0:	462b      	mov	r3, r5
 23e5bf2:	2201      	movs	r2, #1
 23e5bf4:	2002      	movs	r0, #2
 23e5bf6:	a901      	add	r1, sp, #4
 23e5bf8:	f7ff fc70 	bl	23e54dc <bmp3_get_regs>
            if (rslt == BMP3_OK)
 23e5bfc:	4604      	mov	r4, r0
 23e5bfe:	b938      	cbnz	r0, 23e5c10 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
 23e5c00:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
 23e5c04:	f013 0f04 	tst.w	r3, #4
 23e5c08:	bf0c      	ite	eq
 23e5c0a:	4604      	moveq	r4, r0
 23e5c0c:	f06f 0404 	mvnne.w	r4, #4
}
 23e5c10:	4620      	mov	r0, r4
 23e5c12:	b002      	add	sp, #8
 23e5c14:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
 23e5c16:	2e01      	cmp	r6, #1
 23e5c18:	d1fa      	bne.n	23e5c10 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
 23e5c1a:	4628      	mov	r0, r5
 23e5c1c:	f7ff fce7 	bl	23e55ee <write_power_mode>
 23e5c20:	4604      	mov	r4, r0
    return rslt;
 23e5c22:	e7f5      	b.n	23e5c10 <bmp3_set_op_mode+0xd6>

023e5c24 <bmp3_get_sensor_data>:
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e5c24:	2300      	movs	r3, #0
{
 23e5c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e5c28:	4606      	mov	r6, r0
 23e5c2a:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 23e5c2c:	4610      	mov	r0, r2
{
 23e5c2e:	460d      	mov	r5, r1
 23e5c30:	4617      	mov	r7, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
 23e5c32:	e9cd 3302 	strd	r3, r3, [sp, #8]
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e5c36:	9300      	str	r3, [sp, #0]
 23e5c38:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
 23e5c3c:	f7ff fb05 	bl	23e524a <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
 23e5c40:	bb30      	cbnz	r0, 23e5c90 <bmp3_get_sensor_data+0x6c>
 23e5c42:	b329      	cbz	r1, 23e5c90 <bmp3_get_sensor_data+0x6c>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 23e5c44:	4613      	mov	r3, r2
 23e5c46:	4669      	mov	r1, sp
 23e5c48:	2206      	movs	r2, #6
 23e5c4a:	2004      	movs	r0, #4
 23e5c4c:	f7ff fc46 	bl	23e54dc <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e5c50:	b9e0      	cbnz	r0, 23e5c8c <bmp3_get_sensor_data+0x68>
    data_msb = (uint32_t)reg_data[2] << 16;
 23e5c52:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
 23e5c56:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[2] << 16;
 23e5c5a:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e5c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
 23e5c60:	f89d 2000 	ldrb.w	r2, [sp]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e5c64:	f89d 4005 	ldrb.w	r4, [sp, #5]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e5c68:	4313      	orrs	r3, r2
 23e5c6a:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
 23e5c6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e5c70:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e5c72:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
 23e5c76:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e5c7a:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e5c7c:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e5c7e:	4630      	mov	r0, r6
 23e5c80:	f107 0318 	add.w	r3, r7, #24
 23e5c84:	a902      	add	r1, sp, #8
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e5c86:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e5c88:	f7ff faef 	bl	23e526a <compensate_data>
}
 23e5c8c:	b005      	add	sp, #20
 23e5c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
 23e5c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e5c94:	e7fa      	b.n	23e5c8c <bmp3_get_sensor_data+0x68>
	...

023e5c98 <__tcf_1>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 23e5c98:	4903      	ldr	r1, [pc, #12]	; (23e5ca8 <__tcf_1+0x10>)
 23e5c9a:	688b      	ldr	r3, [r1, #8]
 23e5c9c:	b113      	cbz	r3, 23e5ca4 <__tcf_1+0xc>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23e5c9e:	2203      	movs	r2, #3
 23e5ca0:	4608      	mov	r0, r1
 23e5ca2:	4718      	bx	r3
     * @brief Get the hardware watchdog instance.
     * 
     * @return The hardware watchdog singlton.
     */
    static WatchdogClass& getInstance() {
        static WatchdogClass watchdog;
 23e5ca4:	4770      	bx	lr
 23e5ca6:	bf00      	nop
 23e5ca8:	1006a248 	.word	0x1006a248

023e5cac <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23e5cac:	4770      	bx	lr
	...

023e5cb0 <_Z28anemometer_interrupt_handlerv>:
 * ======================================================================================================================
 */
#define ANEMOMETER_IRQ_PIN  A2
void anemometer_interrupt_handler()
{
  anemometer_interrupt_count++;
 23e5cb0:	4a02      	ldr	r2, [pc, #8]	; (23e5cbc <_Z28anemometer_interrupt_handlerv+0xc>)
 23e5cb2:	6813      	ldr	r3, [r2, #0]
 23e5cb4:	3301      	adds	r3, #1
 23e5cb6:	6013      	str	r3, [r2, #0]
}
 23e5cb8:	4770      	bx	lr
 23e5cba:	bf00      	nop
 23e5cbc:	1006a938 	.word	0x1006a938

023e5cc0 <_ZN6FsFileD1Ev>:
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e5cc0:	4770      	bx	lr

023e5cc2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23e5cc2:	b510      	push	{r4, lr}
 23e5cc4:	4604      	mov	r4, r0
  }
 23e5cc6:	2110      	movs	r1, #16
 23e5cc8:	f7ff faa3 	bl	23e5212 <_ZdlPvj>
 23e5ccc:	4620      	mov	r0, r4
 23e5cce:	bd10      	pop	{r4, pc}

023e5cd0 <_ZN6FsFileD0Ev>:
 23e5cd0:	b510      	push	{r4, lr}
 23e5cd2:	4604      	mov	r4, r0
 23e5cd4:	2150      	movs	r1, #80	; 0x50
 23e5cd6:	f7ff fa9c 	bl	23e5212 <_ZdlPvj>
 23e5cda:	4620      	mov	r0, r4
 23e5cdc:	bd10      	pop	{r4, pc}

023e5cde <_ZN10StreamFileI10FsBaseFileyE5flushEv>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
 23e5cde:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e5ce0:	b113      	cbz	r3, 23e5ce8 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0xa>
 23e5ce2:	4618      	mov	r0, r3
 23e5ce4:	f00d bc06 	b.w	23f34f4 <_ZN7FatFile4syncEv>
 23e5ce8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e5cea:	b108      	cbz	r0, 23e5cf0 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0x12>
 23e5cec:	f00f bb94 	b.w	23f5418 <_ZN9ExFatFile4syncEv>
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() override { return BaseFile::available(); }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() override { BaseFile::sync(); }
 23e5cf0:	4770      	bx	lr
	...

023e5cf4 <_Z13callback_imsiiPKciPc>:
 * 
 * COMMAND: AT+CIMI   Note: Each line returned is a call to this callback function
 * SEE https://docs.particle.io/reference/device-os/api/cellular/command/
 * ======================================================================================================================
 */
int callback_imsi(int type, const char* buf, int len, char* cimi) {
 23e5cf4:	b510      	push	{r4, lr}
 23e5cf6:	4604      	mov	r4, r0
 23e5cf8:	461a      	mov	r2, r3
 23e5cfa:	4608      	mov	r0, r1
  // sprintf (msgbuf, "AT+CIMI:%X [%s]", type, buf); Output (msgbuf);     

  if ((type == TYPE_UNKNOWN) && cimi) {
 23e5cfc:	b934      	cbnz	r4, 23e5d0c <_Z13callback_imsiiPKciPc+0x18>
 23e5cfe:	b113      	cbz	r3, 23e5d06 <_Z13callback_imsiiPKciPc+0x12>
    if (sscanf(buf, "\r\n%[^\r]\r\n", cimi) == 1)
 23e5d00:	4906      	ldr	r1, [pc, #24]	; (23e5d1c <_Z13callback_imsiiPKciPc+0x28>)
 23e5d02:	f011 fefb 	bl	23f7afc <sscanf>
  }

  if (type == TYPE_OK) {
    return (RESP_OK);
  }
  return (WAIT);
 23e5d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e5d0a:	e006      	b.n	23e5d1a <_Z13callback_imsiiPKciPc+0x26>
    return (RESP_OK);
 23e5d0c:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 23e5d10:	bf14      	ite	ne
 23e5d12:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e5d16:	f06f 0001 	mvneq.w	r0, #1
}
 23e5d1a:	bd10      	pop	{r4, pc}
 23e5d1c:	023fd1a9 	.word	0x023fd1a9

023e5d20 <_ZN10StreamFileI10FsBaseFileyE4peekEv>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
 23e5d20:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e5d22:	b113      	cbz	r3, 23e5d2a <_ZN10StreamFileI10FsBaseFileyE4peekEv+0xa>
 23e5d24:	4618      	mov	r0, r3
 23e5d26:	f00d bafc 	b.w	23f3322 <_ZN7FatFile4peekEv>
 23e5d2a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e5d2c:	b108      	cbz	r0, 23e5d32 <_ZN10StreamFileI10FsBaseFileyE4peekEv+0x12>
 23e5d2e:	f00e bfbb 	b.w	23f4ca8 <_ZN9ExFatFile4peekEv>

  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() override { return BaseFile::peek(); }
 23e5d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e5d36:	4770      	bx	lr

023e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23e5d38:	b513      	push	{r0, r1, r4, lr}
 23e5d3a:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23e5d3c:	4608      	mov	r0, r1
 23e5d3e:	9101      	str	r1, [sp, #4]
 23e5d40:	f7ff fa3e 	bl	23e51c0 <strlen>
 23e5d44:	4602      	mov	r2, r0
 23e5d46:	4620      	mov	r0, r4
 23e5d48:	9901      	ldr	r1, [sp, #4]
}
 23e5d4a:	b002      	add	sp, #8
 23e5d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23e5d50:	f012 bfd8 	b.w	23f8d04 <_ZN5spark10JSONWriter5valueEPKcj>

023e5d54 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23e5d54:	6803      	ldr	r3, [r0, #0]
 23e5d56:	b2c9      	uxtb	r1, r1
 23e5d58:	689b      	ldr	r3, [r3, #8]
 23e5d5a:	4718      	bx	r3

023e5d5c <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23e5d5c:	b40e      	push	{r1, r2, r3}
 23e5d5e:	b503      	push	{r0, r1, lr}
 23e5d60:	ab03      	add	r3, sp, #12
 23e5d62:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23e5d66:	2100      	movs	r1, #0
        va_start(args, format);
 23e5d68:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23e5d6a:	f013 f9c9 	bl	23f9100 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23e5d6e:	b002      	add	sp, #8
 23e5d70:	f85d eb04 	ldr.w	lr, [sp], #4
 23e5d74:	b003      	add	sp, #12
 23e5d76:	4770      	bx	lr

023e5d78 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23e5d78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e5d7a:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23e5d7c:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23e5d7e:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23e5d80:	68a3      	ldr	r3, [r4, #8]
 23e5d82:	b132      	cbz	r2, 23e5d92 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23e5d84:	b9a3      	cbnz	r3, 23e5db0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23e5d86:	490b      	ldr	r1, [pc, #44]	; (23e5db4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23e5d88:	b002      	add	sp, #8
 23e5d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23e5d8e:	f013 b978 	b.w	23f9082 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e5d92:	4a09      	ldr	r2, [pc, #36]	; (23e5db8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23e5d94:	7b26      	ldrb	r6, [r4, #12]
 23e5d96:	4d09      	ldr	r5, [pc, #36]	; (23e5dbc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23e5d98:	4909      	ldr	r1, [pc, #36]	; (23e5dc0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23e5d9a:	7b64      	ldrb	r4, [r4, #13]
 23e5d9c:	2e01      	cmp	r6, #1
 23e5d9e:	bf18      	it	ne
 23e5da0:	4629      	movne	r1, r5
 23e5da2:	e9cd 1400 	strd	r1, r4, [sp]
 23e5da6:	4907      	ldr	r1, [pc, #28]	; (23e5dc4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23e5da8:	f7ff ffd8 	bl	23e5d5c <_ZN5Print6printfEPKcz>
  }
 23e5dac:	b002      	add	sp, #8
 23e5dae:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e5db0:	4a05      	ldr	r2, [pc, #20]	; (23e5dc8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23e5db2:	e7ef      	b.n	23e5d94 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23e5db4:	023fd1c4 	.word	0x023fd1c4
 23e5db8:	023fe708 	.word	0x023fe708
 23e5dbc:	023fd1c0 	.word	0x023fd1c0
 23e5dc0:	023fd1bc 	.word	0x023fd1bc
 23e5dc4:	023fd1da 	.word	0x023fd1da
 23e5dc8:	023fd1b3 	.word	0x023fd1b3

023e5dcc <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 23e5dcc:	2300      	movs	r3, #0
 23e5dce:	6840      	ldr	r0, [r0, #4]
 23e5dd0:	461a      	mov	r2, r3
 23e5dd2:	4619      	mov	r1, r3
 23e5dd4:	f011 bdc0 	b.w	23f7958 <network_on>

023e5dd8 <_ZN5spark13CellularClass3offEv>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 23e5dd8:	2300      	movs	r3, #0
 23e5dda:	6840      	ldr	r0, [r0, #4]
 23e5ddc:	461a      	mov	r2, r3
 23e5dde:	4619      	mov	r1, r3
 23e5de0:	f011 bdc8 	b.w	23f7974 <network_off>

023e5de4 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23e5de4:	2000      	movs	r0, #0
 23e5de6:	f011 b893 	b.w	23f6f10 <hal_timer_millis>
	...

023e5dec <_Z28raingauge1_interrupt_handlerv>:
 *  raingauge1_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE1_IRQ_PIN A3
void raingauge1_interrupt_handler()
{
 23e5dec:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge1_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e5dee:	f7ff fff9 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23e5df2:	4c0e      	ldr	r4, [pc, #56]	; (23e5e2c <_Z28raingauge1_interrupt_handlerv+0x40>)
 23e5df4:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e5df8:	1ac0      	subs	r0, r0, r3
 23e5dfa:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e5dfe:	eb61 0102 	sbc.w	r1, r1, r2
 23e5e02:	4298      	cmp	r0, r3
 23e5e04:	f171 0300 	sbcs.w	r3, r1, #0
 23e5e08:	d30f      	bcc.n	23e5e2a <_Z28raingauge1_interrupt_handlerv+0x3e>
    raingauge1_interrupt_ltime = System.millis();
 23e5e0a:	f7ff ffeb 	bl	23e5de4 <_ZN11SystemClass6millisEv>
    raingauge1_interrupt_count++;
 23e5e0e:	4a08      	ldr	r2, [pc, #32]	; (23e5e30 <_Z28raingauge1_interrupt_handlerv+0x44>)
    raingauge1_interrupt_ltime = System.millis();
 23e5e10:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge1_interrupt_count++;
 23e5e14:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e5e16:	2101      	movs	r1, #1
    raingauge1_interrupt_count++;
 23e5e18:	3301      	adds	r3, #1
 23e5e1a:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e5e1c:	4b05      	ldr	r3, [pc, #20]	; (23e5e34 <_Z28raingauge1_interrupt_handlerv+0x48>)
 23e5e1e:	8818      	ldrh	r0, [r3, #0]
 23e5e20:	f013 fff1 	bl	23f9e06 <digitalWrite>
    TurnLedOff = true;
 23e5e24:	2201      	movs	r2, #1
 23e5e26:	4b04      	ldr	r3, [pc, #16]	; (23e5e38 <_Z28raingauge1_interrupt_handlerv+0x4c>)
 23e5e28:	701a      	strb	r2, [r3, #0]
  }   
}
 23e5e2a:	bd10      	pop	{r4, pc}
 23e5e2c:	1007aa60 	.word	0x1007aa60
 23e5e30:	1007aa5c 	.word	0x1007aa5c
 23e5e34:	1006a104 	.word	0x1006a104
 23e5e38:	1006a7e3 	.word	0x1006a7e3

023e5e3c <_Z28raingauge2_interrupt_handlerv>:
 *  raingauge2_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE2_IRQ_PIN   A4
void raingauge2_interrupt_handler()
{
 23e5e3c:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge2_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e5e3e:	f7ff ffd1 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23e5e42:	4c0e      	ldr	r4, [pc, #56]	; (23e5e7c <_Z28raingauge2_interrupt_handlerv+0x40>)
 23e5e44:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e5e48:	1ac0      	subs	r0, r0, r3
 23e5e4a:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e5e4e:	eb61 0102 	sbc.w	r1, r1, r2
 23e5e52:	4298      	cmp	r0, r3
 23e5e54:	f171 0300 	sbcs.w	r3, r1, #0
 23e5e58:	d30f      	bcc.n	23e5e7a <_Z28raingauge2_interrupt_handlerv+0x3e>
    raingauge2_interrupt_ltime = System.millis();
 23e5e5a:	f7ff ffc3 	bl	23e5de4 <_ZN11SystemClass6millisEv>
    raingauge2_interrupt_count++;
 23e5e5e:	4a08      	ldr	r2, [pc, #32]	; (23e5e80 <_Z28raingauge2_interrupt_handlerv+0x44>)
    raingauge2_interrupt_ltime = System.millis();
 23e5e60:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge2_interrupt_count++;
 23e5e64:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e5e66:	2101      	movs	r1, #1
    raingauge2_interrupt_count++;
 23e5e68:	3301      	adds	r3, #1
 23e5e6a:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e5e6c:	4b05      	ldr	r3, [pc, #20]	; (23e5e84 <_Z28raingauge2_interrupt_handlerv+0x48>)
 23e5e6e:	8818      	ldrh	r0, [r3, #0]
 23e5e70:	f013 ffc9 	bl	23f9e06 <digitalWrite>
    TurnLedOff = true;
 23e5e74:	2201      	movs	r2, #1
 23e5e76:	4b04      	ldr	r3, [pc, #16]	; (23e5e88 <_Z28raingauge2_interrupt_handlerv+0x4c>)
 23e5e78:	701a      	strb	r2, [r3, #0]
  }   
}
 23e5e7a:	bd10      	pop	{r4, pc}
 23e5e7c:	1007aa78 	.word	0x1007aa78
 23e5e80:	1007aa70 	.word	0x1007aa70
 23e5e84:	1006a104 	.word	0x1006a104
 23e5e88:	1006a7e3 	.word	0x1006a7e3

023e5e8c <_ZN8particle13WatchdogClass11getInstanceEv>:
    static WatchdogClass& getInstance() {
 23e5e8c:	b538      	push	{r3, r4, r5, lr}
        static WatchdogClass watchdog;
 23e5e8e:	4d0a      	ldr	r5, [pc, #40]	; (23e5eb8 <_ZN8particle13WatchdogClass11getInstanceEv+0x2c>)
 23e5e90:	e8d5 4f8f 	ldab	r4, [r5]
 23e5e94:	f014 0401 	ands.w	r4, r4, #1
 23e5e98:	d10c      	bne.n	23e5eb4 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
 23e5e9a:	4628      	mov	r0, r5
 23e5e9c:	f011 fed6 	bl	23f7c4c <__cxa_guard_acquire>
 23e5ea0:	b140      	cbz	r0, 23e5eb4 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
    _Function_base() : _M_manager(nullptr) { }
 23e5ea2:	4b06      	ldr	r3, [pc, #24]	; (23e5ebc <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23e5ea4:	4628      	mov	r0, r5
 23e5ea6:	609c      	str	r4, [r3, #8]
    }

private:
    WatchdogClass()
            : callback_(nullptr),
              instance_(HAL_WATCHDOG_INSTANCE1) {
 23e5ea8:	741c      	strb	r4, [r3, #16]
        static WatchdogClass watchdog;
 23e5eaa:	f011 fedd 	bl	23f7c68 <__cxa_guard_release>
 23e5eae:	4804      	ldr	r0, [pc, #16]	; (23e5ec0 <_ZN8particle13WatchdogClass11getInstanceEv+0x34>)
 23e5eb0:	f016 fdac 	bl	23fca0c <atexit>
    }
 23e5eb4:	4801      	ldr	r0, [pc, #4]	; (23e5ebc <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23e5eb6:	bd38      	pop	{r3, r4, r5, pc}
 23e5eb8:	1006a244 	.word	0x1006a244
 23e5ebc:	1006a248 	.word	0x1006a248
 23e5ec0:	023e5c99 	.word	0x023e5c99

023e5ec4 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 23e5ec4:	b513      	push	{r0, r1, r4, lr}
 23e5ec6:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
 23e5ec8:	4608      	mov	r0, r1
 23e5eca:	9101      	str	r1, [sp, #4]
 23e5ecc:	f7ff f978 	bl	23e51c0 <strlen>
 23e5ed0:	4602      	mov	r2, r0
 23e5ed2:	4620      	mov	r0, r4
 23e5ed4:	9901      	ldr	r1, [sp, #4]
}
 23e5ed6:	b002      	add	sp, #8
 23e5ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
 23e5edc:	f012 bf02 	b.w	23f8ce4 <_ZN5spark10JSONWriter4nameEPKcj>

023e5ee0 <_ZN8FsVolume6existsEPKc>:
   *
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
 23e5ee0:	b500      	push	{lr}
 23e5ee2:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->exists(path)
 23e5ee4:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool exists(const char* path) {
 23e5ee8:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->exists(path)
 23e5eea:	b149      	cbz	r1, 23e5f00 <_ZN8FsVolume6existsEPKc+0x20>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
 23e5eec:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e5eee:	4668      	mov	r0, sp
 23e5ef0:	9300      	str	r3, [sp, #0]
 23e5ef2:	f00d fb94 	bl	23f361e <_ZN7FatFile4openEP9FatVolumePKci>
           : m_xVol ? m_xVol->exists(path)
                    : false;
  }
 23e5ef6:	f000 0001 	and.w	r0, r0, #1
 23e5efa:	b00f      	add	sp, #60	; 0x3c
 23e5efc:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->exists(path)
 23e5f00:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e5f04:	2800      	cmp	r0, #0
 23e5f06:	d0f6      	beq.n	23e5ef6 <_ZN8FsVolume6existsEPKc+0x16>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e5f08:	460b      	mov	r3, r1
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
 23e5f0a:	910c      	str	r1, [sp, #48]	; 0x30
 23e5f0c:	4601      	mov	r1, r0
 23e5f0e:	4668      	mov	r0, sp
 23e5f10:	f00f f952 	bl	23f51b8 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e5f14:	e7ef      	b.n	23e5ef6 <_ZN8FsVolume6existsEPKc+0x16>

023e5f16 <_ZN8FsVolume6removeEPKc>:
   *
   * \param[in] path A path with a valid 8.3 DOS name for the file.
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
 23e5f16:	b500      	push	{lr}
 23e5f18:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->remove(path)
 23e5f1a:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool remove(const char* path) {
 23e5f1e:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->remove(path)
 23e5f20:	b171      	cbz	r1, 23e5f40 <_ZN8FsVolume6removeEPKc+0x2a>
 23e5f22:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e5f24:	4668      	mov	r0, sp
 23e5f26:	9300      	str	r3, [sp, #0]
 23e5f28:	2301      	movs	r3, #1
 23e5f2a:	f00d fb78 	bl	23f361e <_ZN7FatFile4openEP9FatVolumePKci>
 23e5f2e:	b110      	cbz	r0, 23e5f36 <_ZN8FsVolume6removeEPKc+0x20>
 23e5f30:	4668      	mov	r0, sp
 23e5f32:	f00e f831 	bl	23f3f98 <_ZN7FatFile6removeEv>
           : m_xVol ? m_xVol->remove(path)
                    : false;
  }
 23e5f36:	f000 0001 	and.w	r0, r0, #1
 23e5f3a:	b00f      	add	sp, #60	; 0x3c
 23e5f3c:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->remove(path)
 23e5f40:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e5f44:	2800      	cmp	r0, #0
 23e5f46:	d0f6      	beq.n	23e5f36 <_ZN8FsVolume6removeEPKc+0x20>
 23e5f48:	910c      	str	r1, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e5f4a:	2301      	movs	r3, #1
 23e5f4c:	4601      	mov	r1, r0
 23e5f4e:	4668      	mov	r0, sp
 23e5f50:	f00f f932 	bl	23f51b8 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e5f54:	2800      	cmp	r0, #0
 23e5f56:	d0ee      	beq.n	23e5f36 <_ZN8FsVolume6removeEPKc+0x20>
 23e5f58:	4668      	mov	r0, sp
 23e5f5a:	f00f f9a7 	bl	23f52ac <_ZN9ExFatFile6removeEv>
 23e5f5e:	e7ea      	b.n	23e5f36 <_ZN8FsVolume6removeEPKc+0x20>

023e5f60 <_ZNK10FsBaseFile9availableEv>:
  int available() const {
 23e5f60:	b510      	push	{r4, lr}
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e5f62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e5f64:	b15b      	cbz	r3, 23e5f7e <_ZNK10FsBaseFile9availableEv+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
 23e5f66:	7818      	ldrb	r0, [r3, #0]
 23e5f68:	f010 0008 	ands.w	r0, r0, #8
 23e5f6c:	bf1e      	ittt	ne
 23e5f6e:	69d8      	ldrne	r0, [r3, #28]
 23e5f70:	695b      	ldrne	r3, [r3, #20]
 23e5f72:	1ac0      	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
 23e5f74:	2800      	cmp	r0, #0
 23e5f76:	bfb8      	it	lt
 23e5f78:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
  }
 23e5f7c:	bd10      	pop	{r4, pc}
 23e5f7e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e5f80:	2800      	cmp	r0, #0
 23e5f82:	d0fb      	beq.n	23e5f7c <_ZNK10FsBaseFile9availableEv+0x1c>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e5f84:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23e5f88:	f013 0308 	ands.w	r3, r3, #8
 23e5f8c:	d00e      	beq.n	23e5fac <_ZNK10FsBaseFile9availableEv+0x4c>
 23e5f8e:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
 23e5f92:	e9d0 2400 	ldrd	r2, r4, [r0]
 23e5f96:	1a88      	subs	r0, r1, r2
 23e5f98:	eb63 0304 	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
 23e5f9c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 23e5fa0:	f173 0300 	sbcs.w	r3, r3, #0
 23e5fa4:	bf28      	it	cs
 23e5fa6:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
 23e5faa:	e7e7      	b.n	23e5f7c <_ZNK10FsBaseFile9availableEv+0x1c>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e5fac:	4618      	mov	r0, r3
 23e5fae:	e7f5      	b.n	23e5f9c <_ZNK10FsBaseFile9availableEv+0x3c>

023e5fb0 <_ZN10StreamFileI10FsBaseFileyE9availableEv>:
  int available() override { return BaseFile::available(); }
 23e5fb0:	b508      	push	{r3, lr}
 23e5fb2:	3010      	adds	r0, #16
 23e5fb4:	f7ff ffd4 	bl	23e5f60 <_ZNK10FsBaseFile9availableEv>
 23e5fb8:	bd08      	pop	{r3, pc}

023e5fba <_ZNK10FsBaseFile8fileSizeEv>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
 23e5fba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e5fbc:	b113      	cbz	r3, 23e5fc4 <_ZNK10FsBaseFile8fileSizeEv+0xa>
 23e5fbe:	69d8      	ldr	r0, [r3, #28]
 23e5fc0:	2100      	movs	r1, #0
 23e5fc2:	4770      	bx	lr
 23e5fc4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 23e5fc6:	b113      	cbz	r3, 23e5fce <_ZNK10FsBaseFile8fileSizeEv+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, const char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const { return m_validLength; }
 23e5fc8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 23e5fcc:	4770      	bx	lr
 23e5fce:	4618      	mov	r0, r3
 23e5fd0:	e7f6      	b.n	23e5fc0 <_ZNK10FsBaseFile8fileSizeEv+0x6>

023e5fd2 <_ZNK10FsBaseFile6isOpenEv>:
  bool isOpen() const { return m_fFile || m_xFile; }
 23e5fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e5fd4:	b923      	cbnz	r3, 23e5fe0 <_ZNK10FsBaseFile6isOpenEv+0xe>
 23e5fd6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23e5fd8:	3800      	subs	r0, #0
 23e5fda:	bf18      	it	ne
 23e5fdc:	2001      	movne	r0, #1
 23e5fde:	4770      	bx	lr
 23e5fe0:	2001      	movs	r0, #1
 23e5fe2:	4770      	bx	lr

023e5fe4 <_ZN10FsBaseFile4readEv>:
  int read() {
 23e5fe4:	b507      	push	{r0, r1, r2, lr}
    return m_fFile   ? m_fFile->read(buf, count)
 23e5fe6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e5fe8:	b153      	cbz	r3, 23e6000 <_ZN10FsBaseFile4readEv+0x1c>
 23e5fea:	2201      	movs	r2, #1
 23e5fec:	4618      	mov	r0, r3
 23e5fee:	f10d 0107 	add.w	r1, sp, #7
 23e5ff2:	f00d f8d3 	bl	23f319c <_ZN7FatFile4readEPvj>
    return read(&b, 1) == 1 ? b : -1;
 23e5ff6:	2801      	cmp	r0, #1
 23e5ff8:	d104      	bne.n	23e6004 <_ZN10FsBaseFile4readEv+0x20>
 23e5ffa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23e5ffe:	e003      	b.n	23e6008 <_ZN10FsBaseFile4readEv+0x24>
 23e6000:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->read(buf, count)
 23e6002:	b920      	cbnz	r0, 23e600e <_ZN10FsBaseFile4readEv+0x2a>
    return read(&b, 1) == 1 ? b : -1;
 23e6004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
 23e6008:	b003      	add	sp, #12
 23e600a:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xFile ? m_xFile->read(buf, count)
 23e600e:	2201      	movs	r2, #1
 23e6010:	f10d 0107 	add.w	r1, sp, #7
 23e6014:	f00e fd82 	bl	23f4b1c <_ZN9ExFatFile4readEPvj>
 23e6018:	e7ed      	b.n	23e5ff6 <_ZN10FsBaseFile4readEv+0x12>

023e601a <_ZN10StreamFileI10FsBaseFileyE4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() override { return BaseFile::read(); }
 23e601a:	b508      	push	{r3, lr}
 23e601c:	3010      	adds	r0, #16
 23e601e:	f7ff ffe1 	bl	23e5fe4 <_ZN10FsBaseFile4readEv>
 23e6022:	bd08      	pop	{r3, pc}

023e6024 <_ZN10FsBaseFile5writeEPKvj>:
    return m_fFile   ? m_fFile->write(buf, count)
 23e6024:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e6026:	b113      	cbz	r3, 23e602e <_ZN10FsBaseFile5writeEPKvj+0xa>
 23e6028:	4618      	mov	r0, r3
 23e602a:	f00d bbc3 	b.w	23f37b4 <_ZN7FatFile5writeEPKvj>
 23e602e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->write(buf, count)
 23e6030:	b108      	cbz	r0, 23e6036 <_ZN10FsBaseFile5writeEPKvj+0x12>
 23e6032:	f00f bb51 	b.w	23f56d8 <_ZN9ExFatFile5writeEPKvj>
  }
 23e6036:	4770      	bx	lr

023e6038 <_ZN10StreamFileI10FsBaseFileyE5writeEPKhj>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) override {
 23e6038:	b508      	push	{r3, lr}
    return BaseFile::write(buffer, size);
 23e603a:	3010      	adds	r0, #16
 23e603c:	f7ff fff2 	bl	23e6024 <_ZN10FsBaseFile5writeEPKvj>
  }
 23e6040:	bd08      	pop	{r3, pc}

023e6042 <_ZN10StreamFileI10FsBaseFileyE5writeEh>:
  size_t write(uint8_t b) override { return BaseFile::write(b); }
 23e6042:	b507      	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) { return write(&b, 1); }
 23e6044:	2201      	movs	r2, #1
 23e6046:	f88d 1007 	strb.w	r1, [sp, #7]
 23e604a:	3010      	adds	r0, #16
 23e604c:	f10d 0107 	add.w	r1, sp, #7
 23e6050:	f7ff ffe8 	bl	23e6024 <_ZN10FsBaseFile5writeEPKvj>
 23e6054:	b003      	add	sp, #12
 23e6056:	f85d fb04 	ldr.w	pc, [sp], #4

023e605a <_Z16I2C_Device_Existh>:
 * 
 *  The i2c_scanner uses the return value of the Write.endTransmisstion to see 
 *  if a device did acknowledge to the address.
 *=======================================================================================================================
 */
bool I2C_Device_Exist(byte address) {
 23e605a:	b507      	push	{r0, r1, r2, lr}
 23e605c:	9001      	str	r0, [sp, #4]
  byte error;

  Wire.begin();                     // Connect to I2C as Master (no addess is passed to signal being a slave)
 23e605e:	f013 ff45 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6062:	f012 fbd3 	bl	23f880c <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(address);  // Begin a transmission to the I2C slave device with the given address. 
 23e6066:	f013 ff41 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e606a:	9901      	ldr	r1, [sp, #4]
 23e606c:	f012 fbf8 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
                                    // Subsequently, queue bytes for transmission with the write() function 
                                    // and transmit them by calling endTransmission(). 

  error = Wire.endTransmission();   // Ends a transmission to a slave device that was begun by beginTransmission() 
 23e6070:	f013 ff3c 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6074:	f012 fbff 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  else {
    // sprintf (msgbuf, "I2CERR: %d", error);
    // Output (msgbuf);
    return (false);
  }
}
 23e6078:	fab0 f080 	clz	r0, r0
 23e607c:	0940      	lsrs	r0, r0, #5
 23e607e:	b003      	add	sp, #12
 23e6080:	f85d fb04 	ldr.w	pc, [sp], #4

023e6084 <_Z5Blinkii>:
 * ======================================================================================================================
 * Blink() - Count, delay between, delay at end
 * ======================================================================================================================
 */
void Blink(int count, int between)
{
 23e6084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e6086:	4606      	mov	r6, r0
 23e6088:	460c      	mov	r4, r1
  int c;

  for (c=0; c<count; c++) {
 23e608a:	2500      	movs	r5, #0
    digitalWrite(LED_PIN, HIGH);
 23e608c:	4f09      	ldr	r7, [pc, #36]	; (23e60b4 <_Z5Blinkii+0x30>)
  for (c=0; c<count; c++) {
 23e608e:	42b5      	cmp	r5, r6
 23e6090:	da0f      	bge.n	23e60b2 <_Z5Blinkii+0x2e>
    digitalWrite(LED_PIN, HIGH);
 23e6092:	2101      	movs	r1, #1
 23e6094:	8838      	ldrh	r0, [r7, #0]
 23e6096:	f013 feb6 	bl	23f9e06 <digitalWrite>
    delay(between);
 23e609a:	4620      	mov	r0, r4
 23e609c:	f011 fdf2 	bl	23f7c84 <delay>
    digitalWrite(LED_PIN, LOW);
 23e60a0:	2100      	movs	r1, #0
 23e60a2:	8838      	ldrh	r0, [r7, #0]
 23e60a4:	f013 feaf 	bl	23f9e06 <digitalWrite>
    delay(between);
 23e60a8:	4620      	mov	r0, r4
 23e60aa:	f011 fdeb 	bl	23f7c84 <delay>
  for (c=0; c<count; c++) {
 23e60ae:	3501      	adds	r5, #1
 23e60b0:	e7ed      	b.n	23e608e <_Z5Blinkii+0xa>
  }
}
 23e60b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e60b4:	1006a104 	.word	0x1006a104

023e60b8 <_Z6mysortPjj>:
/*
 * ======================================================================================================================
 * mysort()
 * ======================================================================================================================
 */
void mysort(unsigned int a[], unsigned int n) { 
 23e60b8:	b530      	push	{r4, r5, lr}
  unsigned int i, j;

  for(i = 0;i < n-1;i++) {
 23e60ba:	3901      	subs	r1, #1
 23e60bc:	b169      	cbz	r1, 23e60da <_Z6mysortPjj+0x22>
 23e60be:	4603      	mov	r3, r0
    for(j = 0;j < n-i-1;j++) {
 23e60c0:	2200      	movs	r2, #0
      if(a[j] > a[j+1])
 23e60c2:	681c      	ldr	r4, [r3, #0]
 23e60c4:	685d      	ldr	r5, [r3, #4]
 23e60c6:	3201      	adds	r2, #1
 23e60c8:	42ac      	cmp	r4, r5
 23e60ca:	d901      	bls.n	23e60d0 <_Z6mysortPjj+0x18>
  *q=t;
 23e60cc:	e9c3 5400 	strd	r5, r4, [r3]
    for(j = 0;j < n-i-1;j++) {
 23e60d0:	428a      	cmp	r2, r1
 23e60d2:	f103 0304 	add.w	r3, r3, #4
 23e60d6:	d3f4      	bcc.n	23e60c2 <_Z6mysortPjj+0xa>
 23e60d8:	e7ef      	b.n	23e60ba <_Z6mysortPjj+0x2>
        myswap(&a[j],&a[j+1]);
    }
  }
}
 23e60da:	bd30      	pop	{r4, r5, pc}

023e60dc <_Z13JPO_ClearBitsv>:
 * ======================================================================================================================
 * JPO_ClearBits() - Clear System Status Bits related to initialization
 * ======================================================================================================================
 */
void JPO_ClearBits() {
  if (JustPoweredOn) {
 23e60dc:	4b08      	ldr	r3, [pc, #32]	; (23e6100 <_Z13JPO_ClearBitsv+0x24>)
 23e60de:	781a      	ldrb	r2, [r3, #0]
 23e60e0:	b162      	cbz	r2, 23e60fc <_Z13JPO_ClearBitsv+0x20>
    JustPoweredOn = false;
 23e60e2:	2200      	movs	r2, #0
 23e60e4:	701a      	strb	r2, [r3, #0]
    SystemStatusBits &= ~SSB_BLX;     // Turn Off BLUX30 Not Found Bit
    SystemStatusBits &= ~SSB_LPS_1;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_LPS_2;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_TLW;     // Turn Off Tinovi Leaf Wetness Not Found Bit
    SystemStatusBits &= ~SSB_TSM;     // Turn Off Tinovi Soil Moisture Not Found Bit
    SystemStatusBits &= ~SSB_TMSM;    // Turn Off Tinovi MultiLevel Soil Moisture Not Found Bit
 23e60e6:	4a07      	ldr	r2, [pc, #28]	; (23e6104 <_Z13JPO_ClearBitsv+0x28>)
 23e60e8:	6813      	ldr	r3, [r2, #0]
 23e60ea:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 23e60ee:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 23e60f2:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 23e60f6:	f023 0309 	bic.w	r3, r3, #9
 23e60fa:	6013      	str	r3, [r2, #0]
  }
}
 23e60fc:	4770      	bx	lr
 23e60fe:	bf00      	nop
 23e6100:	1006a102 	.word	0x1006a102
 23e6104:	1006a178 	.word	0x1006a178

023e6108 <_Z17OLED_sleepDisplayv>:
 * ======================================================================================================================
 * OLED_sleepDisplay()
 * ======================================================================================================================
 */
void OLED_sleepDisplay() {
  if (DisplayEnabled) {
 23e6108:	4b06      	ldr	r3, [pc, #24]	; (23e6124 <_Z17OLED_sleepDisplayv+0x1c>)
 23e610a:	781b      	ldrb	r3, [r3, #0]
 23e610c:	b143      	cbz	r3, 23e6120 <_Z17OLED_sleepDisplayv+0x18>
    if (OLED32) {
 23e610e:	4b06      	ldr	r3, [pc, #24]	; (23e6128 <_Z17OLED_sleepDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e6110:	21ae      	movs	r1, #174	; 0xae
    if (OLED32) {
 23e6112:	681b      	ldr	r3, [r3, #0]
 23e6114:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e6116:	bf0c      	ite	eq
 23e6118:	4804      	ldreq	r0, [pc, #16]	; (23e612c <_Z17OLED_sleepDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYOFF);
 23e611a:	4805      	ldrne	r0, [pc, #20]	; (23e6130 <_Z17OLED_sleepDisplayv+0x28>)
 23e611c:	f00b bc07 	b.w	23f192e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e6120:	4770      	bx	lr
 23e6122:	bf00      	nop
 23e6124:	1006a101 	.word	0x1006a101
 23e6128:	1007aa20 	.word	0x1007aa20
 23e612c:	1006ad74 	.word	0x1006ad74
 23e6130:	1006ade8 	.word	0x1006ade8

023e6134 <_Z16OLED_wakeDisplayv>:
 * ======================================================================================================================
 * OLED_wakeDisplay()
 * ======================================================================================================================
 */
void OLED_wakeDisplay() {
  if (DisplayEnabled) {
 23e6134:	4b06      	ldr	r3, [pc, #24]	; (23e6150 <_Z16OLED_wakeDisplayv+0x1c>)
 23e6136:	781b      	ldrb	r3, [r3, #0]
 23e6138:	b143      	cbz	r3, 23e614c <_Z16OLED_wakeDisplayv+0x18>
    if (OLED32) {
 23e613a:	4b06      	ldr	r3, [pc, #24]	; (23e6154 <_Z16OLED_wakeDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e613c:	21af      	movs	r1, #175	; 0xaf
    if (OLED32) {
 23e613e:	681b      	ldr	r3, [r3, #0]
 23e6140:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e6142:	bf0c      	ite	eq
 23e6144:	4804      	ldreq	r0, [pc, #16]	; (23e6158 <_Z16OLED_wakeDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYON);
 23e6146:	4805      	ldrne	r0, [pc, #20]	; (23e615c <_Z16OLED_wakeDisplayv+0x28>)
 23e6148:	f00b bbf1 	b.w	23f192e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e614c:	4770      	bx	lr
 23e614e:	bf00      	nop
 23e6150:	1006a101 	.word	0x1006a101
 23e6154:	1007aa20 	.word	0x1007aa20
 23e6158:	1006ad74 	.word	0x1006ad74
 23e615c:	1006ade8 	.word	0x1006ade8

023e6160 <_Z9OLED_spinv>:
/*
 * ======================================================================================================================
 * OLED_spin() 
 * ======================================================================================================================
 */
void OLED_spin() {
 23e6160:	b570      	push	{r4, r5, r6, lr}
  static int spin=0;
    
  if (DisplayEnabled) {
 23e6162:	4b24      	ldr	r3, [pc, #144]	; (23e61f4 <_Z9OLED_spinv+0x94>)
 23e6164:	781b      	ldrb	r3, [r3, #0]
 23e6166:	2b00      	cmp	r3, #0
 23e6168:	d038      	beq.n	23e61dc <_Z9OLED_spinv+0x7c>
    if (OLED32) {
 23e616a:	4e23      	ldr	r6, [pc, #140]	; (23e61f8 <_Z9OLED_spinv+0x98>)
 23e616c:	4d23      	ldr	r5, [pc, #140]	; (23e61fc <_Z9OLED_spinv+0x9c>)
 23e616e:	6833      	ldr	r3, [r6, #0]
 23e6170:	2b3c      	cmp	r3, #60	; 0x3c
 23e6172:	f04f 0301 	mov.w	r3, #1
 23e6176:	d112      	bne.n	23e619e <_Z9OLED_spinv+0x3e>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
 23e6178:	4c21      	ldr	r4, [pc, #132]	; (23e6200 <_Z9OLED_spinv+0xa0>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
    textcolor = c;
 23e617a:	e9c4 5304 	strd	r5, r3, [r4, #16]
      display64.setTextColor(WHITE, BLACK); // Draw 'inverse' text
      display64.setCursor(120,24);
      display64.print(" ");
      display64.setCursor(120,24);
      display64.setCursor(120,56);
      display64.print(" ");
 23e617e:	4620      	mov	r0, r4
 23e6180:	4920      	ldr	r1, [pc, #128]	; (23e6204 <_Z9OLED_spinv+0xa4>)
 23e6182:	f012 ff7e 	bl	23f9082 <_ZN5Print5printEPKc>
    cursor_x = x;
 23e6186:	6125      	str	r5, [r4, #16]
      display64.setCursor(120,56);       
    } 
    switch (spin++) {
 23e6188:	4c1f      	ldr	r4, [pc, #124]	; (23e6208 <_Z9OLED_spinv+0xa8>)
 23e618a:	6822      	ldr	r2, [r4, #0]
 23e618c:	1c53      	adds	r3, r2, #1
 23e618e:	6023      	str	r3, [r4, #0]
 23e6190:	4b1e      	ldr	r3, [pc, #120]	; (23e620c <_Z9OLED_spinv+0xac>)
 23e6192:	2a03      	cmp	r2, #3
 23e6194:	d80f      	bhi.n	23e61b6 <_Z9OLED_spinv+0x56>
 23e6196:	e8df f002 	tbb	[pc, r2]
 23e619a:	220c      	.short	0x220c
 23e619c:	2624      	.short	0x2624
 23e619e:	4c1c      	ldr	r4, [pc, #112]	; (23e6210 <_Z9OLED_spinv+0xb0>)
      display64.print(" ");
 23e61a0:	4918      	ldr	r1, [pc, #96]	; (23e6204 <_Z9OLED_spinv+0xa4>)
    textcolor = c;
 23e61a2:	e9c4 5304 	strd	r5, r3, [r4, #16]
    cursor_x = x;
 23e61a6:	4d1b      	ldr	r5, [pc, #108]	; (23e6214 <_Z9OLED_spinv+0xb4>)
 23e61a8:	4620      	mov	r0, r4
 23e61aa:	f012 ff6a 	bl	23f9082 <_ZN5Print5printEPKc>
 23e61ae:	6125      	str	r5, [r4, #16]
 23e61b0:	e7e5      	b.n	23e617e <_Z9OLED_spinv+0x1e>
      case 0 : msgp = (char *) "|"; break;
 23e61b2:	4a19      	ldr	r2, [pc, #100]	; (23e6218 <_Z9OLED_spinv+0xb8>)
      case 1 : msgp = (char *) "/"; break;
      case 2 : msgp = (char *) "-"; break;
      case 3 : msgp = (char *) "\\"; break;
 23e61b4:	601a      	str	r2, [r3, #0]
    }
    if (OLED32) {
      display32.print(msgp);
 23e61b6:	6819      	ldr	r1, [r3, #0]
    if (OLED32) {
 23e61b8:	6833      	ldr	r3, [r6, #0]
 23e61ba:	2b3c      	cmp	r3, #60	; 0x3c
 23e61bc:	d115      	bne.n	23e61ea <_Z9OLED_spinv+0x8a>
      display32.print(msgp);
 23e61be:	4810      	ldr	r0, [pc, #64]	; (23e6200 <_Z9OLED_spinv+0xa0>)
 23e61c0:	f012 ff5f 	bl	23f9082 <_ZN5Print5printEPKc>
      display32.display();
 23e61c4:	480e      	ldr	r0, [pc, #56]	; (23e6200 <_Z9OLED_spinv+0xa0>)
    }
    else {
      display64.print(msgp);
      display64.display();
 23e61c6:	f00b fea9 	bl	23f1f1c <_ZN16Adafruit_SSD13067displayEv>
    }
    spin %= 4;
 23e61ca:	6823      	ldr	r3, [r4, #0]
 23e61cc:	425a      	negs	r2, r3
 23e61ce:	f002 0203 	and.w	r2, r2, #3
 23e61d2:	f003 0303 	and.w	r3, r3, #3
 23e61d6:	bf58      	it	pl
 23e61d8:	4253      	negpl	r3, r2
 23e61da:	6023      	str	r3, [r4, #0]
  }
}
 23e61dc:	bd70      	pop	{r4, r5, r6, pc}
      case 1 : msgp = (char *) "/"; break;
 23e61de:	4a0f      	ldr	r2, [pc, #60]	; (23e621c <_Z9OLED_spinv+0xbc>)
 23e61e0:	e7e8      	b.n	23e61b4 <_Z9OLED_spinv+0x54>
      case 2 : msgp = (char *) "-"; break;
 23e61e2:	4a0f      	ldr	r2, [pc, #60]	; (23e6220 <_Z9OLED_spinv+0xc0>)
 23e61e4:	e7e6      	b.n	23e61b4 <_Z9OLED_spinv+0x54>
      case 3 : msgp = (char *) "\\"; break;
 23e61e6:	4a0f      	ldr	r2, [pc, #60]	; (23e6224 <_Z9OLED_spinv+0xc4>)
 23e61e8:	e7e4      	b.n	23e61b4 <_Z9OLED_spinv+0x54>
      display64.print(msgp);
 23e61ea:	4809      	ldr	r0, [pc, #36]	; (23e6210 <_Z9OLED_spinv+0xb0>)
 23e61ec:	f012 ff49 	bl	23f9082 <_ZN5Print5printEPKc>
      display64.display();
 23e61f0:	4807      	ldr	r0, [pc, #28]	; (23e6210 <_Z9OLED_spinv+0xb0>)
 23e61f2:	e7e8      	b.n	23e61c6 <_Z9OLED_spinv+0x66>
 23e61f4:	1006a101 	.word	0x1006a101
 23e61f8:	1007aa20 	.word	0x1007aa20
 23e61fc:	00180078 	.word	0x00180078
 23e6200:	1006ad74 	.word	0x1006ad74
 23e6204:	023fdac9 	.word	0x023fdac9
 23e6208:	1006a7e8 	.word	0x1006a7e8
 23e620c:	1006f528 	.word	0x1006f528
 23e6210:	1006ade8 	.word	0x1006ade8
 23e6214:	00380078 	.word	0x00380078
 23e6218:	023fd1f7 	.word	0x023fd1f7
 23e621c:	023fd1f9 	.word	0x023fd1f9
 23e6220:	023fd1fb 	.word	0x023fd1fb
 23e6224:	023fd1fd 	.word	0x023fd1fd

023e6228 <_Z11OLED_updatev>:
/*
 * ======================================================================================================================
 * OLED_update() -- Output oled in memory map to display
 * ======================================================================================================================
 */
void OLED_update() {  
 23e6228:	b538      	push	{r3, r4, r5, lr}
  if (DisplayEnabled) {
 23e622a:	4b32      	ldr	r3, [pc, #200]	; (23e62f4 <_Z11OLED_updatev+0xcc>)
 23e622c:	781b      	ldrb	r3, [r3, #0]
 23e622e:	2b00      	cmp	r3, #0
 23e6230:	d05f      	beq.n	23e62f2 <_Z11OLED_updatev+0xca>
    if (OLED32) {
 23e6232:	4b31      	ldr	r3, [pc, #196]	; (23e62f8 <_Z11OLED_updatev+0xd0>)
 23e6234:	2500      	movs	r5, #0
 23e6236:	681b      	ldr	r3, [r3, #0]
 23e6238:	2b3c      	cmp	r3, #60	; 0x3c
 23e623a:	d122      	bne.n	23e6282 <_Z11OLED_updatev+0x5a>
      display32.clearDisplay();
 23e623c:	4c2f      	ldr	r4, [pc, #188]	; (23e62fc <_Z11OLED_updatev+0xd4>)
 23e623e:	4620      	mov	r0, r4
 23e6240:	f00b fba1 	bl	23f1986 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setCursor(0,0);             // Start at top-left corner
      display32.print(oled_lines [0]);
 23e6244:	492e      	ldr	r1, [pc, #184]	; (23e6300 <_Z11OLED_updatev+0xd8>)
 23e6246:	4620      	mov	r0, r4
 23e6248:	6125      	str	r5, [r4, #16]
 23e624a:	f012 ff1a 	bl	23f9082 <_ZN5Print5printEPKc>
 23e624e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display32.setCursor(0,8);
      display32.print(oled_lines [1]);
 23e6252:	492c      	ldr	r1, [pc, #176]	; (23e6304 <_Z11OLED_updatev+0xdc>)
 23e6254:	6123      	str	r3, [r4, #16]
 23e6256:	4620      	mov	r0, r4
 23e6258:	f012 ff13 	bl	23f9082 <_ZN5Print5printEPKc>
 23e625c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display32.setCursor(0,16);
      display32.print(oled_lines [2]);
 23e6260:	4929      	ldr	r1, [pc, #164]	; (23e6308 <_Z11OLED_updatev+0xe0>)
 23e6262:	6123      	str	r3, [r4, #16]
 23e6264:	4620      	mov	r0, r4
 23e6266:	f012 ff0c 	bl	23f9082 <_ZN5Print5printEPKc>
 23e626a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display32.setCursor(0,24);  
      display32.print(oled_lines [3]);
 23e626e:	4927      	ldr	r1, [pc, #156]	; (23e630c <_Z11OLED_updatev+0xe4>)
 23e6270:	6123      	str	r3, [r4, #16]
      display64.setCursor(0,40);  
      display64.print(oled_lines [5]);
      display64.setCursor(0,48);  
      display64.print(oled_lines [6]);
      display64.setCursor(0,56);  
      display64.print(oled_lines [7]);
 23e6272:	4620      	mov	r0, r4
 23e6274:	f012 ff05 	bl	23f9082 <_ZN5Print5printEPKc>
      display64.display();
 23e6278:	4620      	mov	r0, r4
     
    }
  }
}
 23e627a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      display64.display();
 23e627e:	f00b be4d 	b.w	23f1f1c <_ZN16Adafruit_SSD13067displayEv>
      display64.clearDisplay();
 23e6282:	4c23      	ldr	r4, [pc, #140]	; (23e6310 <_Z11OLED_updatev+0xe8>)
 23e6284:	4620      	mov	r0, r4
 23e6286:	f00b fb7e 	bl	23f1986 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.print(oled_lines [0]);
 23e628a:	491d      	ldr	r1, [pc, #116]	; (23e6300 <_Z11OLED_updatev+0xd8>)
 23e628c:	4620      	mov	r0, r4
 23e628e:	6125      	str	r5, [r4, #16]
 23e6290:	f012 fef7 	bl	23f9082 <_ZN5Print5printEPKc>
 23e6294:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display64.print(oled_lines [1]);
 23e6298:	491a      	ldr	r1, [pc, #104]	; (23e6304 <_Z11OLED_updatev+0xdc>)
 23e629a:	6123      	str	r3, [r4, #16]
 23e629c:	4620      	mov	r0, r4
 23e629e:	f012 fef0 	bl	23f9082 <_ZN5Print5printEPKc>
 23e62a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display64.print(oled_lines [2]);
 23e62a6:	4918      	ldr	r1, [pc, #96]	; (23e6308 <_Z11OLED_updatev+0xe0>)
 23e62a8:	6123      	str	r3, [r4, #16]
 23e62aa:	4620      	mov	r0, r4
 23e62ac:	f012 fee9 	bl	23f9082 <_ZN5Print5printEPKc>
 23e62b0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display64.print(oled_lines [3]);
 23e62b4:	4915      	ldr	r1, [pc, #84]	; (23e630c <_Z11OLED_updatev+0xe4>)
 23e62b6:	6123      	str	r3, [r4, #16]
 23e62b8:	4620      	mov	r0, r4
 23e62ba:	f012 fee2 	bl	23f9082 <_ZN5Print5printEPKc>
 23e62be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
      display64.print(oled_lines [4]);
 23e62c2:	4914      	ldr	r1, [pc, #80]	; (23e6314 <_Z11OLED_updatev+0xec>)
 23e62c4:	6123      	str	r3, [r4, #16]
 23e62c6:	4620      	mov	r0, r4
 23e62c8:	f012 fedb 	bl	23f9082 <_ZN5Print5printEPKc>
 23e62cc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
      display64.print(oled_lines [5]);
 23e62d0:	4911      	ldr	r1, [pc, #68]	; (23e6318 <_Z11OLED_updatev+0xf0>)
 23e62d2:	6123      	str	r3, [r4, #16]
 23e62d4:	4620      	mov	r0, r4
 23e62d6:	f012 fed4 	bl	23f9082 <_ZN5Print5printEPKc>
 23e62da:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
      display64.print(oled_lines [6]);
 23e62de:	490f      	ldr	r1, [pc, #60]	; (23e631c <_Z11OLED_updatev+0xf4>)
 23e62e0:	6123      	str	r3, [r4, #16]
 23e62e2:	4620      	mov	r0, r4
 23e62e4:	f012 fecd 	bl	23f9082 <_ZN5Print5printEPKc>
 23e62e8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
      display64.print(oled_lines [7]);
 23e62ec:	490c      	ldr	r1, [pc, #48]	; (23e6320 <_Z11OLED_updatev+0xf8>)
 23e62ee:	6123      	str	r3, [r4, #16]
 23e62f0:	e7bf      	b.n	23e6272 <_Z11OLED_updatev+0x4a>
}
 23e62f2:	bd38      	pop	{r3, r4, r5, pc}
 23e62f4:	1006a101 	.word	0x1006a101
 23e62f8:	1007aa20 	.word	0x1007aa20
 23e62fc:	1006ad74 	.word	0x1006ad74
 23e6300:	1007a968 	.word	0x1007a968
 23e6304:	1007a97f 	.word	0x1007a97f
 23e6308:	1007a996 	.word	0x1007a996
 23e630c:	1007a9ad 	.word	0x1007a9ad
 23e6310:	1006ade8 	.word	0x1006ade8
 23e6314:	1007a9c4 	.word	0x1007a9c4
 23e6318:	1007a9db 	.word	0x1007a9db
 23e631c:	1007a9f2 	.word	0x1007a9f2
 23e6320:	1007aa09 	.word	0x1007aa09

023e6324 <_Z10OLED_writePKc>:
/*
 * ======================================================================================================================
 * OLED_write() 
 * ======================================================================================================================
 */
void OLED_write(const char *str) {
 23e6324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int c, len, bottom_line = 3;
  
  if (DisplayEnabled) {
 23e6326:	4b36      	ldr	r3, [pc, #216]	; (23e6400 <_Z10OLED_writePKc+0xdc>)
void OLED_write(const char *str) {
 23e6328:	4604      	mov	r4, r0
  if (DisplayEnabled) {
 23e632a:	781b      	ldrb	r3, [r3, #0]
 23e632c:	2b00      	cmp	r3, #0
 23e632e:	d066      	beq.n	23e63fe <_Z10OLED_writePKc+0xda>
    // move lines up
    for (c=0; c<=21; c++) {
      oled_lines [0][c] = oled_lines [1][c];
      oled_lines [1][c] = oled_lines [2][c];
      oled_lines [2][c] = oled_lines [3][c];
      if (OLED64) {
 23e6330:	4b34      	ldr	r3, [pc, #208]	; (23e6404 <_Z10OLED_writePKc+0xe0>)
 23e6332:	6819      	ldr	r1, [r3, #0]
      oled_lines [0][c] = oled_lines [1][c];
 23e6334:	4b34      	ldr	r3, [pc, #208]	; (23e6408 <_Z10OLED_writePKc+0xe4>)
 23e6336:	f1a3 0217 	sub.w	r2, r3, #23
 23e633a:	4615      	mov	r5, r2
 23e633c:	f103 0014 	add.w	r0, r3, #20
 23e6340:	f853 6b04 	ldr.w	r6, [r3], #4
 23e6344:	4283      	cmp	r3, r0
 23e6346:	f842 6b04 	str.w	r6, [r2], #4
 23e634a:	d1f9      	bne.n	23e6340 <_Z10OLED_writePKc+0x1c>
 23e634c:	881b      	ldrh	r3, [r3, #0]
 23e634e:	8013      	strh	r3, [r2, #0]
      oled_lines [1][c] = oled_lines [2][c];
 23e6350:	4b2e      	ldr	r3, [pc, #184]	; (23e640c <_Z10OLED_writePKc+0xe8>)
 23e6352:	f1a3 0217 	sub.w	r2, r3, #23
 23e6356:	f103 0014 	add.w	r0, r3, #20
 23e635a:	f853 6b04 	ldr.w	r6, [r3], #4
 23e635e:	4283      	cmp	r3, r0
 23e6360:	f842 6b04 	str.w	r6, [r2], #4
 23e6364:	d1f9      	bne.n	23e635a <_Z10OLED_writePKc+0x36>
 23e6366:	881b      	ldrh	r3, [r3, #0]
 23e6368:	8013      	strh	r3, [r2, #0]
      oled_lines [2][c] = oled_lines [3][c];
 23e636a:	4b29      	ldr	r3, [pc, #164]	; (23e6410 <_Z10OLED_writePKc+0xec>)
 23e636c:	f1a3 0217 	sub.w	r2, r3, #23
 23e6370:	f103 0014 	add.w	r0, r3, #20
 23e6374:	f853 6b04 	ldr.w	r6, [r3], #4
 23e6378:	4283      	cmp	r3, r0
 23e637a:	f842 6b04 	str.w	r6, [r2], #4
 23e637e:	d1f9      	bne.n	23e6374 <_Z10OLED_writePKc+0x50>
 23e6380:	881b      	ldrh	r3, [r3, #0]
  int c, len, bottom_line = 3;
 23e6382:	2603      	movs	r6, #3
      oled_lines [2][c] = oled_lines [3][c];
 23e6384:	8013      	strh	r3, [r2, #0]
    for (c=0; c<=21; c++) {
 23e6386:	2200      	movs	r2, #0
 23e6388:	4b22      	ldr	r3, [pc, #136]	; (23e6414 <_Z10OLED_writePKc+0xf0>)
      if (OLED64) {
 23e638a:	293d      	cmp	r1, #61	; 0x3d
 23e638c:	d110      	bne.n	23e63b0 <_Z10OLED_writePKc+0x8c>
        oled_lines [3][c] = oled_lines [4][c];
        oled_lines [4][c] = oled_lines [5][c];
        oled_lines [5][c] = oled_lines [6][c];  
        oled_lines [6][c] = oled_lines [7][c];  
        bottom_line = 7;          
 23e638e:	2607      	movs	r6, #7
        oled_lines [3][c] = oled_lines [4][c];
 23e6390:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 23e6394:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
        oled_lines [4][c] = oled_lines [5][c];
 23e6398:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
 23e639c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
        oled_lines [5][c] = oled_lines [6][c];  
 23e63a0:	f893 008a 	ldrb.w	r0, [r3, #138]	; 0x8a
 23e63a4:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
        oled_lines [6][c] = oled_lines [7][c];  
 23e63a8:	f893 00a1 	ldrb.w	r0, [r3, #161]	; 0xa1
 23e63ac:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
    for (c=0; c<=21; c++) {
 23e63b0:	3201      	adds	r2, #1
 23e63b2:	2a16      	cmp	r2, #22
 23e63b4:	f103 0301 	add.w	r3, r3, #1
 23e63b8:	d1e7      	bne.n	23e638a <_Z10OLED_writePKc+0x66>
      }
    }

    // check length on new output line string
    len = strlen (str);
 23e63ba:	4620      	mov	r0, r4
 23e63bc:	f7fe ff00 	bl	23e51c0 <strlen>
    if (len>21) {
 23e63c0:	2217      	movs	r2, #23
 23e63c2:	2815      	cmp	r0, #21
 23e63c4:	bfa8      	it	ge
 23e63c6:	2015      	movge	r0, #21
      len = 21;
    }
    for (c=0; c<=len; c++) {
 23e63c8:	4372      	muls	r2, r6
 23e63ca:	1e63      	subs	r3, r4, #1
 23e63cc:	18a9      	adds	r1, r5, r2
 23e63ce:	4404      	add	r4, r0
      oled_lines [bottom_line][c] = *(str+c);
 23e63d0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    for (c=0; c<=len; c++) {
 23e63d4:	42a3      	cmp	r3, r4
      oled_lines [bottom_line][c] = *(str+c);
 23e63d6:	f801 7b01 	strb.w	r7, [r1], #1
    for (c=0; c<=len; c++) {
 23e63da:	d1f9      	bne.n	23e63d0 <_Z10OLED_writePKc+0xac>
 23e63dc:	1c43      	adds	r3, r0, #1
    }

    // Adding Padding
    for (;c<=21; c++) {
      oled_lines [bottom_line][c] = ' ';
 23e63de:	4413      	add	r3, r2
 23e63e0:	2120      	movs	r1, #32
 23e63e2:	f1c0 0215 	rsb	r2, r0, #21
 23e63e6:	18e8      	adds	r0, r5, r3
 23e63e8:	f016 fb5d 	bl	23fcaa6 <memset>
    }
    oled_lines [bottom_line][22] = (char) NULL;
 23e63ec:	2317      	movs	r3, #23
 23e63ee:	2200      	movs	r2, #0
 23e63f0:	fb03 5306 	mla	r3, r3, r6, r5
 23e63f4:	759a      	strb	r2, [r3, #22]
    
    OLED_update();
  }
}
 23e63f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OLED_update();
 23e63fa:	f7ff bf15 	b.w	23e6228 <_Z11OLED_updatev>
}
 23e63fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e6400:	1006a101 	.word	0x1006a101
 23e6404:	1007aa20 	.word	0x1007aa20
 23e6408:	1007a97f 	.word	0x1007a97f
 23e640c:	1007a996 	.word	0x1007a996
 23e6410:	1007a9ad 	.word	0x1007a9ad
 23e6414:	1007a968 	.word	0x1007a968

023e6418 <_Z12Serial_writePKc>:
/*
 * ======================================================================================================================
 * Serial_write() 
 * ======================================================================================================================
 */
void Serial_write(const char *str) {
 23e6418:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e641a:	4b07      	ldr	r3, [pc, #28]	; (23e6438 <_Z12Serial_writePKc+0x20>)
 23e641c:	781b      	ldrb	r3, [r3, #0]
 23e641e:	b143      	cbz	r3, 23e6432 <_Z12Serial_writePKc+0x1a>
 23e6420:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e6422:	f013 fb65 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23e6426:	9901      	ldr	r1, [sp, #4]
  }
}
 23e6428:	b003      	add	sp, #12
 23e642a:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.println(str);
 23e642e:	f012 be3f 	b.w	23f90b0 <_ZN5Print7printlnEPKc>
}
 23e6432:	b003      	add	sp, #12
 23e6434:	f85d fb04 	ldr.w	pc, [sp], #4
 23e6438:	1006a7d3 	.word	0x1006a7d3

023e643c <_Z14Serial_writelnPKc>:
/*
 * ======================================================================================================================
 * Serial_writeln() 
 * ======================================================================================================================
 */
void Serial_writeln(const char *str) {
 23e643c:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e643e:	4b0a      	ldr	r3, [pc, #40]	; (23e6468 <_Z14Serial_writelnPKc+0x2c>)
 23e6440:	781b      	ldrb	r3, [r3, #0]
 23e6442:	b16b      	cbz	r3, 23e6460 <_Z14Serial_writelnPKc+0x24>
 23e6444:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e6446:	f013 fb53 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23e644a:	9901      	ldr	r1, [sp, #4]
 23e644c:	f012 fe30 	bl	23f90b0 <_ZN5Print7printlnEPKc>
    Serial.flush();
 23e6450:	f013 fb4e 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23e6454:	6803      	ldr	r3, [r0, #0]
 23e6456:	69db      	ldr	r3, [r3, #28]
  }
}
 23e6458:	b003      	add	sp, #12
 23e645a:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.flush();
 23e645e:	4718      	bx	r3
}
 23e6460:	b003      	add	sp, #12
 23e6462:	f85d fb04 	ldr.w	pc, [sp], #4
 23e6466:	bf00      	nop
 23e6468:	1006a7d3 	.word	0x1006a7d3

023e646c <_Z6OutputPKc>:
/*
 * ======================================================================================================================
 * Output()
 * ======================================================================================================================
 */
void Output(const char *str) {
 23e646c:	b510      	push	{r4, lr}
 23e646e:	4604      	mov	r4, r0
  OLED_write(str);
 23e6470:	f7ff ff58 	bl	23e6324 <_Z10OLED_writePKc>
  Serial_write(str);
 23e6474:	4620      	mov	r0, r4
}
 23e6476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial_write(str);
 23e647a:	f7ff bfcd 	b.w	23e6418 <_Z12Serial_writePKc>
	...

023e6480 <_Z15OLED_initializev>:
/*
 * ======================================================================================================================
 * OLED_initialize() -- Initialize oled if enabled
 * ======================================================================================================================
 */
void OLED_initialize() {
 23e6480:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (DisplayEnabled) {
 23e6482:	4d30      	ldr	r5, [pc, #192]	; (23e6544 <_Z15OLED_initializev+0xc4>)
 23e6484:	782b      	ldrb	r3, [r5, #0]
 23e6486:	2b00      	cmp	r3, #0
 23e6488:	d059      	beq.n	23e653e <_Z15OLED_initializev+0xbe>
    if (I2C_Device_Exist (OLED32_I2C_ADDRESS)) {
 23e648a:	203c      	movs	r0, #60	; 0x3c
 23e648c:	f7ff fde5 	bl	23e605a <_Z16I2C_Device_Existh>
 23e6490:	4604      	mov	r4, r0
 23e6492:	b318      	cbz	r0, 23e64dc <_Z15OLED_initializev+0x5c>
      oled_type = OLED32_I2C_ADDRESS;
 23e6494:	223c      	movs	r2, #60	; 0x3c
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e6496:	2501      	movs	r5, #1
 23e6498:	4c2b      	ldr	r4, [pc, #172]	; (23e6548 <_Z15OLED_initializev+0xc8>)
      oled_type = OLED32_I2C_ADDRESS;
 23e649a:	4b2c      	ldr	r3, [pc, #176]	; (23e654c <_Z15OLED_initializev+0xcc>)
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e649c:	2102      	movs	r1, #2
      oled_type = OLED32_I2C_ADDRESS;
 23e649e:	601a      	str	r2, [r3, #0]
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e64a0:	4620      	mov	r0, r4
 23e64a2:	462b      	mov	r3, r5
 23e64a4:	9500      	str	r5, [sp, #0]
 23e64a6:	f00b fa7d 	bl	23f19a4 <_ZN16Adafruit_SSD13065beginEhhbb>
      display32.clearDisplay();
 23e64aa:	4620      	mov	r0, r4
 23e64ac:	f00b fa6b 	bl	23f1986 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setTextSize(1); // Draw 2X-scale text
 23e64b0:	4620      	mov	r0, r4
 23e64b2:	4629      	mov	r1, r5
 23e64b4:	f00a fa6d 	bl	23f0992 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23e64b8:	2300      	movs	r3, #0
 23e64ba:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 23e64be:	e9c4 3204 	strd	r3, r2, [r4, #16]
      display32.setTextColor(WHITE);
      display32.setCursor(0, 0);
      for (int r=0; r<4; r++) {
        oled_lines[r][0]=0;
 23e64c2:	4a23      	ldr	r2, [pc, #140]	; (23e6550 <_Z15OLED_initializev+0xd0>)
      }
      OLED_write("OLED32:OK");
 23e64c4:	4823      	ldr	r0, [pc, #140]	; (23e6554 <_Z15OLED_initializev+0xd4>)
        oled_lines[r][0]=0;
 23e64c6:	7013      	strb	r3, [r2, #0]
 23e64c8:	75d3      	strb	r3, [r2, #23]
 23e64ca:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 23e64ce:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    else {
      DisplayEnabled = false;
      SystemStatusBits |= SSB_OLED; // Turn on Bit
    }
  }
}
 23e64d2:	b002      	add	sp, #8
 23e64d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      OLED_write("OLED64:OK");
 23e64d8:	f7ff bf24 	b.w	23e6324 <_Z10OLED_writePKc>
    else if (I2C_Device_Exist (OLED64_I2C_ADDRESS)) {
 23e64dc:	203d      	movs	r0, #61	; 0x3d
 23e64de:	f7ff fdbc 	bl	23e605a <_Z16I2C_Device_Existh>
 23e64e2:	b330      	cbz	r0, 23e6532 <_Z15OLED_initializev+0xb2>
      oled_type = OLED64_I2C_ADDRESS;
 23e64e4:	223d      	movs	r2, #61	; 0x3d
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e64e6:	2601      	movs	r6, #1
 23e64e8:	4d1b      	ldr	r5, [pc, #108]	; (23e6558 <_Z15OLED_initializev+0xd8>)
      oled_type = OLED64_I2C_ADDRESS;
 23e64ea:	4b18      	ldr	r3, [pc, #96]	; (23e654c <_Z15OLED_initializev+0xcc>)
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e64ec:	2102      	movs	r1, #2
      oled_type = OLED64_I2C_ADDRESS;
 23e64ee:	601a      	str	r2, [r3, #0]
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e64f0:	4628      	mov	r0, r5
 23e64f2:	4633      	mov	r3, r6
 23e64f4:	9600      	str	r6, [sp, #0]
 23e64f6:	f00b fa55 	bl	23f19a4 <_ZN16Adafruit_SSD13065beginEhhbb>
      display64.clearDisplay();
 23e64fa:	4628      	mov	r0, r5
 23e64fc:	f00b fa43 	bl	23f1986 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.setTextSize(1); // Draw 2X-scale text
 23e6500:	4628      	mov	r0, r5
 23e6502:	4631      	mov	r1, r6
 23e6504:	f00a fa45 	bl	23f0992 <_ZN12Adafruit_GFX11setTextSizeEh>
 23e6508:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 23e650c:	616b      	str	r3, [r5, #20]
        oled_lines[r][0]=0;
 23e650e:	4b10      	ldr	r3, [pc, #64]	; (23e6550 <_Z15OLED_initializev+0xd0>)
      OLED_write("OLED64:OK");
 23e6510:	4812      	ldr	r0, [pc, #72]	; (23e655c <_Z15OLED_initializev+0xdc>)
    cursor_x = x;
 23e6512:	612c      	str	r4, [r5, #16]
        oled_lines[r][0]=0;
 23e6514:	701c      	strb	r4, [r3, #0]
 23e6516:	75dc      	strb	r4, [r3, #23]
 23e6518:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
 23e651c:	f883 4045 	strb.w	r4, [r3, #69]	; 0x45
 23e6520:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
 23e6524:	f883 4073 	strb.w	r4, [r3, #115]	; 0x73
 23e6528:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
 23e652c:	f883 40a1 	strb.w	r4, [r3, #161]	; 0xa1
      OLED_write("OLED64:OK");
 23e6530:	e7cf      	b.n	23e64d2 <_Z15OLED_initializev+0x52>
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e6532:	4a0b      	ldr	r2, [pc, #44]	; (23e6560 <_Z15OLED_initializev+0xe0>)
      DisplayEnabled = false;
 23e6534:	7028      	strb	r0, [r5, #0]
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e6536:	6813      	ldr	r3, [r2, #0]
 23e6538:	f043 0308 	orr.w	r3, r3, #8
 23e653c:	6013      	str	r3, [r2, #0]
}
 23e653e:	b002      	add	sp, #8
 23e6540:	bd70      	pop	{r4, r5, r6, pc}
 23e6542:	bf00      	nop
 23e6544:	1006a101 	.word	0x1006a101
 23e6548:	1006ad74 	.word	0x1006ad74
 23e654c:	1007aa20 	.word	0x1007aa20
 23e6550:	1007a968 	.word	0x1007a968
 23e6554:	023fd1ff 	.word	0x023fd1ff
 23e6558:	1006ade8 	.word	0x1006ade8
 23e655c:	023fd209 	.word	0x023fd209
 23e6560:	1006a178 	.word	0x1006a178

023e6564 <_Z13stc_timestampv>:
/* 
 *=======================================================================================================================
 * stc_timestamp() - Read from System Time Clock and set timestamp string
 *=======================================================================================================================
 */
void stc_timestamp() {
 23e6564:	b570      	push	{r4, r5, r6, lr}
 23e6566:	b086      	sub	sp, #24

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e6568:	f013 f9f4 	bl	23f9954 <_ZN9TimeClass4yearEv>
 23e656c:	9005      	str	r0, [sp, #20]
 23e656e:	f013 f9e9 	bl	23f9944 <_ZN9TimeClass5monthEv>
 23e6572:	9004      	str	r0, [sp, #16]
 23e6574:	f013 f9da 	bl	23f992c <_ZN9TimeClass3dayEv>
 23e6578:	4604      	mov	r4, r0
 23e657a:	f013 f9b3 	bl	23f98e4 <_ZN9TimeClass4hourEv>
 23e657e:	4605      	mov	r5, r0
 23e6580:	f013 f9bc 	bl	23f98fc <_ZN9TimeClass6minuteEv>
 23e6584:	4606      	mov	r6, r0
 23e6586:	f013 f9c5 	bl	23f9914 <_ZN9TimeClass6secondEv>
 23e658a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e658e:	e9cd 6002 	strd	r6, r0, [sp, #8]
 23e6592:	e9cd 4500 	strd	r4, r5, [sp]
 23e6596:	4903      	ldr	r1, [pc, #12]	; (23e65a4 <_Z13stc_timestampv+0x40>)
 23e6598:	4803      	ldr	r0, [pc, #12]	; (23e65a8 <_Z13stc_timestampv+0x44>)
 23e659a:	f011 fa93 	bl	23f7ac4 <sprintf>
    Time.year(), Time.month(), Time.day(),
    Time.hour(), Time.minute(), Time.second());
}
 23e659e:	b006      	add	sp, #24
 23e65a0:	bd70      	pop	{r4, r5, r6, pc}
 23e65a2:	bf00      	nop
 23e65a4:	023fd213 	.word	0x023fd213
 23e65a8:	1007abe0 	.word	0x1007abe0

023e65ac <_Z13rtc_timestampv>:
/* 
 *=======================================================================================================================
 * rtc_timestamp() - Read from RTC and set timestamp string
 *=======================================================================================================================
 */
void rtc_timestamp() {
 23e65ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if (PLATFORM_ID == PLATFORM_MSOM)
  if (ab1805.getRtcAsTm(&now)) {
 23e65ae:	4c11      	ldr	r4, [pc, #68]	; (23e65f4 <_Z13rtc_timestampv+0x48>)
 23e65b0:	4811      	ldr	r0, [pc, #68]	; (23e65f8 <_Z13rtc_timestampv+0x4c>)
 23e65b2:	4621      	mov	r1, r4
 23e65b4:	f010 f9e8 	bl	23f6988 <_ZN6AB180510getRtcAsTmEP2tm>
 23e65b8:	b1a0      	cbz	r0, 23e65e4 <_Z13rtc_timestampv+0x38>
    now.tm_year += 1900;
    now.tm_mon += 1;
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e65ba:	6821      	ldr	r1, [r4, #0]
    now.tm_year += 1900;
 23e65bc:	6962      	ldr	r2, [r4, #20]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e65be:	9103      	str	r1, [sp, #12]
 23e65c0:	6861      	ldr	r1, [r4, #4]
    now.tm_mon += 1;
 23e65c2:	6923      	ldr	r3, [r4, #16]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e65c4:	9102      	str	r1, [sp, #8]
 23e65c6:	68a1      	ldr	r1, [r4, #8]
    now.tm_year += 1900;
 23e65c8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e65cc:	9101      	str	r1, [sp, #4]
 23e65ce:	68e1      	ldr	r1, [r4, #12]
    now.tm_mon += 1;
 23e65d0:	3301      	adds	r3, #1
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e65d2:	9100      	str	r1, [sp, #0]
 23e65d4:	4809      	ldr	r0, [pc, #36]	; (23e65fc <_Z13rtc_timestampv+0x50>)
 23e65d6:	490a      	ldr	r1, [pc, #40]	; (23e6600 <_Z13rtc_timestampv+0x54>)
    now.tm_year += 1900;
 23e65d8:	6162      	str	r2, [r4, #20]
    now.tm_mon += 1;
 23e65da:	6123      	str	r3, [r4, #16]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e65dc:	f011 fa72 	bl	23f7ac4 <sprintf>
  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
    now.year(), now.month(), now.day(),
    now.hour(), now.minute(), now.second());
#endif
}
 23e65e0:	b004      	add	sp, #16
 23e65e2:	bd10      	pop	{r4, pc}
    sprintf (timestamp, "0000-00-00T00:00:00"); 
 23e65e4:	4907      	ldr	r1, [pc, #28]	; (23e6604 <_Z13rtc_timestampv+0x58>)
 23e65e6:	4805      	ldr	r0, [pc, #20]	; (23e65fc <_Z13rtc_timestampv+0x50>)
}
 23e65e8:	b004      	add	sp, #16
 23e65ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sprintf (timestamp, "0000-00-00T00:00:00"); 
 23e65ee:	f016 bacf 	b.w	23fcb90 <strcpy>
 23e65f2:	bf00      	nop
 23e65f4:	1006f52c 	.word	0x1006f52c
 23e65f8:	1006a7ec 	.word	0x1006a7ec
 23e65fc:	1007abe0 	.word	0x1007abe0
 23e6600:	023fd213 	.word	0x023fd213
 23e6604:	023fd22f 	.word	0x023fd22f

023e6608 <_Z14rtc_initializev>:
/* 
 *=======================================================================================================================
 * rtc_initialize()
 *=======================================================================================================================
 */
void rtc_initialize() {
 23e6608:	b513      	push	{r0, r1, r4, lr}

#if (PLATFORM_ID == PLATFORM_MSOM)
  // Note: If the RTC is valid ParticleOS will see this and set the System Clock with it.
  if (!I2C_Device_Exist(AB1805_ADDRESS)) {
 23e660a:	2069      	movs	r0, #105	; 0x69
 23e660c:	f7ff fd25 	bl	23e605a <_Z16I2C_Device_Existh>
 23e6610:	b970      	cbnz	r0, 23e6630 <_Z14rtc_initializev+0x28>
    Output("RTC:I2C NOTFOUND");
 23e6612:	4821      	ldr	r0, [pc, #132]	; (23e6698 <_Z14rtc_initializev+0x90>)
 23e6614:	f7ff ff2a 	bl	23e646c <_Z6OutputPKc>
    SystemStatusBits |= SSB_RTC; // Turn on Bit
    delay (5000);
 23e6618:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_RTC; // Turn on Bit
 23e661c:	4a1f      	ldr	r2, [pc, #124]	; (23e669c <_Z14rtc_initializev+0x94>)
 23e661e:	6813      	ldr	r3, [r2, #0]
 23e6620:	f043 0304 	orr.w	r3, r3, #4
 23e6624:	6013      	str	r3, [r2, #0]
  else {
    Output ("RTC:NEEDS GSM TIME");
    delay (2000); // Give the user some time to see this problem.
  }
#endif
}
 23e6626:	b002      	add	sp, #8
 23e6628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay (2000); // Give the user some time to see this problem.
 23e662c:	f011 bb2a 	b.w	23f7c84 <delay>
  RTC_exists = true; // We have a clock hardware connected
 23e6630:	2401      	movs	r4, #1
  ab1805.setup(); // Initialize AB1805
 23e6632:	2101      	movs	r1, #1
 23e6634:	481a      	ldr	r0, [pc, #104]	; (23e66a0 <_Z14rtc_initializev+0x98>)
 23e6636:	f010 fb21 	bl	23f6c7c <_ZN6AB18055setupEb>
  RTC_exists = true; // We have a clock hardware connected
 23e663a:	4b1a      	ldr	r3, [pc, #104]	; (23e66a4 <_Z14rtc_initializev+0x9c>)
 23e663c:	701c      	strb	r4, [r3, #0]
  rtc_timestamp();
 23e663e:	f7ff ffb5 	bl	23e65ac <_Z13rtc_timestampv>
  sprintf (msgbuf, "%sR", timestamp); // Lets show the clock before we test it
 23e6642:	4a19      	ldr	r2, [pc, #100]	; (23e66a8 <_Z14rtc_initializev+0xa0>)
 23e6644:	4919      	ldr	r1, [pc, #100]	; (23e66ac <_Z14rtc_initializev+0xa4>)
 23e6646:	481a      	ldr	r0, [pc, #104]	; (23e66b0 <_Z14rtc_initializev+0xa8>)
 23e6648:	f011 fa3c 	bl	23f7ac4 <sprintf>
  Output (msgbuf);
 23e664c:	4818      	ldr	r0, [pc, #96]	; (23e66b0 <_Z14rtc_initializev+0xa8>)
 23e664e:	f7ff ff0d 	bl	23e646c <_Z6OutputPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
 23e6652:	4623      	mov	r3, r4
 23e6654:	4622      	mov	r2, r4
 23e6656:	2110      	movs	r1, #16
 23e6658:	4811      	ldr	r0, [pc, #68]	; (23e66a0 <_Z14rtc_initializev+0x98>)
 23e665a:	f010 f840 	bl	23f66de <_ZN6AB180510isBitClearEhhb>
  if (ab1805.isRTCSet() && (now.tm_year >= 2025) && (now.tm_year <= 2035)) {
 23e665e:	b1a8      	cbz	r0, 23e668c <_Z14rtc_initializev+0x84>
 23e6660:	f46f 62fd 	mvn.w	r2, #2024	; 0x7e8
 23e6664:	4b13      	ldr	r3, [pc, #76]	; (23e66b4 <_Z14rtc_initializev+0xac>)
 23e6666:	695b      	ldr	r3, [r3, #20]
 23e6668:	4413      	add	r3, r2
 23e666a:	2b0a      	cmp	r3, #10
 23e666c:	d80e      	bhi.n	23e668c <_Z14rtc_initializev+0x84>
    Output("RTC:VALID");
 23e666e:	4812      	ldr	r0, [pc, #72]	; (23e66b8 <_Z14rtc_initializev+0xb0>)
 23e6670:	f7ff fefc 	bl	23e646c <_Z6OutputPKc>
    ab1805.getRtcAsTime(t);
 23e6674:	4669      	mov	r1, sp
 23e6676:	480a      	ldr	r0, [pc, #40]	; (23e66a0 <_Z14rtc_initializev+0x98>)
 23e6678:	f010 f9ba 	bl	23f69f0 <_ZN6AB180512getRtcAsTimeERx>
    Time.setTime(t);        
 23e667c:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e6680:	f013 f806 	bl	23f9690 <_ZN9TimeClass7setTimeEx>
    RTC_valid = true;
 23e6684:	4b0d      	ldr	r3, [pc, #52]	; (23e66bc <_Z14rtc_initializev+0xb4>)
 23e6686:	701c      	strb	r4, [r3, #0]
}
 23e6688:	b002      	add	sp, #8
 23e668a:	bd10      	pop	{r4, pc}
    Output ("RTC:NEEDS GSM TIME");
 23e668c:	480c      	ldr	r0, [pc, #48]	; (23e66c0 <_Z14rtc_initializev+0xb8>)
 23e668e:	f7ff feed 	bl	23e646c <_Z6OutputPKc>
    delay (2000); // Give the user some time to see this problem.
 23e6692:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e6696:	e7c6      	b.n	23e6626 <_Z14rtc_initializev+0x1e>
 23e6698:	023fd243 	.word	0x023fd243
 23e669c:	1006a178 	.word	0x1006a178
 23e66a0:	1006a7ec 	.word	0x1006a7ec
 23e66a4:	1006a2ce 	.word	0x1006a2ce
 23e66a8:	1007abe0 	.word	0x1007abe0
 23e66ac:	023fd254 	.word	0x023fd254
 23e66b0:	1006f128 	.word	0x1006f128
 23e66b4:	1006f52c 	.word	0x1006f52c
 23e66b8:	023fd258 	.word	0x023fd258
 23e66bc:	1006a2cf 	.word	0x1006a2cf
 23e66c0:	023fd262 	.word	0x023fd262

023e66c4 <_Z15RTC_UpdateCheckv>:
/*
 * ======================================================================================================================
 * RTC_UpdateCheck() - Check if we need to Set or Update the RTC clock from the Cell Network   
 * ======================================================================================================================
 */
void RTC_UpdateCheck() {
 23e66c4:	b510      	push	{r4, lr}
  if (RTC_exists && Particle.connected()) { 
 23e66c6:	4b23      	ldr	r3, [pc, #140]	; (23e6754 <_Z15RTC_UpdateCheckv+0x90>)
 23e66c8:	781b      	ldrb	r3, [r3, #0]
 23e66ca:	b1bb      	cbz	r3, 23e66fc <_Z15RTC_UpdateCheckv+0x38>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23e66cc:	f011 f89c 	bl	23f7808 <spark_cloud_flag_connected>
 23e66d0:	b1a0      	cbz	r0, 23e66fc <_Z15RTC_UpdateCheckv+0x38>
    // We have a RTC and We have connected to the Cell network at some point
    if (!RTC_valid) {
 23e66d2:	4c21      	ldr	r4, [pc, #132]	; (23e6758 <_Z15RTC_UpdateCheckv+0x94>)
 23e66d4:	7823      	ldrb	r3, [r4, #0]
 23e66d6:	b993      	cbnz	r3, 23e66fe <_Z15RTC_UpdateCheckv+0x3a>
      // Set Uninitialized RTC from STC. Which has been set from the Cloud
#if (PLATFORM_ID == PLATFORM_MSOM)
      ab1805.setRtcFromSystem();
 23e66d8:	4820      	ldr	r0, [pc, #128]	; (23e675c <_Z15RTC_UpdateCheckv+0x98>)
 23e66da:	f010 fa2c 	bl	23f6b36 <_ZN6AB180516setRtcFromSystemEv>
#else
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
#endif
      Output("RTC:SET");
 23e66de:	4820      	ldr	r0, [pc, #128]	; (23e6760 <_Z15RTC_UpdateCheckv+0x9c>)
 23e66e0:	f7ff fec4 	bl	23e646c <_Z6OutputPKc>
      rtc_timestamp();
 23e66e4:	f7ff ff62 	bl	23e65ac <_Z13rtc_timestampv>
      sprintf (msgbuf, "%sR", timestamp);
 23e66e8:	4a1e      	ldr	r2, [pc, #120]	; (23e6764 <_Z15RTC_UpdateCheckv+0xa0>)
 23e66ea:	491f      	ldr	r1, [pc, #124]	; (23e6768 <_Z15RTC_UpdateCheckv+0xa4>)
 23e66ec:	481f      	ldr	r0, [pc, #124]	; (23e676c <_Z15RTC_UpdateCheckv+0xa8>)
 23e66ee:	f011 f9e9 	bl	23f7ac4 <sprintf>
      Output (msgbuf);
 23e66f2:	481e      	ldr	r0, [pc, #120]	; (23e676c <_Z15RTC_UpdateCheckv+0xa8>)
 23e66f4:	f7ff feba 	bl	23e646c <_Z6OutputPKc>
      RTC_valid = true;
 23e66f8:	2301      	movs	r3, #1
 23e66fa:	7023      	strb	r3, [r4, #0]
      sprintf (msgbuf, "%sR", timestamp);
      Output (msgbuf);
      LastTimeUpdate = System.millis();
    }
  }
 23e66fc:	bd10      	pop	{r4, pc}
    else if (LastTimeUpdate == 0){
 23e66fe:	4c1c      	ldr	r4, [pc, #112]	; (23e6770 <_Z15RTC_UpdateCheckv+0xac>)
 23e6700:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e6704:	4313      	orrs	r3, r2
 23e6706:	d114      	bne.n	23e6732 <_Z15RTC_UpdateCheckv+0x6e>
      ab1805.setRtcFromSystem();
 23e6708:	4814      	ldr	r0, [pc, #80]	; (23e675c <_Z15RTC_UpdateCheckv+0x98>)
 23e670a:	f010 fa14 	bl	23f6b36 <_ZN6AB180516setRtcFromSystemEv>
      Output("RTC:1ST SYNC");
 23e670e:	4819      	ldr	r0, [pc, #100]	; (23e6774 <_Z15RTC_UpdateCheckv+0xb0>)
      Output("RTC:2HR SYNC");
 23e6710:	f7ff feac 	bl	23e646c <_Z6OutputPKc>
      rtc_timestamp();
 23e6714:	f7ff ff4a 	bl	23e65ac <_Z13rtc_timestampv>
      sprintf (msgbuf, "%sR", timestamp);
 23e6718:	4a12      	ldr	r2, [pc, #72]	; (23e6764 <_Z15RTC_UpdateCheckv+0xa0>)
 23e671a:	4913      	ldr	r1, [pc, #76]	; (23e6768 <_Z15RTC_UpdateCheckv+0xa4>)
 23e671c:	4813      	ldr	r0, [pc, #76]	; (23e676c <_Z15RTC_UpdateCheckv+0xa8>)
 23e671e:	f011 f9d1 	bl	23f7ac4 <sprintf>
      Output (msgbuf);
 23e6722:	4812      	ldr	r0, [pc, #72]	; (23e676c <_Z15RTC_UpdateCheckv+0xa8>)
 23e6724:	f7ff fea2 	bl	23e646c <_Z6OutputPKc>
      LastTimeUpdate = System.millis();
 23e6728:	f7ff fb5c 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23e672c:	e9c4 0100 	strd	r0, r1, [r4]
 23e6730:	e7e4      	b.n	23e66fc <_Z15RTC_UpdateCheckv+0x38>
    else if ((System.millis() - LastTimeUpdate) >= 2*3600*1000) {  // It's been 2 hours since last RTC update
 23e6732:	f7ff fb57 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23e6736:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e673a:	1ac0      	subs	r0, r0, r3
 23e673c:	4b0e      	ldr	r3, [pc, #56]	; (23e6778 <_Z15RTC_UpdateCheckv+0xb4>)
 23e673e:	eb61 0102 	sbc.w	r1, r1, r2
 23e6742:	4298      	cmp	r0, r3
 23e6744:	f171 0300 	sbcs.w	r3, r1, #0
 23e6748:	d3d8      	bcc.n	23e66fc <_Z15RTC_UpdateCheckv+0x38>
      ab1805.setRtcFromSystem();
 23e674a:	4804      	ldr	r0, [pc, #16]	; (23e675c <_Z15RTC_UpdateCheckv+0x98>)
 23e674c:	f010 f9f3 	bl	23f6b36 <_ZN6AB180516setRtcFromSystemEv>
      Output("RTC:2HR SYNC");
 23e6750:	480a      	ldr	r0, [pc, #40]	; (23e677c <_Z15RTC_UpdateCheckv+0xb8>)
 23e6752:	e7dd      	b.n	23e6710 <_Z15RTC_UpdateCheckv+0x4c>
 23e6754:	1006a2ce 	.word	0x1006a2ce
 23e6758:	1006a2cf 	.word	0x1006a2cf
 23e675c:	1006a7ec 	.word	0x1006a7ec
 23e6760:	023fd275 	.word	0x023fd275
 23e6764:	1007abe0 	.word	0x1007abe0
 23e6768:	023fd254 	.word	0x023fd254
 23e676c:	1006f128 	.word	0x1006f128
 23e6770:	1006a2b8 	.word	0x1006a2b8
 23e6774:	023fd27d 	.word	0x023fd27d
 23e6778:	006ddd00 	.word	0x006ddd00
 23e677c:	023fd28a 	.word	0x023fd28a

023e6780 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>:
 *=======================================================================================================================
 * lora_relay_msg_free()
 *=======================================================================================================================
 */
void lora_relay_msg_free(LORA_MSG_RELAY_STR *m) {
  m->need2log = false;
 23e6780:	2100      	movs	r1, #0
  m->message_type = 0;
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e6782:	f44f 7280 	mov.w	r2, #256	; 0x100
  m->need2log = false;
 23e6786:	7001      	strb	r1, [r0, #0]
  m->message_type = 0;
 23e6788:	6041      	str	r1, [r0, #4]
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e678a:	3008      	adds	r0, #8
 23e678c:	f016 b98b 	b.w	23fcaa6 <memset>

023e6790 <_Z19lora_relay_need2logv>:
 *=======================================================================================================================
 * lora_relay_need2log() - Return true if we have a relay that needs to be logged
 *=======================================================================================================================
 */
bool lora_relay_need2log() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e6790:	2300      	movs	r3, #0
    if (lora_msg_relay[i].need2log) {
 23e6792:	f44f 7284 	mov.w	r2, #264	; 0x108
 23e6796:	4904      	ldr	r1, [pc, #16]	; (23e67a8 <_Z19lora_relay_need2logv+0x18>)
 23e6798:	fb02 f003 	mul.w	r0, r2, r3
 23e679c:	5c40      	ldrb	r0, [r0, r1]
 23e679e:	b910      	cbnz	r0, 23e67a6 <_Z19lora_relay_need2logv+0x16>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e67a0:	3301      	adds	r3, #1
 23e67a2:	2b40      	cmp	r3, #64	; 0x40
 23e67a4:	d1f8      	bne.n	23e6798 <_Z19lora_relay_need2logv+0x8>
      return (true);
    }
  }
  return(false);
}
 23e67a6:	4770      	bx	lr
 23e67a8:	1006aec0 	.word	0x1006aec0

023e67ac <_Z19lora_relay_notinusev>:
 *=======================================================================================================================
 * lora_relay_notinuse() - return first open spot or -1 if full
 *=======================================================================================================================
 */
int lora_relay_notinuse() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e67ac:	2000      	movs	r0, #0
    if (!lora_msg_relay[i].need2log) {
 23e67ae:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e67b2:	4a05      	ldr	r2, [pc, #20]	; (23e67c8 <_Z19lora_relay_notinusev+0x1c>)
 23e67b4:	fb03 f100 	mul.w	r1, r3, r0
 23e67b8:	5c89      	ldrb	r1, [r1, r2]
 23e67ba:	b121      	cbz	r1, 23e67c6 <_Z19lora_relay_notinusev+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e67bc:	3001      	adds	r0, #1
 23e67be:	2840      	cmp	r0, #64	; 0x40
 23e67c0:	d1f8      	bne.n	23e67b4 <_Z19lora_relay_notinusev+0x8>
      return (i);
    }
  }
  return(-1);
 23e67c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e67c6:	4770      	bx	lr
 23e67c8:	1006aec0 	.word	0x1006aec0

023e67cc <_Z23lora_relay_need2log_idxv>:
 *=======================================================================================================================
 * lora_relay_need2log_idx() - return first need2log spot or -1 if none
 *=======================================================================================================================
 */
int lora_relay_need2log_idx() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e67cc:	2000      	movs	r0, #0
    if (lora_msg_relay[i].need2log) {
 23e67ce:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e67d2:	4a05      	ldr	r2, [pc, #20]	; (23e67e8 <_Z23lora_relay_need2log_idxv+0x1c>)
 23e67d4:	fb03 f100 	mul.w	r1, r3, r0
 23e67d8:	5c89      	ldrb	r1, [r1, r2]
 23e67da:	b921      	cbnz	r1, 23e67e6 <_Z23lora_relay_need2log_idxv+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e67dc:	3001      	adds	r0, #1
 23e67de:	2840      	cmp	r0, #64	; 0x40
 23e67e0:	d1f8      	bne.n	23e67d4 <_Z23lora_relay_need2log_idxv+0x8>
      return (i);
    }
  }
  return(-1);
 23e67e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e67e6:	4770      	bx	lr
 23e67e8:	1006aec0 	.word	0x1006aec0

023e67ec <_Z22lora_device_initializev>:
/* 
 *=======================================================================================================================
 * lora_device_initialize()
 *=======================================================================================================================
 */
void lora_device_initialize() {
 23e67ec:	b538      	push	{r3, r4, r5, lr}
  if (LORA_exists) {
 23e67ee:	4b07      	ldr	r3, [pc, #28]	; (23e680c <_Z22lora_device_initializev+0x20>)
 23e67f0:	781b      	ldrb	r3, [r3, #0]
 23e67f2:	b14b      	cbz	r3, 23e6808 <_Z22lora_device_initializev+0x1c>
    // Init LoRa Relay Message structure
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e67f4:	2400      	movs	r4, #0
 23e67f6:	4d06      	ldr	r5, [pc, #24]	; (23e6810 <_Z22lora_device_initializev+0x24>)
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e67f8:	4628      	mov	r0, r5
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e67fa:	3401      	adds	r4, #1
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e67fc:	f7ff ffc0 	bl	23e6780 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e6800:	2c40      	cmp	r4, #64	; 0x40
 23e6802:	f505 7584 	add.w	r5, r5, #264	; 0x108
 23e6806:	d1f7      	bne.n	23e67f8 <_Z22lora_device_initializev+0xc>
    }
  }
}
 23e6808:	bd38      	pop	{r3, r4, r5, pc}
 23e680a:	bf00      	nop
 23e680c:	1006a2b1 	.word	0x1006a2b1
 23e6810:	1006aec0 	.word	0x1006aec0

023e6814 <_Z16lora_cf_validatev>:
/* 
 *=======================================================================================================================
 * lora_cf_validate() - Validate LoRa variables from CONFIG.TXT
 *=======================================================================================================================
 */
bool lora_cf_validate() {
 23e6814:	b570      	push	{r4, r5, r6, lr}
  if (cf_aes_pkey == NULL) {
 23e6816:	4b2a      	ldr	r3, [pc, #168]	; (23e68c0 <_Z16lora_cf_validatev+0xac>)
 23e6818:	681d      	ldr	r5, [r3, #0]
 23e681a:	b925      	cbnz	r5, 23e6826 <_Z16lora_cf_validatev+0x12>
    Output ("AES PKEY !SET");
 23e681c:	4829      	ldr	r0, [pc, #164]	; (23e68c4 <_Z16lora_cf_validatev+0xb0>)
    return (false);
  }
  else if (strlen (cf_aes_pkey) != 16) {
    Output ("AES PKEY !16 Bytes");
 23e681e:	f7ff fe25 	bl	23e646c <_Z6OutputPKc>
    return (false);    
 23e6822:	2000      	movs	r0, #0
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);

    Output ("LORA CFV OK");
    return (true);
  }
}
 23e6824:	bd70      	pop	{r4, r5, r6, pc}
  else if (strlen (cf_aes_pkey) != 16) {
 23e6826:	4628      	mov	r0, r5
 23e6828:	f7fe fcca 	bl	23e51c0 <strlen>
 23e682c:	2810      	cmp	r0, #16
 23e682e:	d001      	beq.n	23e6834 <_Z16lora_cf_validatev+0x20>
    Output ("AES PKEY !16 Bytes");
 23e6830:	4825      	ldr	r0, [pc, #148]	; (23e68c8 <_Z16lora_cf_validatev+0xb4>)
 23e6832:	e7f4      	b.n	23e681e <_Z16lora_cf_validatev+0xa>
  else if (cf_aes_myiv == 0) {
 23e6834:	4e25      	ldr	r6, [pc, #148]	; (23e68cc <_Z16lora_cf_validatev+0xb8>)
 23e6836:	6834      	ldr	r4, [r6, #0]
 23e6838:	b90c      	cbnz	r4, 23e683e <_Z16lora_cf_validatev+0x2a>
    Output ("AES MYIV !SET");
 23e683a:	4825      	ldr	r0, [pc, #148]	; (23e68d0 <_Z16lora_cf_validatev+0xbc>)
 23e683c:	e7ef      	b.n	23e681e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_txpower<5) || (cf_lora_txpower>23)) {
 23e683e:	4b25      	ldr	r3, [pc, #148]	; (23e68d4 <_Z16lora_cf_validatev+0xc0>)
 23e6840:	681b      	ldr	r3, [r3, #0]
 23e6842:	3b05      	subs	r3, #5
 23e6844:	2b12      	cmp	r3, #18
 23e6846:	d901      	bls.n	23e684c <_Z16lora_cf_validatev+0x38>
    Output ("LORA PWR ERR");
 23e6848:	4823      	ldr	r0, [pc, #140]	; (23e68d8 <_Z16lora_cf_validatev+0xc4>)
 23e684a:	e7e8      	b.n	23e681e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_freq!=915) && (cf_lora_freq!=866) && (cf_lora_freq!=433)) {
 23e684c:	f240 3293 	movw	r2, #915	; 0x393
 23e6850:	4b22      	ldr	r3, [pc, #136]	; (23e68dc <_Z16lora_cf_validatev+0xc8>)
 23e6852:	681b      	ldr	r3, [r3, #0]
 23e6854:	4293      	cmp	r3, r2
 23e6856:	d009      	beq.n	23e686c <_Z16lora_cf_validatev+0x58>
 23e6858:	f240 3262 	movw	r2, #866	; 0x362
 23e685c:	4293      	cmp	r3, r2
 23e685e:	d005      	beq.n	23e686c <_Z16lora_cf_validatev+0x58>
 23e6860:	f240 12b1 	movw	r2, #433	; 0x1b1
 23e6864:	4293      	cmp	r3, r2
 23e6866:	d001      	beq.n	23e686c <_Z16lora_cf_validatev+0x58>
    Output ("LORA FREQ ERR");
 23e6868:	481d      	ldr	r0, [pc, #116]	; (23e68e0 <_Z16lora_cf_validatev+0xcc>)
 23e686a:	e7d8      	b.n	23e681e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_unitid<0) || (cf_lora_unitid>254)) {
 23e686c:	4b1d      	ldr	r3, [pc, #116]	; (23e68e4 <_Z16lora_cf_validatev+0xd0>)
 23e686e:	681b      	ldr	r3, [r3, #0]
 23e6870:	2bfe      	cmp	r3, #254	; 0xfe
 23e6872:	d901      	bls.n	23e6878 <_Z16lora_cf_validatev+0x64>
    Output ("LORA ADDR ERR");
 23e6874:	481c      	ldr	r0, [pc, #112]	; (23e68e8 <_Z16lora_cf_validatev+0xd4>)
 23e6876:	e7d2      	b.n	23e681e <_Z16lora_cf_validatev+0xa>
    memcpy ((char *)AES_KEY, cf_aes_pkey, 16);
 23e6878:	462b      	mov	r3, r5
 23e687a:	4a1c      	ldr	r2, [pc, #112]	; (23e68ec <_Z16lora_cf_validatev+0xd8>)
 23e687c:	f105 0110 	add.w	r1, r5, #16
 23e6880:	f853 0b04 	ldr.w	r0, [r3], #4
 23e6884:	428b      	cmp	r3, r1
 23e6886:	f842 0b04 	str.w	r0, [r2], #4
 23e688a:	d1f9      	bne.n	23e6880 <_Z16lora_cf_validatev+0x6c>
    sprintf(msgbuf, "AES_KEY[%s]", cf_aes_pkey); Output (msgbuf);
 23e688c:	462a      	mov	r2, r5
 23e688e:	4918      	ldr	r1, [pc, #96]	; (23e68f0 <_Z16lora_cf_validatev+0xdc>)
 23e6890:	4818      	ldr	r0, [pc, #96]	; (23e68f4 <_Z16lora_cf_validatev+0xe0>)
 23e6892:	f011 f917 	bl	23f7ac4 <sprintf>
 23e6896:	4817      	ldr	r0, [pc, #92]	; (23e68f4 <_Z16lora_cf_validatev+0xe0>)
 23e6898:	f7ff fde8 	bl	23e646c <_Z6OutputPKc>
    AES_MYIV=cf_aes_myiv;
 23e689c:	6832      	ldr	r2, [r6, #0]
 23e689e:	4916      	ldr	r1, [pc, #88]	; (23e68f8 <_Z16lora_cf_validatev+0xe4>)
 23e68a0:	17d3      	asrs	r3, r2, #31
 23e68a2:	e9c1 2300 	strd	r2, r3, [r1]
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);
 23e68a6:	4813      	ldr	r0, [pc, #76]	; (23e68f4 <_Z16lora_cf_validatev+0xe0>)
 23e68a8:	4914      	ldr	r1, [pc, #80]	; (23e68fc <_Z16lora_cf_validatev+0xe8>)
 23e68aa:	f011 f90b 	bl	23f7ac4 <sprintf>
 23e68ae:	4811      	ldr	r0, [pc, #68]	; (23e68f4 <_Z16lora_cf_validatev+0xe0>)
 23e68b0:	f7ff fddc 	bl	23e646c <_Z6OutputPKc>
    Output ("LORA CFV OK");
 23e68b4:	4812      	ldr	r0, [pc, #72]	; (23e6900 <_Z16lora_cf_validatev+0xec>)
 23e68b6:	f7ff fdd9 	bl	23e646c <_Z6OutputPKc>
    return (true);
 23e68ba:	2001      	movs	r0, #1
 23e68bc:	e7b2      	b.n	23e6824 <_Z16lora_cf_validatev+0x10>
 23e68be:	bf00      	nop
 23e68c0:	1006ac7c 	.word	0x1006ac7c
 23e68c4:	023fd297 	.word	0x023fd297
 23e68c8:	023fd2a5 	.word	0x023fd2a5
 23e68cc:	1006ac78 	.word	0x1006ac78
 23e68d0:	023fd2b8 	.word	0x023fd2b8
 23e68d4:	1006a194 	.word	0x1006a194
 23e68d8:	023fd2c6 	.word	0x023fd2c6
 23e68dc:	1006a190 	.word	0x1006a190
 23e68e0:	023fd2d3 	.word	0x023fd2d3
 23e68e4:	1006a198 	.word	0x1006a198
 23e68e8:	023fd2e1 	.word	0x023fd2e1
 23e68ec:	1006a264 	.word	0x1006a264
 23e68f0:	023fd2ef 	.word	0x023fd2ef
 23e68f4:	1006f128 	.word	0x1006f128
 23e68f8:	1006a278 	.word	0x1006a278
 23e68fc:	023fd2fb 	.word	0x023fd2fb
 23e6900:	023fd308 	.word	0x023fd308

023e6904 <_Z16get_Bosch_ChipIDh>:
 *   Chip ID BME280 = 0x60 temp, pressure, humidity - I2C ADDRESS 0x77  (SD0 to GND = 0x76)  Register 0xE0 = Reset
 *   Chip ID BMP388 = 0x50 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *   Chip ID BMP390 = 0x60 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *=======================================================================================================================
 */
byte get_Bosch_ChipID (byte address) {
 23e6904:	b570      	push	{r4, r5, r6, lr}
 23e6906:	4605      	mov	r5, r0
  byte chip_id = 0;
  byte error;

  Output ("get_Bosch_ChipID()");
 23e6908:	4848      	ldr	r0, [pc, #288]	; (23e6a2c <_Z16get_Bosch_ChipIDh+0x128>)
 23e690a:	f7ff fdaf 	bl	23e646c <_Z6OutputPKc>

  // Important! Need to check the 0x00 register first. Doing a 0x0D (not chip id loaction) on a bmp388 
  // will return a value that could match one of the IDs 

  // Check Register 0x00
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0x00);
 23e690e:	462a      	mov	r2, r5
 23e6910:	2300      	movs	r3, #0
 23e6912:	4947      	ldr	r1, [pc, #284]	; (23e6a30 <_Z16get_Bosch_ChipIDh+0x12c>)
 23e6914:	4847      	ldr	r0, [pc, #284]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e6916:	f011 f8d5 	bl	23f7ac4 <sprintf>
  Output (msgbuf);
 23e691a:	4846      	ldr	r0, [pc, #280]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e691c:	f7ff fda6 	bl	23e646c <_Z6OutputPKc>
  Wire.begin();
 23e6920:	f013 fae4 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6924:	f011 ff72 	bl	23f880c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e6928:	f013 fae0 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e692c:	4629      	mov	r1, r5
 23e692e:	f011 ff97 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x00);  // BM3 CHIPID REGISTER
 23e6932:	f013 fadb 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6936:	2100      	movs	r1, #0
 23e6938:	f7ff fa0c 	bl	23e5d54 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e693c:	f013 fad6 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6940:	f011 ff99 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e6944:	4602      	mov	r2, r0
 23e6946:	b370      	cbz	r0, 23e69a6 <_Z16get_Bosch_ChipIDh+0xa2>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e6948:	493b      	ldr	r1, [pc, #236]	; (23e6a38 <_Z16get_Bosch_ChipIDh+0x134>)
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
      Output (msgbuf);
      return (chip_id); // Found a Sensor!   
    }
    else {
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e694a:	483a      	ldr	r0, [pc, #232]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e694c:	f011 f8ba 	bl	23f7ac4 <sprintf>
      Output (msgbuf);      
    }
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
 23e6950:	4838      	ldr	r0, [pc, #224]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e6952:	f7ff fd8b 	bl	23e646c <_Z6OutputPKc>
  }

  // Check Register 0xD0
  chip_id = 0;
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0xD0);
 23e6956:	23d0      	movs	r3, #208	; 0xd0
 23e6958:	462a      	mov	r2, r5
 23e695a:	4935      	ldr	r1, [pc, #212]	; (23e6a30 <_Z16get_Bosch_ChipIDh+0x12c>)
 23e695c:	4835      	ldr	r0, [pc, #212]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e695e:	f011 f8b1 	bl	23f7ac4 <sprintf>
  Output (msgbuf);
 23e6962:	4834      	ldr	r0, [pc, #208]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e6964:	f7ff fd82 	bl	23e646c <_Z6OutputPKc>
  Wire.begin();
 23e6968:	f013 fac0 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e696c:	f011 ff4e 	bl	23f880c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e6970:	f013 fabc 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6974:	4629      	mov	r1, r5
 23e6976:	f011 ff73 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0xD0);  // BM2 CHIPID REGISTER
 23e697a:	f013 fab7 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e697e:	21d0      	movs	r1, #208	; 0xd0
 23e6980:	f7ff f9e8 	bl	23e5d54 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e6984:	f013 fab2 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6988:	f011 ff75 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e698c:	2800      	cmp	r0, #0
 23e698e:	d031      	beq.n	23e69f4 <_Z16get_Bosch_ChipIDh+0xf0>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e6990:	4602      	mov	r2, r0
 23e6992:	4929      	ldr	r1, [pc, #164]	; (23e6a38 <_Z16get_Bosch_ChipIDh+0x134>)
 23e6994:	4827      	ldr	r0, [pc, #156]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e6996:	f011 f895 	bl	23f7ac4 <sprintf>
    Output (msgbuf);
 23e699a:	4826      	ldr	r0, [pc, #152]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e699c:	f7ff fd66 	bl	23e646c <_Z6OutputPKc>
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
  }
  return(0);
 23e69a0:	2400      	movs	r4, #0
}
 23e69a2:	4620      	mov	r0, r4
 23e69a4:	bd70      	pop	{r4, r5, r6, pc}
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e69a6:	f013 faa1 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e69aa:	2201      	movs	r2, #1
 23e69ac:	4629      	mov	r1, r5
 23e69ae:	f011 ff54 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
 23e69b2:	b1d0      	cbz	r0, 23e69ea <_Z16get_Bosch_ChipIDh+0xe6>
    chip_id = Wire.read();
 23e69b4:	f013 fa9a 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e69b8:	6803      	ldr	r3, [r0, #0]
 23e69ba:	695b      	ldr	r3, [r3, #20]
 23e69bc:	4798      	blx	r3
 23e69be:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e69c0:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e69c2:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e69c4:	d101      	bne.n	23e69ca <_Z16get_Bosch_ChipIDh+0xc6>
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e69c6:	491d      	ldr	r1, [pc, #116]	; (23e6a3c <_Z16get_Bosch_ChipIDh+0x138>)
 23e69c8:	e002      	b.n	23e69d0 <_Z16get_Bosch_ChipIDh+0xcc>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e69ca:	2c50      	cmp	r4, #80	; 0x50
 23e69cc:	d107      	bne.n	23e69de <_Z16get_Bosch_ChipIDh+0xda>
      sprintf (msgbuf, "  CHIPID:%02X BMP388", chip_id);
 23e69ce:	491c      	ldr	r1, [pc, #112]	; (23e6a40 <_Z16get_Bosch_ChipIDh+0x13c>)
 23e69d0:	4818      	ldr	r0, [pc, #96]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e69d2:	f011 f877 	bl	23f7ac4 <sprintf>
    Output (msgbuf);
 23e69d6:	4817      	ldr	r0, [pc, #92]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e69d8:	f7ff fd48 	bl	23e646c <_Z6OutputPKc>
 23e69dc:	e7e1      	b.n	23e69a2 <_Z16get_Bosch_ChipIDh+0x9e>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e69de:	2c60      	cmp	r4, #96	; 0x60
 23e69e0:	d101      	bne.n	23e69e6 <_Z16get_Bosch_ChipIDh+0xe2>
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
 23e69e2:	4918      	ldr	r1, [pc, #96]	; (23e6a44 <_Z16get_Bosch_ChipIDh+0x140>)
 23e69e4:	e7f4      	b.n	23e69d0 <_Z16get_Bosch_ChipIDh+0xcc>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e69e6:	4918      	ldr	r1, [pc, #96]	; (23e6a48 <_Z16get_Bosch_ChipIDh+0x144>)
 23e69e8:	e7af      	b.n	23e694a <_Z16get_Bosch_ChipIDh+0x46>
    sprintf (msgbuf, "  ERR_RF:0");
 23e69ea:	4918      	ldr	r1, [pc, #96]	; (23e6a4c <_Z16get_Bosch_ChipIDh+0x148>)
 23e69ec:	4811      	ldr	r0, [pc, #68]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e69ee:	f016 f8cf 	bl	23fcb90 <strcpy>
 23e69f2:	e7ad      	b.n	23e6950 <_Z16get_Bosch_ChipIDh+0x4c>
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e69f4:	f013 fa7a 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e69f8:	2201      	movs	r2, #1
 23e69fa:	4629      	mov	r1, r5
 23e69fc:	f011 ff2d 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
 23e6a00:	4604      	mov	r4, r0
 23e6a02:	b170      	cbz	r0, 23e6a22 <_Z16get_Bosch_ChipIDh+0x11e>
    chip_id = Wire.read(); 
 23e6a04:	f013 fa72 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6a08:	6803      	ldr	r3, [r0, #0]
 23e6a0a:	695b      	ldr	r3, [r3, #20]
 23e6a0c:	4798      	blx	r3
 23e6a0e:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e6a10:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e6a12:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e6a14:	d0d7      	beq.n	23e69c6 <_Z16get_Bosch_ChipIDh+0xc2>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e6a16:	2c50      	cmp	r4, #80	; 0x50
 23e6a18:	d0d9      	beq.n	23e69ce <_Z16get_Bosch_ChipIDh+0xca>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e6a1a:	2c60      	cmp	r4, #96	; 0x60
 23e6a1c:	d0e1      	beq.n	23e69e2 <_Z16get_Bosch_ChipIDh+0xde>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e6a1e:	490a      	ldr	r1, [pc, #40]	; (23e6a48 <_Z16get_Bosch_ChipIDh+0x144>)
 23e6a20:	e7b8      	b.n	23e6994 <_Z16get_Bosch_ChipIDh+0x90>
    sprintf (msgbuf, "  ERR_RF:0");
 23e6a22:	490a      	ldr	r1, [pc, #40]	; (23e6a4c <_Z16get_Bosch_ChipIDh+0x148>)
 23e6a24:	4803      	ldr	r0, [pc, #12]	; (23e6a34 <_Z16get_Bosch_ChipIDh+0x130>)
 23e6a26:	f016 f8b3 	bl	23fcb90 <strcpy>
 23e6a2a:	e7d4      	b.n	23e69d6 <_Z16get_Bosch_ChipIDh+0xd2>
 23e6a2c:	023fd314 	.word	0x023fd314
 23e6a30:	023fd327 	.word	0x023fd327
 23e6a34:	1006f128 	.word	0x1006f128
 23e6a38:	023fd33b 	.word	0x023fd33b
 23e6a3c:	023fd347 	.word	0x023fd347
 23e6a40:	023fd35c 	.word	0x023fd35c
 23e6a44:	023fd371 	.word	0x023fd371
 23e6a48:	023fd387 	.word	0x023fd387
 23e6a4c:	023fd39d 	.word	0x023fd39d

023e6a50 <_Z14bmx_initializev>:
/* 
 *=======================================================================================================================
 * bmx_initialize() - Bosch sensor initialize
 *=======================================================================================================================
 */
void bmx_initialize() {
 23e6a50:	b538      	push	{r3, r4, r5, lr}
  Output("BMX:INIT");
 23e6a52:	486e      	ldr	r0, [pc, #440]	; (23e6c0c <_Z14bmx_initializev+0x1bc>)
 23e6a54:	f7ff fd0a 	bl	23e646c <_Z6OutputPKc>
  
  // 1st Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e6a58:	2077      	movs	r0, #119	; 0x77
 23e6a5a:	f7ff ff53 	bl	23e6904 <_Z16get_Bosch_ChipIDh>
 23e6a5e:	4b6c      	ldr	r3, [pc, #432]	; (23e6c10 <_Z14bmx_initializev+0x1c0>)

  switch (BMX_1_chip_id) {
 23e6a60:	2858      	cmp	r0, #88	; 0x58
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e6a62:	4602      	mov	r2, r0
 23e6a64:	4c6b      	ldr	r4, [pc, #428]	; (23e6c14 <_Z14bmx_initializev+0x1c4>)
 23e6a66:	7018      	strb	r0, [r3, #0]
  switch (BMX_1_chip_id) {
 23e6a68:	d011      	beq.n	23e6a8e <_Z14bmx_initializev+0x3e>
 23e6a6a:	2860      	cmp	r0, #96	; 0x60
 23e6a6c:	d046      	beq.n	23e6afc <_Z14bmx_initializev+0xac>
 23e6a6e:	2850      	cmp	r0, #80	; 0x50
 23e6a70:	d176      	bne.n	23e6b60 <_Z14bmx_initializev+0x110>
        float p = bme1.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e6a72:	f013 fa3b 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6a76:	2177      	movs	r1, #119	; 0x77
 23e6a78:	4602      	mov	r2, r0
 23e6a7a:	4867      	ldr	r0, [pc, #412]	; (23e6c18 <_Z14bmx_initializev+0x1c8>)
 23e6a7c:	f009 f846 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6a80:	4b66      	ldr	r3, [pc, #408]	; (23e6c1c <_Z14bmx_initializev+0x1cc>)
 23e6a82:	2800      	cmp	r0, #0
 23e6a84:	d165      	bne.n	23e6b52 <_Z14bmx_initializev+0x102>
        msgp = (char *) "BM31 ERR";
 23e6a86:	4a66      	ldr	r2, [pc, #408]	; (23e6c20 <_Z14bmx_initializev+0x1d0>)
        BMX_1_exists = false;
 23e6a88:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM31 ERR";
 23e6a8a:	6022      	str	r2, [r4, #0]
        BMX_1_exists = false;
 23e6a8c:	e008      	b.n	23e6aa0 <_Z14bmx_initializev+0x50>
      if (!bmp1.begin(BMX_ADDRESS_1)) { 
 23e6a8e:	2177      	movs	r1, #119	; 0x77
 23e6a90:	4864      	ldr	r0, [pc, #400]	; (23e6c24 <_Z14bmx_initializev+0x1d4>)
 23e6a92:	f008 fe39 	bl	23ef708 <_ZN15Adafruit_BMP2805beginEhh>
 23e6a96:	4a61      	ldr	r2, [pc, #388]	; (23e6c1c <_Z14bmx_initializev+0x1cc>)
 23e6a98:	b940      	cbnz	r0, 23e6aac <_Z14bmx_initializev+0x5c>
        msgp = (char *) "BMP1 ERR";
 23e6a9a:	4b63      	ldr	r3, [pc, #396]	; (23e6c28 <_Z14bmx_initializev+0x1d8>)
        BMX_1_exists = false;
 23e6a9c:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP1 ERR";
 23e6a9e:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e6aa0:	4a62      	ldr	r2, [pc, #392]	; (23e6c2c <_Z14bmx_initializev+0x1dc>)
 23e6aa2:	6813      	ldr	r3, [r2, #0]
 23e6aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e6aa8:	6013      	str	r3, [r2, #0]
 23e6aaa:	e008      	b.n	23e6abe <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e6aac:	2301      	movs	r3, #1
 23e6aae:	7013      	strb	r3, [r2, #0]
        BMX_1_type = BMX_TYPE_BMP280;
 23e6ab0:	4a5f      	ldr	r2, [pc, #380]	; (23e6c30 <_Z14bmx_initializev+0x1e0>)
        float p = bmp1.readPressure();
 23e6ab2:	485c      	ldr	r0, [pc, #368]	; (23e6c24 <_Z14bmx_initializev+0x1d4>)
        BMX_1_type = BMX_TYPE_BMP280;
 23e6ab4:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP1 OK";
 23e6ab6:	4b5f      	ldr	r3, [pc, #380]	; (23e6c34 <_Z14bmx_initializev+0x1e4>)
 23e6ab8:	6023      	str	r3, [r4, #0]
        float p = bmp1.readPressure();
 23e6aba:	f008 feaf 	bl	23ef81c <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_1 NF";
    break;
  }
  Output (msgp);
 23e6abe:	6820      	ldr	r0, [r4, #0]
 23e6ac0:	f7ff fcd4 	bl	23e646c <_Z6OutputPKc>

  // 2nd Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e6ac4:	2076      	movs	r0, #118	; 0x76
 23e6ac6:	f7ff ff1d 	bl	23e6904 <_Z16get_Bosch_ChipIDh>
 23e6aca:	4b5b      	ldr	r3, [pc, #364]	; (23e6c38 <_Z14bmx_initializev+0x1e8>)
  switch (BMX_2_chip_id) {
 23e6acc:	2858      	cmp	r0, #88	; 0x58
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e6ace:	4602      	mov	r2, r0
 23e6ad0:	7018      	strb	r0, [r3, #0]
  switch (BMX_2_chip_id) {
 23e6ad2:	d048      	beq.n	23e6b66 <_Z14bmx_initializev+0x116>
 23e6ad4:	2860      	cmp	r0, #96	; 0x60
 23e6ad6:	d063      	beq.n	23e6ba0 <_Z14bmx_initializev+0x150>
 23e6ad8:	2850      	cmp	r0, #80	; 0x50
 23e6ada:	f040 8093 	bne.w	23e6c04 <_Z14bmx_initializev+0x1b4>
        float p = bme2.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e6ade:	f013 fa05 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6ae2:	2176      	movs	r1, #118	; 0x76
 23e6ae4:	4602      	mov	r2, r0
 23e6ae6:	4855      	ldr	r0, [pc, #340]	; (23e6c3c <_Z14bmx_initializev+0x1ec>)
 23e6ae8:	f009 f810 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6aec:	4b54      	ldr	r3, [pc, #336]	; (23e6c40 <_Z14bmx_initializev+0x1f0>)
 23e6aee:	2800      	cmp	r0, #0
 23e6af0:	f040 8081 	bne.w	23e6bf6 <_Z14bmx_initializev+0x1a6>
        msgp = (char *) "BM32 ERR";
 23e6af4:	4a53      	ldr	r2, [pc, #332]	; (23e6c44 <_Z14bmx_initializev+0x1f4>)
        BMX_2_exists = false;
 23e6af6:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM32 ERR";
 23e6af8:	6022      	str	r2, [r4, #0]
        BMX_2_exists = false;
 23e6afa:	e03d      	b.n	23e6b78 <_Z14bmx_initializev+0x128>
      if (!bme1.begin(BMX_ADDRESS_1)) { 
 23e6afc:	f013 f9f6 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6b00:	2177      	movs	r1, #119	; 0x77
 23e6b02:	4602      	mov	r2, r0
 23e6b04:	4850      	ldr	r0, [pc, #320]	; (23e6c48 <_Z14bmx_initializev+0x1f8>)
 23e6b06:	f008 fa0a 	bl	23eef1e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e6b0a:	4d44      	ldr	r5, [pc, #272]	; (23e6c1c <_Z14bmx_initializev+0x1cc>)
 23e6b0c:	b9b0      	cbnz	r0, 23e6b3c <_Z14bmx_initializev+0xec>
        if (!bm31.begin_I2C(BMX_ADDRESS_1)) {  // Perhaps it is a BMP390
 23e6b0e:	f013 f9ed 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6b12:	2177      	movs	r1, #119	; 0x77
 23e6b14:	4602      	mov	r2, r0
 23e6b16:	4840      	ldr	r0, [pc, #256]	; (23e6c18 <_Z14bmx_initializev+0x1c8>)
 23e6b18:	f008 fff8 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6b1c:	b918      	cbnz	r0, 23e6b26 <_Z14bmx_initializev+0xd6>
          msgp = (char *) "BMX1 ERR";
 23e6b1e:	4b4b      	ldr	r3, [pc, #300]	; (23e6c4c <_Z14bmx_initializev+0x1fc>)
          BMX_1_exists = false;
 23e6b20:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX1 ERR";
 23e6b22:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e6b24:	e7bc      	b.n	23e6aa0 <_Z14bmx_initializev+0x50>
          BMX_1_exists = true;
 23e6b26:	2301      	movs	r3, #1
          BMX_1_type = BMX_TYPE_BMP390;
 23e6b28:	2204      	movs	r2, #4
          BMX_1_exists = true;
 23e6b2a:	702b      	strb	r3, [r5, #0]
          BMX_1_type = BMX_TYPE_BMP390;
 23e6b2c:	4b40      	ldr	r3, [pc, #256]	; (23e6c30 <_Z14bmx_initializev+0x1e0>)
 23e6b2e:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_1 OK"; 
 23e6b30:	4b47      	ldr	r3, [pc, #284]	; (23e6c50 <_Z14bmx_initializev+0x200>)
        float p = bm31.readPressure();
 23e6b32:	4839      	ldr	r0, [pc, #228]	; (23e6c18 <_Z14bmx_initializev+0x1c8>)
        msgp = (char *) "BM31 OK";
 23e6b34:	6023      	str	r3, [r4, #0]
        float p = bm31.readPressure();
 23e6b36:	f009 f87c 	bl	23efc32 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e6b3a:	e7c0      	b.n	23e6abe <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e6b3c:	2301      	movs	r3, #1
        BMX_1_type = BMX_TYPE_BME280;
 23e6b3e:	2202      	movs	r2, #2
        BMX_1_exists = true;
 23e6b40:	702b      	strb	r3, [r5, #0]
        BMX_1_type = BMX_TYPE_BME280;
 23e6b42:	4b3b      	ldr	r3, [pc, #236]	; (23e6c30 <_Z14bmx_initializev+0x1e0>)
        float p = bme1.readPressure();
 23e6b44:	4840      	ldr	r0, [pc, #256]	; (23e6c48 <_Z14bmx_initializev+0x1f8>)
        BMX_1_type = BMX_TYPE_BME280;
 23e6b46:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_1 OK";
 23e6b48:	4b42      	ldr	r3, [pc, #264]	; (23e6c54 <_Z14bmx_initializev+0x204>)
 23e6b4a:	6023      	str	r3, [r4, #0]
        float p = bme1.readPressure();
 23e6b4c:	f008 fa1e 	bl	23eef8c <_ZN15Adafruit_BME28012readPressureEv>
 23e6b50:	e7b5      	b.n	23e6abe <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e6b52:	2201      	movs	r2, #1
 23e6b54:	701a      	strb	r2, [r3, #0]
        BMX_1_type = BMX_TYPE_BMP388;
 23e6b56:	2203      	movs	r2, #3
 23e6b58:	4b35      	ldr	r3, [pc, #212]	; (23e6c30 <_Z14bmx_initializev+0x1e0>)
 23e6b5a:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM31 OK";
 23e6b5c:	4b3e      	ldr	r3, [pc, #248]	; (23e6c58 <_Z14bmx_initializev+0x208>)
 23e6b5e:	e7e8      	b.n	23e6b32 <_Z14bmx_initializev+0xe2>
      msgp = (char *) "BMX_1 NF";
 23e6b60:	4b3e      	ldr	r3, [pc, #248]	; (23e6c5c <_Z14bmx_initializev+0x20c>)
 23e6b62:	6023      	str	r3, [r4, #0]
    break;
 23e6b64:	e7ab      	b.n	23e6abe <_Z14bmx_initializev+0x6e>
      if (!bmp2.begin(BMX_ADDRESS_2)) { 
 23e6b66:	2176      	movs	r1, #118	; 0x76
 23e6b68:	483d      	ldr	r0, [pc, #244]	; (23e6c60 <_Z14bmx_initializev+0x210>)
 23e6b6a:	f008 fdcd 	bl	23ef708 <_ZN15Adafruit_BMP2805beginEhh>
 23e6b6e:	4a34      	ldr	r2, [pc, #208]	; (23e6c40 <_Z14bmx_initializev+0x1f0>)
 23e6b70:	b940      	cbnz	r0, 23e6b84 <_Z14bmx_initializev+0x134>
        msgp = (char *) "BMP2 ERR";
 23e6b72:	4b3c      	ldr	r3, [pc, #240]	; (23e6c64 <_Z14bmx_initializev+0x214>)
        BMX_2_exists = false;
 23e6b74:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP2 ERR";
 23e6b76:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e6b78:	4a2c      	ldr	r2, [pc, #176]	; (23e6c2c <_Z14bmx_initializev+0x1dc>)
 23e6b7a:	6813      	ldr	r3, [r2, #0]
 23e6b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e6b80:	6013      	str	r3, [r2, #0]
 23e6b82:	e008      	b.n	23e6b96 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e6b84:	2301      	movs	r3, #1
 23e6b86:	7013      	strb	r3, [r2, #0]
        BMX_2_type = BMX_TYPE_BMP280;
 23e6b88:	4a37      	ldr	r2, [pc, #220]	; (23e6c68 <_Z14bmx_initializev+0x218>)
        float p = bmp2.readPressure();
 23e6b8a:	4835      	ldr	r0, [pc, #212]	; (23e6c60 <_Z14bmx_initializev+0x210>)
        BMX_2_type = BMX_TYPE_BMP280;
 23e6b8c:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP2 OK";
 23e6b8e:	4b37      	ldr	r3, [pc, #220]	; (23e6c6c <_Z14bmx_initializev+0x21c>)
 23e6b90:	6023      	str	r3, [r4, #0]
        float p = bmp2.readPressure();
 23e6b92:	f008 fe43 	bl	23ef81c <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_2 NF";
    break;
  }
  Output (msgp);
 23e6b96:	6820      	ldr	r0, [r4, #0]
}
 23e6b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e6b9c:	f7ff bc66 	b.w	23e646c <_Z6OutputPKc>
      if (!bme2.begin(BMX_ADDRESS_2)) { 
 23e6ba0:	f013 f9a4 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6ba4:	2176      	movs	r1, #118	; 0x76
 23e6ba6:	4602      	mov	r2, r0
 23e6ba8:	4831      	ldr	r0, [pc, #196]	; (23e6c70 <_Z14bmx_initializev+0x220>)
 23e6baa:	f008 f9b8 	bl	23eef1e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e6bae:	4d24      	ldr	r5, [pc, #144]	; (23e6c40 <_Z14bmx_initializev+0x1f0>)
 23e6bb0:	b9b0      	cbnz	r0, 23e6be0 <_Z14bmx_initializev+0x190>
        if (!bm32.begin_I2C(BMX_ADDRESS_2)) {  // Perhaps it is a BMP390
 23e6bb2:	f013 f99b 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6bb6:	2176      	movs	r1, #118	; 0x76
 23e6bb8:	4602      	mov	r2, r0
 23e6bba:	4820      	ldr	r0, [pc, #128]	; (23e6c3c <_Z14bmx_initializev+0x1ec>)
 23e6bbc:	f008 ffa6 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6bc0:	b918      	cbnz	r0, 23e6bca <_Z14bmx_initializev+0x17a>
          msgp = (char *) "BMX2 ERR";
 23e6bc2:	4b2c      	ldr	r3, [pc, #176]	; (23e6c74 <_Z14bmx_initializev+0x224>)
          BMX_2_exists = false;
 23e6bc4:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX2 ERR";
 23e6bc6:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e6bc8:	e7d6      	b.n	23e6b78 <_Z14bmx_initializev+0x128>
          BMX_2_exists = true;
 23e6bca:	2301      	movs	r3, #1
          BMX_2_type = BMX_TYPE_BMP390;
 23e6bcc:	2204      	movs	r2, #4
          BMX_2_exists = true;
 23e6bce:	702b      	strb	r3, [r5, #0]
          BMX_2_type = BMX_TYPE_BMP390;
 23e6bd0:	4b25      	ldr	r3, [pc, #148]	; (23e6c68 <_Z14bmx_initializev+0x218>)
 23e6bd2:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_2 OK"; 
 23e6bd4:	4b28      	ldr	r3, [pc, #160]	; (23e6c78 <_Z14bmx_initializev+0x228>)
        float p = bm32.readPressure();
 23e6bd6:	4819      	ldr	r0, [pc, #100]	; (23e6c3c <_Z14bmx_initializev+0x1ec>)
        msgp = (char *) "BM32 OK";
 23e6bd8:	6023      	str	r3, [r4, #0]
        float p = bm32.readPressure();
 23e6bda:	f009 f82a 	bl	23efc32 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e6bde:	e7da      	b.n	23e6b96 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e6be0:	2301      	movs	r3, #1
        BMX_2_type = BMX_TYPE_BME280;
 23e6be2:	2202      	movs	r2, #2
        BMX_2_exists = true;
 23e6be4:	702b      	strb	r3, [r5, #0]
        BMX_2_type = BMX_TYPE_BME280;
 23e6be6:	4b20      	ldr	r3, [pc, #128]	; (23e6c68 <_Z14bmx_initializev+0x218>)
        float p = bme2.readPressure();
 23e6be8:	4821      	ldr	r0, [pc, #132]	; (23e6c70 <_Z14bmx_initializev+0x220>)
        BMX_2_type = BMX_TYPE_BME280;
 23e6bea:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_2 OK";
 23e6bec:	4b23      	ldr	r3, [pc, #140]	; (23e6c7c <_Z14bmx_initializev+0x22c>)
 23e6bee:	6023      	str	r3, [r4, #0]
        float p = bme2.readPressure();
 23e6bf0:	f008 f9cc 	bl	23eef8c <_ZN15Adafruit_BME28012readPressureEv>
 23e6bf4:	e7cf      	b.n	23e6b96 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e6bf6:	2201      	movs	r2, #1
 23e6bf8:	701a      	strb	r2, [r3, #0]
        BMX_2_type = BMX_TYPE_BMP388;
 23e6bfa:	2203      	movs	r2, #3
 23e6bfc:	4b1a      	ldr	r3, [pc, #104]	; (23e6c68 <_Z14bmx_initializev+0x218>)
 23e6bfe:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM32 OK";
 23e6c00:	4b1f      	ldr	r3, [pc, #124]	; (23e6c80 <_Z14bmx_initializev+0x230>)
 23e6c02:	e7e8      	b.n	23e6bd6 <_Z14bmx_initializev+0x186>
      msgp = (char *) "BMX_2 NF";
 23e6c04:	4b1f      	ldr	r3, [pc, #124]	; (23e6c84 <_Z14bmx_initializev+0x234>)
 23e6c06:	6023      	str	r3, [r4, #0]
    break;
 23e6c08:	e7c5      	b.n	23e6b96 <_Z14bmx_initializev+0x146>
 23e6c0a:	bf00      	nop
 23e6c0c:	023fd3a8 	.word	0x023fd3a8
 23e6c10:	1006a281 	.word	0x1006a281
 23e6c14:	1006f528 	.word	0x1006f528
 23e6c18:	1006a948 	.word	0x1006a948
 23e6c1c:	1006a282 	.word	0x1006a282
 23e6c20:	023fd3e3 	.word	0x023fd3e3
 23e6c24:	1006abf8 	.word	0x1006abf8
 23e6c28:	023fd3b1 	.word	0x023fd3b1
 23e6c2c:	1006a178 	.word	0x1006a178
 23e6c30:	1006a283 	.word	0x1006a283
 23e6c34:	023fd3ba 	.word	0x023fd3ba
 23e6c38:	1006a284 	.word	0x1006a284
 23e6c3c:	1006aa48 	.word	0x1006aa48
 23e6c40:	1006a285 	.word	0x1006a285
 23e6c44:	023fd42f 	.word	0x023fd42f
 23e6c48:	1006ab48 	.word	0x1006ab48
 23e6c4c:	023fd3c2 	.word	0x023fd3c2
 23e6c50:	023fd3cb 	.word	0x023fd3cb
 23e6c54:	023fd3d7 	.word	0x023fd3d7
 23e6c58:	023fd3ec 	.word	0x023fd3ec
 23e6c5c:	023fd3f4 	.word	0x023fd3f4
 23e6c60:	1006ac38 	.word	0x1006ac38
 23e6c64:	023fd3fd 	.word	0x023fd3fd
 23e6c68:	1006a286 	.word	0x1006a286
 23e6c6c:	023fd406 	.word	0x023fd406
 23e6c70:	1006aba0 	.word	0x1006aba0
 23e6c74:	023fd40e 	.word	0x023fd40e
 23e6c78:	023fd417 	.word	0x023fd417
 23e6c7c:	023fd423 	.word	0x023fd423
 23e6c80:	023fd438 	.word	0x023fd438
 23e6c84:	023fd440 	.word	0x023fd440

023e6c88 <_Z17htu21d_initializev>:
/* 
 *=======================================================================================================================
 * htu21d_initialize() - HTU21D sensor initialize
 *=======================================================================================================================
 */
void htu21d_initialize() {
 23e6c88:	b508      	push	{r3, lr}
  Output("HTU21D:INIT");
 23e6c8a:	480f      	ldr	r0, [pc, #60]	; (23e6cc8 <_Z17htu21d_initializev+0x40>)
 23e6c8c:	f7ff fbee 	bl	23e646c <_Z6OutputPKc>
  
  // HTU21DF Humidity & Temp Sensor (I2C ADDRESS = 0x40)
  if (!htu.begin()) {
 23e6c90:	f013 f92c 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6c94:	4601      	mov	r1, r0
 23e6c96:	480d      	ldr	r0, [pc, #52]	; (23e6ccc <_Z17htu21d_initializev+0x44>)
 23e6c98:	f009 ffa8 	bl	23f0bec <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e6c9c:	4b0c      	ldr	r3, [pc, #48]	; (23e6cd0 <_Z17htu21d_initializev+0x48>)
 23e6c9e:	4a0d      	ldr	r2, [pc, #52]	; (23e6cd4 <_Z17htu21d_initializev+0x4c>)
 23e6ca0:	b960      	cbnz	r0, 23e6cbc <_Z17htu21d_initializev+0x34>
    msgp = (char *) "HTU NF";
 23e6ca2:	490d      	ldr	r1, [pc, #52]	; (23e6cd8 <_Z17htu21d_initializev+0x50>)
    HTU21DF_exists = false;
 23e6ca4:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HTU NF";
 23e6ca6:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e6ca8:	490c      	ldr	r1, [pc, #48]	; (23e6cdc <_Z17htu21d_initializev+0x54>)
 23e6caa:	680a      	ldr	r2, [r1, #0]
 23e6cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 23e6cb0:	600a      	str	r2, [r1, #0]
  }
  else {
    HTU21DF_exists = true;
    msgp = (char *) "HTU OK";
  }
  Output (msgp);
 23e6cb2:	6818      	ldr	r0, [r3, #0]
}
 23e6cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e6cb8:	f7ff bbd8 	b.w	23e646c <_Z6OutputPKc>
    HTU21DF_exists = true;
 23e6cbc:	2101      	movs	r1, #1
 23e6cbe:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HTU OK";
 23e6cc0:	4a07      	ldr	r2, [pc, #28]	; (23e6ce0 <_Z17htu21d_initializev+0x58>)
 23e6cc2:	601a      	str	r2, [r3, #0]
 23e6cc4:	e7f5      	b.n	23e6cb2 <_Z17htu21d_initializev+0x2a>
 23e6cc6:	bf00      	nop
 23e6cc8:	023fd449 	.word	0x023fd449
 23e6ccc:	1006ae90 	.word	0x1006ae90
 23e6cd0:	1006f528 	.word	0x1006f528
 23e6cd4:	1006a2b0 	.word	0x1006a2b0
 23e6cd8:	023fd455 	.word	0x023fd455
 23e6cdc:	1006a178 	.word	0x1006a178
 23e6ce0:	023fd45c 	.word	0x023fd45c

023e6ce4 <_Z18mcp9808_initializev>:
/* 
 *=======================================================================================================================
 * mcp9808_initialize() - MCP9808 sensor initialize
 *=======================================================================================================================
 */
void mcp9808_initialize() {
 23e6ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Output("MCP9808:INIT");
 23e6ce6:	4844      	ldr	r0, [pc, #272]	; (23e6df8 <_Z18mcp9808_initializev+0x114>)
 23e6ce8:	f7ff fbc0 	bl	23e646c <_Z6OutputPKc>
  
  // 1st MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x18)
  mcp1 = Adafruit_MCP9808();
 23e6cec:	a801      	add	r0, sp, #4
 23e6cee:	f00a f95b 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
 23e6cf2:	4842      	ldr	r0, [pc, #264]	; (23e6dfc <_Z18mcp9808_initializev+0x118>)
 23e6cf4:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp1.begin(MCP_ADDRESS_1)) {
 23e6cf8:	2118      	movs	r1, #24
 23e6cfa:	7103      	strb	r3, [r0, #4]

/*!
 *    @brief  Class that stores state and functions for interacting with
 *            MCP9808 Temp Sensor
 */
class Adafruit_MCP9808 : public Adafruit_Sensor {
 23e6cfc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e6d00:	4c3f      	ldr	r4, [pc, #252]	; (23e6e00 <_Z18mcp9808_initializev+0x11c>)
 23e6d02:	80c3      	strh	r3, [r0, #6]
 23e6d04:	9b03      	ldr	r3, [sp, #12]
 23e6d06:	6083      	str	r3, [r0, #8]
 23e6d08:	f00a f9b3 	bl	23f1072 <_ZN16Adafruit_MCP98085beginEh>
 23e6d0c:	4b3d      	ldr	r3, [pc, #244]	; (23e6e04 <_Z18mcp9808_initializev+0x120>)
 23e6d0e:	2800      	cmp	r0, #0
 23e6d10:	d15e      	bne.n	23e6dd0 <_Z18mcp9808_initializev+0xec>
    msgp = (char *) "MCP1 NF";
 23e6d12:	4a3d      	ldr	r2, [pc, #244]	; (23e6e08 <_Z18mcp9808_initializev+0x124>)
    MCP_1_exists = false;
 23e6d14:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP1 NF";
 23e6d16:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_1;  // Turn On Bit
 23e6d18:	4a3c      	ldr	r2, [pc, #240]	; (23e6e0c <_Z18mcp9808_initializev+0x128>)
 23e6d1a:	6813      	ldr	r3, [r2, #0]
 23e6d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 23e6d20:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_1_exists = true;
    msgp = (char *) "MCP1 OK";
  }
  Output (msgp);
 23e6d22:	6820      	ldr	r0, [r4, #0]
 23e6d24:	f7ff fba2 	bl	23e646c <_Z6OutputPKc>

  // 2nd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x19)
  mcp2 = Adafruit_MCP9808();
 23e6d28:	a801      	add	r0, sp, #4
 23e6d2a:	f00a f93d 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>
 23e6d2e:	4838      	ldr	r0, [pc, #224]	; (23e6e10 <_Z18mcp9808_initializev+0x12c>)
 23e6d30:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp2.begin(MCP_ADDRESS_2)) {
 23e6d34:	2119      	movs	r1, #25
 23e6d36:	7103      	strb	r3, [r0, #4]
 23e6d38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e6d3c:	80c3      	strh	r3, [r0, #6]
 23e6d3e:	9b03      	ldr	r3, [sp, #12]
 23e6d40:	6083      	str	r3, [r0, #8]
 23e6d42:	f00a f996 	bl	23f1072 <_ZN16Adafruit_MCP98085beginEh>
 23e6d46:	4b33      	ldr	r3, [pc, #204]	; (23e6e14 <_Z18mcp9808_initializev+0x130>)
 23e6d48:	2800      	cmp	r0, #0
 23e6d4a:	d146      	bne.n	23e6dda <_Z18mcp9808_initializev+0xf6>
    msgp = (char *) "MCP2 NF";
 23e6d4c:	4a32      	ldr	r2, [pc, #200]	; (23e6e18 <_Z18mcp9808_initializev+0x134>)
    MCP_2_exists = false;
 23e6d4e:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP2 NF";
 23e6d50:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_2;  // Turn On Bit
 23e6d52:	4a2e      	ldr	r2, [pc, #184]	; (23e6e0c <_Z18mcp9808_initializev+0x128>)
 23e6d54:	6813      	ldr	r3, [r2, #0]
 23e6d56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 23e6d5a:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_2_exists = true;
    msgp = (char *) "MCP2 OK";
  }
  Output (msgp);
 23e6d5c:	6820      	ldr	r0, [r4, #0]
 23e6d5e:	f7ff fb85 	bl	23e646c <_Z6OutputPKc>

  // 3rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x20)
  mcp3 = Adafruit_MCP9808();
 23e6d62:	a801      	add	r0, sp, #4
 23e6d64:	f00a f920 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>
 23e6d68:	482c      	ldr	r0, [pc, #176]	; (23e6e1c <_Z18mcp9808_initializev+0x138>)
 23e6d6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp3.begin(MCP_ADDRESS_3)) {
 23e6d6e:	211a      	movs	r1, #26
 23e6d70:	7103      	strb	r3, [r0, #4]
 23e6d72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e6d76:	80c3      	strh	r3, [r0, #6]
 23e6d78:	9b03      	ldr	r3, [sp, #12]
 23e6d7a:	6083      	str	r3, [r0, #8]
 23e6d7c:	f00a f979 	bl	23f1072 <_ZN16Adafruit_MCP98085beginEh>
 23e6d80:	4b27      	ldr	r3, [pc, #156]	; (23e6e20 <_Z18mcp9808_initializev+0x13c>)
 23e6d82:	2800      	cmp	r0, #0
 23e6d84:	d12e      	bne.n	23e6de4 <_Z18mcp9808_initializev+0x100>
    msgp = (char *) "MCP3 NF";
 23e6d86:	4a27      	ldr	r2, [pc, #156]	; (23e6e24 <_Z18mcp9808_initializev+0x140>)
    MCP_3_exists = false;
 23e6d88:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP3 NF";
 23e6d8a:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_3;  // Turn On Bit
 23e6d8c:	4a1f      	ldr	r2, [pc, #124]	; (23e6e0c <_Z18mcp9808_initializev+0x128>)
 23e6d8e:	6813      	ldr	r3, [r2, #0]
 23e6d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 23e6d94:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_3_exists = true;
    msgp = (char *) "MCP3 OK";
  }
  Output (msgp);
 23e6d96:	6820      	ldr	r0, [r4, #0]
 23e6d98:	f7ff fb68 	bl	23e646c <_Z6OutputPKc>

  // 4rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x21)
  mcp4 = Adafruit_MCP9808();
 23e6d9c:	a801      	add	r0, sp, #4
 23e6d9e:	f00a f903 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>
 23e6da2:	4821      	ldr	r0, [pc, #132]	; (23e6e28 <_Z18mcp9808_initializev+0x144>)
 23e6da4:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp4.begin(MCP_ADDRESS_4)) {
 23e6da8:	211b      	movs	r1, #27
 23e6daa:	7103      	strb	r3, [r0, #4]
 23e6dac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e6db0:	80c3      	strh	r3, [r0, #6]
 23e6db2:	9b03      	ldr	r3, [sp, #12]
 23e6db4:	6083      	str	r3, [r0, #8]
 23e6db6:	f00a f95c 	bl	23f1072 <_ZN16Adafruit_MCP98085beginEh>
 23e6dba:	4b1c      	ldr	r3, [pc, #112]	; (23e6e2c <_Z18mcp9808_initializev+0x148>)
 23e6dbc:	b9b8      	cbnz	r0, 23e6dee <_Z18mcp9808_initializev+0x10a>
    msgp = (char *) "MCP4 NF";
 23e6dbe:	4a1c      	ldr	r2, [pc, #112]	; (23e6e30 <_Z18mcp9808_initializev+0x14c>)
    MCP_4_exists = false;
 23e6dc0:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP4 NF";
 23e6dc2:	6022      	str	r2, [r4, #0]
  }
  else {
    MCP_4_exists = true;
    msgp = (char *) "MCP4 OK";
  }
  Output (msgp);
 23e6dc4:	6820      	ldr	r0, [r4, #0]
}
 23e6dc6:	b004      	add	sp, #16
 23e6dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output (msgp);
 23e6dcc:	f7ff bb4e 	b.w	23e646c <_Z6OutputPKc>
    MCP_1_exists = true;
 23e6dd0:	2201      	movs	r2, #1
 23e6dd2:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP1 OK";
 23e6dd4:	4b17      	ldr	r3, [pc, #92]	; (23e6e34 <_Z18mcp9808_initializev+0x150>)
 23e6dd6:	6023      	str	r3, [r4, #0]
 23e6dd8:	e7a3      	b.n	23e6d22 <_Z18mcp9808_initializev+0x3e>
    MCP_2_exists = true;
 23e6dda:	2201      	movs	r2, #1
 23e6ddc:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP2 OK";
 23e6dde:	4b16      	ldr	r3, [pc, #88]	; (23e6e38 <_Z18mcp9808_initializev+0x154>)
 23e6de0:	6023      	str	r3, [r4, #0]
 23e6de2:	e7bb      	b.n	23e6d5c <_Z18mcp9808_initializev+0x78>
    MCP_3_exists = true;
 23e6de4:	2201      	movs	r2, #1
 23e6de6:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP3 OK";
 23e6de8:	4b14      	ldr	r3, [pc, #80]	; (23e6e3c <_Z18mcp9808_initializev+0x158>)
 23e6dea:	6023      	str	r3, [r4, #0]
 23e6dec:	e7d3      	b.n	23e6d96 <_Z18mcp9808_initializev+0xb2>
    MCP_4_exists = true;
 23e6dee:	2201      	movs	r2, #1
 23e6df0:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP4 OK";
 23e6df2:	4b13      	ldr	r3, [pc, #76]	; (23e6e40 <_Z18mcp9808_initializev+0x15c>)
 23e6df4:	6023      	str	r3, [r4, #0]
 23e6df6:	e7e5      	b.n	23e6dc4 <_Z18mcp9808_initializev+0xe0>
 23e6df8:	023fd463 	.word	0x023fd463
 23e6dfc:	1006f0f8 	.word	0x1006f0f8
 23e6e00:	1006f528 	.word	0x1006f528
 23e6e04:	1006a2c8 	.word	0x1006a2c8
 23e6e08:	023fd470 	.word	0x023fd470
 23e6e0c:	1006a178 	.word	0x1006a178
 23e6e10:	1006f104 	.word	0x1006f104
 23e6e14:	1006a2c9 	.word	0x1006a2c9
 23e6e18:	023fd480 	.word	0x023fd480
 23e6e1c:	1006f110 	.word	0x1006f110
 23e6e20:	1006a2ca 	.word	0x1006a2ca
 23e6e24:	023fd490 	.word	0x023fd490
 23e6e28:	1006f11c 	.word	0x1006f11c
 23e6e2c:	1006a2cb 	.word	0x1006a2cb
 23e6e30:	023fd4a0 	.word	0x023fd4a0
 23e6e34:	023fd478 	.word	0x023fd478
 23e6e38:	023fd488 	.word	0x023fd488
 23e6e3c:	023fd498 	.word	0x023fd498
 23e6e40:	023fd4a8 	.word	0x023fd4a8

023e6e44 <_Z14sht_initializev>:
/* 
 *=======================================================================================================================
 * sht_initialize() - SHT31 sensor initialize
 *=======================================================================================================================
 */
void sht_initialize() {
 23e6e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Output("SHT:INIT");
 23e6e46:	4828      	ldr	r0, [pc, #160]	; (23e6ee8 <_Z14sht_initializev+0xa4>)
 23e6e48:	f7ff fb10 	bl	23e646c <_Z6OutputPKc>
  
  // 1st SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  sht1 = Adafruit_SHT31();
 23e6e4c:	466c      	mov	r4, sp
 23e6e4e:	f013 f84d 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6e52:	4d26      	ldr	r5, [pc, #152]	; (23e6eec <_Z14sht_initializev+0xa8>)
 23e6e54:	4601      	mov	r1, r0
 23e6e56:	4620      	mov	r0, r4
 23e6e58:	f00a f9fa 	bl	23f1250 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e6e5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e6e60:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 23e6e64:	4620      	mov	r0, r4
 23e6e66:	f00a f9fd 	bl	23f1264 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht1.begin(SHT_ADDRESS_1)) {
 23e6e6a:	4628      	mov	r0, r5
 23e6e6c:	2144      	movs	r1, #68	; 0x44
 23e6e6e:	f00a fa30 	bl	23f12d2 <_ZN14Adafruit_SHT315beginEh>
 23e6e72:	4d1f      	ldr	r5, [pc, #124]	; (23e6ef0 <_Z14sht_initializev+0xac>)
 23e6e74:	4b1f      	ldr	r3, [pc, #124]	; (23e6ef4 <_Z14sht_initializev+0xb0>)
 23e6e76:	bb60      	cbnz	r0, 23e6ed2 <_Z14sht_initializev+0x8e>
    msgp = (char *) "SHT1 NF";
 23e6e78:	4a1f      	ldr	r2, [pc, #124]	; (23e6ef8 <_Z14sht_initializev+0xb4>)
    SHT_1_exists = false;
 23e6e7a:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT1 NF";
 23e6e7c:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_1;  // Turn On Bit
 23e6e7e:	4a1f      	ldr	r2, [pc, #124]	; (23e6efc <_Z14sht_initializev+0xb8>)
 23e6e80:	6813      	ldr	r3, [r2, #0]
 23e6e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 23e6e86:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_1_exists = true;
    msgp = (char *) "SHT1 OK";
  }
  Output (msgp);
 23e6e88:	6828      	ldr	r0, [r5, #0]
 23e6e8a:	f7ff faef 	bl	23e646c <_Z6OutputPKc>

  // 2nd SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  sht2 = Adafruit_SHT31();
 23e6e8e:	f013 f82d 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6e92:	4e1b      	ldr	r6, [pc, #108]	; (23e6f00 <_Z14sht_initializev+0xbc>)
 23e6e94:	4601      	mov	r1, r0
 23e6e96:	4620      	mov	r0, r4
 23e6e98:	f00a f9da 	bl	23f1250 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e6e9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e6ea0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 23e6ea4:	4620      	mov	r0, r4
 23e6ea6:	f00a f9dd 	bl	23f1264 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht2.begin(SHT_ADDRESS_2)) {
 23e6eaa:	2145      	movs	r1, #69	; 0x45
 23e6eac:	4630      	mov	r0, r6
 23e6eae:	f00a fa10 	bl	23f12d2 <_ZN14Adafruit_SHT315beginEh>
 23e6eb2:	4b14      	ldr	r3, [pc, #80]	; (23e6f04 <_Z14sht_initializev+0xc0>)
 23e6eb4:	b990      	cbnz	r0, 23e6edc <_Z14sht_initializev+0x98>
    msgp = (char *) "SHT2 NF";
 23e6eb6:	4a14      	ldr	r2, [pc, #80]	; (23e6f08 <_Z14sht_initializev+0xc4>)
    SHT_2_exists = false;
 23e6eb8:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT2 NF";
 23e6eba:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_2;  // Turn On Bit
 23e6ebc:	4a0f      	ldr	r2, [pc, #60]	; (23e6efc <_Z14sht_initializev+0xb8>)
 23e6ebe:	6813      	ldr	r3, [r2, #0]
 23e6ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 23e6ec4:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_2_exists = true;
    msgp = (char *) "SHT2 OK";
  }
  Output (msgp);
 23e6ec6:	6828      	ldr	r0, [r5, #0]
}
 23e6ec8:	b004      	add	sp, #16
 23e6eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e6ece:	f7ff bacd 	b.w	23e646c <_Z6OutputPKc>
    SHT_1_exists = true;
 23e6ed2:	2201      	movs	r2, #1
 23e6ed4:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT1 OK";
 23e6ed6:	4b0d      	ldr	r3, [pc, #52]	; (23e6f0c <_Z14sht_initializev+0xc8>)
 23e6ed8:	602b      	str	r3, [r5, #0]
 23e6eda:	e7d5      	b.n	23e6e88 <_Z14sht_initializev+0x44>
    SHT_2_exists = true;
 23e6edc:	2201      	movs	r2, #1
 23e6ede:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT2 OK";
 23e6ee0:	4b0b      	ldr	r3, [pc, #44]	; (23e6f10 <_Z14sht_initializev+0xcc>)
 23e6ee2:	602b      	str	r3, [r5, #0]
 23e6ee4:	e7ef      	b.n	23e6ec6 <_Z14sht_initializev+0x82>
 23e6ee6:	bf00      	nop
 23e6ee8:	023fd4b0 	.word	0x023fd4b0
 23e6eec:	1007abb4 	.word	0x1007abb4
 23e6ef0:	1006f528 	.word	0x1006f528
 23e6ef4:	1006a7d0 	.word	0x1006a7d0
 23e6ef8:	023fd4b9 	.word	0x023fd4b9
 23e6efc:	1006a178 	.word	0x1006a178
 23e6f00:	1007abc4 	.word	0x1007abc4
 23e6f04:	1006a7d1 	.word	0x1006a7d1
 23e6f08:	023fd4c9 	.word	0x023fd4c9
 23e6f0c:	023fd4c1 	.word	0x023fd4c1
 23e6f10:	023fd4d1 	.word	0x023fd4d1

023e6f14 <_Z15hih8_initializev>:
/* 
 *=======================================================================================================================
 * hih8_initialize() - HIH8000 sensor initialize
 *=======================================================================================================================
 */
void hih8_initialize() {
 23e6f14:	b508      	push	{r3, lr}
  Output("HIH8:INIT");
 23e6f16:	480d      	ldr	r0, [pc, #52]	; (23e6f4c <_Z15hih8_initializev+0x38>)
 23e6f18:	f7ff faa8 	bl	23e646c <_Z6OutputPKc>

  if (I2C_Device_Exist(HIH8000_ADDRESS)) {
 23e6f1c:	2027      	movs	r0, #39	; 0x27
 23e6f1e:	f7ff f89c 	bl	23e605a <_Z16I2C_Device_Existh>
 23e6f22:	4a0b      	ldr	r2, [pc, #44]	; (23e6f50 <_Z15hih8_initializev+0x3c>)
 23e6f24:	4b0b      	ldr	r3, [pc, #44]	; (23e6f54 <_Z15hih8_initializev+0x40>)
 23e6f26:	b140      	cbz	r0, 23e6f3a <_Z15hih8_initializev+0x26>
    HIH8_exists = true;
 23e6f28:	2101      	movs	r1, #1
 23e6f2a:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HIH8 OK";
 23e6f2c:	4a0a      	ldr	r2, [pc, #40]	; (23e6f58 <_Z15hih8_initializev+0x44>)
 23e6f2e:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "HIH8 NF";
    HIH8_exists = false;
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
  }
  Output (msgp);
 23e6f30:	6818      	ldr	r0, [r3, #0]
}
 23e6f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e6f36:	f7ff ba99 	b.w	23e646c <_Z6OutputPKc>
    msgp = (char *) "HIH8 NF";
 23e6f3a:	4908      	ldr	r1, [pc, #32]	; (23e6f5c <_Z15hih8_initializev+0x48>)
    HIH8_exists = false;
 23e6f3c:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HIH8 NF";
 23e6f3e:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
 23e6f40:	4907      	ldr	r1, [pc, #28]	; (23e6f60 <_Z15hih8_initializev+0x4c>)
 23e6f42:	680a      	ldr	r2, [r1, #0]
 23e6f44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 23e6f48:	600a      	str	r2, [r1, #0]
 23e6f4a:	e7f1      	b.n	23e6f30 <_Z15hih8_initializev+0x1c>
 23e6f4c:	023fd4d9 	.word	0x023fd4d9
 23e6f50:	1006a2ae 	.word	0x1006a2ae
 23e6f54:	1006f528 	.word	0x1006f528
 23e6f58:	023fd4e3 	.word	0x023fd4e3
 23e6f5c:	023fd4eb 	.word	0x023fd4eb
 23e6f60:	1006a178 	.word	0x1006a178
 23e6f64:	00000000 	.word	0x00000000

023e6f68 <_Z17hih8_getTempHumidPfS_>:
 *=======================================================================================================================
 * hih8_getTempHumid() - Get Temp and Humidity
 *   Call example:  status = hih8_getTempHumid(&t, &h);
 *=======================================================================================================================
 */
bool hih8_getTempHumid(float *t, float *h) {
 23e6f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HIH8_exists) {
 23e6f6c:	4b54      	ldr	r3, [pc, #336]	; (23e70c0 <_Z17hih8_getTempHumidPfS_+0x158>)
bool hih8_getTempHumid(float *t, float *h) {
 23e6f6e:	4604      	mov	r4, r0
  if (HIH8_exists) {
 23e6f70:	f893 8000 	ldrb.w	r8, [r3]
bool hih8_getTempHumid(float *t, float *h) {
 23e6f74:	460d      	mov	r5, r1
  if (HIH8_exists) {
 23e6f76:	f1b8 0f00 	cmp.w	r8, #0
 23e6f7a:	f000 8086 	beq.w	23e708a <_Z17hih8_getTempHumidPfS_+0x122>
    uint16_t humidityBuffer    = 0;
    uint16_t temperatureBuffer = 0;
  
    Wire.begin();
 23e6f7e:	f012 ffb5 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6f82:	f011 fc43 	bl	23f880c <_ZN7TwoWire5beginEv>
    Wire.beginTransmission(HIH8000_ADDRESS);
 23e6f86:	f012 ffb1 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6f8a:	2127      	movs	r1, #39	; 0x27
 23e6f8c:	f011 fc6c 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>

    Wire.write(0x00); // set the register location for read request
 23e6f90:	f012 ffac 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6f94:	2100      	movs	r1, #0
 23e6f96:	f7fe fedd 	bl	23e5d54 <_ZN7TwoWire5writeEi.isra.0>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23e6f9a:	20c8      	movs	r0, #200	; 0xc8
 23e6f9c:	f00f ff56 	bl	23f6e4c <HAL_Delay_Microseconds>

    delayMicroseconds(200); // give some time for sensor to process request

    if (Wire.requestFrom(HIH8000_ADDRESS, 4) == 4) {
 23e6fa0:	f012 ffa4 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6fa4:	2204      	movs	r2, #4
 23e6fa6:	2127      	movs	r1, #39	; 0x27
 23e6fa8:	f011 fc57 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
 23e6fac:	2804      	cmp	r0, #4
 23e6fae:	d175      	bne.n	23e709c <_Z17hih8_getTempHumidPfS_+0x134>

      // Get raw humidity data
      humidityBuffer = Wire.read();
 23e6fb0:	f012 ff9c 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6fb4:	6803      	ldr	r3, [r0, #0]
 23e6fb6:	695b      	ldr	r3, [r3, #20]
 23e6fb8:	4798      	blx	r3
 23e6fba:	b287      	uxth	r7, r0
      humidityBuffer <<= 8;
      humidityBuffer |= Wire.read();
 23e6fbc:	f012 ff96 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6fc0:	6803      	ldr	r3, [r0, #0]
 23e6fc2:	695b      	ldr	r3, [r3, #20]
 23e6fc4:	4798      	blx	r3
 23e6fc6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 23e6fca:	b287      	uxth	r7, r0
      humidityBuffer &= 0x3FFF;   // 14bit value, get rid of the upper 2 status bits

      // Get raw temperature data
      temperatureBuffer = Wire.read();
 23e6fcc:	f012 ff8e 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6fd0:	6803      	ldr	r3, [r0, #0]
 23e6fd2:	695b      	ldr	r3, [r3, #20]
 23e6fd4:	4798      	blx	r3
 23e6fd6:	b286      	uxth	r6, r0
      temperatureBuffer <<= 8;
      temperatureBuffer |= Wire.read();
 23e6fd8:	f012 ff88 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6fdc:	6803      	ldr	r3, [r0, #0]
 23e6fde:	695b      	ldr	r3, [r3, #20]
 23e6fe0:	4798      	blx	r3
 23e6fe2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 23e6fe6:	b286      	uxth	r6, r0
      temperatureBuffer >>= 2;  // Remove the last two "Do Not Care" bits (shift left is same as divide by 4)

      Wire.endTransmission();
 23e6fe8:	f012 ff80 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e6fec:	f011 fc43 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>

      *h = humidityBuffer * 6.10e-3;
 23e6ff0:	f3c7 000d 	ubfx	r0, r7, #0, #14
 23e6ff4:	f7fd fa3a 	bl	23e446c <__aeabi_i2d>
 23e6ff8:	a32d      	add	r3, pc, #180	; (adr r3, 23e70b0 <_Z17hih8_getTempHumidPfS_+0x148>)
 23e6ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6ffe:	f7fd fa9f 	bl	23e4540 <__aeabi_dmul>
 23e7002:	f7fd fd95 	bl	23e4b30 <__aeabi_d2f>
 23e7006:	6028      	str	r0, [r5, #0]
      *t = temperatureBuffer * 1.007e-2 - 40.0;
 23e7008:	08b0      	lsrs	r0, r6, #2
 23e700a:	f7fd fa2f 	bl	23e446c <__aeabi_i2d>
 23e700e:	a32a      	add	r3, pc, #168	; (adr r3, 23e70b8 <_Z17hih8_getTempHumidPfS_+0x150>)
 23e7010:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7014:	f7fd fa94 	bl	23e4540 <__aeabi_dmul>
 23e7018:	2200      	movs	r2, #0
 23e701a:	4b2a      	ldr	r3, [pc, #168]	; (23e70c4 <_Z17hih8_getTempHumidPfS_+0x15c>)
 23e701c:	f7fd f8d8 	bl	23e41d0 <__aeabi_dsub>
 23e7020:	f7fd fd86 	bl	23e4b30 <__aeabi_d2f>
 23e7024:	6020      	str	r0, [r4, #0]

      // QC Check
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e7026:	edd5 7a00 	vldr	s15, [r5]
 23e702a:	eef4 7a67 	vcmp.f32	s15, s15
 23e702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7032:	d62d      	bvs.n	23e7090 <_Z17hih8_getTempHumidPfS_+0x128>
 23e7034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23e7038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e703c:	d428      	bmi.n	23e7090 <_Z17hih8_getTempHumidPfS_+0x128>
 23e703e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 23e70c8 <_Z17hih8_getTempHumidPfS_+0x160>
 23e7042:	eef4 7a47 	vcmp.f32	s15, s14
 23e7046:	ed9f 7a21 	vldr	s14, [pc, #132]	; 23e70cc <_Z17hih8_getTempHumidPfS_+0x164>
 23e704a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e704e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e7052:	edc5 7a00 	vstr	s15, [r5]
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e7056:	edd4 7a00 	vldr	s15, [r4]
 23e705a:	eef4 7a67 	vcmp.f32	s15, s15
 23e705e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7062:	d618      	bvs.n	23e7096 <_Z17hih8_getTempHumidPfS_+0x12e>
 23e7064:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 23e70d0 <_Z17hih8_getTempHumidPfS_+0x168>
 23e7068:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e706c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7070:	d411      	bmi.n	23e7096 <_Z17hih8_getTempHumidPfS_+0x12e>
 23e7072:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23e70d4 <_Z17hih8_getTempHumidPfS_+0x16c>
 23e7076:	eef4 7a47 	vcmp.f32	s15, s14
 23e707a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 23e70cc <_Z17hih8_getTempHumidPfS_+0x164>
 23e707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7082:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e7086:	edc4 7a00 	vstr	s15, [r4]
    }
  }
  else {
    return (false);
  }
}
 23e708a:	4640      	mov	r0, r8
 23e708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e7090:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23e70cc <_Z17hih8_getTempHumidPfS_+0x164>
 23e7094:	e7dd      	b.n	23e7052 <_Z17hih8_getTempHumidPfS_+0xea>
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e7096:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23e70cc <_Z17hih8_getTempHumidPfS_+0x164>
 23e709a:	e7f4      	b.n	23e7086 <_Z17hih8_getTempHumidPfS_+0x11e>
      Wire.endTransmission();
 23e709c:	f012 ff26 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e70a0:	f011 fbe9 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
      return(false);
 23e70a4:	f04f 0800 	mov.w	r8, #0
 23e70a8:	e7ef      	b.n	23e708a <_Z17hih8_getTempHumidPfS_+0x122>
 23e70aa:	bf00      	nop
 23e70ac:	f3af 8000 	nop.w
 23e70b0:	4816f007 	.word	0x4816f007
 23e70b4:	3f78fc50 	.word	0x3f78fc50
 23e70b8:	855da273 	.word	0x855da273
 23e70bc:	3f849f94 	.word	0x3f849f94
 23e70c0:	1006a2ae 	.word	0x1006a2ae
 23e70c4:	40440000 	.word	0x40440000
 23e70c8:	42c80000 	.word	0x42c80000
 23e70cc:	c479f99a 	.word	0xc479f99a
 23e70d0:	c2200000 	.word	0xc2200000
 23e70d4:	42700000 	.word	0x42700000

023e70d8 <_Z14wbt_initializev>:
/* 
 *=======================================================================================================================
 * wbt_initialize() - Wet Bulb Temperature
 *=======================================================================================================================
 */
void wbt_initialize() {
 23e70d8:	b508      	push	{r3, lr}
  Output("WBT:INIT");
 23e70da:	4809      	ldr	r0, [pc, #36]	; (23e7100 <_Z14wbt_initializev+0x28>)
 23e70dc:	f7ff f9c6 	bl	23e646c <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e70e0:	4b08      	ldr	r3, [pc, #32]	; (23e7104 <_Z14wbt_initializev+0x2c>)
 23e70e2:	781b      	ldrb	r3, [r3, #0]
 23e70e4:	b153      	cbz	r3, 23e70fc <_Z14wbt_initializev+0x24>
 23e70e6:	4b08      	ldr	r3, [pc, #32]	; (23e7108 <_Z14wbt_initializev+0x30>)
 23e70e8:	781b      	ldrb	r3, [r3, #0]
 23e70ea:	b13b      	cbz	r3, 23e70fc <_Z14wbt_initializev+0x24>
    WBT_exists = true;
 23e70ec:	2201      	movs	r2, #1
 23e70ee:	4b07      	ldr	r3, [pc, #28]	; (23e710c <_Z14wbt_initializev+0x34>)
    Output ("WBT:OK");
 23e70f0:	4807      	ldr	r0, [pc, #28]	; (23e7110 <_Z14wbt_initializev+0x38>)
    WBT_exists = true;
 23e70f2:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("WBT:NF");
  }
}
 23e70f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBT:NF");
 23e70f8:	f7ff b9b8 	b.w	23e646c <_Z6OutputPKc>
 23e70fc:	4805      	ldr	r0, [pc, #20]	; (23e7114 <_Z14wbt_initializev+0x3c>)
 23e70fe:	e7f9      	b.n	23e70f4 <_Z14wbt_initializev+0x1c>
 23e7100:	023fd4f3 	.word	0x023fd4f3
 23e7104:	1006a2c8 	.word	0x1006a2c8
 23e7108:	1006a7d0 	.word	0x1006a7d0
 23e710c:	1006a7e6 	.word	0x1006a7e6
 23e7110:	023fd4fc 	.word	0x023fd4fc
 23e7114:	023fd503 	.word	0x023fd503

023e7118 <_Z13wbt_calculatedd>:
 *     In Arduino code, square brackets are not used for mathematical operations. Instead, parentheses ( ).
 * sqrt(x) computes the square root of x, which is x to the 1/2.
 * pow(RH, 1.5) calculates RH to the 3/2, which is the relative humidity raised to the power of 1.5.
 *=======================================================================================================================
 */
double wbt_calculate(double T, double RH) {
 23e7118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((T == -999.9) || (RH == -999.9)) {
 23e711c:	a354      	add	r3, pc, #336	; (adr r3, 23e7270 <_Z13wbt_calculatedd+0x158>)
 23e711e:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbt_calculate(double T, double RH) {
 23e7122:	ec57 6b10 	vmov	r6, r7, d0
 23e7126:	b085      	sub	sp, #20
  if ((T == -999.9) || (RH == -999.9)) {
 23e7128:	ee10 0a10 	vmov	r0, s0
 23e712c:	4639      	mov	r1, r7
double wbt_calculate(double T, double RH) {
 23e712e:	ec55 4b11 	vmov	r4, r5, d1
  if ((T == -999.9) || (RH == -999.9)) {
 23e7132:	f7fd fc6d 	bl	23e4a10 <__aeabi_dcmpeq>
 23e7136:	2800      	cmp	r0, #0
 23e7138:	f040 808b 	bne.w	23e7252 <_Z13wbt_calculatedd+0x13a>
 23e713c:	a34c      	add	r3, pc, #304	; (adr r3, 23e7270 <_Z13wbt_calculatedd+0x158>)
 23e713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7142:	4620      	mov	r0, r4
 23e7144:	4629      	mov	r1, r5
 23e7146:	f7fd fc63 	bl	23e4a10 <__aeabi_dcmpeq>
 23e714a:	2800      	cmp	r0, #0
 23e714c:	f040 8081 	bne.w	23e7252 <_Z13wbt_calculatedd+0x13a>
  }

  // Output("WBT:CALC");

  // Equation components
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e7150:	a34b      	add	r3, pc, #300	; (adr r3, 23e7280 <_Z13wbt_calculatedd+0x168>)
 23e7152:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7156:	4620      	mov	r0, r4
 23e7158:	4629      	mov	r1, r5
 23e715a:	f7fd f83b 	bl	23e41d4 <__adddf3>
 23e715e:	ec41 0b10 	vmov	d0, r0, r1
 23e7162:	f013 fb43 	bl	23fa7ec <sqrt>
 23e7166:	a348      	add	r3, pc, #288	; (adr r3, 23e7288 <_Z13wbt_calculatedd+0x170>)
 23e7168:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e716c:	ec51 0b10 	vmov	r0, r1, d0
 23e7170:	f7fd f9e6 	bl	23e4540 <__aeabi_dmul>
 23e7174:	ec41 0b10 	vmov	d0, r0, r1
 23e7178:	f012 ff72 	bl	23fa060 <atan>
  double term2 = atan(T + RH);
 23e717c:	4622      	mov	r2, r4
 23e717e:	462b      	mov	r3, r5
 23e7180:	4630      	mov	r0, r6
 23e7182:	4639      	mov	r1, r7
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e7184:	ec59 8b10 	vmov	r8, r9, d0
  double term2 = atan(T + RH);
 23e7188:	f7fd f824 	bl	23e41d4 <__adddf3>
 23e718c:	ec41 0b10 	vmov	d0, r0, r1
 23e7190:	f012 ff66 	bl	23fa060 <atan>
  double term3 = atan(RH - 1.676311);
 23e7194:	a33e      	add	r3, pc, #248	; (adr r3, 23e7290 <_Z13wbt_calculatedd+0x178>)
 23e7196:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e719a:	4620      	mov	r0, r4
 23e719c:	4629      	mov	r1, r5
  double term2 = atan(T + RH);
 23e719e:	ec5b ab10 	vmov	sl, fp, d0
  double term3 = atan(RH - 1.676311);
 23e71a2:	f7fd f815 	bl	23e41d0 <__aeabi_dsub>
 23e71a6:	ec41 0b10 	vmov	d0, r0, r1
 23e71aa:	f012 ff59 	bl	23fa060 <atan>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e71ae:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 23e7268 <_Z13wbt_calculatedd+0x150>
  double term3 = atan(RH - 1.676311);
 23e71b2:	ed8d 0b00 	vstr	d0, [sp]
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e71b6:	ec45 4b10 	vmov	d0, r4, r5
 23e71ba:	f013 fa45 	bl	23fa648 <pow>
 23e71be:	a336      	add	r3, pc, #216	; (adr r3, 23e7298 <_Z13wbt_calculatedd+0x180>)
 23e71c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e71c4:	4620      	mov	r0, r4
 23e71c6:	4629      	mov	r1, r5
 23e71c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 23e71cc:	f7fd f9b8 	bl	23e4540 <__aeabi_dmul>
 23e71d0:	ec41 0b10 	vmov	d0, r0, r1
 23e71d4:	f012 ff44 	bl	23fa060 <atan>
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e71d8:	4642      	mov	r2, r8
 23e71da:	464b      	mov	r3, r9
 23e71dc:	4630      	mov	r0, r6
 23e71de:	4639      	mov	r1, r7
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e71e0:	ec55 4b10 	vmov	r4, r5, d0
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e71e4:	f7fd f9ac 	bl	23e4540 <__aeabi_dmul>
  double constant = 4.686035;

  // Wet bulb temperature calculation
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e71e8:	4652      	mov	r2, sl
 23e71ea:	465b      	mov	r3, fp
 23e71ec:	f7fc fff2 	bl	23e41d4 <__adddf3>
 23e71f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 23e71f4:	f7fc ffec 	bl	23e41d0 <__aeabi_dsub>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e71f8:	a329      	add	r3, pc, #164	; (adr r3, 23e72a0 <_Z13wbt_calculatedd+0x188>)
 23e71fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e71fe:	4606      	mov	r6, r0
 23e7200:	460f      	mov	r7, r1
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e7202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23e7206:	f7fd f99b 	bl	23e4540 <__aeabi_dmul>
 23e720a:	4622      	mov	r2, r4
 23e720c:	462b      	mov	r3, r5
 23e720e:	f7fd f997 	bl	23e4540 <__aeabi_dmul>
 23e7212:	4602      	mov	r2, r0
 23e7214:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e7216:	4630      	mov	r0, r6
 23e7218:	4639      	mov	r1, r7
 23e721a:	f7fc ffdb 	bl	23e41d4 <__adddf3>
 23e721e:	a322      	add	r3, pc, #136	; (adr r3, 23e72a8 <_Z13wbt_calculatedd+0x190>)
 23e7220:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7224:	f7fc ffd4 	bl	23e41d0 <__aeabi_dsub>

  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e7228:	4602      	mov	r2, r0
 23e722a:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e722c:	4604      	mov	r4, r0
 23e722e:	460d      	mov	r5, r1
  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e7230:	f7fd fc20 	bl	23e4a74 <__aeabi_dcmpun>
 23e7234:	b968      	cbnz	r0, 23e7252 <_Z13wbt_calculatedd+0x13a>
 23e7236:	2200      	movs	r2, #0
 23e7238:	4620      	mov	r0, r4
 23e723a:	4629      	mov	r1, r5
 23e723c:	4b0e      	ldr	r3, [pc, #56]	; (23e7278 <_Z13wbt_calculatedd+0x160>)
 23e723e:	f7fd fbf1 	bl	23e4a24 <__aeabi_dcmplt>
 23e7242:	b930      	cbnz	r0, 23e7252 <_Z13wbt_calculatedd+0x13a>
 23e7244:	2200      	movs	r2, #0
 23e7246:	4620      	mov	r0, r4
 23e7248:	4629      	mov	r1, r5
 23e724a:	4b0c      	ldr	r3, [pc, #48]	; (23e727c <_Z13wbt_calculatedd+0x164>)
 23e724c:	f7fd fc08 	bl	23e4a60 <__aeabi_dcmpgt>
 23e7250:	b110      	cbz	r0, 23e7258 <_Z13wbt_calculatedd+0x140>
 23e7252:	a507      	add	r5, pc, #28	; (adr r5, 23e7270 <_Z13wbt_calculatedd+0x158>)
 23e7254:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (Tw);
}
 23e7258:	ec45 4b10 	vmov	d0, r4, r5
 23e725c:	b005      	add	sp, #20
 23e725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e7262:	bf00      	nop
 23e7264:	f3af 8000 	nop.w
 23e7268:	00000000 	.word	0x00000000
 23e726c:	3ff80000 	.word	0x3ff80000
 23e7270:	33333333 	.word	0x33333333
 23e7274:	c08f3f33 	.word	0xc08f3f33
 23e7278:	c0440000 	.word	0xc0440000
 23e727c:	404e0000 	.word	0x404e0000
 23e7280:	e996312f 	.word	0xe996312f
 23e7284:	4020a097 	.word	0x4020a097
 23e7288:	7a5f41af 	.word	0x7a5f41af
 23e728c:	3fc373fb 	.word	0x3fc373fb
 23e7290:	7baecd08 	.word	0x7baecd08
 23e7294:	3ffad22b 	.word	0x3ffad22b
 23e7298:	de050375 	.word	0xde050375
 23e729c:	3f97a7c9 	.word	0x3f97a7c9
 23e72a0:	1f40b801 	.word	0x1f40b801
 23e72a4:	3f700cb8 	.word	0x3f700cb8
 23e72a8:	f583a53c 	.word	0xf583a53c
 23e72ac:	4012be7f 	.word	0x4012be7f

023e72b0 <_Z13hi_initializev>:
/* 
 *=======================================================================================================================
 * hi_initialize() - Heat Index Temperature
 *=======================================================================================================================
 */
void hi_initialize() {
 23e72b0:	b508      	push	{r3, lr}
  Output("HI:INIT");
 23e72b2:	4808      	ldr	r0, [pc, #32]	; (23e72d4 <_Z13hi_initializev+0x24>)
 23e72b4:	f7ff f8da 	bl	23e646c <_Z6OutputPKc>
  if (SHT_1_exists) {
 23e72b8:	4b07      	ldr	r3, [pc, #28]	; (23e72d8 <_Z13hi_initializev+0x28>)
 23e72ba:	781b      	ldrb	r3, [r3, #0]
 23e72bc:	b13b      	cbz	r3, 23e72ce <_Z13hi_initializev+0x1e>
    HI_exists = true;
 23e72be:	2201      	movs	r2, #1
 23e72c0:	4b06      	ldr	r3, [pc, #24]	; (23e72dc <_Z13hi_initializev+0x2c>)
    Output ("HI:OK");
 23e72c2:	4807      	ldr	r0, [pc, #28]	; (23e72e0 <_Z13hi_initializev+0x30>)
    HI_exists = true;
 23e72c4:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("HI:NF");
  }
}
 23e72c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("HI:NF");
 23e72ca:	f7ff b8cf 	b.w	23e646c <_Z6OutputPKc>
 23e72ce:	4805      	ldr	r0, [pc, #20]	; (23e72e4 <_Z13hi_initializev+0x34>)
 23e72d0:	e7f9      	b.n	23e72c6 <_Z13hi_initializev+0x16>
 23e72d2:	bf00      	nop
 23e72d4:	023fd50a 	.word	0x023fd50a
 23e72d8:	1006a7d0 	.word	0x1006a7d0
 23e72dc:	1006a2af 	.word	0x1006a2af
 23e72e0:	023fd512 	.word	0x023fd512
 23e72e4:	023fd518 	.word	0x023fd518

023e72e8 <_Z12hi_calculateff>:
 * warrant a heat index value below about 80 degrees F. In those cases, a simpler formula 
 * is applied to calculate values consistent with Steadman's results:
 * HI = 0.5 * {T + 61.0 + [(T-68.0)*1.2] + (RH*0.094)} 
 *=======================================================================================================================
 */
float hi_calculate(float T, float RH) {
 23e72e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e72ec:	ee10 0a10 	vmov	r0, s0
 23e72f0:	ed2d 8b04 	vpush	{d8-d9}
 23e72f4:	eef0 8a60 	vmov.f32	s17, s1
  float HI;
  float HI_f;

  if ((T == -999.9) || (RH == -999.9)) {
 23e72f8:	f7fd f8ca 	bl	23e4490 <__aeabi_f2d>
 23e72fc:	a3c1      	add	r3, pc, #772	; (adr r3, 23e7604 <_Z12hi_calculateff+0x31c>)
 23e72fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7302:	4604      	mov	r4, r0
 23e7304:	460d      	mov	r5, r1
 23e7306:	f7fd fb83 	bl	23e4a10 <__aeabi_dcmpeq>
 23e730a:	2800      	cmp	r0, #0
 23e730c:	f040 80fa 	bne.w	23e7504 <_Z12hi_calculateff+0x21c>
 23e7310:	ee18 0a90 	vmov	r0, s17
 23e7314:	f7fd f8bc 	bl	23e4490 <__aeabi_f2d>
 23e7318:	a3ba      	add	r3, pc, #744	; (adr r3, 23e7604 <_Z12hi_calculateff+0x31c>)
 23e731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e731e:	4680      	mov	r8, r0
 23e7320:	4689      	mov	r9, r1
 23e7322:	f7fd fb75 	bl	23e4a10 <__aeabi_dcmpeq>
 23e7326:	2800      	cmp	r0, #0
 23e7328:	f040 80ec 	bne.w	23e7504 <_Z12hi_calculateff+0x21c>
    return (-999.9);
  }

  // Convert temperature from Celsius to Fahrenheit
  float T_f = T * 9.0 / 5.0 + 32.0;
 23e732c:	2200      	movs	r2, #0
 23e732e:	4620      	mov	r0, r4
 23e7330:	4629      	mov	r1, r5
 23e7332:	4b9d      	ldr	r3, [pc, #628]	; (23e75a8 <_Z12hi_calculateff+0x2c0>)
 23e7334:	f7fd f904 	bl	23e4540 <__aeabi_dmul>
 23e7338:	2200      	movs	r2, #0
 23e733a:	4b9c      	ldr	r3, [pc, #624]	; (23e75ac <_Z12hi_calculateff+0x2c4>)
 23e733c:	f7fd fa2a 	bl	23e4794 <__aeabi_ddiv>
 23e7340:	2200      	movs	r2, #0
 23e7342:	4b9b      	ldr	r3, [pc, #620]	; (23e75b0 <_Z12hi_calculateff+0x2c8>)
 23e7344:	f7fc ff46 	bl	23e41d4 <__adddf3>
 23e7348:	f7fd fbf2 	bl	23e4b30 <__aeabi_d2f>
 23e734c:	ee09 0a10 	vmov	s18, r0

  // Steadman's equation
  HI_f = 0.5 * (T_f + 61.0 + ((T_f - 68.0)*1.2) + (RH * 0.094));
 23e7350:	f7fd f89e 	bl	23e4490 <__aeabi_f2d>
 23e7354:	2200      	movs	r2, #0
 23e7356:	4b97      	ldr	r3, [pc, #604]	; (23e75b4 <_Z12hi_calculateff+0x2cc>)
 23e7358:	4604      	mov	r4, r0
 23e735a:	460d      	mov	r5, r1
 23e735c:	f7fc ff38 	bl	23e41d0 <__aeabi_dsub>
 23e7360:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 23e7364:	4b94      	ldr	r3, [pc, #592]	; (23e75b8 <_Z12hi_calculateff+0x2d0>)
 23e7366:	f7fd f8eb 	bl	23e4540 <__aeabi_dmul>
 23e736a:	2200      	movs	r2, #0
 23e736c:	4606      	mov	r6, r0
 23e736e:	460f      	mov	r7, r1
 23e7370:	4b92      	ldr	r3, [pc, #584]	; (23e75bc <_Z12hi_calculateff+0x2d4>)
 23e7372:	4620      	mov	r0, r4
 23e7374:	4629      	mov	r1, r5
 23e7376:	f7fc ff2d 	bl	23e41d4 <__adddf3>
 23e737a:	4602      	mov	r2, r0
 23e737c:	460b      	mov	r3, r1
 23e737e:	4630      	mov	r0, r6
 23e7380:	4639      	mov	r1, r7
 23e7382:	f7fc ff27 	bl	23e41d4 <__adddf3>
 23e7386:	a382      	add	r3, pc, #520	; (adr r3, 23e7590 <_Z12hi_calculateff+0x2a8>)
 23e7388:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e738c:	4606      	mov	r6, r0
 23e738e:	460f      	mov	r7, r1
 23e7390:	4640      	mov	r0, r8
 23e7392:	4649      	mov	r1, r9
 23e7394:	f7fd f8d4 	bl	23e4540 <__aeabi_dmul>
 23e7398:	4602      	mov	r2, r0
 23e739a:	460b      	mov	r3, r1
 23e739c:	4630      	mov	r0, r6
 23e739e:	4639      	mov	r1, r7
 23e73a0:	f7fc ff18 	bl	23e41d4 <__adddf3>
 23e73a4:	2200      	movs	r2, #0
 23e73a6:	4b86      	ldr	r3, [pc, #536]	; (23e75c0 <_Z12hi_calculateff+0x2d8>)
 23e73a8:	f7fd f8ca 	bl	23e4540 <__aeabi_dmul>
 23e73ac:	f7fd fbc0 	bl	23e4b30 <__aeabi_d2f>

  // Compute the average of the simple HI with the actual temperature [deg F]
  HI_f = (HI_f + T_f) / 2;
 23e73b0:	ee07 0a90 	vmov	s15, r0
 23e73b4:	ee37 8a89 	vadd.f32	s16, s15, s18
 23e73b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5

  if (HI_f >= 80.0) { 
 23e73bc:	ed9f 7a81 	vldr	s14, [pc, #516]	; 23e75c4 <_Z12hi_calculateff+0x2dc>
  HI_f = (HI_f + T_f) / 2;
 23e73c0:	ee28 8a27 	vmul.f32	s16, s16, s15
  if (HI_f >= 80.0) { 
 23e73c4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 23e73c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e73cc:	db75      	blt.n	23e74ba <_Z12hi_calculateff+0x1d2>
    float c7 = 0.00122874;
    float c8 = 0.00085282;
    float c9 = -0.00000199;
    
    // Heat Index calculation
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e73ce:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23e75c8 <_Z12hi_calculateff+0x2e0>
 23e73d2:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 23e75cc <_Z12hi_calculateff+0x2e4>
 23e73d6:	eea9 8a27 	vfma.f32	s16, s18, s15
 23e73da:	eddf 7a7d 	vldr	s15, [pc, #500]	; 23e75d0 <_Z12hi_calculateff+0x2e8>
 23e73de:	eea8 8aa7 	vfma.f32	s16, s17, s15
 23e73e2:	eddf 7a7c 	vldr	s15, [pc, #496]	; 23e75d4 <_Z12hi_calculateff+0x2ec>
 23e73e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e73ea:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e73ee:	eddf 7a7a 	vldr	s15, [pc, #488]	; 23e75d8 <_Z12hi_calculateff+0x2f0>
 23e73f2:	ee69 7a27 	vmul.f32	s15, s18, s15
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e73f6:	eea7 8a89 	vfma.f32	s16, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e73fa:	eddf 7a78 	vldr	s15, [pc, #480]	; 23e75dc <_Z12hi_calculateff+0x2f4>
 23e73fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e7402:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e7406:	eddf 7a76 	vldr	s15, [pc, #472]	; 23e75e0 <_Z12hi_calculateff+0x2f8>
 23e740a:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e740e:	ee67 7a89 	vmul.f32	s15, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e7412:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e7416:	eddf 7a73 	vldr	s15, [pc, #460]	; 23e75e4 <_Z12hi_calculateff+0x2fc>
 23e741a:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e741e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 23e7422:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c9 * T_f * T_f * RH * RH);
 23e7426:	eddf 7a70 	vldr	s15, [pc, #448]	; 23e75e8 <_Z12hi_calculateff+0x300>

    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e742a:	eef2 9a0a 	vmov.f32	s19, #42	; 0x41500000  13.0
                (c9 * T_f * T_f * RH * RH);
 23e742e:	ee69 7a27 	vmul.f32	s15, s18, s15
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e7432:	eef4 8ae9 	vcmpe.f32	s17, s19
                (c9 * T_f * T_f * RH * RH);
 23e7436:	ee67 7a89 	vmul.f32	s15, s15, s18
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e743a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                (c9 * T_f * T_f * RH * RH);
 23e743e:	ee67 7aa8 	vmul.f32	s15, s15, s17
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e7442:	eea7 8aa8 	vfma.f32	s16, s15, s17
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e7446:	d563      	bpl.n	23e7510 <_Z12hi_calculateff+0x228>
 23e7448:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7450:	dd5e      	ble.n	23e7510 <_Z12hi_calculateff+0x228>
 23e7452:	eddf 7a66 	vldr	s15, [pc, #408]	; 23e75ec <_Z12hi_calculateff+0x304>
 23e7456:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e745e:	f140 8090 	bpl.w	23e7582 <_Z12hi_calculateff+0x29a>
      // If the RH is less than 13% and the temperature is between 80 and 112 degrees F, 
      // then the following adjustment is subtracted from HI: 
      // ADJUSTMENT = [(13-RH)/4]*SQRT{[17-ABS(T-95.)]/17}

      float Adjustment = ( (13 - RH) / 4 ) * sqrt( (17 - abs(T_f - 95.0) ) / 17 );
 23e7462:	a34d      	add	r3, pc, #308	; (adr r3, 23e7598 <_Z12hi_calculateff+0x2b0>)
 23e7464:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7468:	4620      	mov	r0, r4
 23e746a:	4629      	mov	r1, r5
 23e746c:	f7fc feb0 	bl	23e41d0 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23e7470:	4602      	mov	r2, r0
 23e7472:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23e7476:	2000      	movs	r0, #0
 23e7478:	495d      	ldr	r1, [pc, #372]	; (23e75f0 <_Z12hi_calculateff+0x308>)
 23e747a:	f7fc fea9 	bl	23e41d0 <__aeabi_dsub>
 23e747e:	2200      	movs	r2, #0
 23e7480:	4b5b      	ldr	r3, [pc, #364]	; (23e75f0 <_Z12hi_calculateff+0x308>)
 23e7482:	f7fd f987 	bl	23e4794 <__aeabi_ddiv>
 23e7486:	ec41 0b10 	vmov	d0, r0, r1
 23e748a:	f013 f9af 	bl	23fa7ec <sqrt>
 23e748e:	ee79 8ae8 	vsub.f32	s17, s19, s17
 23e7492:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 23e7496:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e749a:	ec55 4b10 	vmov	r4, r5, d0
 23e749e:	ee17 0a90 	vmov	r0, s15
 23e74a2:	f7fc fff5 	bl	23e4490 <__aeabi_f2d>
 23e74a6:	4622      	mov	r2, r4
 23e74a8:	462b      	mov	r3, r5
 23e74aa:	f7fd f849 	bl	23e4540 <__aeabi_dmul>
 23e74ae:	f7fd fb3f 	bl	23e4b30 <__aeabi_d2f>

      HI_f = HI_f - Adjustment;
 23e74b2:	ee07 0a90 	vmov	s15, r0
 23e74b6:	ee38 8a67 	vsub.f32	s16, s16, s15
      HI_f = HI_f + Adjustment;
    }
  }

  // Convert Heat Index from Fahrenheit to Celsius
  HI = (HI_f - 32.0) * 5.0 / 9.0;
 23e74ba:	ee18 0a10 	vmov	r0, s16
 23e74be:	f7fc ffe7 	bl	23e4490 <__aeabi_f2d>
 23e74c2:	2200      	movs	r2, #0
 23e74c4:	4b3a      	ldr	r3, [pc, #232]	; (23e75b0 <_Z12hi_calculateff+0x2c8>)
 23e74c6:	f7fc fe83 	bl	23e41d0 <__aeabi_dsub>
 23e74ca:	2200      	movs	r2, #0
 23e74cc:	4b37      	ldr	r3, [pc, #220]	; (23e75ac <_Z12hi_calculateff+0x2c4>)
 23e74ce:	f7fd f837 	bl	23e4540 <__aeabi_dmul>
 23e74d2:	2200      	movs	r2, #0
 23e74d4:	4b34      	ldr	r3, [pc, #208]	; (23e75a8 <_Z12hi_calculateff+0x2c0>)
 23e74d6:	f7fd f95d 	bl	23e4794 <__aeabi_ddiv>
 23e74da:	f7fd fb29 	bl	23e4b30 <__aeabi_d2f>
 23e74de:	ee00 0a10 	vmov	s0, r0

  // Quality Control Check
  HI = (isnan(HI) || (HI < QC_MIN_HI)  || (HI >QC_MAX_HI))  ? QC_ERR_HI  : HI;
 23e74e2:	eeb4 0a40 	vcmp.f32	s0, s0
 23e74e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e74ea:	d60b      	bvs.n	23e7504 <_Z12hi_calculateff+0x21c>
 23e74ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e74f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e74f4:	d406      	bmi.n	23e7504 <_Z12hi_calculateff+0x21c>
 23e74f6:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23e75f4 <_Z12hi_calculateff+0x30c>
 23e74fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e74fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7502:	dd01      	ble.n	23e7508 <_Z12hi_calculateff+0x220>
 23e7504:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 23e75f8 <_Z12hi_calculateff+0x310>

  return (HI);
}
 23e7508:	ecbd 8b04 	vpop	{d8-d9}
 23e750c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e7510:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23e75fc <_Z12hi_calculateff+0x314>
 23e7514:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e7518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e751c:	ddcd      	ble.n	23e74ba <_Z12hi_calculateff+0x1d2>
 23e751e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e7522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7526:	ddc8      	ble.n	23e74ba <_Z12hi_calculateff+0x1d2>
 23e7528:	eddf 7a35 	vldr	s15, [pc, #212]	; 23e7600 <_Z12hi_calculateff+0x318>
 23e752c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e7530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7534:	d5c1      	bpl.n	23e74ba <_Z12hi_calculateff+0x1d2>
      float Adjustment = ( (RH - 85) / 10 ) * ( (87.0 - T_f) / 5 );
 23e7536:	eddf 0a31 	vldr	s1, [pc, #196]	; 23e75fc <_Z12hi_calculateff+0x314>
 23e753a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 23e753e:	ee78 8ae0 	vsub.f32	s17, s17, s1
 23e7542:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 23e7546:	ee17 0a90 	vmov	r0, s15
 23e754a:	f7fc ffa1 	bl	23e4490 <__aeabi_f2d>
 23e754e:	4622      	mov	r2, r4
 23e7550:	4606      	mov	r6, r0
 23e7552:	460f      	mov	r7, r1
 23e7554:	a112      	add	r1, pc, #72	; (adr r1, 23e75a0 <_Z12hi_calculateff+0x2b8>)
 23e7556:	e9d1 0100 	ldrd	r0, r1, [r1]
 23e755a:	462b      	mov	r3, r5
 23e755c:	f7fc fe38 	bl	23e41d0 <__aeabi_dsub>
 23e7560:	2200      	movs	r2, #0
 23e7562:	4b12      	ldr	r3, [pc, #72]	; (23e75ac <_Z12hi_calculateff+0x2c4>)
 23e7564:	f7fd f916 	bl	23e4794 <__aeabi_ddiv>
 23e7568:	4602      	mov	r2, r0
 23e756a:	460b      	mov	r3, r1
 23e756c:	4630      	mov	r0, r6
 23e756e:	4639      	mov	r1, r7
 23e7570:	f7fc ffe6 	bl	23e4540 <__aeabi_dmul>
 23e7574:	f7fd fadc 	bl	23e4b30 <__aeabi_d2f>
      HI_f = HI_f + Adjustment;
 23e7578:	ee07 0a90 	vmov	s15, r0
 23e757c:	ee38 8a27 	vadd.f32	s16, s16, s15
 23e7580:	e79b      	b.n	23e74ba <_Z12hi_calculateff+0x1d2>
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e7582:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23e75fc <_Z12hi_calculateff+0x314>
 23e7586:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e758a:	e7ca      	b.n	23e7522 <_Z12hi_calculateff+0x23a>
 23e758c:	f3af 8000 	nop.w
 23e7590:	4dd2f1aa 	.word	0x4dd2f1aa
 23e7594:	3fb81062 	.word	0x3fb81062
 23e7598:	00000000 	.word	0x00000000
 23e759c:	4057c000 	.word	0x4057c000
 23e75a0:	00000000 	.word	0x00000000
 23e75a4:	4055c000 	.word	0x4055c000
 23e75a8:	40220000 	.word	0x40220000
 23e75ac:	40140000 	.word	0x40140000
 23e75b0:	40400000 	.word	0x40400000
 23e75b4:	40510000 	.word	0x40510000
 23e75b8:	3ff33333 	.word	0x3ff33333
 23e75bc:	404e8000 	.word	0x404e8000
 23e75c0:	3fe00000 	.word	0x3fe00000
 23e75c4:	42a00000 	.word	0x42a00000
 23e75c8:	40032311 	.word	0x40032311
 23e75cc:	c2298419 	.word	0xc2298419
 23e75d0:	41224b16 	.word	0x41224b16
 23e75d4:	be662648 	.word	0xbe662648
 23e75d8:	bbe00fe0 	.word	0xbbe00fe0
 23e75dc:	bd6087f8 	.word	0xbd6087f8
 23e75e0:	3aa10dac 	.word	0x3aa10dac
 23e75e4:	3a5f8fc8 	.word	0x3a5f8fc8
 23e75e8:	b6058bf1 	.word	0xb6058bf1
 23e75ec:	42e00000 	.word	0x42e00000
 23e75f0:	40310000 	.word	0x40310000
 23e75f4:	42700000 	.word	0x42700000
 23e75f8:	c479f99a 	.word	0xc479f99a
 23e75fc:	42aa0000 	.word	0x42aa0000
 23e7600:	42ae0000 	.word	0x42ae0000
 23e7604:	33333333 	.word	0x33333333
 23e7608:	c08f3f33 	.word	0xc08f3f33

023e760c <_Z15wbgt_initializev>:
/* 
 *=======================================================================================================================
 * wbgt_initialize() - Wet Bulb Globe Temperature
 *=======================================================================================================================
 */
void wbgt_initialize() {
 23e760c:	b508      	push	{r3, lr}
  Output("WBGT:INIT");
 23e760e:	480c      	ldr	r0, [pc, #48]	; (23e7640 <_Z15wbgt_initializev+0x34>)
 23e7610:	f7fe ff2c 	bl	23e646c <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e7614:	4b0b      	ldr	r3, [pc, #44]	; (23e7644 <_Z15wbgt_initializev+0x38>)
 23e7616:	781b      	ldrb	r3, [r3, #0]
 23e7618:	b17b      	cbz	r3, 23e763a <_Z15wbgt_initializev+0x2e>
 23e761a:	4b0b      	ldr	r3, [pc, #44]	; (23e7648 <_Z15wbgt_initializev+0x3c>)
 23e761c:	781b      	ldrb	r3, [r3, #0]
 23e761e:	b163      	cbz	r3, 23e763a <_Z15wbgt_initializev+0x2e>
    WBGT_exists = true;
 23e7620:	2201      	movs	r2, #1
 23e7622:	4b0a      	ldr	r3, [pc, #40]	; (23e764c <_Z15wbgt_initializev+0x40>)
 23e7624:	701a      	strb	r2, [r3, #0]
    if (MCP_3_exists) {
 23e7626:	4b0a      	ldr	r3, [pc, #40]	; (23e7650 <_Z15wbgt_initializev+0x44>)
 23e7628:	781b      	ldrb	r3, [r3, #0]
 23e762a:	b123      	cbz	r3, 23e7636 <_Z15wbgt_initializev+0x2a>
      Output ("WBGT:OK w/Globe");
 23e762c:	4809      	ldr	r0, [pc, #36]	; (23e7654 <_Z15wbgt_initializev+0x48>)
    }
  }
  else {
    Output ("WBGT:NF");
  }
}
 23e762e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBGT:NF");
 23e7632:	f7fe bf1b 	b.w	23e646c <_Z6OutputPKc>
      Output ("WBGT:OK wo/Globe");
 23e7636:	4808      	ldr	r0, [pc, #32]	; (23e7658 <_Z15wbgt_initializev+0x4c>)
 23e7638:	e7f9      	b.n	23e762e <_Z15wbgt_initializev+0x22>
    Output ("WBGT:NF");
 23e763a:	4808      	ldr	r0, [pc, #32]	; (23e765c <_Z15wbgt_initializev+0x50>)
 23e763c:	e7f7      	b.n	23e762e <_Z15wbgt_initializev+0x22>
 23e763e:	bf00      	nop
 23e7640:	023fd51e 	.word	0x023fd51e
 23e7644:	1006a2c8 	.word	0x1006a2c8
 23e7648:	1006a7d0 	.word	0x1006a7d0
 23e764c:	1006a7e5 	.word	0x1006a7e5
 23e7650:	1006a2ca 	.word	0x1006a2ca
 23e7654:	023fd528 	.word	0x023fd528
 23e7658:	023fd538 	.word	0x023fd538
 23e765c:	023fd549 	.word	0x023fd549

023e7660 <_Z13wbgt_using_hid>:
/* 
 *=======================================================================================================================
 * wbgt_using_hi() - Compute Web Bulb Globe Temperature using Heat Index
 *=======================================================================================================================
 */
double wbgt_using_hi(double HIc) {
 23e7660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (HIc == -999.9) {
 23e7662:	a32f      	add	r3, pc, #188	; (adr r3, 23e7720 <_Z13wbgt_using_hid+0xc0>)
 23e7664:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_hi(double HIc) {
 23e7668:	ec55 4b10 	vmov	r4, r5, d0
  if (HIc == -999.9) {
 23e766c:	ee10 0a10 	vmov	r0, s0
 23e7670:	4629      	mov	r1, r5
 23e7672:	f7fd f9cd 	bl	23e4a10 <__aeabi_dcmpeq>
 23e7676:	2800      	cmp	r0, #0
 23e7678:	d140      	bne.n	23e76fc <_Z13wbgt_using_hid+0x9c>
    return (-999.9);
  }

  double HIf = HIc * 9.0 / 5.0 + 32.0;
 23e767a:	2200      	movs	r2, #0
 23e767c:	4620      	mov	r0, r4
 23e767e:	4629      	mov	r1, r5
 23e7680:	4b29      	ldr	r3, [pc, #164]	; (23e7728 <_Z13wbgt_using_hid+0xc8>)
 23e7682:	f7fc ff5d 	bl	23e4540 <__aeabi_dmul>
 23e7686:	2200      	movs	r2, #0
 23e7688:	4b28      	ldr	r3, [pc, #160]	; (23e772c <_Z13wbgt_using_hid+0xcc>)
 23e768a:	f7fd f883 	bl	23e4794 <__aeabi_ddiv>
 23e768e:	2200      	movs	r2, #0
 23e7690:	4b27      	ldr	r3, [pc, #156]	; (23e7730 <_Z13wbgt_using_hid+0xd0>)
 23e7692:	f7fc fd9f 	bl	23e41d4 <__adddf3>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23e7696:	4602      	mov	r2, r0
 23e7698:	460b      	mov	r3, r1
 23e769a:	4604      	mov	r4, r0
 23e769c:	460d      	mov	r5, r1
 23e769e:	f7fc ff4f 	bl	23e4540 <__aeabi_dmul>

  // Below produces Wet Bulb Globe Temperature in Celsius
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e76a2:	a31b      	add	r3, pc, #108	; (adr r3, 23e7710 <_Z13wbgt_using_hid+0xb0>)
 23e76a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e76a8:	f7fc ff4a 	bl	23e4540 <__aeabi_dmul>
 23e76ac:	a31a      	add	r3, pc, #104	; (adr r3, 23e7718 <_Z13wbgt_using_hid+0xb8>)
 23e76ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e76b2:	4606      	mov	r6, r0
 23e76b4:	460f      	mov	r7, r1
 23e76b6:	4620      	mov	r0, r4
 23e76b8:	4629      	mov	r1, r5
 23e76ba:	f7fc ff41 	bl	23e4540 <__aeabi_dmul>
 23e76be:	4602      	mov	r2, r0
 23e76c0:	460b      	mov	r3, r1
 23e76c2:	4630      	mov	r0, r6
 23e76c4:	4639      	mov	r1, r7
 23e76c6:	f7fc fd85 	bl	23e41d4 <__adddf3>
 23e76ca:	2200      	movs	r2, #0
 23e76cc:	4b19      	ldr	r3, [pc, #100]	; (23e7734 <_Z13wbgt_using_hid+0xd4>)
 23e76ce:	f7fc fd7f 	bl	23e41d0 <__aeabi_dsub>

  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e76d2:	4602      	mov	r2, r0
 23e76d4:	460b      	mov	r3, r1
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e76d6:	4604      	mov	r4, r0
 23e76d8:	460d      	mov	r5, r1
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e76da:	f7fd f9cb 	bl	23e4a74 <__aeabi_dcmpun>
 23e76de:	b980      	cbnz	r0, 23e7702 <_Z13wbgt_using_hid+0xa2>
 23e76e0:	2200      	movs	r2, #0
 23e76e2:	4620      	mov	r0, r4
 23e76e4:	4629      	mov	r1, r5
 23e76e6:	4b14      	ldr	r3, [pc, #80]	; (23e7738 <_Z13wbgt_using_hid+0xd8>)
 23e76e8:	f7fd f99c 	bl	23e4a24 <__aeabi_dcmplt>
 23e76ec:	b948      	cbnz	r0, 23e7702 <_Z13wbgt_using_hid+0xa2>
 23e76ee:	2200      	movs	r2, #0
 23e76f0:	4620      	mov	r0, r4
 23e76f2:	4629      	mov	r1, r5
 23e76f4:	4b11      	ldr	r3, [pc, #68]	; (23e773c <_Z13wbgt_using_hid+0xdc>)
 23e76f6:	f7fd f9b3 	bl	23e4a60 <__aeabi_dcmpgt>
 23e76fa:	b910      	cbnz	r0, 23e7702 <_Z13wbgt_using_hid+0xa2>
  return (TWc);
}
 23e76fc:	ec45 4b10 	vmov	d0, r4, r5
 23e7700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e7702:	a507      	add	r5, pc, #28	; (adr r5, 23e7720 <_Z13wbgt_using_hid+0xc0>)
 23e7704:	e9d5 4500 	ldrd	r4, r5, [r5]
 23e7708:	e7f8      	b.n	23e76fc <_Z13wbgt_using_hid+0x9c>
 23e770a:	bf00      	nop
 23e770c:	f3af 8000 	nop.w
 23e7710:	19ce075f 	.word	0x19ce075f
 23e7714:	bf6bda51 	.word	0xbf6bda51
 23e7718:	eb851eb8 	.word	0xeb851eb8
 23e771c:	3feeb851 	.word	0x3feeb851
 23e7720:	33333333 	.word	0x33333333
 23e7724:	c08f3f33 	.word	0xc08f3f33
 23e7728:	40220000 	.word	0x40220000
 23e772c:	40140000 	.word	0x40140000
 23e7730:	40400000 	.word	0x40400000
 23e7734:	40410000 	.word	0x40410000
 23e7738:	c0440000 	.word	0xc0440000
 23e773c:	404e0000 	.word	0x404e0000

023e7740 <_Z14wbgt_using_wbtddd>:
/* 
 *=======================================================================================================================
 * wbgt_using_wbt() - Compute Web Bulb Globe Temperature using web bulb temperature
 *=======================================================================================================================
 */
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e7740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Ta = mcp1 temp
  // Tg = mcp3 temp
  // Tw = wbt_calculate(Ta, RH)

  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e7744:	a326      	add	r3, pc, #152	; (adr r3, 23e77e0 <_Z14wbgt_using_wbtddd+0xa0>)
 23e7746:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e774a:	ec51 0b12 	vmov	r0, r1, d2
 23e774e:	ec57 6b10 	vmov	r6, r7, d0
 23e7752:	ec59 8b11 	vmov	r8, r9, d1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e7756:	f7fc fef3 	bl	23e4540 <__aeabi_dmul>
 23e775a:	a323      	add	r3, pc, #140	; (adr r3, 23e77e8 <_Z14wbgt_using_wbtddd+0xa8>)
 23e775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7760:	4604      	mov	r4, r0
 23e7762:	460d      	mov	r5, r1
 23e7764:	4640      	mov	r0, r8
 23e7766:	4649      	mov	r1, r9
 23e7768:	f7fc feea 	bl	23e4540 <__aeabi_dmul>
 23e776c:	4602      	mov	r2, r0
 23e776e:	460b      	mov	r3, r1
 23e7770:	4620      	mov	r0, r4
 23e7772:	4629      	mov	r1, r5
 23e7774:	f7fc fd2e 	bl	23e41d4 <__adddf3>
 23e7778:	a31d      	add	r3, pc, #116	; (adr r3, 23e77f0 <_Z14wbgt_using_wbtddd+0xb0>)
 23e777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e777e:	4604      	mov	r4, r0
 23e7780:	460d      	mov	r5, r1
 23e7782:	4630      	mov	r0, r6
 23e7784:	4639      	mov	r1, r7
 23e7786:	f7fc fedb 	bl	23e4540 <__aeabi_dmul>
 23e778a:	4602      	mov	r2, r0
 23e778c:	460b      	mov	r3, r1
 23e778e:	4620      	mov	r0, r4
 23e7790:	4629      	mov	r1, r5
 23e7792:	f7fc fd1f 	bl	23e41d4 <__adddf3>

  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e7796:	4602      	mov	r2, r0
 23e7798:	460b      	mov	r3, r1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e779a:	4604      	mov	r4, r0
 23e779c:	460d      	mov	r5, r1
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e779e:	f7fd f969 	bl	23e4a74 <__aeabi_dcmpun>
 23e77a2:	b988      	cbnz	r0, 23e77c8 <_Z14wbgt_using_wbtddd+0x88>
 23e77a4:	2200      	movs	r2, #0
 23e77a6:	4620      	mov	r0, r4
 23e77a8:	4629      	mov	r1, r5
 23e77aa:	4b0b      	ldr	r3, [pc, #44]	; (23e77d8 <_Z14wbgt_using_wbtddd+0x98>)
 23e77ac:	f7fd f93a 	bl	23e4a24 <__aeabi_dcmplt>
 23e77b0:	b950      	cbnz	r0, 23e77c8 <_Z14wbgt_using_wbtddd+0x88>
 23e77b2:	2200      	movs	r2, #0
 23e77b4:	4620      	mov	r0, r4
 23e77b6:	4629      	mov	r1, r5
 23e77b8:	4b08      	ldr	r3, [pc, #32]	; (23e77dc <_Z14wbgt_using_wbtddd+0x9c>)
 23e77ba:	f7fd f951 	bl	23e4a60 <__aeabi_dcmpgt>
 23e77be:	b918      	cbnz	r0, 23e77c8 <_Z14wbgt_using_wbtddd+0x88>

  return (wbgt);
}
 23e77c0:	ec45 4b10 	vmov	d0, r4, r5
 23e77c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e77c8:	a501      	add	r5, pc, #4	; (adr r5, 23e77d0 <_Z14wbgt_using_wbtddd+0x90>)
 23e77ca:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (wbgt);
 23e77ce:	e7f7      	b.n	23e77c0 <_Z14wbgt_using_wbtddd+0x80>
 23e77d0:	33333333 	.word	0x33333333
 23e77d4:	c08f3f33 	.word	0xc08f3f33
 23e77d8:	c0440000 	.word	0xc0440000
 23e77dc:	404e0000 	.word	0x404e0000
 23e77e0:	66666666 	.word	0x66666666
 23e77e4:	3fe66666 	.word	0x3fe66666
 23e77e8:	9999999a 	.word	0x9999999a
 23e77ec:	3fc99999 	.word	0x3fc99999
 23e77f0:	9999999a 	.word	0x9999999a
 23e77f4:	3fb99999 	.word	0x3fb99999

023e77f8 <_Z17si1145_initializev>:
/* 
 *=======================================================================================================================
 * si1145_initialize() - SI1145 sensor initialize
 *=======================================================================================================================
 */
void si1145_initialize() {
 23e77f8:	b570      	push	{r4, r5, r6, lr}
  Output("SI1145:INIT");
 23e77fa:	484b      	ldr	r0, [pc, #300]	; (23e7928 <_Z17si1145_initializev+0x130>)
void si1145_initialize() {
 23e77fc:	ed2d 8b02 	vpush	{d8}
  Output("SI1145:INIT");
 23e7800:	f7fe fe34 	bl	23e646c <_Z6OutputPKc>
  
  // SSB_SI1145 UV index & IR & Visible Sensor (I2C ADDRESS = 0x60)
  if (! uv.begin(&Wire)) {
 23e7804:	f012 fb72 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7808:	4601      	mov	r1, r0
 23e780a:	4848      	ldr	r0, [pc, #288]	; (23e792c <_Z17si1145_initializev+0x134>)
 23e780c:	f009 ff18 	bl	23f1640 <_ZN15Adafruit_SI11455beginEP7TwoWire>
 23e7810:	4d47      	ldr	r5, [pc, #284]	; (23e7930 <_Z17si1145_initializev+0x138>)
 23e7812:	4604      	mov	r4, r0
 23e7814:	b958      	cbnz	r0, 23e782e <_Z17si1145_initializev+0x36>
    Output ("SI:NF");
 23e7816:	4847      	ldr	r0, [pc, #284]	; (23e7934 <_Z17si1145_initializev+0x13c>)
 23e7818:	f7fe fe28 	bl	23e646c <_Z6OutputPKc>
    SI1145_exists = false;
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e781c:	4a46      	ldr	r2, [pc, #280]	; (23e7938 <_Z17si1145_initializev+0x140>)
    SI1145_exists = false;
 23e781e:	702c      	strb	r4, [r5, #0]
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e7820:	6813      	ldr	r3, [r2, #0]
 23e7822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e7826:	6013      	str	r3, [r2, #0]
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
    Output (msgbuf);
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
    Output (msgbuf);
  }
}
 23e7828:	ecbd 8b02 	vpop	{d8}
 23e782c:	bd70      	pop	{r4, r5, r6, pc}
    SI1145_exists = true;
 23e782e:	2301      	movs	r3, #1
    Output ("SI:OK");
 23e7830:	4842      	ldr	r0, [pc, #264]	; (23e793c <_Z17si1145_initializev+0x144>)
    SI1145_exists = true;
 23e7832:	702b      	strb	r3, [r5, #0]
    Output ("SI:OK");
 23e7834:	f7fe fe1a 	bl	23e646c <_Z6OutputPKc>
    si_last_vis = uv.readVisible();
 23e7838:	483c      	ldr	r0, [pc, #240]	; (23e792c <_Z17si1145_initializev+0x134>)
 23e783a:	f009 fe1a 	bl	23f1472 <_ZN15Adafruit_SI114511readVisibleEv>
 23e783e:	ee07 0a90 	vmov	s15, r0
 23e7842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e7846:	4c3e      	ldr	r4, [pc, #248]	; (23e7940 <_Z17si1145_initializev+0x148>)
    si_last_ir = uv.readIR();
 23e7848:	4838      	ldr	r0, [pc, #224]	; (23e792c <_Z17si1145_initializev+0x134>)
    si_last_vis = uv.readVisible();
 23e784a:	edc4 7a00 	vstr	s15, [r4]
    si_last_ir = uv.readIR();
 23e784e:	f009 fe13 	bl	23f1478 <_ZN15Adafruit_SI11456readIREv>
 23e7852:	ee07 0a90 	vmov	s15, r0
 23e7856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e785a:	4e3a      	ldr	r6, [pc, #232]	; (23e7944 <_Z17si1145_initializev+0x14c>)
    si_last_uv = uv.readUV()/100.0;
 23e785c:	4833      	ldr	r0, [pc, #204]	; (23e792c <_Z17si1145_initializev+0x134>)
    si_last_ir = uv.readIR();
 23e785e:	edc6 7a00 	vstr	s15, [r6]
    si_last_uv = uv.readUV()/100.0;
 23e7862:	f009 fe03 	bl	23f146c <_ZN15Adafruit_SI11456readUVEv>
 23e7866:	f7fc fe01 	bl	23e446c <__aeabi_i2d>
 23e786a:	2200      	movs	r2, #0
 23e786c:	4b36      	ldr	r3, [pc, #216]	; (23e7948 <_Z17si1145_initializev+0x150>)
 23e786e:	f7fc ff91 	bl	23e4794 <__aeabi_ddiv>
 23e7872:	f7fd f95d 	bl	23e4b30 <__aeabi_d2f>
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e7876:	ed94 8a00 	vldr	s16, [r4]
    si_last_uv = uv.readUV()/100.0;
 23e787a:	4d34      	ldr	r5, [pc, #208]	; (23e794c <_Z17si1145_initializev+0x154>)
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e787c:	2464      	movs	r4, #100	; 0x64
    si_last_uv = uv.readUV()/100.0;
 23e787e:	6028      	str	r0, [r5, #0]
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e7880:	ee18 0a10 	vmov	r0, s16
 23e7884:	f7fc fe04 	bl	23e4490 <__aeabi_f2d>
 23e7888:	2200      	movs	r2, #0
 23e788a:	4b2f      	ldr	r3, [pc, #188]	; (23e7948 <_Z17si1145_initializev+0x150>)
 23e788c:	f7fc fe58 	bl	23e4540 <__aeabi_dmul>
 23e7890:	f7fd f906 	bl	23e4aa0 <__aeabi_d2iz>
 23e7894:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e7898:	fb90 f3f4 	sdiv	r3, r0, r4
 23e789c:	ee17 2a90 	vmov	r2, s15
 23e78a0:	fb03 0314 	mls	r3, r3, r4, r0
 23e78a4:	492a      	ldr	r1, [pc, #168]	; (23e7950 <_Z17si1145_initializev+0x158>)
 23e78a6:	482b      	ldr	r0, [pc, #172]	; (23e7954 <_Z17si1145_initializev+0x15c>)
 23e78a8:	f010 f90c 	bl	23f7ac4 <sprintf>
    Output (msgbuf);
 23e78ac:	4829      	ldr	r0, [pc, #164]	; (23e7954 <_Z17si1145_initializev+0x15c>)
 23e78ae:	f7fe fddd 	bl	23e646c <_Z6OutputPKc>
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
 23e78b2:	ed96 8a00 	vldr	s16, [r6]
 23e78b6:	ee18 0a10 	vmov	r0, s16
 23e78ba:	f7fc fde9 	bl	23e4490 <__aeabi_f2d>
 23e78be:	2200      	movs	r2, #0
 23e78c0:	4b21      	ldr	r3, [pc, #132]	; (23e7948 <_Z17si1145_initializev+0x150>)
 23e78c2:	f7fc fe3d 	bl	23e4540 <__aeabi_dmul>
 23e78c6:	f7fd f8eb 	bl	23e4aa0 <__aeabi_d2iz>
 23e78ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e78ce:	fb90 f3f4 	sdiv	r3, r0, r4
 23e78d2:	ee17 2a90 	vmov	r2, s15
 23e78d6:	fb03 0314 	mls	r3, r3, r4, r0
 23e78da:	491f      	ldr	r1, [pc, #124]	; (23e7958 <_Z17si1145_initializev+0x160>)
 23e78dc:	481d      	ldr	r0, [pc, #116]	; (23e7954 <_Z17si1145_initializev+0x15c>)
 23e78de:	f010 f8f1 	bl	23f7ac4 <sprintf>
    Output (msgbuf);
 23e78e2:	481c      	ldr	r0, [pc, #112]	; (23e7954 <_Z17si1145_initializev+0x15c>)
 23e78e4:	f7fe fdc2 	bl	23e646c <_Z6OutputPKc>
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
 23e78e8:	ed95 8a00 	vldr	s16, [r5]
 23e78ec:	ee18 0a10 	vmov	r0, s16
 23e78f0:	f7fc fdce 	bl	23e4490 <__aeabi_f2d>
 23e78f4:	2200      	movs	r2, #0
 23e78f6:	4b14      	ldr	r3, [pc, #80]	; (23e7948 <_Z17si1145_initializev+0x150>)
 23e78f8:	f7fc fe22 	bl	23e4540 <__aeabi_dmul>
 23e78fc:	f7fd f8d0 	bl	23e4aa0 <__aeabi_d2iz>
 23e7900:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e7904:	fb90 f3f4 	sdiv	r3, r0, r4
 23e7908:	ee17 2a90 	vmov	r2, s15
 23e790c:	fb03 0314 	mls	r3, r3, r4, r0
 23e7910:	4912      	ldr	r1, [pc, #72]	; (23e795c <_Z17si1145_initializev+0x164>)
 23e7912:	4810      	ldr	r0, [pc, #64]	; (23e7954 <_Z17si1145_initializev+0x15c>)
 23e7914:	f010 f8d6 	bl	23f7ac4 <sprintf>
}
 23e7918:	ecbd 8b02 	vpop	{d8}
 23e791c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output (msgbuf);
 23e7920:	480c      	ldr	r0, [pc, #48]	; (23e7954 <_Z17si1145_initializev+0x15c>)
 23e7922:	f7fe bda3 	b.w	23e646c <_Z6OutputPKc>
 23e7926:	bf00      	nop
 23e7928:	023fd551 	.word	0x023fd551
 23e792c:	1007ac18 	.word	0x1007ac18
 23e7930:	1006a7d2 	.word	0x1006a7d2
 23e7934:	023fe70b 	.word	0x023fe70b
 23e7938:	1006a178 	.word	0x1006a178
 23e793c:	023fd55d 	.word	0x023fd55d
 23e7940:	1007abdc 	.word	0x1007abdc
 23e7944:	1007abd4 	.word	0x1007abd4
 23e7948:	40590000 	.word	0x40590000
 23e794c:	1007abd8 	.word	0x1007abd8
 23e7950:	023fd563 	.word	0x023fd563
 23e7954:	1006f128 	.word	0x1006f128
 23e7958:	023fd572 	.word	0x023fd572
 23e795c:	023fd581 	.word	0x023fd581

023e7960 <_Z14vlx_initializev>:
 * 400  lx Sunrise or sunset on a clear day
 * 1000 lx Overcast day; typical TV studio lighting
 * 
 *=======================================================================================================================
 */
void vlx_initialize() {
 23e7960:	b508      	push	{r3, lr}
  Output("VLX:INIT");
 23e7962:	480f      	ldr	r0, [pc, #60]	; (23e79a0 <_Z14vlx_initializev+0x40>)
 23e7964:	f7fe fd82 	bl	23e646c <_Z6OutputPKc>

  if (veml.begin()) {
 23e7968:	f012 fac0 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e796c:	4601      	mov	r1, r0
 23e796e:	480d      	ldr	r0, [pc, #52]	; (23e79a4 <_Z14vlx_initializev+0x44>)
 23e7970:	f00a fbdb 	bl	23f212a <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e7974:	4a0c      	ldr	r2, [pc, #48]	; (23e79a8 <_Z14vlx_initializev+0x48>)
 23e7976:	4b0d      	ldr	r3, [pc, #52]	; (23e79ac <_Z14vlx_initializev+0x4c>)
 23e7978:	b140      	cbz	r0, 23e798c <_Z14vlx_initializev+0x2c>
    VEML7700_exists = true;
 23e797a:	2101      	movs	r1, #1
 23e797c:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "VLX OK";
 23e797e:	4a0c      	ldr	r2, [pc, #48]	; (23e79b0 <_Z14vlx_initializev+0x50>)
 23e7980:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "VLX NF";
    VEML7700_exists = false;
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
  }
  Output (msgp);
 23e7982:	6818      	ldr	r0, [r3, #0]
}
 23e7984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e7988:	f7fe bd70 	b.w	23e646c <_Z6OutputPKc>
    msgp = (char *) "VLX NF";
 23e798c:	4909      	ldr	r1, [pc, #36]	; (23e79b4 <_Z14vlx_initializev+0x54>)
    VEML7700_exists = false;
 23e798e:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "VLX NF";
 23e7990:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e7992:	4909      	ldr	r1, [pc, #36]	; (23e79b8 <_Z14vlx_initializev+0x58>)
 23e7994:	680a      	ldr	r2, [r1, #0]
 23e7996:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 23e799a:	600a      	str	r2, [r1, #0]
 23e799c:	e7f1      	b.n	23e7982 <_Z14vlx_initializev+0x22>
 23e799e:	bf00      	nop
 23e79a0:	023fd590 	.word	0x023fd590
 23e79a4:	1007ac20 	.word	0x1007ac20
 23e79a8:	1006a7e4 	.word	0x1006a7e4
 23e79ac:	1006f528 	.word	0x1006f528
 23e79b0:	023fd599 	.word	0x023fd599
 23e79b4:	023fd5a0 	.word	0x023fd5a0
 23e79b8:	1006a178 	.word	0x1006a178

023e79bc <_Z14blx_initializev>:
/* 
 *=======================================================================================================================
 * blx_initialize() - DFRobot_B_LUX_V30B sensor
 *=======================================================================================================================
 */
void blx_initialize() {
 23e79bc:	b508      	push	{r3, lr}
  Output("BLX:INIT");
 23e79be:	480d      	ldr	r0, [pc, #52]	; (23e79f4 <_Z14blx_initializev+0x38>)
 23e79c0:	f7fe fd54 	bl	23e646c <_Z6OutputPKc>

  if (I2C_Device_Exist(BLX_ADDRESS)) {
 23e79c4:	204a      	movs	r0, #74	; 0x4a
 23e79c6:	f7fe fb48 	bl	23e605a <_Z16I2C_Device_Existh>
 23e79ca:	4a0b      	ldr	r2, [pc, #44]	; (23e79f8 <_Z14blx_initializev+0x3c>)
 23e79cc:	4b0b      	ldr	r3, [pc, #44]	; (23e79fc <_Z14blx_initializev+0x40>)
 23e79ce:	b140      	cbz	r0, 23e79e2 <_Z14blx_initializev+0x26>
    BLX_exists = true;
 23e79d0:	2101      	movs	r1, #1
 23e79d2:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "BLX:OK";
 23e79d4:	4a0a      	ldr	r2, [pc, #40]	; (23e7a00 <_Z14blx_initializev+0x44>)
 23e79d6:	601a      	str	r2, [r3, #0]
  else {
    BLX_exists = false;
    msgp = (char *) "BLX:NF";
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
  }
  Output (msgp);
 23e79d8:	6818      	ldr	r0, [r3, #0]
}
 23e79da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e79de:	f7fe bd45 	b.w	23e646c <_Z6OutputPKc>
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e79e2:	4908      	ldr	r1, [pc, #32]	; (23e7a04 <_Z14blx_initializev+0x48>)
    BLX_exists = false;
 23e79e4:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "BLX:NF";
 23e79e6:	4a08      	ldr	r2, [pc, #32]	; (23e7a08 <_Z14blx_initializev+0x4c>)
 23e79e8:	601a      	str	r2, [r3, #0]
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e79ea:	680a      	ldr	r2, [r1, #0]
 23e79ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 23e79f0:	600a      	str	r2, [r1, #0]
 23e79f2:	e7f1      	b.n	23e79d8 <_Z14blx_initializev+0x1c>
 23e79f4:	023fd5a7 	.word	0x023fd5a7
 23e79f8:	1006a280 	.word	0x1006a280
 23e79fc:	1006f528 	.word	0x1006f528
 23e7a00:	023fd5b0 	.word	0x023fd5b0
 23e7a04:	1006a178 	.word	0x1006a178
 23e7a08:	023fd5b7 	.word	0x023fd5b7
 23e7a0c:	00000000 	.word	0x00000000

023e7a10 <_Z15blx_takereadingv>:
/* 
 *=======================================================================================================================
 * blx_takereading() - DFRobot_B_LUX_V30B sensor reading
 *=======================================================================================================================
 */
float blx_takereading() {
 23e7a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t raw;
  uint8_t data[4]; // Array to hold the 4 bytes of data
  const unsigned long timeout = 1000; // Timeout in milliseconds
  unsigned long startTime;

  Wire.beginTransmission(BLX_ADDRESS);
 23e7a12:	f012 fa6b 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7a16:	214a      	movs	r1, #74	; 0x4a
 23e7a18:	f010 ff26 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00); // Point to the data register address
 23e7a1c:	f012 fa66 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7a20:	2100      	movs	r1, #0
 23e7a22:	f7fe f997 	bl	23e5d54 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(false); // false tells the I2C master to not release the bus between the write and read operations
 23e7a26:	f012 fa61 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7a2a:	2100      	movs	r1, #0
 23e7a2c:	f010 ff1f 	bl	23f886e <_ZN7TwoWire15endTransmissionEh>

  // Request 4 bytes from the device
  Wire.requestFrom(BLX_ADDRESS, 4);
 23e7a30:	f012 fa5c 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7a34:	2204      	movs	r2, #4
 23e7a36:	214a      	movs	r1, #74	; 0x4a
 23e7a38:	f010 ff0f 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23e7a3c:	f00f fa14 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
 23e7a40:	4604      	mov	r4, r0

  startTime = millis(); // Record the start time
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e7a42:	f012 fa53 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7a46:	6803      	ldr	r3, [r0, #0]
 23e7a48:	691b      	ldr	r3, [r3, #16]
 23e7a4a:	4798      	blx	r3
 23e7a4c:	2803      	cmp	r0, #3
 23e7a4e:	dc09      	bgt.n	23e7a64 <_Z15blx_takereadingv+0x54>
 23e7a50:	f00f fa0a 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - startTime > timeout) { // Check if timeout has been reached
 23e7a54:	1b00      	subs	r0, r0, r4
 23e7a56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23e7a5a:	d826      	bhi.n	23e7aaa <_Z15blx_takereadingv+0x9a>
      return -1; // Return error code if timeout occurs
    }
    delay(1); // Short delay to prevent busy-waiting
 23e7a5c:	2001      	movs	r0, #1
 23e7a5e:	f010 f911 	bl	23f7c84 <delay>
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e7a62:	e7ee      	b.n	23e7a42 <_Z15blx_takereadingv+0x32>
  }

  for (int i = 0; i < 4; i++) {
 23e7a64:	2400      	movs	r4, #0
 23e7a66:	ad01      	add	r5, sp, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e7a68:	f012 fa40 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7a6c:	6803      	ldr	r3, [r0, #0]
  for (int i = 0; i < 4; i++) {
 23e7a6e:	3401      	adds	r4, #1
    data[i] = Wire.read(); // Read each byte into the array
 23e7a70:	695b      	ldr	r3, [r3, #20]
 23e7a72:	4798      	blx	r3
  for (int i = 0; i < 4; i++) {
 23e7a74:	2c04      	cmp	r4, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e7a76:	f805 0b01 	strb.w	r0, [r5], #1
  for (int i = 0; i < 4; i++) {
 23e7a7a:	d1f5      	bne.n	23e7a68 <_Z15blx_takereadingv+0x58>
  raw = data[3];
  raw = (raw<<8)|data[2];
  raw = (raw<<8)|data[1];
  raw = (raw<<8)|data[0];

  lux = ((float)raw*1.4) / 1000;  // Is 1.4 scaling multiplier based on the sensor's internal calibration ?
 23e7a7c:	eddd 7a01 	vldr	s15, [sp, #4]
 23e7a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e7a84:	ee17 0a90 	vmov	r0, s15
 23e7a88:	f7fc fd02 	bl	23e4490 <__aeabi_f2d>
 23e7a8c:	a309      	add	r3, pc, #36	; (adr r3, 23e7ab4 <_Z15blx_takereadingv+0xa4>)
 23e7a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7a92:	f7fc fd55 	bl	23e4540 <__aeabi_dmul>
 23e7a96:	2200      	movs	r2, #0
 23e7a98:	4b05      	ldr	r3, [pc, #20]	; (23e7ab0 <_Z15blx_takereadingv+0xa0>)
 23e7a9a:	f7fc fe7b 	bl	23e4794 <__aeabi_ddiv>
 23e7a9e:	f7fd f847 	bl	23e4b30 <__aeabi_d2f>
 23e7aa2:	ee00 0a10 	vmov	s0, r0
                                    // Is divide by 1000 converting from millilux ?

  // sprintf (msgbuf, "BLUX30 LUX %f RAW %lu\n", lux, raw);
  // Output (msgbuf);
  return(lux);
}
 23e7aa6:	b003      	add	sp, #12
 23e7aa8:	bd30      	pop	{r4, r5, pc}
      return -1; // Return error code if timeout occurs
 23e7aaa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23e7aae:	e7fa      	b.n	23e7aa6 <_Z15blx_takereadingv+0x96>
 23e7ab0:	408f4000 	.word	0x408f4000
 23e7ab4:	66666666 	.word	0x66666666
 23e7ab8:	3ff66666 	.word	0x3ff66666

023e7abc <_Z13pm25aqi_clearv>:
 *=======================================================================================================================
 * pm25aqi_clear() - clear observation
 *=======================================================================================================================
 */
void pm25aqi_clear() {
  pm25aqi_obs.max_s10 = 0;
 23e7abc:	2200      	movs	r2, #0
 23e7abe:	4b04      	ldr	r3, [pc, #16]	; (23e7ad0 <_Z13pm25aqi_clearv+0x14>)
 23e7ac0:	801a      	strh	r2, [r3, #0]
  pm25aqi_obs.max_s25 = 0;
 23e7ac2:	805a      	strh	r2, [r3, #2]
  pm25aqi_obs.max_s100 = 0;
 23e7ac4:	809a      	strh	r2, [r3, #4]
  pm25aqi_obs.max_e10 = 0;
 23e7ac6:	80da      	strh	r2, [r3, #6]
  pm25aqi_obs.max_e25 = 0;
 23e7ac8:	811a      	strh	r2, [r3, #8]
  pm25aqi_obs.max_e100 = 0;
 23e7aca:	815a      	strh	r2, [r3, #10]
}
 23e7acc:	4770      	bx	lr
 23e7ace:	bf00      	nop
 23e7ad0:	1007aa24 	.word	0x1007aa24

023e7ad4 <_Z18pm25aqi_initializev>:
/* 
 *=======================================================================================================================
 * pm25aqi_initialize() - air quality sensor
 *=======================================================================================================================
 */
void pm25aqi_initialize() {
 23e7ad4:	b538      	push	{r3, r4, r5, lr}
  Output("PM25AQI:INIT");
 23e7ad6:	4817      	ldr	r0, [pc, #92]	; (23e7b34 <_Z18pm25aqi_initializev+0x60>)
 23e7ad8:	f7fe fcc8 	bl	23e646c <_Z6OutputPKc>
  Wire.beginTransmission(PM25AQI_ADDRESS);
 23e7adc:	f012 fa06 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7ae0:	2112      	movs	r1, #18
 23e7ae2:	f010 fec1 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e7ae6:	f012 fa01 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7aea:	f010 fec4 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
 23e7aee:	4c12      	ldr	r4, [pc, #72]	; (23e7b38 <_Z18pm25aqi_initializev+0x64>)
 23e7af0:	4d12      	ldr	r5, [pc, #72]	; (23e7b3c <_Z18pm25aqi_initializev+0x68>)
 23e7af2:	b168      	cbz	r0, 23e7b10 <_Z18pm25aqi_initializev+0x3c>
    msgp = (char *) "PM:NF";
 23e7af4:	4b12      	ldr	r3, [pc, #72]	; (23e7b40 <_Z18pm25aqi_initializev+0x6c>)
    PM25AQI_exists = false;
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e7af6:	4a13      	ldr	r2, [pc, #76]	; (23e7b44 <_Z18pm25aqi_initializev+0x70>)
    msgp = (char *) "PM:NF";
 23e7af8:	6023      	str	r3, [r4, #0]
    PM25AQI_exists = false;
 23e7afa:	2300      	movs	r3, #0
 23e7afc:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e7afe:	6813      	ldr	r3, [r2, #0]
 23e7b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e7b04:	6013      	str	r3, [r2, #0]
      msgp = (char *) "PM:OK";
      PM25AQI_exists = true;
      pm25aqi_clear();
    }
  }
  Output (msgp);
 23e7b06:	6820      	ldr	r0, [r4, #0]
}
 23e7b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e7b0c:	f7fe bcae 	b.w	23e646c <_Z6OutputPKc>
    if (! pmaq.begin_I2C()) {      // connect to the sensor over I2C
 23e7b10:	f012 f9ec 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7b14:	4601      	mov	r1, r0
 23e7b16:	480c      	ldr	r0, [pc, #48]	; (23e7b48 <_Z18pm25aqi_initializev+0x74>)
 23e7b18:	f009 faf1 	bl	23f10fe <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e7b1c:	b918      	cbnz	r0, 23e7b26 <_Z18pm25aqi_initializev+0x52>
      msgp = (char *) "PM:Begin NF";
 23e7b1e:	4b0b      	ldr	r3, [pc, #44]	; (23e7b4c <_Z18pm25aqi_initializev+0x78>)
      PM25AQI_exists = false;
 23e7b20:	7028      	strb	r0, [r5, #0]
      msgp = (char *) "PM:Begin NF";
 23e7b22:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = false;
 23e7b24:	e7ef      	b.n	23e7b06 <_Z18pm25aqi_initializev+0x32>
      msgp = (char *) "PM:OK";
 23e7b26:	4b0a      	ldr	r3, [pc, #40]	; (23e7b50 <_Z18pm25aqi_initializev+0x7c>)
 23e7b28:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = true;
 23e7b2a:	2301      	movs	r3, #1
 23e7b2c:	702b      	strb	r3, [r5, #0]
      pm25aqi_clear();
 23e7b2e:	f7ff ffc5 	bl	23e7abc <_Z13pm25aqi_clearv>
 23e7b32:	e7e8      	b.n	23e7b06 <_Z18pm25aqi_initializev+0x32>
 23e7b34:	023fd5be 	.word	0x023fd5be
 23e7b38:	1006f528 	.word	0x1006f528
 23e7b3c:	1006a2cc 	.word	0x1006a2cc
 23e7b40:	023fd5cb 	.word	0x023fd5cb
 23e7b44:	1006a178 	.word	0x1006a178
 23e7b48:	1007aa30 	.word	0x1007aa30
 23e7b4c:	023fd5d1 	.word	0x023fd5d1
 23e7b50:	023fd5dd 	.word	0x023fd5dd

023e7b54 <_Z19pm25aqi_TakeReadingv>:
/* 
 *=======================================================================================================================
 * pm25aqi_TakeReading() - take air quality reading - keep the larger value
 *=======================================================================================================================
 */
void pm25aqi_TakeReading() {
 23e7b54:	b510      	push	{r4, lr}
  if (PM25AQI_exists) {
 23e7b56:	4c1d      	ldr	r4, [pc, #116]	; (23e7bcc <_Z19pm25aqi_TakeReadingv+0x78>)
void pm25aqi_TakeReading() {
 23e7b58:	b088      	sub	sp, #32
  if (PM25AQI_exists) {
 23e7b5a:	7823      	ldrb	r3, [r4, #0]
 23e7b5c:	b34b      	cbz	r3, 23e7bb2 <_Z19pm25aqi_TakeReadingv+0x5e>
    PM25_AQI_Data aqid;

    if (pmaq.read(&aqid)) {
 23e7b5e:	4669      	mov	r1, sp
 23e7b60:	481b      	ldr	r0, [pc, #108]	; (23e7bd0 <_Z19pm25aqi_TakeReadingv+0x7c>)
 23e7b62:	f009 fae2 	bl	23f112a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>
 23e7b66:	b330      	cbz	r0, 23e7bb6 <_Z19pm25aqi_TakeReadingv+0x62>
      if (aqid.pm10_standard  > pm25aqi_obs.max_s10)  { pm25aqi_obs.max_s10  = aqid.pm10_standard;  }
 23e7b68:	4b1a      	ldr	r3, [pc, #104]	; (23e7bd4 <_Z19pm25aqi_TakeReadingv+0x80>)
 23e7b6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 23e7b6e:	8819      	ldrh	r1, [r3, #0]
 23e7b70:	4291      	cmp	r1, r2
 23e7b72:	bf38      	it	cc
 23e7b74:	801a      	strhcc	r2, [r3, #0]
      if (aqid.pm25_standard  > pm25aqi_obs.max_s25)  { pm25aqi_obs.max_s25  = aqid.pm25_standard;  }
 23e7b76:	8859      	ldrh	r1, [r3, #2]
 23e7b78:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 23e7b7c:	4291      	cmp	r1, r2
 23e7b7e:	bf38      	it	cc
 23e7b80:	805a      	strhcc	r2, [r3, #2]
      if (aqid.pm100_standard > pm25aqi_obs.max_s100) { pm25aqi_obs.max_s100 = aqid.pm100_standard; }
 23e7b82:	8899      	ldrh	r1, [r3, #4]
 23e7b84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23e7b88:	4291      	cmp	r1, r2
 23e7b8a:	bf38      	it	cc
 23e7b8c:	809a      	strhcc	r2, [r3, #4]

      if (aqid.pm10_env  > pm25aqi_obs.max_e10)  { pm25aqi_obs.max_e10  = aqid.pm10_env;  }
 23e7b8e:	88d9      	ldrh	r1, [r3, #6]
 23e7b90:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 23e7b94:	4291      	cmp	r1, r2
 23e7b96:	bf38      	it	cc
 23e7b98:	80da      	strhcc	r2, [r3, #6]
      if (aqid.pm25_env  > pm25aqi_obs.max_e25)  { pm25aqi_obs.max_e25  = aqid.pm25_env;  }
 23e7b9a:	8919      	ldrh	r1, [r3, #8]
 23e7b9c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 23e7ba0:	4291      	cmp	r1, r2
 23e7ba2:	bf38      	it	cc
 23e7ba4:	811a      	strhcc	r2, [r3, #8]
      if (aqid.pm100_env > pm25aqi_obs.max_e100) { pm25aqi_obs.max_e100 = aqid.pm100_env; }
 23e7ba6:	8959      	ldrh	r1, [r3, #10]
 23e7ba8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 23e7bac:	4291      	cmp	r1, r2
 23e7bae:	d200      	bcs.n	23e7bb2 <_Z19pm25aqi_TakeReadingv+0x5e>
 23e7bb0:	815a      	strh	r2, [r3, #10]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
    }
  }
}
 23e7bb2:	b008      	add	sp, #32
 23e7bb4:	bd10      	pop	{r4, pc}
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e7bb6:	4a08      	ldr	r2, [pc, #32]	; (23e7bd8 <_Z19pm25aqi_TakeReadingv+0x84>)
      PM25AQI_exists = false;
 23e7bb8:	7020      	strb	r0, [r4, #0]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e7bba:	6813      	ldr	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e7bbc:	4807      	ldr	r0, [pc, #28]	; (23e7bdc <_Z19pm25aqi_TakeReadingv+0x88>)
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e7bbe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e7bc2:	6013      	str	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e7bc4:	f7fe fc52 	bl	23e646c <_Z6OutputPKc>
}
 23e7bc8:	e7f3      	b.n	23e7bb2 <_Z19pm25aqi_TakeReadingv+0x5e>
 23e7bca:	bf00      	nop
 23e7bcc:	1006a2cc 	.word	0x1006a2cc
 23e7bd0:	1007aa30 	.word	0x1007aa30
 23e7bd4:	1007aa24 	.word	0x1007aa24
 23e7bd8:	1006a178 	.word	0x1006a178
 23e7bdc:	023fd5e3 	.word	0x023fd5e3

023e7be0 <_Z14hdc_initializev>:
/* 
 *=======================================================================================================================
 * hdc_initialize() - HDC3002c sensor initialize
 *=======================================================================================================================
 */
void hdc_initialize() {
 23e7be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e7be2:	b085      	sub	sp, #20
  Output("HDC:INIT");
  
  // 1st HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  hdc1 = Adafruit_HDC302x();
 23e7be4:	4e2b      	ldr	r6, [pc, #172]	; (23e7c94 <_Z14hdc_initializev+0xb4>)
  Output("HDC:INIT");
 23e7be6:	482c      	ldr	r0, [pc, #176]	; (23e7c98 <_Z14hdc_initializev+0xb8>)
  hdc1 = Adafruit_HDC302x();
 23e7be8:	ac02      	add	r4, sp, #8
  Output("HDC:INIT");
 23e7bea:	f7fe fc3f 	bl	23e646c <_Z6OutputPKc>
  hdc1 = Adafruit_HDC302x();
 23e7bee:	4620      	mov	r0, r4
 23e7bf0:	f008 fed5 	bl	23f099e <_ZN16Adafruit_HDC302xC1Ev>
 23e7bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e7bf8:	80b1      	strh	r1, [r6, #4]
 23e7bfa:	6030      	str	r0, [r6, #0]
  if (!hdc1.begin(HDC_ADDRESS_1, &Wire)) {
 23e7bfc:	f012 f976 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7c00:	2146      	movs	r1, #70	; 0x46
 23e7c02:	4602      	mov	r2, r0
 23e7c04:	4630      	mov	r0, r6
 23e7c06:	f008 ff9b 	bl	23f0b40 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e7c0a:	4d24      	ldr	r5, [pc, #144]	; (23e7c9c <_Z14hdc_initializev+0xbc>)
 23e7c0c:	4f24      	ldr	r7, [pc, #144]	; (23e7ca0 <_Z14hdc_initializev+0xc0>)
 23e7c0e:	bb48      	cbnz	r0, 23e7c64 <_Z14hdc_initializev+0x84>
    msgp = (char *) "HDC1 NF";
 23e7c10:	4b24      	ldr	r3, [pc, #144]	; (23e7ca4 <_Z14hdc_initializev+0xc4>)
    HDC_1_exists = false;
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e7c12:	4a25      	ldr	r2, [pc, #148]	; (23e7ca8 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC1 NF";
 23e7c14:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e7c16:	6813      	ldr	r3, [r2, #0]
    HDC_1_exists = false;
 23e7c18:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e7c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e7c1e:	6013      	str	r3, [r2, #0]
    msgp = (char *) "HDC1 OK";
  }
  Output (msgp);

  // 2nd HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  hdc2 = Adafruit_HDC302x();
 23e7c20:	4e22      	ldr	r6, [pc, #136]	; (23e7cac <_Z14hdc_initializev+0xcc>)
  Output (msgp);
 23e7c22:	6828      	ldr	r0, [r5, #0]
 23e7c24:	f7fe fc22 	bl	23e646c <_Z6OutputPKc>
  hdc2 = Adafruit_HDC302x();
 23e7c28:	4620      	mov	r0, r4
 23e7c2a:	f008 feb8 	bl	23f099e <_ZN16Adafruit_HDC302xC1Ev>
 23e7c2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e7c32:	80b1      	strh	r1, [r6, #4]
 23e7c34:	6030      	str	r0, [r6, #0]
  if (!hdc2.begin(HDC_ADDRESS_2, &Wire)) {
 23e7c36:	f012 f959 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7c3a:	2147      	movs	r1, #71	; 0x47
 23e7c3c:	4602      	mov	r2, r0
 23e7c3e:	4630      	mov	r0, r6
 23e7c40:	f008 ff7e 	bl	23f0b40 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e7c44:	4f1a      	ldr	r7, [pc, #104]	; (23e7cb0 <_Z14hdc_initializev+0xd0>)
 23e7c46:	b9c8      	cbnz	r0, 23e7c7c <_Z14hdc_initializev+0x9c>
    msgp = (char *) "HDC2 NF";
 23e7c48:	4b1a      	ldr	r3, [pc, #104]	; (23e7cb4 <_Z14hdc_initializev+0xd4>)
    HDC_2_exists = false;
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e7c4a:	4a17      	ldr	r2, [pc, #92]	; (23e7ca8 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC2 NF";
 23e7c4c:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e7c4e:	6813      	ldr	r3, [r2, #0]
    HDC_2_exists = false;
 23e7c50:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e7c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23e7c56:	6013      	str	r3, [r2, #0]
    double t,h;
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
    HDC_2_exists = true;
    msgp = (char *) "HDC2 OK";
  }
  Output (msgp);
 23e7c58:	6828      	ldr	r0, [r5, #0]
}
 23e7c5a:	b005      	add	sp, #20
 23e7c5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Output (msgp);
 23e7c60:	f7fe bc04 	b.w	23e646c <_Z6OutputPKc>
    hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e7c64:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e7c68:	4622      	mov	r2, r4
 23e7c6a:	4669      	mov	r1, sp
 23e7c6c:	4630      	mov	r0, r6
 23e7c6e:	f008 ff37 	bl	23f0ae0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_1_exists = true;
 23e7c72:	2301      	movs	r3, #1
 23e7c74:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC1 OK";
 23e7c76:	4b10      	ldr	r3, [pc, #64]	; (23e7cb8 <_Z14hdc_initializev+0xd8>)
 23e7c78:	602b      	str	r3, [r5, #0]
 23e7c7a:	e7d1      	b.n	23e7c20 <_Z14hdc_initializev+0x40>
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e7c7c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e7c80:	4622      	mov	r2, r4
 23e7c82:	4669      	mov	r1, sp
 23e7c84:	4630      	mov	r0, r6
 23e7c86:	f008 ff2b 	bl	23f0ae0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_2_exists = true;
 23e7c8a:	2301      	movs	r3, #1
 23e7c8c:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC2 OK";
 23e7c8e:	4b0b      	ldr	r3, [pc, #44]	; (23e7cbc <_Z14hdc_initializev+0xdc>)
 23e7c90:	602b      	str	r3, [r5, #0]
 23e7c92:	e7e1      	b.n	23e7c58 <_Z14hdc_initializev+0x78>
 23e7c94:	1006ae80 	.word	0x1006ae80
 23e7c98:	023fd5ee 	.word	0x023fd5ee
 23e7c9c:	1006f528 	.word	0x1006f528
 23e7ca0:	1006a2ac 	.word	0x1006a2ac
 23e7ca4:	023fd5f7 	.word	0x023fd5f7
 23e7ca8:	1006a178 	.word	0x1006a178
 23e7cac:	1006ae88 	.word	0x1006ae88
 23e7cb0:	1006a2ad 	.word	0x1006a2ad
 23e7cb4:	023fd607 	.word	0x023fd607
 23e7cb8:	023fd5ff 	.word	0x023fd5ff
 23e7cbc:	023fd60f 	.word	0x023fd60f

023e7cc0 <_Z14lps_initializev>:
/* 
 *=======================================================================================================================
 * lps_initialize() - LPS35HW Pressure and Temperature initialize
 *=======================================================================================================================
 */
void lps_initialize() {
 23e7cc0:	b570      	push	{r4, r5, r6, lr}
  Output("LPS:INIT");
 23e7cc2:	4831      	ldr	r0, [pc, #196]	; (23e7d88 <_Z14lps_initializev+0xc8>)
void lps_initialize() {
 23e7cc4:	b088      	sub	sp, #32
  
  // 1st LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5D)
  lps1 = Adafruit_LPS35HW();
 23e7cc6:	4c31      	ldr	r4, [pc, #196]	; (23e7d8c <_Z14lps_initializev+0xcc>)
  Output("LPS:INIT");
 23e7cc8:	f7fe fbd0 	bl	23e646c <_Z6OutputPKc>
  lps1 = Adafruit_LPS35HW();
 23e7ccc:	ad01      	add	r5, sp, #4
 23e7cce:	a801      	add	r0, sp, #4
 23e7cd0:	f009 f836 	bl	23f0d40 <_ZN16Adafruit_LPS35HWC1Ev>
 23e7cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23e7cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23e7cd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23e7cdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  if (!lps1.begin_I2C(LPS_ADDRESS_1, &Wire)) {
 23e7ce0:	f012 f904 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7ce4:	215d      	movs	r1, #93	; 0x5d
 23e7ce6:	4602      	mov	r2, r0
 23e7ce8:	f1a4 0010 	sub.w	r0, r4, #16
 23e7cec:	f009 f915 	bl	23f0f1a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e7cf0:	4e27      	ldr	r6, [pc, #156]	; (23e7d90 <_Z14lps_initializev+0xd0>)
 23e7cf2:	4d28      	ldr	r5, [pc, #160]	; (23e7d94 <_Z14lps_initializev+0xd4>)
 23e7cf4:	2800      	cmp	r0, #0
 23e7cf6:	d12d      	bne.n	23e7d54 <_Z14lps_initializev+0x94>
    msgp = (char *) "LPS1 NF";
 23e7cf8:	4b27      	ldr	r3, [pc, #156]	; (23e7d98 <_Z14lps_initializev+0xd8>)
    LPS_1_exists = false;
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e7cfa:	4a28      	ldr	r2, [pc, #160]	; (23e7d9c <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS1 NF";
 23e7cfc:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e7cfe:	6813      	ldr	r3, [r2, #0]
    LPS_1_exists = false;
 23e7d00:	7028      	strb	r0, [r5, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e7d02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 23e7d06:	6013      	str	r3, [r2, #0]
    t = lps1.readTemperature();
    p = lps1.readPressure();
    LPS_1_exists = true;
    msgp = (char *) "LPS1 OK";
  }
  Output (msgp);
 23e7d08:	6830      	ldr	r0, [r6, #0]

  // 2nd LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5C)
  lps2 = Adafruit_LPS35HW();
 23e7d0a:	4d25      	ldr	r5, [pc, #148]	; (23e7da0 <_Z14lps_initializev+0xe0>)
  Output (msgp);
 23e7d0c:	f7fe fbae 	bl	23e646c <_Z6OutputPKc>
  lps2 = Adafruit_LPS35HW();
 23e7d10:	ac01      	add	r4, sp, #4
 23e7d12:	a801      	add	r0, sp, #4
 23e7d14:	f009 f814 	bl	23f0d40 <_ZN16Adafruit_LPS35HWC1Ev>
 23e7d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23e7d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23e7d1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 23e7d20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!lps2.begin_I2C(LPS_ADDRESS_2, &Wire)) {
 23e7d24:	f012 f8e2 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7d28:	215c      	movs	r1, #92	; 0x5c
 23e7d2a:	4602      	mov	r2, r0
 23e7d2c:	f1a5 0010 	sub.w	r0, r5, #16
 23e7d30:	f009 f8f3 	bl	23f0f1a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e7d34:	4c1b      	ldr	r4, [pc, #108]	; (23e7da4 <_Z14lps_initializev+0xe4>)
 23e7d36:	b9d0      	cbnz	r0, 23e7d6e <_Z14lps_initializev+0xae>
    msgp = (char *) "LPS2 NF";
 23e7d38:	4b1b      	ldr	r3, [pc, #108]	; (23e7da8 <_Z14lps_initializev+0xe8>)
    LPS_2_exists = false;
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e7d3a:	4a18      	ldr	r2, [pc, #96]	; (23e7d9c <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS2 NF";
 23e7d3c:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e7d3e:	6813      	ldr	r3, [r2, #0]
    LPS_2_exists = false;
 23e7d40:	7020      	strb	r0, [r4, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e7d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 23e7d46:	6013      	str	r3, [r2, #0]
    t = lps2.readTemperature();
    p = lps2.readPressure();
    LPS_2_exists = true;
    msgp = (char *) "LPS2 OK";
  }
  Output (msgp);
 23e7d48:	6830      	ldr	r0, [r6, #0]
}
 23e7d4a:	b008      	add	sp, #32
 23e7d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e7d50:	f7fe bb8c 	b.w	23e646c <_Z6OutputPKc>
    t = lps1.readTemperature();
 23e7d54:	f1a4 0010 	sub.w	r0, r4, #16
 23e7d58:	f009 f80a 	bl	23f0d70 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps1.readPressure();
 23e7d5c:	f1a4 0010 	sub.w	r0, r4, #16
 23e7d60:	f009 f828 	bl	23f0db4 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_1_exists = true;
 23e7d64:	2301      	movs	r3, #1
 23e7d66:	702b      	strb	r3, [r5, #0]
    msgp = (char *) "LPS1 OK";
 23e7d68:	4b10      	ldr	r3, [pc, #64]	; (23e7dac <_Z14lps_initializev+0xec>)
 23e7d6a:	6033      	str	r3, [r6, #0]
 23e7d6c:	e7cc      	b.n	23e7d08 <_Z14lps_initializev+0x48>
    t = lps2.readTemperature();
 23e7d6e:	f1a5 0010 	sub.w	r0, r5, #16
 23e7d72:	f008 fffd 	bl	23f0d70 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps2.readPressure();
 23e7d76:	f1a5 0010 	sub.w	r0, r5, #16
 23e7d7a:	f009 f81b 	bl	23f0db4 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_2_exists = true;
 23e7d7e:	2301      	movs	r3, #1
 23e7d80:	7023      	strb	r3, [r4, #0]
    msgp = (char *) "LPS2 OK";
 23e7d82:	4b0b      	ldr	r3, [pc, #44]	; (23e7db0 <_Z14lps_initializev+0xf0>)
 23e7d84:	6033      	str	r3, [r6, #0]
 23e7d86:	e7df      	b.n	23e7d48 <_Z14lps_initializev+0x88>
 23e7d88:	023fd617 	.word	0x023fd617
 23e7d8c:	1006f0c0 	.word	0x1006f0c0
 23e7d90:	1006f528 	.word	0x1006f528
 23e7d94:	1006a2b2 	.word	0x1006a2b2
 23e7d98:	023fd620 	.word	0x023fd620
 23e7d9c:	1006a178 	.word	0x1006a178
 23e7da0:	1006f0dc 	.word	0x1006f0dc
 23e7da4:	1006a2b3 	.word	0x1006a2b3
 23e7da8:	023fd630 	.word	0x023fd630
 23e7dac:	023fd628 	.word	0x023fd628
 23e7db0:	023fd638 	.word	0x023fd638

023e7db4 <_Z14tlw_initializev>:
/* 
 *=======================================================================================================================
 * tlw_initialize() -  Tinovi Leaf Wetness initialize
 *=======================================================================================================================
 */
void tlw_initialize() {
 23e7db4:	b538      	push	{r3, r4, r5, lr}
  Output("TLW:INIT");
 23e7db6:	480f      	ldr	r0, [pc, #60]	; (23e7df4 <_Z14tlw_initializev+0x40>)
 23e7db8:	f7fe fb58 	bl	23e646c <_Z6OutputPKc>
  
  // Tinovi Leaf Wetness initialize (I2C ADDRESS = 0x61)
  if (!I2C_Device_Exist(TLW_ADDRESS)) { 
 23e7dbc:	2061      	movs	r0, #97	; 0x61
 23e7dbe:	f7fe f94c 	bl	23e605a <_Z16I2C_Device_Existh>
 23e7dc2:	4c0d      	ldr	r4, [pc, #52]	; (23e7df8 <_Z14tlw_initializev+0x44>)
 23e7dc4:	4d0d      	ldr	r5, [pc, #52]	; (23e7dfc <_Z14tlw_initializev+0x48>)
 23e7dc6:	b938      	cbnz	r0, 23e7dd8 <_Z14tlw_initializev+0x24>
    msgp = (char *) "TLW NF";
 23e7dc8:	4b0d      	ldr	r3, [pc, #52]	; (23e7e00 <_Z14tlw_initializev+0x4c>)
    TLW_exists = false;
 23e7dca:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TLW NF";
 23e7dcc:	6023      	str	r3, [r4, #0]
    tlw.init(TLW_ADDRESS);
    msgp = (char *) "TLW OK";
    TLW_exists = true;
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
  }
  Output (msgp);
 23e7dce:	6820      	ldr	r0, [r4, #0]
}
 23e7dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e7dd4:	f7fe bb4a 	b.w	23e646c <_Z6OutputPKc>
    tlw.init(TLW_ADDRESS);
 23e7dd8:	2161      	movs	r1, #97	; 0x61
 23e7dda:	480a      	ldr	r0, [pc, #40]	; (23e7e04 <_Z14tlw_initializev+0x50>)
 23e7ddc:	f00a fbc0 	bl	23f2560 <_ZN8LeafSens4initEh>
    msgp = (char *) "TLW OK";
 23e7de0:	4b09      	ldr	r3, [pc, #36]	; (23e7e08 <_Z14tlw_initializev+0x54>)
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e7de2:	4a0a      	ldr	r2, [pc, #40]	; (23e7e0c <_Z14tlw_initializev+0x58>)
    msgp = (char *) "TLW OK";
 23e7de4:	6023      	str	r3, [r4, #0]
    TLW_exists = true;
 23e7de6:	2301      	movs	r3, #1
 23e7de8:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e7dea:	6813      	ldr	r3, [r2, #0]
 23e7dec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 23e7df0:	6013      	str	r3, [r2, #0]
 23e7df2:	e7ec      	b.n	23e7dce <_Z14tlw_initializev+0x1a>
 23e7df4:	023fd640 	.word	0x023fd640
 23e7df8:	1006f528 	.word	0x1006f528
 23e7dfc:	1006a7e0 	.word	0x1006a7e0
 23e7e00:	023fd649 	.word	0x023fd649
 23e7e04:	1007ac00 	.word	0x1007ac00
 23e7e08:	023fd650 	.word	0x023fd650
 23e7e0c:	1006a178 	.word	0x1006a178

023e7e10 <_Z14tsm_initializev>:
/* 
 *=======================================================================================================================
 * tsm_initialize() -  Tinovi Soil Moisture initialize
 *=======================================================================================================================
 */
void tsm_initialize() {
 23e7e10:	b538      	push	{r3, r4, r5, lr}
  Output("TSM:INIT");
 23e7e12:	480f      	ldr	r0, [pc, #60]	; (23e7e50 <_Z14tsm_initializev+0x40>)
 23e7e14:	f7fe fb2a 	bl	23e646c <_Z6OutputPKc>
  
  // Tinovi Soil Moisture initialize (I2C ADDRESS = 0x63)
  if (!I2C_Device_Exist(TSM_ADDRESS)) { 
 23e7e18:	2063      	movs	r0, #99	; 0x63
 23e7e1a:	f7fe f91e 	bl	23e605a <_Z16I2C_Device_Existh>
 23e7e1e:	4c0d      	ldr	r4, [pc, #52]	; (23e7e54 <_Z14tsm_initializev+0x44>)
 23e7e20:	4d0d      	ldr	r5, [pc, #52]	; (23e7e58 <_Z14tsm_initializev+0x48>)
 23e7e22:	b938      	cbnz	r0, 23e7e34 <_Z14tsm_initializev+0x24>
    msgp = (char *) "TSM NF";
 23e7e24:	4b0d      	ldr	r3, [pc, #52]	; (23e7e5c <_Z14tsm_initializev+0x4c>)
    TSM_exists = false;
 23e7e26:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TSM NF";
 23e7e28:	6023      	str	r3, [r4, #0]
    tsm.init(TSM_ADDRESS);
    msgp = (char *) "TSM OK";
    TSM_exists = true;
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
  }
  Output (msgp);
 23e7e2a:	6820      	ldr	r0, [r4, #0]
}
 23e7e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e7e30:	f7fe bb1c 	b.w	23e646c <_Z6OutputPKc>
    tsm.init(TSM_ADDRESS);
 23e7e34:	2163      	movs	r1, #99	; 0x63
 23e7e36:	480a      	ldr	r0, [pc, #40]	; (23e7e60 <_Z14tsm_initializev+0x50>)
 23e7e38:	f00c fc2d 	bl	23f4696 <_ZN5SVCS34initEi>
    msgp = (char *) "TSM OK";
 23e7e3c:	4b09      	ldr	r3, [pc, #36]	; (23e7e64 <_Z14tsm_initializev+0x54>)
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e7e3e:	4a0a      	ldr	r2, [pc, #40]	; (23e7e68 <_Z14tsm_initializev+0x58>)
    msgp = (char *) "TSM OK";
 23e7e40:	6023      	str	r3, [r4, #0]
    TSM_exists = true;
 23e7e42:	2301      	movs	r3, #1
 23e7e44:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e7e46:	6813      	ldr	r3, [r2, #0]
 23e7e48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 23e7e4c:	6013      	str	r3, [r2, #0]
 23e7e4e:	e7ec      	b.n	23e7e2a <_Z14tsm_initializev+0x1a>
 23e7e50:	023fd657 	.word	0x023fd657
 23e7e54:	1006f528 	.word	0x1006f528
 23e7e58:	1006a7e2 	.word	0x1006a7e2
 23e7e5c:	023fd660 	.word	0x023fd660
 23e7e60:	1007ac10 	.word	0x1007ac10
 23e7e64:	023fd667 	.word	0x023fd667
 23e7e68:	1006a178 	.word	0x1006a178

023e7e6c <_Z15tmsm_initializev>:
/* 
 *=======================================================================================================================
 * tmsm_initialize() -  Tinovi MultiLevel Soil Moisture initialize
 *=======================================================================================================================
 */
void tmsm_initialize() {
 23e7e6c:	b538      	push	{r3, r4, r5, lr}
  Output("TMSM:INIT");
 23e7e6e:	480f      	ldr	r0, [pc, #60]	; (23e7eac <_Z15tmsm_initializev+0x40>)
 23e7e70:	f7fe fafc 	bl	23e646c <_Z6OutputPKc>
  
  // Tinovi MultiLevel Soil Moisture initialize (I2C ADDRESS = 0x65)
  if (!I2C_Device_Exist(TMSM_ADDRESS)) { 
 23e7e74:	2065      	movs	r0, #101	; 0x65
 23e7e76:	f7fe f8f0 	bl	23e605a <_Z16I2C_Device_Existh>
 23e7e7a:	4c0d      	ldr	r4, [pc, #52]	; (23e7eb0 <_Z15tmsm_initializev+0x44>)
 23e7e7c:	4d0d      	ldr	r5, [pc, #52]	; (23e7eb4 <_Z15tmsm_initializev+0x48>)
 23e7e7e:	b938      	cbnz	r0, 23e7e90 <_Z15tmsm_initializev+0x24>
    msgp = (char *) "TMSM NF";
 23e7e80:	4b0d      	ldr	r3, [pc, #52]	; (23e7eb8 <_Z15tmsm_initializev+0x4c>)
    TMSM_exists = false;
 23e7e82:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TMSM NF";
 23e7e84:	6023      	str	r3, [r4, #0]
    tmsm.init(TMSM_ADDRESS);
    msgp = (char *) "TMSM OK";
    TMSM_exists = true;
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
  }
  Output (msgp);
 23e7e86:	6820      	ldr	r0, [r4, #0]
}
 23e7e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e7e8c:	f7fe baee 	b.w	23e646c <_Z6OutputPKc>
    tmsm.init(TMSM_ADDRESS);
 23e7e90:	2165      	movs	r1, #101	; 0x65
 23e7e92:	480a      	ldr	r0, [pc, #40]	; (23e7ebc <_Z15tmsm_initializev+0x50>)
 23e7e94:	f00c fcc5 	bl	23f4822 <_ZN7SVMULTI4initEi>
    msgp = (char *) "TMSM OK";
 23e7e98:	4b09      	ldr	r3, [pc, #36]	; (23e7ec0 <_Z15tmsm_initializev+0x54>)
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e7e9a:	4a0a      	ldr	r2, [pc, #40]	; (23e7ec4 <_Z15tmsm_initializev+0x58>)
    msgp = (char *) "TMSM OK";
 23e7e9c:	6023      	str	r3, [r4, #0]
    TMSM_exists = true;
 23e7e9e:	2301      	movs	r3, #1
 23e7ea0:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e7ea2:	6813      	ldr	r3, [r2, #0]
 23e7ea4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 23e7ea8:	6013      	str	r3, [r2, #0]
 23e7eaa:	e7ec      	b.n	23e7e86 <_Z15tmsm_initializev+0x1a>
 23e7eac:	023fd66e 	.word	0x023fd66e
 23e7eb0:	1006f528 	.word	0x1006f528
 23e7eb4:	1006a7e1 	.word	0x1006a7e1
 23e7eb8:	023fd678 	.word	0x023fd678
 23e7ebc:	1007ac08 	.word	0x1007ac08
 23e7ec0:	023fd680 	.word	0x023fd680
 23e7ec4:	1006a178 	.word	0x1006a178

023e7ec8 <_Z14ptms_readtempcv>:
/*
 * ======================================================================================================================
 *  ptms_readtempc() - Read Particle Muon on board temperature sensor (TMP112A) Celsius
 * ======================================================================================================================
 */
float ptms_readtempc() {
 23e7ec8:	b510      	push	{r4, lr}
  unsigned data[2] = {0, 0};
  Wire.beginTransmission(0x48);
 23e7eca:	f012 f80f 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7ece:	2148      	movs	r1, #72	; 0x48
 23e7ed0:	f010 fcca 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00);  // Select temperature register
 23e7ed4:	f012 f80a 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7ed8:	2100      	movs	r1, #0
 23e7eda:	f7fd ff3b 	bl	23e5d54 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
 23e7ede:	f012 f805 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7ee2:	f010 fcc8 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23e7ee6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23e7eea:	f00f fecb 	bl	23f7c84 <delay>
  Wire.requestFrom(0x48, 2);
 23e7eee:	f011 fffd 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7ef2:	2202      	movs	r2, #2
 23e7ef4:	2148      	movs	r1, #72	; 0x48
 23e7ef6:	f010 fcb0 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2) {
 23e7efa:	f011 fff7 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7efe:	6803      	ldr	r3, [r0, #0]
 23e7f00:	691b      	ldr	r3, [r3, #16]
 23e7f02:	4798      	blx	r3
 23e7f04:	2802      	cmp	r0, #2
 23e7f06:	d11e      	bne.n	23e7f46 <_Z14ptms_readtempcv+0x7e>
    data[0] = Wire.read();
 23e7f08:	f011 fff0 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7f0c:	6803      	ldr	r3, [r0, #0]
 23e7f0e:	695b      	ldr	r3, [r3, #20]
 23e7f10:	4798      	blx	r3
 23e7f12:	4604      	mov	r4, r0
    data[1] = Wire.read();
 23e7f14:	f011 ffea 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7f18:	6803      	ldr	r3, [r0, #0]
 23e7f1a:	695b      	ldr	r3, [r3, #20]
 23e7f1c:	4798      	blx	r3
    int temp = ((data[0] << 8) + data[1]) >> 4;
 23e7f1e:	eb00 2304 	add.w	r3, r0, r4, lsl #8
    if (temp > 2047) {
 23e7f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    int temp = ((data[0] << 8) + data[1]) >> 4;
 23e7f26:	ea4f 1013 	mov.w	r0, r3, lsr #4
        temp -= 4096;
 23e7f2a:	bf28      	it	cs
 23e7f2c:	f5a0 5080 	subcs.w	r0, r0, #4096	; 0x1000
    }
    float cTemp = temp * 0.0625;      // Celsius
 23e7f30:	f7fc fa9c 	bl	23e446c <__aeabi_i2d>
 23e7f34:	2200      	movs	r2, #0
 23e7f36:	4b05      	ldr	r3, [pc, #20]	; (23e7f4c <_Z14ptms_readtempcv+0x84>)
 23e7f38:	f7fc fb02 	bl	23e4540 <__aeabi_dmul>
 23e7f3c:	f7fc fdf8 	bl	23e4b30 <__aeabi_d2f>
 23e7f40:	ee00 0a10 	vmov	s0, r0
    //float fTemp = cTemp * 1.8 + 32; // Fahrenheit
    return (cTemp);
  }
  return (-999.99);
}
 23e7f44:	bd10      	pop	{r4, pc}
  return (-999.99);
 23e7f46:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23e7f50 <_Z14ptms_readtempcv+0x88>
 23e7f4a:	e7fb      	b.n	23e7f44 <_Z14ptms_readtempcv+0x7c>
 23e7f4c:	3fb00000 	.word	0x3fb00000
 23e7f50:	c479ff5c 	.word	0xc479ff5c
 23e7f54:	00000000 	.word	0x00000000

023e7f58 <_Z15pmts_initializev>:
/*
 * ======================================================================================================================
 *  pmts_initialize() - Initialize Particle Muon on board temperature sensor (TMP112A)
 * ======================================================================================================================
 */
void pmts_initialize() {
 23e7f58:	b538      	push	{r3, r4, r5, lr}
  Output("PMTS:INIT");
 23e7f5a:	481f      	ldr	r0, [pc, #124]	; (23e7fd8 <_Z15pmts_initializev+0x80>)
void pmts_initialize() {
 23e7f5c:	ed2d 8b02 	vpush	{d8}
  Output("PMTS:INIT");
 23e7f60:	f7fe fa84 	bl	23e646c <_Z6OutputPKc>
  float t = ptms_readtempc();
 23e7f64:	f7ff ffb0 	bl	23e7ec8 <_Z14ptms_readtempcv>

  if (t == -999.99) {
 23e7f68:	ee10 0a10 	vmov	r0, s0
  float t = ptms_readtempc();
 23e7f6c:	eeb0 8a40 	vmov.f32	s16, s0
  if (t == -999.99) {
 23e7f70:	f7fc fa8e 	bl	23e4490 <__aeabi_f2d>
 23e7f74:	a316      	add	r3, pc, #88	; (adr r3, 23e7fd0 <_Z15pmts_initializev+0x78>)
 23e7f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7f7a:	4604      	mov	r4, r0
 23e7f7c:	460d      	mov	r5, r1
 23e7f7e:	f7fc fd47 	bl	23e4a10 <__aeabi_dcmpeq>
 23e7f82:	4b16      	ldr	r3, [pc, #88]	; (23e7fdc <_Z15pmts_initializev+0x84>)
 23e7f84:	b140      	cbz	r0, 23e7f98 <_Z15pmts_initializev+0x40>
    PMTS_exists = false;
 23e7f86:	2200      	movs	r2, #0
    Output ("PMTS NF");
 23e7f88:	4815      	ldr	r0, [pc, #84]	; (23e7fe0 <_Z15pmts_initializev+0x88>)
    PMTS_exists = false;
 23e7f8a:	701a      	strb	r2, [r3, #0]
  else {
    PMTS_exists = true;
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
    Output (msgbuf);
  }
}
 23e7f8c:	ecbd 8b02 	vpop	{d8}
 23e7f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Output (msgbuf);
 23e7f94:	f7fe ba6a 	b.w	23e646c <_Z6OutputPKc>
    PMTS_exists = true;
 23e7f98:	2201      	movs	r2, #1
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
 23e7f9a:	4620      	mov	r0, r4
    PMTS_exists = true;
 23e7f9c:	701a      	strb	r2, [r3, #0]
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
 23e7f9e:	4629      	mov	r1, r5
 23e7fa0:	2200      	movs	r2, #0
 23e7fa2:	4b10      	ldr	r3, [pc, #64]	; (23e7fe4 <_Z15pmts_initializev+0x8c>)
 23e7fa4:	f7fc facc 	bl	23e4540 <__aeabi_dmul>
 23e7fa8:	f7fc fd7a 	bl	23e4aa0 <__aeabi_d2iz>
 23e7fac:	2264      	movs	r2, #100	; 0x64
 23e7fae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e7fb2:	fb90 f3f2 	sdiv	r3, r0, r2
 23e7fb6:	490c      	ldr	r1, [pc, #48]	; (23e7fe8 <_Z15pmts_initializev+0x90>)
 23e7fb8:	fb03 0312 	mls	r3, r3, r2, r0
 23e7fbc:	ee17 2a90 	vmov	r2, s15
 23e7fc0:	480a      	ldr	r0, [pc, #40]	; (23e7fec <_Z15pmts_initializev+0x94>)
 23e7fc2:	f00f fd7f 	bl	23f7ac4 <sprintf>
    Output (msgbuf);
 23e7fc6:	4809      	ldr	r0, [pc, #36]	; (23e7fec <_Z15pmts_initializev+0x94>)
 23e7fc8:	e7e0      	b.n	23e7f8c <_Z15pmts_initializev+0x34>
 23e7fca:	bf00      	nop
 23e7fcc:	f3af 8000 	nop.w
 23e7fd0:	851eb852 	.word	0x851eb852
 23e7fd4:	c08f3feb 	.word	0xc08f3feb
 23e7fd8:	023fd688 	.word	0x023fd688
 23e7fdc:	1006a2cd 	.word	0x1006a2cd
 23e7fe0:	023fd692 	.word	0x023fd692
 23e7fe4:	40590000 	.word	0x40590000
 23e7fe8:	023fd69a 	.word	0x023fd69a
 23e7fec:	1006f128 	.word	0x1006f128

023e7ff0 <_Z17as5600_initializev>:
/* 
 *=======================================================================================================================
 * as5600_initialize() - wind direction sensor I2C 0x36
 *=======================================================================================================================
 */
void as5600_initialize() {
 23e7ff0:	b508      	push	{r3, lr}
  Output("AS5600:INIT");
 23e7ff2:	4810      	ldr	r0, [pc, #64]	; (23e8034 <_Z17as5600_initializev+0x44>)
 23e7ff4:	f7fe fa3a 	bl	23e646c <_Z6OutputPKc>
  Wire.beginTransmission(AS5600_ADR);
 23e7ff8:	f011 ff78 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e7ffc:	4b0e      	ldr	r3, [pc, #56]	; (23e8038 <_Z17as5600_initializev+0x48>)
 23e7ffe:	6819      	ldr	r1, [r3, #0]
 23e8000:	f010 fc32 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e8004:	f011 ff72 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8008:	f010 fc35 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
 23e800c:	4b0b      	ldr	r3, [pc, #44]	; (23e803c <_Z17as5600_initializev+0x4c>)
 23e800e:	b170      	cbz	r0, 23e802e <_Z17as5600_initializev+0x3e>
    msgp = (char *) "WD:NF";
    AS5600_exists = false;
 23e8010:	2100      	movs	r1, #0
    msgp = (char *) "WD:NF";
 23e8012:	4a0b      	ldr	r2, [pc, #44]	; (23e8040 <_Z17as5600_initializev+0x50>)
 23e8014:	601a      	str	r2, [r3, #0]
    AS5600_exists = false;
 23e8016:	4a0b      	ldr	r2, [pc, #44]	; (23e8044 <_Z17as5600_initializev+0x54>)
 23e8018:	7011      	strb	r1, [r2, #0]
    SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e801a:	490b      	ldr	r1, [pc, #44]	; (23e8048 <_Z17as5600_initializev+0x58>)
 23e801c:	680a      	ldr	r2, [r1, #0]
 23e801e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 23e8022:	600a      	str	r2, [r1, #0]
  }
  else {
    msgp = (char *) "WD:OK";
  }
  Output (msgp);
 23e8024:	6818      	ldr	r0, [r3, #0]
}
 23e8026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e802a:	f7fe ba1f 	b.w	23e646c <_Z6OutputPKc>
    msgp = (char *) "WD:OK";
 23e802e:	4a07      	ldr	r2, [pc, #28]	; (23e804c <_Z17as5600_initializev+0x5c>)
 23e8030:	601a      	str	r2, [r3, #0]
 23e8032:	e7f7      	b.n	23e8024 <_Z17as5600_initializev+0x34>
 23e8034:	023fd6ac 	.word	0x023fd6ac
 23e8038:	1006a0fc 	.word	0x1006a0fc
 23e803c:	1006f528 	.word	0x1006f528
 23e8040:	023fd6b8 	.word	0x023fd6b8
 23e8044:	1006a100 	.word	0x1006a100
 23e8048:	1006a178 	.word	0x1006a178
 23e804c:	023fd6be 	.word	0x023fd6be

023e8050 <_Z13A4_Initializev>:
/* 
 *=======================================================================================================================
 * A4_Initialize()
 *=======================================================================================================================
 */
void A4_Initialize() {
 23e8050:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Output ("A4:INIT");
 23e8052:	482b      	ldr	r0, [pc, #172]	; (23e8100 <_Z13A4_Initializev+0xb0>)
 23e8054:	f7fe fa0a 	bl	23e646c <_Z6OutputPKc>
  if (SD_exists) {
 23e8058:	4b2a      	ldr	r3, [pc, #168]	; (23e8104 <_Z13A4_Initializev+0xb4>)
 23e805a:	781b      	ldrb	r3, [r3, #0]
 23e805c:	2b00      	cmp	r3, #0
 23e805e:	d04c      	beq.n	23e80fa <_Z13A4_Initializev+0xaa>
    if (SD.exists(SD_A4_DIST_FILE)) {
 23e8060:	4929      	ldr	r1, [pc, #164]	; (23e8108 <_Z13A4_Initializev+0xb8>)
 23e8062:	482a      	ldr	r0, [pc, #168]	; (23e810c <_Z13A4_Initializev+0xbc>)
 23e8064:	f7fd ff3c 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e8068:	4604      	mov	r4, r0
 23e806a:	b1b8      	cbz	r0, 23e809c <_Z13A4_Initializev+0x4c>
      Output ("A4=DIST");
 23e806c:	4828      	ldr	r0, [pc, #160]	; (23e8110 <_Z13A4_Initializev+0xc0>)
 23e806e:	f7fe f9fd 	bl	23e646c <_Z6OutputPKc>
      A4_State = A4_STATE_DISTANCE;
 23e8072:	2201      	movs	r2, #1
 23e8074:	4b27      	ldr	r3, [pc, #156]	; (23e8114 <_Z13A4_Initializev+0xc4>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e8076:	4928      	ldr	r1, [pc, #160]	; (23e8118 <_Z13A4_Initializev+0xc8>)
 23e8078:	4824      	ldr	r0, [pc, #144]	; (23e810c <_Z13A4_Initializev+0xbc>)
      A4_State = A4_STATE_DISTANCE;
 23e807a:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e807c:	f7fd ff30 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e8080:	4b26      	ldr	r3, [pc, #152]	; (23e811c <_Z13A4_Initializev+0xcc>)
 23e8082:	b138      	cbz	r0, 23e8094 <_Z13A4_Initializev+0x44>
        dg_adjustment = 1.25;
 23e8084:	4a26      	ldr	r2, [pc, #152]	; (23e8120 <_Z13A4_Initializev+0xd0>)
        Output ("DIST=5M");
 23e8086:	4827      	ldr	r0, [pc, #156]	; (23e8124 <_Z13A4_Initializev+0xd4>)
        dg_adjustment = 1.25;
 23e8088:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A4=NULL,SD NF");
  }
}
 23e808a:	b003      	add	sp, #12
 23e808c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Output ("A4=NULL,SD NF");
 23e8090:	f7fe b9ec 	b.w	23e646c <_Z6OutputPKc>
        dg_adjustment = 2.5;
 23e8094:	4a24      	ldr	r2, [pc, #144]	; (23e8128 <_Z13A4_Initializev+0xd8>)
        Output ("DIST=10M");
 23e8096:	4825      	ldr	r0, [pc, #148]	; (23e812c <_Z13A4_Initializev+0xdc>)
        dg_adjustment = 2.5;
 23e8098:	601a      	str	r2, [r3, #0]
        Output ("DIST=10M");
 23e809a:	e7f6      	b.n	23e808a <_Z13A4_Initializev+0x3a>
    else if (SD.exists(SD_A4_RAIN_FILE)) {
 23e809c:	4924      	ldr	r1, [pc, #144]	; (23e8130 <_Z13A4_Initializev+0xe0>)
 23e809e:	481b      	ldr	r0, [pc, #108]	; (23e810c <_Z13A4_Initializev+0xbc>)
 23e80a0:	f7fd ff1e 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e80a4:	b1d8      	cbz	r0, 23e80de <_Z13A4_Initializev+0x8e>
      A4_State = A4_STATE_RAIN;
 23e80a6:	2502      	movs	r5, #2
      Output ("A4=RAIN");
 23e80a8:	4822      	ldr	r0, [pc, #136]	; (23e8134 <_Z13A4_Initializev+0xe4>)
 23e80aa:	f7fe f9df 	bl	23e646c <_Z6OutputPKc>
      A4_State = A4_STATE_RAIN;
 23e80ae:	4b19      	ldr	r3, [pc, #100]	; (23e8114 <_Z13A4_Initializev+0xc4>)
 23e80b0:	601d      	str	r5, [r3, #0]
      raingauge2_interrupt_count = 0;
 23e80b2:	4b21      	ldr	r3, [pc, #132]	; (23e8138 <_Z13A4_Initializev+0xe8>)
 23e80b4:	601c      	str	r4, [r3, #0]
      raingauge2_interrupt_stime = System.millis();
 23e80b6:	f7fd fe95 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23e80ba:	4b20      	ldr	r3, [pc, #128]	; (23e813c <_Z13A4_Initializev+0xec>)
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e80bc:	462a      	mov	r2, r5
      raingauge2_interrupt_stime = System.millis();
 23e80be:	e9c3 0100 	strd	r0, r1, [r3]
      raingauge2_interrupt_ltime = 0;  // used to debounce the tip
 23e80c2:	2000      	movs	r0, #0
 23e80c4:	2100      	movs	r1, #0
 23e80c6:	4b1e      	ldr	r3, [pc, #120]	; (23e8140 <_Z13A4_Initializev+0xf0>)
 23e80c8:	e9c3 0100 	strd	r0, r1, [r3]
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e80cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23e80d0:	200f      	movs	r0, #15
 23e80d2:	491c      	ldr	r1, [pc, #112]	; (23e8144 <_Z13A4_Initializev+0xf4>)
 23e80d4:	9400      	str	r4, [sp, #0]
 23e80d6:	f010 fc15 	bl	23f8904 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 23e80da:	b003      	add	sp, #12
 23e80dc:	bd30      	pop	{r4, r5, pc}
    else if (SD.exists(SD_A4_RAW_FILE)) {
 23e80de:	491a      	ldr	r1, [pc, #104]	; (23e8148 <_Z13A4_Initializev+0xf8>)
 23e80e0:	480a      	ldr	r0, [pc, #40]	; (23e810c <_Z13A4_Initializev+0xbc>)
 23e80e2:	f7fd fefd 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e80e6:	b130      	cbz	r0, 23e80f6 <_Z13A4_Initializev+0xa6>
      Output ("A4=RAW");
 23e80e8:	4818      	ldr	r0, [pc, #96]	; (23e814c <_Z13A4_Initializev+0xfc>)
 23e80ea:	f7fe f9bf 	bl	23e646c <_Z6OutputPKc>
      A4_State = A4_STATE_RAW;
 23e80ee:	2203      	movs	r2, #3
 23e80f0:	4b08      	ldr	r3, [pc, #32]	; (23e8114 <_Z13A4_Initializev+0xc4>)
 23e80f2:	601a      	str	r2, [r3, #0]
 23e80f4:	e7f1      	b.n	23e80da <_Z13A4_Initializev+0x8a>
      Output ("A4=NULL");
 23e80f6:	4816      	ldr	r0, [pc, #88]	; (23e8150 <_Z13A4_Initializev+0x100>)
 23e80f8:	e7c7      	b.n	23e808a <_Z13A4_Initializev+0x3a>
    Output ("A4=NULL,SD NF");
 23e80fa:	4816      	ldr	r0, [pc, #88]	; (23e8154 <_Z13A4_Initializev+0x104>)
 23e80fc:	e7c5      	b.n	23e808a <_Z13A4_Initializev+0x3a>
 23e80fe:	bf00      	nop
 23e8100:	023fd6c4 	.word	0x023fd6c4
 23e8104:	1006a77c 	.word	0x1006a77c
 23e8108:	1006a117 	.word	0x1006a117
 23e810c:	1006a2d0 	.word	0x1006a2d0
 23e8110:	023fd6cc 	.word	0x023fd6cc
 23e8114:	1006a25c 	.word	0x1006a25c
 23e8118:	1006a10c 	.word	0x1006a10c
 23e811c:	1006a1a0 	.word	0x1006a1a0
 23e8120:	3fa00000 	.word	0x3fa00000
 23e8124:	023fd6d4 	.word	0x023fd6d4
 23e8128:	40200000 	.word	0x40200000
 23e812c:	023fd6dc 	.word	0x023fd6dc
 23e8130:	1006a122 	.word	0x1006a122
 23e8134:	023fd6e5 	.word	0x023fd6e5
 23e8138:	1007aa70 	.word	0x1007aa70
 23e813c:	1007aa80 	.word	0x1007aa80
 23e8140:	1007aa78 	.word	0x1007aa78
 23e8144:	023e5e3d 	.word	0x023e5e3d
 23e8148:	1006a12d 	.word	0x1006a12d
 23e814c:	023fd6ed 	.word	0x023fd6ed
 23e8150:	023fd6f4 	.word	0x023fd6f4
 23e8154:	023fd6fc 	.word	0x023fd6fc

023e8158 <_Z13A5_Initializev>:
/* 
 *=======================================================================================================================
 * A5_Initialize()
 *=======================================================================================================================
 */
void A5_Initialize() {
 23e8158:	b508      	push	{r3, lr}
  Output ("A5:INIT");
 23e815a:	480c      	ldr	r0, [pc, #48]	; (23e818c <_Z13A5_Initializev+0x34>)
 23e815c:	f7fe f986 	bl	23e646c <_Z6OutputPKc>
  if (SD_exists) {
 23e8160:	4b0b      	ldr	r3, [pc, #44]	; (23e8190 <_Z13A5_Initializev+0x38>)
 23e8162:	781b      	ldrb	r3, [r3, #0]
 23e8164:	b183      	cbz	r3, 23e8188 <_Z13A5_Initializev+0x30>
    if (SD.exists(SD_A5_RAW_FILE)) {
 23e8166:	490b      	ldr	r1, [pc, #44]	; (23e8194 <_Z13A5_Initializev+0x3c>)
 23e8168:	480b      	ldr	r0, [pc, #44]	; (23e8198 <_Z13A5_Initializev+0x40>)
 23e816a:	f7fd feb9 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e816e:	b130      	cbz	r0, 23e817e <_Z13A5_Initializev+0x26>
      Output ("A5=RAW");
 23e8170:	480a      	ldr	r0, [pc, #40]	; (23e819c <_Z13A5_Initializev+0x44>)
 23e8172:	f7fe f97b 	bl	23e646c <_Z6OutputPKc>
      A5_State = A5_STATE_RAW;
 23e8176:	2201      	movs	r2, #1
 23e8178:	4b09      	ldr	r3, [pc, #36]	; (23e81a0 <_Z13A5_Initializev+0x48>)
 23e817a:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A5=NULL,SD NF");
  }
}
 23e817c:	bd08      	pop	{r3, pc}
      Output ("A5=NULL");
 23e817e:	4809      	ldr	r0, [pc, #36]	; (23e81a4 <_Z13A5_Initializev+0x4c>)
}
 23e8180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("A5=NULL,SD NF");
 23e8184:	f7fe b972 	b.w	23e646c <_Z6OutputPKc>
 23e8188:	4807      	ldr	r0, [pc, #28]	; (23e81a8 <_Z13A5_Initializev+0x50>)
 23e818a:	e7f9      	b.n	23e8180 <_Z13A5_Initializev+0x28>
 23e818c:	023fd70a 	.word	0x023fd70a
 23e8190:	1006a77c 	.word	0x1006a77c
 23e8194:	1006a137 	.word	0x1006a137
 23e8198:	1006a2d0 	.word	0x1006a2d0
 23e819c:	023fd712 	.word	0x023fd712
 23e81a0:	1006a260 	.word	0x1006a260
 23e81a4:	023fd719 	.word	0x023fd719
 23e81a8:	023fd721 	.word	0x023fd721

023e81ac <_Z11Pin_ReadAvgi>:
/* 
 *=======================================================================================================================
 * Pin_ReadAvg()
 *=======================================================================================================================
 */
float Pin_ReadAvg(int pin) {
 23e81ac:	b570      	push	{r4, r5, r6, lr}
 23e81ae:	2505      	movs	r5, #5
  int numReadings = 5;
  int totalValue = 0;
 23e81b0:	2400      	movs	r4, #0
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(pin);
 23e81b2:	b286      	uxth	r6, r0
 23e81b4:	4630      	mov	r0, r6
 23e81b6:	f011 fe52 	bl	23f9e5e <analogRead>
 23e81ba:	4404      	add	r4, r0
    delay(10);  // Short delay between readings
 23e81bc:	200a      	movs	r0, #10
 23e81be:	f00f fd61 	bl	23f7c84 <delay>
  for (int i = 0; i < numReadings; i++) {
 23e81c2:	3d01      	subs	r5, #1
 23e81c4:	d1f6      	bne.n	23e81b4 <_Z11Pin_ReadAvgi+0x8>
  }
  return(totalValue / numReadings);
 23e81c6:	2305      	movs	r3, #5
 23e81c8:	fb94 f3f3 	sdiv	r3, r4, r3
 23e81cc:	ee00 3a10 	vmov	s0, r3
}
 23e81d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23e81d4:	bd70      	pop	{r4, r5, r6, pc}
	...

023e81d8 <_Z25DistanceGauge_TakeReadingv>:
/*
 * ======================================================================================================================
 * DistanceGauge_TakeReading() - measure every second             
 * ======================================================================================================================
 */
void DistanceGauge_TakeReading() {
 23e81d8:	b508      	push	{r3, lr}
  dg_buckets[dg_bucket] = (int) analogRead(DISTANCE_GAUGE_PIN) * dg_adjustment;
 23e81da:	200f      	movs	r0, #15
 23e81dc:	f011 fe3f 	bl	23f9e5e <analogRead>
 23e81e0:	ee07 0a90 	vmov	s15, r0
 23e81e4:	490b      	ldr	r1, [pc, #44]	; (23e8214 <_Z25DistanceGauge_TakeReadingv+0x3c>)
 23e81e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23e81ea:	ed91 7a00 	vldr	s14, [r1]
 23e81ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 23e81f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e81f6:	ee17 0a90 	vmov	r0, s15
 23e81fa:	4a07      	ldr	r2, [pc, #28]	; (23e8218 <_Z25DistanceGauge_TakeReadingv+0x40>)
 23e81fc:	4907      	ldr	r1, [pc, #28]	; (23e821c <_Z25DistanceGauge_TakeReadingv+0x44>)
 23e81fe:	6813      	ldr	r3, [r2, #0]
 23e8200:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  dg_bucket = (++dg_bucket) % DG_BUCKETS; // Advance bucket index for next reading
 23e8204:	213c      	movs	r1, #60	; 0x3c
 23e8206:	3301      	adds	r3, #1
 23e8208:	fbb3 f0f1 	udiv	r0, r3, r1
 23e820c:	fb01 3310 	mls	r3, r1, r0, r3
 23e8210:	6013      	str	r3, [r2, #0]
}
 23e8212:	bd08      	pop	{r3, pc}
 23e8214:	1006a1a0 	.word	0x1006a1a0
 23e8218:	1006ac80 	.word	0x1006ac80
 23e821c:	1006ac84 	.word	0x1006ac84

023e8220 <_Z20DistanceGauge_Medianv>:
 *=======================================================================================================================
 */
float DistanceGauge_Median() {
  int i;
  
  mysort(dg_buckets, DG_BUCKETS);
 23e8220:	4804      	ldr	r0, [pc, #16]	; (23e8234 <_Z20DistanceGauge_Medianv+0x14>)
 23e8222:	213c      	movs	r1, #60	; 0x3c
float DistanceGauge_Median() {
 23e8224:	b508      	push	{r3, lr}
  mysort(dg_buckets, DG_BUCKETS);
 23e8226:	f7fd ff47 	bl	23e60b8 <_Z6mysortPjj>
  i = (DG_BUCKETS+1) / 2 - 1; // -1 as array indexing in C starts from 0
  
  return (dg_buckets[i]); 
 23e822a:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
}
 23e822e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 23e8232:	bd08      	pop	{r3, pc}
 23e8234:	1006ac84 	.word	0x1006ac84

023e8238 <_Z16Wind_SampleSpeedv>:
 * Optipolar Hall Effect Sensor SS451A - Anemometer
 * speed  = (( (signals/2) * (2 * pi * radius) ) / time) * calibration_factor
 * speed in m/s =  (   ( (interrupts/2) * (2 * 3.14156 * 0.079) )  / (time_period in ms / 1000)  )  * 2.64
 *=======================================================================================================================
 */
float Wind_SampleSpeed() {
 23e8238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e823c:	ed2d 8b02 	vpush	{d8}
  uint64_t delta_ms;
  float wind_speed;
  
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e8240:	f7fd fdd0 	bl	23e5de4 <_ZN11SystemClass6millisEv>

  if (anemometer_interrupt_count) {
 23e8244:	4f2c      	ldr	r7, [pc, #176]	; (23e82f8 <_Z16Wind_SampleSpeedv+0xc0>)
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e8246:	4604      	mov	r4, r0
  if (anemometer_interrupt_count) {
 23e8248:	683b      	ldr	r3, [r7, #0]
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e824a:	460d      	mov	r5, r1
  if (anemometer_interrupt_count) {
 23e824c:	4e2b      	ldr	r6, [pc, #172]	; (23e82fc <_Z16Wind_SampleSpeedv+0xc4>)
 23e824e:	2b00      	cmp	r3, #0
 23e8250:	d048      	beq.n	23e82e4 <_Z16Wind_SampleSpeedv+0xac>
    // wind_speed = (  ( (anemometer_interrupt_count/2) * (2 * 3.14156 * ws_radius) )  / 
    //  (float)( (float)delta_ms / 1000)  )  * ws_calibration;

    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e8252:	6838      	ldr	r0, [r7, #0]
 23e8254:	f7fc f8fa 	bl	23e444c <__aeabi_ui2d>
 23e8258:	a325      	add	r3, pc, #148	; (adr r3, 23e82f0 <_Z16Wind_SampleSpeedv+0xb8>)
 23e825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e825e:	f7fc f96f 	bl	23e4540 <__aeabi_dmul>
 23e8262:	4b27      	ldr	r3, [pc, #156]	; (23e8300 <_Z16Wind_SampleSpeedv+0xc8>)
 23e8264:	4680      	mov	r8, r0
 23e8266:	6818      	ldr	r0, [r3, #0]
 23e8268:	4689      	mov	r9, r1
 23e826a:	f7fc f911 	bl	23e4490 <__aeabi_f2d>
 23e826e:	4602      	mov	r2, r0
 23e8270:	460b      	mov	r3, r1
 23e8272:	4640      	mov	r0, r8
 23e8274:	4649      	mov	r1, r9
 23e8276:	f7fc f963 	bl	23e4540 <__aeabi_dmul>
 23e827a:	4680      	mov	r8, r0
 23e827c:	4689      	mov	r9, r1
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e827e:	e9d6 0100 	ldrd	r0, r1, [r6]
 23e8282:	1a20      	subs	r0, r4, r0
 23e8284:	eb65 0101 	sbc.w	r1, r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e8288:	f7fc fd6a 	bl	23e4d60 <__aeabi_ul2f>
 23e828c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e8304 <_Z16Wind_SampleSpeedv+0xcc>
 23e8290:	ee07 0a10 	vmov	s14, r0
 23e8294:	eec7 7a27 	vdiv.f32	s15, s14, s15
 23e8298:	ee17 0a90 	vmov	r0, s15
 23e829c:	f7fc f8f8 	bl	23e4490 <__aeabi_f2d>
 23e82a0:	4602      	mov	r2, r0
 23e82a2:	460b      	mov	r3, r1
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e82a4:	4640      	mov	r0, r8
 23e82a6:	4649      	mov	r1, r9
 23e82a8:	f7fc fa74 	bl	23e4794 <__aeabi_ddiv>
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e82ac:	4b16      	ldr	r3, [pc, #88]	; (23e8308 <_Z16Wind_SampleSpeedv+0xd0>)
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e82ae:	4604      	mov	r4, r0
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e82b0:	6818      	ldr	r0, [r3, #0]
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e82b2:	460d      	mov	r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e82b4:	f7fc f8ec 	bl	23e4490 <__aeabi_f2d>
 23e82b8:	4602      	mov	r2, r0
 23e82ba:	460b      	mov	r3, r1
 23e82bc:	4620      	mov	r0, r4
 23e82be:	4629      	mov	r1, r5
 23e82c0:	f7fc f93e 	bl	23e4540 <__aeabi_dmul>
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e82c4:	f7fc fc34 	bl	23e4b30 <__aeabi_d2f>
 23e82c8:	ee08 0a10 	vmov	s16, r0
  }
  else {
    wind_speed = 0.0;
  }

  anemometer_interrupt_count = 0;
 23e82cc:	2300      	movs	r3, #0
 23e82ce:	603b      	str	r3, [r7, #0]
  anemometer_interrupt_stime = System.millis();
 23e82d0:	f7fd fd88 	bl	23e5de4 <_ZN11SystemClass6millisEv>
  
  return (wind_speed);
} 
 23e82d4:	eeb0 0a48 	vmov.f32	s0, s16
 23e82d8:	ecbd 8b02 	vpop	{d8}
  anemometer_interrupt_stime = System.millis();
 23e82dc:	e9c6 0100 	strd	r0, r1, [r6]
} 
 23e82e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    wind_speed = 0.0;
 23e82e4:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e830c <_Z16Wind_SampleSpeedv+0xd4>
 23e82e8:	e7f0      	b.n	23e82cc <_Z16Wind_SampleSpeedv+0x94>
 23e82ea:	bf00      	nop
 23e82ec:	f3af 8000 	nop.w
 23e82f0:	35935fc4 	.word	0x35935fc4
 23e82f4:	400921ea 	.word	0x400921ea
 23e82f8:	1006a938 	.word	0x1006a938
 23e82fc:	1006a940 	.word	0x1006a940
 23e8300:	1006a1c0 	.word	0x1006a1c0
 23e8304:	447a0000 	.word	0x447a0000
 23e8308:	1006a1bc 	.word	0x1006a1bc
 23e830c:	00000000 	.word	0x00000000

023e8310 <_Z20Wind_SampleDirectionv>:
/* 
 *=======================================================================================================================
 * Wind_SampleDirection() -- Talk i2c to the AS5600 sensor and get direction
 *=======================================================================================================================
 */
int Wind_SampleDirection() {
 23e8310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int degree;
  
  // Read Raw Angle Low Byte
  Wire.beginTransmission(AS5600_ADR);
 23e8312:	4d39      	ldr	r5, [pc, #228]	; (23e83f8 <_Z20Wind_SampleDirectionv+0xe8>)
 23e8314:	f011 fdea 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8318:	6829      	ldr	r1, [r5, #0]
 23e831a:	f010 faa5 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AS5600_raw_ang_lo);
 23e831e:	f011 fde5 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8322:	210d      	movs	r1, #13
 23e8324:	f7fd fd16 	bl	23e5d54 <_ZN7TwoWire5writeEi.isra.0>
  if (Wire.endTransmission()) {
 23e8328:	f011 fde0 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e832c:	f010 faa3 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
 23e8330:	4c32      	ldr	r4, [pc, #200]	; (23e83fc <_Z20Wind_SampleDirectionv+0xec>)
 23e8332:	b178      	cbz	r0, 23e8354 <_Z20Wind_SampleDirectionv+0x44>
    if (AS5600_exists) {
 23e8334:	4b32      	ldr	r3, [pc, #200]	; (23e8400 <_Z20Wind_SampleDirectionv+0xf0>)
 23e8336:	781b      	ldrb	r3, [r3, #0]
 23e8338:	b113      	cbz	r3, 23e8340 <_Z20Wind_SampleDirectionv+0x30>
      Output ("WD Offline_L");
 23e833a:	4832      	ldr	r0, [pc, #200]	; (23e8404 <_Z20Wind_SampleDirectionv+0xf4>)
 23e833c:	f7fe f896 	bl	23e646c <_Z6OutputPKc>
    }
    AS5600_exists = false;
 23e8340:	2200      	movs	r2, #0
 23e8342:	4b2f      	ldr	r3, [pc, #188]	; (23e8400 <_Z20Wind_SampleDirectionv+0xf0>)
 23e8344:	701a      	strb	r2, [r3, #0]
      else {
        return (-1);
      }
    }
  }
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e8346:	6823      	ldr	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e8348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e834c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e8350:	6023      	str	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e8352:	e04c      	b.n	23e83ee <_Z20Wind_SampleDirectionv+0xde>
  else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e8354:	f011 fdca 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8358:	2201      	movs	r2, #1
 23e835a:	7829      	ldrb	r1, [r5, #0]
 23e835c:	f010 fa7d 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
 23e8360:	2800      	cmp	r0, #0
 23e8362:	d0f0      	beq.n	23e8346 <_Z20Wind_SampleDirectionv+0x36>
    int AS5600_lo_raw = Wire.read();
 23e8364:	f011 fdc2 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8368:	6803      	ldr	r3, [r0, #0]
 23e836a:	695b      	ldr	r3, [r3, #20]
 23e836c:	4798      	blx	r3
 23e836e:	4606      	mov	r6, r0
    Wire.beginTransmission(AS5600_ADR);
 23e8370:	f011 fdbc 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8374:	6829      	ldr	r1, [r5, #0]
 23e8376:	f010 fa77 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(AS5600_raw_ang_hi);
 23e837a:	f011 fdb7 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e837e:	210c      	movs	r1, #12
 23e8380:	f7fd fce8 	bl	23e5d54 <_ZN7TwoWire5writeEi.isra.0>
    if (Wire.endTransmission()) {
 23e8384:	f011 fdb2 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8388:	f010 fa75 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
 23e838c:	b128      	cbz	r0, 23e839a <_Z20Wind_SampleDirectionv+0x8a>
      if (AS5600_exists) {
 23e838e:	4b1c      	ldr	r3, [pc, #112]	; (23e8400 <_Z20Wind_SampleDirectionv+0xf0>)
 23e8390:	781b      	ldrb	r3, [r3, #0]
 23e8392:	2b00      	cmp	r3, #0
 23e8394:	d0d4      	beq.n	23e8340 <_Z20Wind_SampleDirectionv+0x30>
        Output ("WD Offline_H");
 23e8396:	481c      	ldr	r0, [pc, #112]	; (23e8408 <_Z20Wind_SampleDirectionv+0xf8>)
 23e8398:	e7d0      	b.n	23e833c <_Z20Wind_SampleDirectionv+0x2c>
    else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e839a:	f011 fda7 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e839e:	2201      	movs	r2, #1
 23e83a0:	7829      	ldrb	r1, [r5, #0]
 23e83a2:	f010 fa5a 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
 23e83a6:	2800      	cmp	r0, #0
 23e83a8:	d0cd      	beq.n	23e8346 <_Z20Wind_SampleDirectionv+0x36>
      word AS5600_hi_raw = Wire.read();
 23e83aa:	f011 fd9f 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e83ae:	6803      	ldr	r3, [r0, #0]
      if (!AS5600_exists) {
 23e83b0:	4f13      	ldr	r7, [pc, #76]	; (23e8400 <_Z20Wind_SampleDirectionv+0xf0>)
      word AS5600_hi_raw = Wire.read();
 23e83b2:	695b      	ldr	r3, [r3, #20]
 23e83b4:	4798      	blx	r3
      if (!AS5600_exists) {
 23e83b6:	783b      	ldrb	r3, [r7, #0]
      word AS5600_hi_raw = Wire.read();
 23e83b8:	4605      	mov	r5, r0
      if (!AS5600_exists) {
 23e83ba:	b913      	cbnz	r3, 23e83c2 <_Z20Wind_SampleDirectionv+0xb2>
        Output ("WD Online");
 23e83bc:	4813      	ldr	r0, [pc, #76]	; (23e840c <_Z20Wind_SampleDirectionv+0xfc>)
 23e83be:	f7fe f855 	bl	23e646c <_Z6OutputPKc>
      AS5600_exists = true;           // We made it 
 23e83c2:	2301      	movs	r3, #1
 23e83c4:	703b      	strb	r3, [r7, #0]
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e83c6:	6823      	ldr	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e83c8:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e83cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e83d0:	6023      	str	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e83d2:	f7fc f84b 	bl	23e446c <__aeabi_i2d>
 23e83d6:	a306      	add	r3, pc, #24	; (adr r3, 23e83f0 <_Z20Wind_SampleDirectionv+0xe0>)
 23e83d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e83dc:	f7fc f8b0 	bl	23e4540 <__aeabi_dmul>
 23e83e0:	f7fc fb5e 	bl	23e4aa0 <__aeabi_d2iz>
        return (-1);
 23e83e4:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23e83e8:	bf88      	it	hi
 23e83ea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23e83ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e83f0:	495182aa 	.word	0x495182aa
 23e83f4:	3fb6809d 	.word	0x3fb6809d
 23e83f8:	1006a0fc 	.word	0x1006a0fc
 23e83fc:	1006a178 	.word	0x1006a178
 23e8400:	1006a100 	.word	0x1006a100
 23e8404:	023fd72f 	.word	0x023fd72f
 23e8408:	023fd73c 	.word	0x023fd73c
 23e840c:	023fd749 	.word	0x023fd749

023e8410 <_Z20Wind_DirectionVectorv>:
/* 
 *=======================================================================================================================
 * Wind_DirectionVector()
 *=======================================================================================================================
 */
int Wind_DirectionVector() {
 23e8410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e8414:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23e8418:	e9d9 8900 	ldrd	r8, r9, [r9]
int Wind_DirectionVector() {
 23e841c:	ed2d 8b08 	vpush	{d8-d11}
  double EW_vector_sum = 0.0;
 23e8420:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 23e8520 <_Z20Wind_DirectionVectorv+0x110>
  bool ws_zero = true;
 23e8424:	2501      	movs	r5, #1
  for (i=0; i<WIND_READINGS; i++) {
 23e8426:	f04f 0a00 	mov.w	sl, #0
  double NS_vector_sum = 0.0;
 23e842a:	eeb0 9a48 	vmov.f32	s18, s16
 23e842e:	eef0 9a68 	vmov.f32	s19, s17
    r = (d * 71) / 4068.0;
 23e8432:	f04f 0b47 	mov.w	fp, #71	; 0x47
 23e8436:	4c40      	ldr	r4, [pc, #256]	; (23e8538 <_Z20Wind_DirectionVectorv+0x128>)
int Wind_DirectionVector() {
 23e8438:	b083      	sub	sp, #12
    d = wind.bucket[i].direction;
 23e843a:	6820      	ldr	r0, [r4, #0]
    if (d == -1) {
 23e843c:	1c43      	adds	r3, r0, #1
 23e843e:	d068      	beq.n	23e8512 <_Z20Wind_DirectionVectorv+0x102>
    s = wind.bucket[i].speed;
 23e8440:	ed94 ba01 	vldr	s22, [r4, #4]
      ws_zero = false;  
 23e8444:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e8448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e844c:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e8450:	bfc8      	it	gt
 23e8452:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e8454:	f7fc f80a 	bl	23e446c <__aeabi_i2d>
 23e8458:	4642      	mov	r2, r8
 23e845a:	464b      	mov	r3, r9
 23e845c:	f7fc f99a 	bl	23e4794 <__aeabi_ddiv>
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
 23e8460:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e8464:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e8468:	f011 ffa2 	bl	23fa3b0 <cos>
 23e846c:	ee1b 0a10 	vmov	r0, s22
 23e8470:	ed8d 0b00 	vstr	d0, [sp]
 23e8474:	f7fc f80c 	bl	23e4490 <__aeabi_f2d>
 23e8478:	4602      	mov	r2, r0
 23e847a:	460b      	mov	r3, r1
 23e847c:	4606      	mov	r6, r0
 23e847e:	460f      	mov	r7, r1
 23e8480:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e8484:	f7fc f85c 	bl	23e4540 <__aeabi_dmul>
 23e8488:	4602      	mov	r2, r0
 23e848a:	460b      	mov	r3, r1
 23e848c:	ec51 0b19 	vmov	r0, r1, d9
 23e8490:	f7fb fea0 	bl	23e41d4 <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e8494:	eeb0 0a4a 	vmov.f32	s0, s20
 23e8498:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e849c:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e84a0:	f012 f87a 	bl	23fa598 <sin>
 23e84a4:	4630      	mov	r0, r6
 23e84a6:	ec53 2b10 	vmov	r2, r3, d0
 23e84aa:	4639      	mov	r1, r7
 23e84ac:	f7fc f848 	bl	23e4540 <__aeabi_dmul>
 23e84b0:	4602      	mov	r2, r0
 23e84b2:	460b      	mov	r3, r1
 23e84b4:	ec51 0b18 	vmov	r0, r1, d8
 23e84b8:	f7fb fe8c 	bl	23e41d4 <__adddf3>
  for (i=0; i<WIND_READINGS; i++) {
 23e84bc:	f10a 0a01 	add.w	sl, sl, #1
 23e84c0:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
    EW_vector_sum += sin(r) * s;
 23e84c4:	ec41 0b18 	vmov	d8, r0, r1
  for (i=0; i<WIND_READINGS; i++) {
 23e84c8:	f104 0408 	add.w	r4, r4, #8
 23e84cc:	d1b5      	bne.n	23e843a <_Z20Wind_DirectionVectorv+0x2a>
  }
  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e84ce:	eeb0 1a49 	vmov.f32	s2, s18
 23e84d2:	eef0 1a69 	vmov.f32	s3, s19
 23e84d6:	ec41 0b10 	vmov	d0, r0, r1
 23e84da:	f012 f8b1 	bl	23fa640 <atan2>
 23e84de:	a312      	add	r3, pc, #72	; (adr r3, 23e8528 <_Z20Wind_DirectionVectorv+0x118>)
 23e84e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e84e4:	ec51 0b10 	vmov	r0, r1, d0
 23e84e8:	f7fc f82a 	bl	23e4540 <__aeabi_dmul>
 23e84ec:	a310      	add	r3, pc, #64	; (adr r3, 23e8530 <_Z20Wind_DirectionVectorv+0x120>)
 23e84ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e84f2:	f7fc f94f 	bl	23e4794 <__aeabi_ddiv>
 23e84f6:	f7fc fad3 	bl	23e4aa0 <__aeabi_d2iz>
  if (rtod<0) {
 23e84fa:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e84fc:	bfb8      	it	lt
 23e84fe:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 then we return current wind direction or 0 on failure of that.
  if (ws_zero) {
 23e8502:	b135      	cbz	r5, 23e8512 <_Z20Wind_DirectionVectorv+0x102>
    return (Wind_SampleDirection()); // Can return -1
  }
  else {
    return (rtod);
  }
}
 23e8504:	b003      	add	sp, #12
 23e8506:	ecbd 8b08 	vpop	{d8-d11}
 23e850a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (Wind_SampleDirection()); // Can return -1
 23e850e:	f7ff beff 	b.w	23e8310 <_Z20Wind_SampleDirectionv>
}
 23e8512:	b003      	add	sp, #12
 23e8514:	ecbd 8b08 	vpop	{d8-d11}
 23e8518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e851c:	f3af 8000 	nop.w
	...
 23e852c:	40afc800 	.word	0x40afc800
 23e8530:	00000000 	.word	0x00000000
 23e8534:	4051c000 	.word	0x4051c000
 23e8538:	1007ac6c 	.word	0x1007ac6c

023e853c <_Z17Wind_SpeedAveragev>:
 * Wind_SpeedAverage()
 *=======================================================================================================================
 */
float Wind_SpeedAverage() {
  float wind_speed = 0.0;
  for (int i=0; i<WIND_READINGS; i++) {
 23e853c:	2300      	movs	r3, #0
  float wind_speed = 0.0;
 23e853e:	eddf 7a08 	vldr	s15, [pc, #32]	; 23e8560 <_Z17Wind_SpeedAveragev+0x24>
 23e8542:	4a08      	ldr	r2, [pc, #32]	; (23e8564 <_Z17Wind_SpeedAveragev+0x28>)
    // sum wind speeds for later average
    wind_speed += wind.bucket[i].speed;
 23e8544:	ed92 7a01 	vldr	s14, [r2, #4]
  for (int i=0; i<WIND_READINGS; i++) {
 23e8548:	3301      	adds	r3, #1
 23e854a:	2b3c      	cmp	r3, #60	; 0x3c
    wind_speed += wind.bucket[i].speed;
 23e854c:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i=0; i<WIND_READINGS; i++) {
 23e8550:	f102 0208 	add.w	r2, r2, #8
 23e8554:	d1f6      	bne.n	23e8544 <_Z17Wind_SpeedAveragev+0x8>
  }
  return( wind_speed / (float) WIND_READINGS);
}
 23e8556:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23e8568 <_Z17Wind_SpeedAveragev+0x2c>
 23e855a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23e855e:	4770      	bx	lr
 23e8560:	00000000 	.word	0x00000000
 23e8564:	1007ac6c 	.word	0x1007ac6c
 23e8568:	42700000 	.word	0x42700000
 23e856c:	00000000 	.word	0x00000000

023e8570 <_Z15Wind_GustUpdatev>:
 *     Sum this reading with next 2.
 *     If greater than last, update last 
 * 
 *=======================================================================================================================
 */
void Wind_GustUpdate() {
 23e8570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e8574:	ed2d 8b08 	vpush	{d8-d11}
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
 23e8578:	4963      	ldr	r1, [pc, #396]	; (23e8708 <_Z15Wind_GustUpdatev+0x198>)
 23e857a:	253a      	movs	r5, #58	; 0x3a
 23e857c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
  float ws_sum = 0.0;
 23e8580:	ed9f 7a62 	vldr	s14, [pc, #392]	; 23e870c <_Z15Wind_GustUpdatev+0x19c>
  int ws_bucket = bucket;
 23e8584:	461c      	mov	r4, r3
  float sum;

  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
    // sum wind speeds 
    sum = wind.bucket[bucket].speed +
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e8586:	203c      	movs	r0, #60	; 0x3c
void Wind_GustUpdate() {
 23e8588:	b083      	sub	sp, #12
    sum = wind.bucket[bucket].speed +
 23e858a:	461e      	mov	r6, r3
 23e858c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e8590:	3301      	adds	r3, #1
    sum = wind.bucket[bucket].speed +
 23e8592:	edd2 7a01 	vldr	s15, [r2, #4]
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e8596:	fb93 f2f0 	sdiv	r2, r3, r0
 23e859a:	fb00 3312 	mls	r3, r0, r2, r3
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e859e:	1cb2      	adds	r2, r6, #2
 23e85a0:	fb92 f7f0 	sdiv	r7, r2, r0
 23e85a4:	fb00 2217 	mls	r2, r0, r7, r2
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e85a8:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
    sum = wind.bucket[bucket].speed +
 23e85ac:	edd7 6a01 	vldr	s13, [r7, #4]
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e85b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    sum = wind.bucket[bucket].speed +
 23e85b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23e85b8:	edd2 6a01 	vldr	s13, [r2, #4]
 23e85bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if (sum >= ws_sum) {
 23e85c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e85c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e85c8:	bfa4      	itt	ge
 23e85ca:	4634      	movge	r4, r6
      ws_sum = sum;
 23e85cc:	eeb0 7a67 	vmovge.f32	s14, s15
  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
 23e85d0:	3d01      	subs	r5, #1
 23e85d2:	d1da      	bne.n	23e858a <_Z15Wind_GustUpdatev+0x1a>
      ws_bucket = bucket;
    }
    bucket = (++bucket) % WIND_READINGS;
  }
  wind.gust = ws_sum/3;
 23e85d4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  
  // Determine Gust Direction 
  double NS_vector_sum = 0.0;
  double EW_vector_sum = 0.0;
 23e85d8:	ed9f 8b45 	vldr	d8, [pc, #276]	; 23e86f0 <_Z15Wind_GustUpdatev+0x180>
  wind.gust = ws_sum/3;
 23e85dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 23e85e0:	f04f 0803 	mov.w	r8, #3
 23e85e4:	edc1 7a79 	vstr	s15, [r1, #484]	; 0x1e4
  double r;
  float s;
  int d, i, rtod;
  bool ws_zero = true;
 23e85e8:	2501      	movs	r5, #1
  double NS_vector_sum = 0.0;
 23e85ea:	eeb0 9a48 	vmov.f32	s18, s16
 23e85ee:	eef0 9a68 	vmov.f32	s19, s17

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e85f2:	f04f 0b47 	mov.w	fp, #71	; 0x47
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
    EW_vector_sum += sin(r) * s;

    bucket = (++bucket) % WIND_READINGS;
 23e85f6:	f04f 093c 	mov.w	r9, #60	; 0x3c
    d = wind.bucket[bucket].direction;
 23e85fa:	f8df a10c 	ldr.w	sl, [pc, #268]	; 23e8708 <_Z15Wind_GustUpdatev+0x198>
 23e85fe:	f85a 0034 	ldr.w	r0, [sl, r4, lsl #3]
    if (d == -1) {
 23e8602:	1c43      	adds	r3, r0, #1
 23e8604:	d072      	beq.n	23e86ec <_Z15Wind_GustUpdatev+0x17c>
    s = wind.bucket[bucket].speed;
 23e8606:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 23e860a:	ed93 ba01 	vldr	s22, [r3, #4]
      ws_zero = false;  
 23e860e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e8612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e8616:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e861a:	bfc8      	it	gt
 23e861c:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e861e:	f7fb ff25 	bl	23e446c <__aeabi_i2d>
 23e8622:	a335      	add	r3, pc, #212	; (adr r3, 23e86f8 <_Z15Wind_GustUpdatev+0x188>)
 23e8624:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8628:	f7fc f8b4 	bl	23e4794 <__aeabi_ddiv>
    NS_vector_sum += cos(r) * s;
 23e862c:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e8630:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e8634:	f011 febc 	bl	23fa3b0 <cos>
 23e8638:	ee1b 0a10 	vmov	r0, s22
 23e863c:	ed8d 0b00 	vstr	d0, [sp]
 23e8640:	f7fb ff26 	bl	23e4490 <__aeabi_f2d>
 23e8644:	4602      	mov	r2, r0
 23e8646:	460b      	mov	r3, r1
 23e8648:	4606      	mov	r6, r0
 23e864a:	460f      	mov	r7, r1
 23e864c:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e8650:	f7fb ff76 	bl	23e4540 <__aeabi_dmul>
 23e8654:	4602      	mov	r2, r0
 23e8656:	460b      	mov	r3, r1
 23e8658:	ec51 0b19 	vmov	r0, r1, d9
 23e865c:	f7fb fdba 	bl	23e41d4 <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e8660:	eeb0 0a4a 	vmov.f32	s0, s20
 23e8664:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e8668:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e866c:	f011 ff94 	bl	23fa598 <sin>
 23e8670:	4630      	mov	r0, r6
 23e8672:	ec53 2b10 	vmov	r2, r3, d0
 23e8676:	4639      	mov	r1, r7
 23e8678:	f7fb ff62 	bl	23e4540 <__aeabi_dmul>
    bucket = (++bucket) % WIND_READINGS;
 23e867c:	3401      	adds	r4, #1
    EW_vector_sum += sin(r) * s;
 23e867e:	460b      	mov	r3, r1
 23e8680:	4602      	mov	r2, r0
 23e8682:	ec51 0b18 	vmov	r0, r1, d8
 23e8686:	f7fb fda5 	bl	23e41d4 <__adddf3>
    bucket = (++bucket) % WIND_READINGS;
 23e868a:	fb94 f3f9 	sdiv	r3, r4, r9
  for (i=0; i<3; i++) {
 23e868e:	f1b8 0801 	subs.w	r8, r8, #1
    EW_vector_sum += sin(r) * s;
 23e8692:	ec41 0b18 	vmov	d8, r0, r1
    bucket = (++bucket) % WIND_READINGS;
 23e8696:	fb09 4413 	mls	r4, r9, r3, r4
  for (i=0; i<3; i++) {
 23e869a:	d1b0      	bne.n	23e85fe <_Z15Wind_GustUpdatev+0x8e>
  }

  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e869c:	eeb0 1a49 	vmov.f32	s2, s18
 23e86a0:	eef0 1a69 	vmov.f32	s3, s19
 23e86a4:	eeb0 0a48 	vmov.f32	s0, s16
 23e86a8:	eef0 0a68 	vmov.f32	s1, s17
 23e86ac:	f011 ffc8 	bl	23fa640 <atan2>
 23e86b0:	a311      	add	r3, pc, #68	; (adr r3, 23e86f8 <_Z15Wind_GustUpdatev+0x188>)
 23e86b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e86b6:	ec51 0b10 	vmov	r0, r1, d0
 23e86ba:	f7fb ff41 	bl	23e4540 <__aeabi_dmul>
 23e86be:	a310      	add	r3, pc, #64	; (adr r3, 23e8700 <_Z15Wind_GustUpdatev+0x190>)
 23e86c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e86c4:	f7fc f866 	bl	23e4794 <__aeabi_ddiv>
 23e86c8:	f7fc f9ea 	bl	23e4aa0 <__aeabi_d2iz>
  if (rtod<0) {
 23e86cc:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e86ce:	bfb8      	it	lt
 23e86d0:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 or we have a -1 direction then set -1 for direction.
  if (ws_zero) {
    wind.gust_direction = -1;
 23e86d4:	2d00      	cmp	r5, #0
 23e86d6:	bf18      	it	ne
 23e86d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e86dc:	4b0a      	ldr	r3, [pc, #40]	; (23e8708 <_Z15Wind_GustUpdatev+0x198>)
 23e86de:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
  }
  else {
    wind.gust_direction = rtod;
  }
}
 23e86e2:	b003      	add	sp, #12
 23e86e4:	ecbd 8b08 	vpop	{d8-d11}
 23e86e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ws_zero = true;
 23e86ec:	2501      	movs	r5, #1
 23e86ee:	e7d5      	b.n	23e869c <_Z15Wind_GustUpdatev+0x12c>
	...
 23e86fc:	40afc800 	.word	0x40afc800
 23e8700:	00000000 	.word	0x00000000
 23e8704:	4051c000 	.word	0x4051c000
 23e8708:	1007ac6c 	.word	0x1007ac6c
 23e870c:	00000000 	.word	0x00000000

023e8710 <_Z16Wind_TakeReadingv>:
/*
 * ======================================================================================================================
 * Wind_TakeReading() - Wind direction and speed, measure every second             
 * ======================================================================================================================
 */
void Wind_TakeReading() {
 23e8710:	b538      	push	{r3, r4, r5, lr}
  wind.bucket[wind.bucket_idx].direction = (int) Wind_SampleDirection();
 23e8712:	4c0d      	ldr	r4, [pc, #52]	; (23e8748 <_Z16Wind_TakeReadingv+0x38>)
 23e8714:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e8718:	f7ff fdfa 	bl	23e8310 <_Z20Wind_SampleDirectionv>
 23e871c:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e8720:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e8724:	f7ff fd88 	bl	23e8238 <_Z16Wind_SampleSpeedv>
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e8728:	223c      	movs	r2, #60	; 0x3c
 23e872a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e872e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e8732:	3301      	adds	r3, #1
 23e8734:	fb93 f1f2 	sdiv	r1, r3, r2
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e8738:	ed85 0a01 	vstr	s0, [r5, #4]
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e873c:	fb02 3311 	mls	r3, r2, r1, r3
 23e8740:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
}
 23e8744:	bd38      	pop	{r3, r4, r5, pc}
 23e8746:	bf00      	nop
 23e8748:	1007ac6c 	.word	0x1007ac6c

023e874c <_Z17I2C_Check_Sensorsv>:
/*
 * ======================================================================================================================
 * I2C_Check_Sensors() - See if each I2C sensor responds on the bus and take action accordingly             
 * ======================================================================================================================
 */
void I2C_Check_Sensors() {
 23e874c:	b570      	push	{r4, r5, r6, lr}

  // BMX_1 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e874e:	2077      	movs	r0, #119	; 0x77
 23e8750:	f7fd fc83 	bl	23e605a <_Z16I2C_Device_Existh>
 23e8754:	4ca7      	ldr	r4, [pc, #668]	; (23e89f4 <_Z17I2C_Check_Sensorsv+0x2a8>)
    // Sensor online but our state had it offline
    if (BMX_1_exists == false) {
 23e8756:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e8758:	2800      	cmp	r0, #0
 23e875a:	f000 80ef 	beq.w	23e893c <_Z17I2C_Check_Sensorsv+0x1f0>
    if (BMX_1_exists == false) {
 23e875e:	b99b      	cbnz	r3, 23e8788 <_Z17I2C_Check_Sensorsv+0x3c>
      if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23e8760:	4ba5      	ldr	r3, [pc, #660]	; (23e89f8 <_Z17I2C_Check_Sensorsv+0x2ac>)
 23e8762:	781a      	ldrb	r2, [r3, #0]
 23e8764:	2a58      	cmp	r2, #88	; 0x58
 23e8766:	f040 80b1 	bne.w	23e88cc <_Z17I2C_Check_Sensorsv+0x180>
        if (bmp1.begin(BMX_ADDRESS_1)) { 
 23e876a:	2177      	movs	r1, #119	; 0x77
 23e876c:	48a3      	ldr	r0, [pc, #652]	; (23e89fc <_Z17I2C_Check_Sensorsv+0x2b0>)
 23e876e:	f006 ffcb 	bl	23ef708 <_ZN15Adafruit_BMP2805beginEhh>
 23e8772:	b148      	cbz	r0, 23e8788 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e8774:	2301      	movs	r3, #1
          Output ("BMP1 ONLINE");
 23e8776:	48a2      	ldr	r0, [pc, #648]	; (23e8a00 <_Z17I2C_Check_Sensorsv+0x2b4>)
          BMX_1_exists = true;
 23e8778:	7023      	strb	r3, [r4, #0]
        }        
      }
      else {
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
          BMX_1_exists = true;
          Output ("BM31 ONLINE");
 23e877a:	f7fd fe77 	bl	23e646c <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e877e:	4aa1      	ldr	r2, [pc, #644]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e8780:	6813      	ldr	r3, [r2, #0]
 23e8782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  else {
    // Sensor offline but our state has it online
    if (BMX_1_exists == true) {
      BMX_1_exists = false;
      Output ("BMX1 OFFLINE");
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e8786:	6013      	str	r3, [r2, #0]
    }    
  }

  // BMX_2 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e8788:	2076      	movs	r0, #118	; 0x76
 23e878a:	f7fd fc66 	bl	23e605a <_Z16I2C_Device_Existh>
 23e878e:	4d9e      	ldr	r5, [pc, #632]	; (23e8a08 <_Z17I2C_Check_Sensorsv+0x2bc>)
    // Sensor online but our state had it offline
    if (BMX_2_exists == false) {
 23e8790:	782b      	ldrb	r3, [r5, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e8792:	2800      	cmp	r0, #0
 23e8794:	f000 8116 	beq.w	23e89c4 <_Z17I2C_Check_Sensorsv+0x278>
    if (BMX_2_exists == false) {
 23e8798:	b99b      	cbnz	r3, 23e87c2 <_Z17I2C_Check_Sensorsv+0x76>
      if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23e879a:	4b9c      	ldr	r3, [pc, #624]	; (23e8a0c <_Z17I2C_Check_Sensorsv+0x2c0>)
 23e879c:	781a      	ldrb	r2, [r3, #0]
 23e879e:	2a58      	cmp	r2, #88	; 0x58
 23e87a0:	f040 80d8 	bne.w	23e8954 <_Z17I2C_Check_Sensorsv+0x208>
        if (bmp2.begin(BMX_ADDRESS_2)) { 
 23e87a4:	2176      	movs	r1, #118	; 0x76
 23e87a6:	489a      	ldr	r0, [pc, #616]	; (23e8a10 <_Z17I2C_Check_Sensorsv+0x2c4>)
 23e87a8:	f006 ffae 	bl	23ef708 <_ZN15Adafruit_BMP2805beginEhh>
 23e87ac:	b148      	cbz	r0, 23e87c2 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e87ae:	2301      	movs	r3, #1
          Output ("BMP2 ONLINE");
 23e87b0:	4898      	ldr	r0, [pc, #608]	; (23e8a14 <_Z17I2C_Check_Sensorsv+0x2c8>)
          BMX_2_exists = true;
 23e87b2:	702b      	strb	r3, [r5, #0]
        }        
      }
      else {
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
          BMX_2_exists = true;
          Output ("BM32 ONLINE");
 23e87b4:	f7fd fe5a 	bl	23e646c <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e87b8:	4a92      	ldr	r2, [pc, #584]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e87ba:	6813      	ldr	r3, [r2, #0]
 23e87bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  else {
    // Sensor offline but we our state has it online
    if (BMX_2_exists == true) {
      BMX_2_exists = false;
      Output ("BMX2 OFFLINE");
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e87c0:	6013      	str	r3, [r2, #0]
    }    
  }

  // HTU21DF Humidity & Temp Sensor
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e87c2:	2040      	movs	r0, #64	; 0x40
 23e87c4:	f7fd fc49 	bl	23e605a <_Z16I2C_Device_Existh>
 23e87c8:	4c93      	ldr	r4, [pc, #588]	; (23e8a18 <_Z17I2C_Check_Sensorsv+0x2cc>)
    // Sensor online but our state had it offline
    if (HTU21DF_exists == false) {
 23e87ca:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e87cc:	2800      	cmp	r0, #0
 23e87ce:	f000 8105 	beq.w	23e89dc <_Z17I2C_Check_Sensorsv+0x290>
    if (HTU21DF_exists == false) {
 23e87d2:	b983      	cbnz	r3, 23e87f6 <_Z17I2C_Check_Sensorsv+0xaa>
      // See if we can bring sensor online
      if (htu.begin()) {
 23e87d4:	f011 fb8a 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e87d8:	4601      	mov	r1, r0
 23e87da:	4890      	ldr	r0, [pc, #576]	; (23e8a1c <_Z17I2C_Check_Sensorsv+0x2d0>)
 23e87dc:	f008 fa06 	bl	23f0bec <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e87e0:	b148      	cbz	r0, 23e87f6 <_Z17I2C_Check_Sensorsv+0xaa>
        HTU21DF_exists = true;
 23e87e2:	2301      	movs	r3, #1
        Output ("HTU ONLINE");
 23e87e4:	488e      	ldr	r0, [pc, #568]	; (23e8a20 <_Z17I2C_Check_Sensorsv+0x2d4>)
        HTU21DF_exists = true;
 23e87e6:	7023      	strb	r3, [r4, #0]
        Output ("HTU ONLINE");
 23e87e8:	f7fd fe40 	bl	23e646c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_HTU21DF; // Turn Off Bit
 23e87ec:	4a85      	ldr	r2, [pc, #532]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e87ee:	6813      	ldr	r3, [r2, #0]
 23e87f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  else {
    // Sensor offline but we our state has it online
    if (HTU21DF_exists == true) {
      HTU21DF_exists = false;
      Output ("HTU OFFLINE");
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e87f4:	6013      	str	r3, [r2, #0]
    }   
  }
#endif

  // SI1145 UV index & IR & Visible Sensor
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e87f6:	2060      	movs	r0, #96	; 0x60
 23e87f8:	f7fd fc2f 	bl	23e605a <_Z16I2C_Device_Existh>
 23e87fc:	4c89      	ldr	r4, [pc, #548]	; (23e8a24 <_Z17I2C_Check_Sensorsv+0x2d8>)
    // Sensor online but our state had it offline
    if (SI1145_exists == false) {
 23e87fe:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e8800:	2800      	cmp	r0, #0
 23e8802:	f000 8141 	beq.w	23e8a88 <_Z17I2C_Check_Sensorsv+0x33c>
    if (SI1145_exists == false) {
 23e8806:	b98b      	cbnz	r3, 23e882c <_Z17I2C_Check_Sensorsv+0xe0>
      // See if we can bring sensore online
      if (uv.begin()) {
 23e8808:	f011 fb70 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e880c:	2160      	movs	r1, #96	; 0x60
 23e880e:	4602      	mov	r2, r0
 23e8810:	4885      	ldr	r0, [pc, #532]	; (23e8a28 <_Z17I2C_Check_Sensorsv+0x2dc>)
 23e8812:	f008 fe93 	bl	23f153c <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23e8816:	b148      	cbz	r0, 23e882c <_Z17I2C_Check_Sensorsv+0xe0>
        SI1145_exists = true;
 23e8818:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23e881a:	4884      	ldr	r0, [pc, #528]	; (23e8a2c <_Z17I2C_Check_Sensorsv+0x2e0>)
        SI1145_exists = true;
 23e881c:	7023      	strb	r3, [r4, #0]
        Output ("SI ONLINE");
 23e881e:	f7fd fe25 	bl	23e646c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23e8822:	4a78      	ldr	r2, [pc, #480]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e8824:	6813      	ldr	r3, [r2, #0]
 23e8826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  else {
    // Sensor offline but we our state has it online
    if (SI1145_exists == true) {
      SI1145_exists = false;
      Output ("SI OFFLINE");
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e882a:	6013      	str	r3, [r2, #0]
    }   
  }

  // AS5600 Wind Direction
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e882c:	4b80      	ldr	r3, [pc, #512]	; (23e8a30 <_Z17I2C_Check_Sensorsv+0x2e4>)
 23e882e:	7818      	ldrb	r0, [r3, #0]
 23e8830:	f7fd fc13 	bl	23e605a <_Z16I2C_Device_Existh>
 23e8834:	4b7f      	ldr	r3, [pc, #508]	; (23e8a34 <_Z17I2C_Check_Sensorsv+0x2e8>)
    // Sensor online but our state had it offline
    if (AS5600_exists == false) {
 23e8836:	781a      	ldrb	r2, [r3, #0]
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e8838:	2800      	cmp	r0, #0
 23e883a:	f000 8131 	beq.w	23e8aa0 <_Z17I2C_Check_Sensorsv+0x354>
    if (AS5600_exists == false) {
 23e883e:	b94a      	cbnz	r2, 23e8854 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = true;
 23e8840:	2201      	movs	r2, #1
      Output ("WD ONLINE");
 23e8842:	487d      	ldr	r0, [pc, #500]	; (23e8a38 <_Z17I2C_Check_Sensorsv+0x2ec>)
      AS5600_exists = true;
 23e8844:	701a      	strb	r2, [r3, #0]
      Output ("WD ONLINE");
 23e8846:	f7fd fe11 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e884a:	4a6e      	ldr	r2, [pc, #440]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e884c:	6813      	ldr	r3, [r2, #0]
 23e884e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  else {
    // Sensor offline but we our state has it online
    if (AS5600_exists == true) {
      AS5600_exists = false;
      Output ("WD OFFLINE");
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e8852:	6013      	str	r3, [r2, #0]
    }   
  }

  // VEML7700 Lux 
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e8854:	2010      	movs	r0, #16
 23e8856:	f7fd fc00 	bl	23e605a <_Z16I2C_Device_Existh>
 23e885a:	4c78      	ldr	r4, [pc, #480]	; (23e8a3c <_Z17I2C_Check_Sensorsv+0x2f0>)
    // Sensor online but our state had it offline
    if (VEML7700_exists == false) {
 23e885c:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e885e:	2800      	cmp	r0, #0
 23e8860:	f000 812a 	beq.w	23e8ab8 <_Z17I2C_Check_Sensorsv+0x36c>
    if (VEML7700_exists == false) {
 23e8864:	b983      	cbnz	r3, 23e8888 <_Z17I2C_Check_Sensorsv+0x13c>
      // See if we can bring sensor online
      if (veml.begin()) {
 23e8866:	f011 fb41 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e886a:	4601      	mov	r1, r0
 23e886c:	4874      	ldr	r0, [pc, #464]	; (23e8a40 <_Z17I2C_Check_Sensorsv+0x2f4>)
 23e886e:	f009 fc5c 	bl	23f212a <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e8872:	b148      	cbz	r0, 23e8888 <_Z17I2C_Check_Sensorsv+0x13c>
        VEML7700_exists = true;
 23e8874:	2301      	movs	r3, #1
        Output ("VLX ONLINE");
 23e8876:	4873      	ldr	r0, [pc, #460]	; (23e8a44 <_Z17I2C_Check_Sensorsv+0x2f8>)
        VEML7700_exists = true;
 23e8878:	7023      	strb	r3, [r4, #0]
        Output ("VLX ONLINE");
 23e887a:	f7fd fdf7 	bl	23e646c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_VLX; // Turn Off Bit
 23e887e:	4a61      	ldr	r2, [pc, #388]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e8880:	6813      	ldr	r3, [r2, #0]
 23e8882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  else {
    // Sensor offline but we our state has it online
    if (VEML7700_exists == true) {
      VEML7700_exists = false;
      Output ("VLX OFFLINE");
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e8886:	6013      	str	r3, [r2, #0]
    }   
  }

  // PM25AQI
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e8888:	2012      	movs	r0, #18
 23e888a:	f7fd fbe6 	bl	23e605a <_Z16I2C_Device_Existh>
 23e888e:	4c6e      	ldr	r4, [pc, #440]	; (23e8a48 <_Z17I2C_Check_Sensorsv+0x2fc>)
    // Sensor online but our state had it offline
    if (PM25AQI_exists == false) {
 23e8890:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e8892:	2800      	cmp	r0, #0
 23e8894:	f000 811c 	beq.w	23e8ad0 <_Z17I2C_Check_Sensorsv+0x384>
    if (PM25AQI_exists == false) {
 23e8898:	2b00      	cmp	r3, #0
 23e889a:	f040 8123 	bne.w	23e8ae4 <_Z17I2C_Check_Sensorsv+0x398>
      // See if we can bring sensor online
      if (pmaq.begin_I2C()) {
 23e889e:	f011 fb25 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e88a2:	4601      	mov	r1, r0
 23e88a4:	4869      	ldr	r0, [pc, #420]	; (23e8a4c <_Z17I2C_Check_Sensorsv+0x300>)
 23e88a6:	f008 fc2a 	bl	23f10fe <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e88aa:	2800      	cmp	r0, #0
 23e88ac:	f000 811a 	beq.w	23e8ae4 <_Z17I2C_Check_Sensorsv+0x398>
        PM25AQI_exists = true;
 23e88b0:	2301      	movs	r3, #1
        Output ("PM ONLINE");
 23e88b2:	4867      	ldr	r0, [pc, #412]	; (23e8a50 <_Z17I2C_Check_Sensorsv+0x304>)
        PM25AQI_exists = true;
 23e88b4:	7023      	strb	r3, [r4, #0]
        Output ("PM ONLINE");
 23e88b6:	f7fd fdd9 	bl	23e646c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e88ba:	4a52      	ldr	r2, [pc, #328]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e88bc:	6813      	ldr	r3, [r2, #0]
 23e88be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e88c2:	6013      	str	r3, [r2, #0]
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
    }   
  }
}
 23e88c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pm25aqi_clear();
 23e88c8:	f7ff b8f8 	b.w	23e7abc <_Z13pm25aqi_clearv>
      else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23e88cc:	2a60      	cmp	r2, #96	; 0x60
 23e88ce:	d127      	bne.n	23e8920 <_Z17I2C_Check_Sensorsv+0x1d4>
        if (BMX_1_type == BMX_TYPE_BME280) {
 23e88d0:	4d60      	ldr	r5, [pc, #384]	; (23e8a54 <_Z17I2C_Check_Sensorsv+0x308>)
 23e88d2:	782b      	ldrb	r3, [r5, #0]
 23e88d4:	2b02      	cmp	r3, #2
 23e88d6:	d111      	bne.n	23e88fc <_Z17I2C_Check_Sensorsv+0x1b0>
          if (bme1.begin(BMX_ADDRESS_1)) { 
 23e88d8:	f011 fb08 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e88dc:	2177      	movs	r1, #119	; 0x77
 23e88de:	4602      	mov	r2, r0
 23e88e0:	485d      	ldr	r0, [pc, #372]	; (23e8a58 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e88e2:	f006 fb1c 	bl	23eef1e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e88e6:	b148      	cbz	r0, 23e88fc <_Z17I2C_Check_Sensorsv+0x1b0>
            BMX_1_exists = true;
 23e88e8:	2301      	movs	r3, #1
            Output ("BME1 ONLINE");
 23e88ea:	485c      	ldr	r0, [pc, #368]	; (23e8a5c <_Z17I2C_Check_Sensorsv+0x310>)
            BMX_1_exists = true;
 23e88ec:	7023      	strb	r3, [r4, #0]
            Output ("BME1 ONLINE");
 23e88ee:	f7fd fdbd 	bl	23e646c <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e88f2:	4a44      	ldr	r2, [pc, #272]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e88f4:	6813      	ldr	r3, [r2, #0]
 23e88f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 23e88fa:	6013      	str	r3, [r2, #0]
        if (BMX_1_type == BMX_TYPE_BMP390) {
 23e88fc:	782b      	ldrb	r3, [r5, #0]
 23e88fe:	2b04      	cmp	r3, #4
 23e8900:	f47f af42 	bne.w	23e8788 <_Z17I2C_Check_Sensorsv+0x3c>
          if (bm31.begin_I2C(BMX_ADDRESS_1)) {
 23e8904:	f011 faf2 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8908:	2177      	movs	r1, #119	; 0x77
 23e890a:	4602      	mov	r2, r0
 23e890c:	4854      	ldr	r0, [pc, #336]	; (23e8a60 <_Z17I2C_Check_Sensorsv+0x314>)
 23e890e:	f007 f8fd 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e8912:	2800      	cmp	r0, #0
 23e8914:	f43f af38 	beq.w	23e8788 <_Z17I2C_Check_Sensorsv+0x3c>
            BMX_1_exists = true;
 23e8918:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e891a:	4852      	ldr	r0, [pc, #328]	; (23e8a64 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e891c:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e891e:	e72c      	b.n	23e877a <_Z17I2C_Check_Sensorsv+0x2e>
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e8920:	f011 fae4 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8924:	2177      	movs	r1, #119	; 0x77
 23e8926:	4602      	mov	r2, r0
 23e8928:	484d      	ldr	r0, [pc, #308]	; (23e8a60 <_Z17I2C_Check_Sensorsv+0x314>)
 23e892a:	f007 f8ef 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e892e:	2800      	cmp	r0, #0
 23e8930:	f43f af2a 	beq.w	23e8788 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e8934:	2301      	movs	r3, #1
          Output ("BM31 ONLINE");
 23e8936:	484c      	ldr	r0, [pc, #304]	; (23e8a68 <_Z17I2C_Check_Sensorsv+0x31c>)
          BMX_1_exists = true;
 23e8938:	7023      	strb	r3, [r4, #0]
          Output ("BM31 ONLINE");
 23e893a:	e71e      	b.n	23e877a <_Z17I2C_Check_Sensorsv+0x2e>
    if (BMX_1_exists == true) {
 23e893c:	2b00      	cmp	r3, #0
 23e893e:	f43f af23 	beq.w	23e8788 <_Z17I2C_Check_Sensorsv+0x3c>
      BMX_1_exists = false;
 23e8942:	7020      	strb	r0, [r4, #0]
      Output ("BMX1 OFFLINE");
 23e8944:	4849      	ldr	r0, [pc, #292]	; (23e8a6c <_Z17I2C_Check_Sensorsv+0x320>)
 23e8946:	f7fd fd91 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e894a:	4a2e      	ldr	r2, [pc, #184]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e894c:	6813      	ldr	r3, [r2, #0]
 23e894e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e8952:	e718      	b.n	23e8786 <_Z17I2C_Check_Sensorsv+0x3a>
      else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23e8954:	2a60      	cmp	r2, #96	; 0x60
 23e8956:	d127      	bne.n	23e89a8 <_Z17I2C_Check_Sensorsv+0x25c>
        if (BMX_2_type == BMX_TYPE_BME280) {
 23e8958:	4e45      	ldr	r6, [pc, #276]	; (23e8a70 <_Z17I2C_Check_Sensorsv+0x324>)
 23e895a:	7833      	ldrb	r3, [r6, #0]
 23e895c:	2b02      	cmp	r3, #2
 23e895e:	d111      	bne.n	23e8984 <_Z17I2C_Check_Sensorsv+0x238>
          if (bme1.begin(BMX_ADDRESS_2)) { 
 23e8960:	f011 fac4 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8964:	2176      	movs	r1, #118	; 0x76
 23e8966:	4602      	mov	r2, r0
 23e8968:	483b      	ldr	r0, [pc, #236]	; (23e8a58 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e896a:	f006 fad8 	bl	23eef1e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e896e:	b148      	cbz	r0, 23e8984 <_Z17I2C_Check_Sensorsv+0x238>
            BMX_2_exists = true;
 23e8970:	2301      	movs	r3, #1
            Output ("BME2 ONLINE");
 23e8972:	4840      	ldr	r0, [pc, #256]	; (23e8a74 <_Z17I2C_Check_Sensorsv+0x328>)
            BMX_2_exists = true;
 23e8974:	702b      	strb	r3, [r5, #0]
            Output ("BME2 ONLINE");
 23e8976:	f7fd fd79 	bl	23e646c <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e897a:	4a22      	ldr	r2, [pc, #136]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e897c:	6813      	ldr	r3, [r2, #0]
 23e897e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 23e8982:	6013      	str	r3, [r2, #0]
        if (BMX_2_type == BMX_TYPE_BMP390) {
 23e8984:	7833      	ldrb	r3, [r6, #0]
 23e8986:	2b04      	cmp	r3, #4
 23e8988:	f47f af1b 	bne.w	23e87c2 <_Z17I2C_Check_Sensorsv+0x76>
          if (bm31.begin_I2C(BMX_ADDRESS_2)) {
 23e898c:	f011 faae 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e8990:	2176      	movs	r1, #118	; 0x76
 23e8992:	4602      	mov	r2, r0
 23e8994:	4832      	ldr	r0, [pc, #200]	; (23e8a60 <_Z17I2C_Check_Sensorsv+0x314>)
 23e8996:	f007 f8b9 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e899a:	2800      	cmp	r0, #0
 23e899c:	f43f af11 	beq.w	23e87c2 <_Z17I2C_Check_Sensorsv+0x76>
            BMX_1_exists = true;
 23e89a0:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e89a2:	4830      	ldr	r0, [pc, #192]	; (23e8a64 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e89a4:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e89a6:	e705      	b.n	23e87b4 <_Z17I2C_Check_Sensorsv+0x68>
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e89a8:	f011 faa0 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23e89ac:	2176      	movs	r1, #118	; 0x76
 23e89ae:	4602      	mov	r2, r0
 23e89b0:	4831      	ldr	r0, [pc, #196]	; (23e8a78 <_Z17I2C_Check_Sensorsv+0x32c>)
 23e89b2:	f007 f8ab 	bl	23efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e89b6:	2800      	cmp	r0, #0
 23e89b8:	f43f af03 	beq.w	23e87c2 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e89bc:	2301      	movs	r3, #1
          Output ("BM32 ONLINE");
 23e89be:	482f      	ldr	r0, [pc, #188]	; (23e8a7c <_Z17I2C_Check_Sensorsv+0x330>)
          BMX_2_exists = true;
 23e89c0:	702b      	strb	r3, [r5, #0]
          Output ("BM32 ONLINE");
 23e89c2:	e6f7      	b.n	23e87b4 <_Z17I2C_Check_Sensorsv+0x68>
    if (BMX_2_exists == true) {
 23e89c4:	2b00      	cmp	r3, #0
 23e89c6:	f43f aefc 	beq.w	23e87c2 <_Z17I2C_Check_Sensorsv+0x76>
      BMX_2_exists = false;
 23e89ca:	7028      	strb	r0, [r5, #0]
      Output ("BMX2 OFFLINE");
 23e89cc:	482c      	ldr	r0, [pc, #176]	; (23e8a80 <_Z17I2C_Check_Sensorsv+0x334>)
 23e89ce:	f7fd fd4d 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e89d2:	4a0c      	ldr	r2, [pc, #48]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e89d4:	6813      	ldr	r3, [r2, #0]
 23e89d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e89da:	e6f1      	b.n	23e87c0 <_Z17I2C_Check_Sensorsv+0x74>
    if (HTU21DF_exists == true) {
 23e89dc:	2b00      	cmp	r3, #0
 23e89de:	f43f af0a 	beq.w	23e87f6 <_Z17I2C_Check_Sensorsv+0xaa>
      HTU21DF_exists = false;
 23e89e2:	7020      	strb	r0, [r4, #0]
      Output ("HTU OFFLINE");
 23e89e4:	4827      	ldr	r0, [pc, #156]	; (23e8a84 <_Z17I2C_Check_Sensorsv+0x338>)
 23e89e6:	f7fd fd41 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e89ea:	4a06      	ldr	r2, [pc, #24]	; (23e8a04 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e89ec:	6813      	ldr	r3, [r2, #0]
 23e89ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 23e89f2:	e6ff      	b.n	23e87f4 <_Z17I2C_Check_Sensorsv+0xa8>
 23e89f4:	1006a282 	.word	0x1006a282
 23e89f8:	1006a281 	.word	0x1006a281
 23e89fc:	1006abf8 	.word	0x1006abf8
 23e8a00:	023fd753 	.word	0x023fd753
 23e8a04:	1006a178 	.word	0x1006a178
 23e8a08:	1006a285 	.word	0x1006a285
 23e8a0c:	1006a284 	.word	0x1006a284
 23e8a10:	1006ac38 	.word	0x1006ac38
 23e8a14:	023fd794 	.word	0x023fd794
 23e8a18:	1006a2b0 	.word	0x1006a2b0
 23e8a1c:	1006ae90 	.word	0x1006ae90
 23e8a20:	023fd7c5 	.word	0x023fd7c5
 23e8a24:	1006a7d2 	.word	0x1006a7d2
 23e8a28:	1007ac18 	.word	0x1007ac18
 23e8a2c:	023fd7dc 	.word	0x023fd7dc
 23e8a30:	1006a0fc 	.word	0x1006a0fc
 23e8a34:	1006a100 	.word	0x1006a100
 23e8a38:	023fd7f1 	.word	0x023fd7f1
 23e8a3c:	1006a7e4 	.word	0x1006a7e4
 23e8a40:	1007ac20 	.word	0x1007ac20
 23e8a44:	023fd806 	.word	0x023fd806
 23e8a48:	1006a2cc 	.word	0x1006a2cc
 23e8a4c:	1007aa30 	.word	0x1007aa30
 23e8a50:	023fd81d 	.word	0x023fd81d
 23e8a54:	1006a283 	.word	0x1006a283
 23e8a58:	1006ab48 	.word	0x1006ab48
 23e8a5c:	023fd75f 	.word	0x023fd75f
 23e8a60:	1006a948 	.word	0x1006a948
 23e8a64:	023fd76b 	.word	0x023fd76b
 23e8a68:	023fd77b 	.word	0x023fd77b
 23e8a6c:	023fd787 	.word	0x023fd787
 23e8a70:	1006a286 	.word	0x1006a286
 23e8a74:	023fd7a0 	.word	0x023fd7a0
 23e8a78:	1006aa48 	.word	0x1006aa48
 23e8a7c:	023fd7ac 	.word	0x023fd7ac
 23e8a80:	023fd7b8 	.word	0x023fd7b8
 23e8a84:	023fd7d0 	.word	0x023fd7d0
    if (SI1145_exists == true) {
 23e8a88:	2b00      	cmp	r3, #0
 23e8a8a:	f43f aecf 	beq.w	23e882c <_Z17I2C_Check_Sensorsv+0xe0>
      SI1145_exists = false;
 23e8a8e:	7020      	strb	r0, [r4, #0]
      Output ("SI OFFLINE");
 23e8a90:	4815      	ldr	r0, [pc, #84]	; (23e8ae8 <_Z17I2C_Check_Sensorsv+0x39c>)
 23e8a92:	f7fd fceb 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e8a96:	4a15      	ldr	r2, [pc, #84]	; (23e8aec <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e8a98:	6813      	ldr	r3, [r2, #0]
 23e8a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e8a9e:	e6c4      	b.n	23e882a <_Z17I2C_Check_Sensorsv+0xde>
    if (AS5600_exists == true) {
 23e8aa0:	2a00      	cmp	r2, #0
 23e8aa2:	f43f aed7 	beq.w	23e8854 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = false;
 23e8aa6:	7018      	strb	r0, [r3, #0]
      Output ("WD OFFLINE");
 23e8aa8:	4811      	ldr	r0, [pc, #68]	; (23e8af0 <_Z17I2C_Check_Sensorsv+0x3a4>)
 23e8aaa:	f7fd fcdf 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e8aae:	4a0f      	ldr	r2, [pc, #60]	; (23e8aec <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e8ab0:	6813      	ldr	r3, [r2, #0]
 23e8ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e8ab6:	e6cc      	b.n	23e8852 <_Z17I2C_Check_Sensorsv+0x106>
    if (VEML7700_exists == true) {
 23e8ab8:	2b00      	cmp	r3, #0
 23e8aba:	f43f aee5 	beq.w	23e8888 <_Z17I2C_Check_Sensorsv+0x13c>
      VEML7700_exists = false;
 23e8abe:	7020      	strb	r0, [r4, #0]
      Output ("VLX OFFLINE");
 23e8ac0:	480c      	ldr	r0, [pc, #48]	; (23e8af4 <_Z17I2C_Check_Sensorsv+0x3a8>)
 23e8ac2:	f7fd fcd3 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e8ac6:	4a09      	ldr	r2, [pc, #36]	; (23e8aec <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e8ac8:	6813      	ldr	r3, [r2, #0]
 23e8aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 23e8ace:	e6da      	b.n	23e8886 <_Z17I2C_Check_Sensorsv+0x13a>
    if (PM25AQI_exists == true) {
 23e8ad0:	b143      	cbz	r3, 23e8ae4 <_Z17I2C_Check_Sensorsv+0x398>
      PM25AQI_exists = false;
 23e8ad2:	7020      	strb	r0, [r4, #0]
      Output ("PM OFFLINE");
 23e8ad4:	4808      	ldr	r0, [pc, #32]	; (23e8af8 <_Z17I2C_Check_Sensorsv+0x3ac>)
 23e8ad6:	f7fd fcc9 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e8ada:	4a04      	ldr	r2, [pc, #16]	; (23e8aec <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e8adc:	6813      	ldr	r3, [r2, #0]
 23e8ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e8ae2:	6013      	str	r3, [r2, #0]
}
 23e8ae4:	bd70      	pop	{r4, r5, r6, pc}
 23e8ae6:	bf00      	nop
 23e8ae8:	023fd7e6 	.word	0x023fd7e6
 23e8aec:	1006a178 	.word	0x1006a178
 23e8af0:	023fd7fb 	.word	0x023fd7fb
 23e8af4:	023fd811 	.word	0x023fd811
 23e8af8:	023fd5e3 	.word	0x023fd5e3

023e8afc <_Z22EEPROM_ChecksumComputev>:
 *=======================================================================================================================
 */
unsigned long EEPROM_ChecksumCompute() {
  unsigned long checksum=0;

  checksum += (unsigned long) eeprom.rgt1;
 23e8afc:	4910      	ldr	r1, [pc, #64]	; (23e8b40 <_Z22EEPROM_ChecksumComputev+0x44>)
 23e8afe:	edd1 7a00 	vldr	s15, [r1]
 23e8b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e8b06:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e8b0a:	edd1 7a01 	vldr	s15, [r1, #4]
 23e8b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e8b12:	ee17 2a90 	vmov	r2, s15
  checksum += (unsigned long) eeprom.rgt2;
 23e8b16:	edd1 7a02 	vldr	s15, [r1, #8]
 23e8b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e8b1e:	4410      	add	r0, r2
 23e8b20:	694a      	ldr	r2, [r1, #20]
 23e8b22:	4402      	add	r2, r0
  checksum += (unsigned long) eeprom.rgt2;
 23e8b24:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp2;
 23e8b28:	edd1 7a03 	vldr	s15, [r1, #12]
 23e8b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e8b30:	ee17 3a90 	vmov	r3, s15
 23e8b34:	4410      	add	r0, r2
 23e8b36:	4403      	add	r3, r0
  checksum += (unsigned long) eeprom.rgts;
  checksum += (unsigned long) eeprom.n2sfp;
 23e8b38:	6908      	ldr	r0, [r1, #16]
  return (checksum);
}
 23e8b3a:	4418      	add	r0, r3
 23e8b3c:	4770      	bx	lr
 23e8b3e:	bf00      	nop
 23e8b40:	1006ae5c 	.word	0x1006ae5c

023e8b44 <_Z21EEPROM_ChecksumUpdatev>:
/* 
 *=======================================================================================================================
 * EEPROM_ChecksumUpdate()
 *=======================================================================================================================
 */
void EEPROM_ChecksumUpdate() {
 23e8b44:	b508      	push	{r3, lr}
  eeprom.checksum = EEPROM_ChecksumCompute();
 23e8b46:	f7ff ffd9 	bl	23e8afc <_Z22EEPROM_ChecksumComputev>
 23e8b4a:	4b01      	ldr	r3, [pc, #4]	; (23e8b50 <_Z21EEPROM_ChecksumUpdatev+0xc>)
 23e8b4c:	6198      	str	r0, [r3, #24]
}
 23e8b4e:	bd08      	pop	{r3, pc}
 23e8b50:	1006ae5c 	.word	0x1006ae5c

023e8b54 <_Z12EEPROM_Resetl.part.0>:
 *                  Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Reset(time32_t current_time) {
  if (Time.isValid()) {
    eeprom.rgt1 = 0.0;
 23e8b54:	2300      	movs	r3, #0
void EEPROM_Reset(time32_t current_time) {
 23e8b56:	b510      	push	{r4, lr}
    eeprom.rgt1 = 0.0;
 23e8b58:	4c09      	ldr	r4, [pc, #36]	; (23e8b80 <_Z12EEPROM_Resetl.part.0+0x2c>)
 23e8b5a:	6023      	str	r3, [r4, #0]
    eeprom.rgp1 = 0.0;
 23e8b5c:	6063      	str	r3, [r4, #4]
    eeprom.rgt2 = 0.0;
 23e8b5e:	60a3      	str	r3, [r4, #8]
    eeprom.rgp2 = 0.0;
 23e8b60:	60e3      	str	r3, [r4, #12]
    eeprom.rgts = current_time;
    eeprom.n2sfp = 0;
 23e8b62:	2300      	movs	r3, #0
    eeprom.rgts = current_time;
 23e8b64:	6120      	str	r0, [r4, #16]
    eeprom.n2sfp = 0;
 23e8b66:	6163      	str	r3, [r4, #20]
    EEPROM_ChecksumUpdate();
 23e8b68:	f7ff ffec 	bl	23e8b44 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e8b6c:	f011 f98a 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        static_assert(!std::is_base_of_v<String, T>, "String class cannot be used with EEPROM, use char[] array");
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e8b70:	4b04      	ldr	r3, [pc, #16]	; (23e8b84 <_Z12EEPROM_Resetl.part.0+0x30>)
 23e8b72:	4621      	mov	r1, r4
  }
  else {
    Output("EEPROM RESET ERROR");
  }
}
 23e8b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e8b78:	221c      	movs	r2, #28
 23e8b7a:	6818      	ldr	r0, [r3, #0]
 23e8b7c:	f00e b9ac 	b.w	23f6ed8 <HAL_EEPROM_Put>
 23e8b80:	1006ae5c 	.word	0x1006ae5c
 23e8b84:	1006ae78 	.word	0x1006ae78

023e8b88 <_Z20EEPROM_ChecksumValidv>:
bool EEPROM_ChecksumValid() {
 23e8b88:	b508      	push	{r3, lr}
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e8b8a:	f7ff ffb7 	bl	23e8afc <_Z22EEPROM_ChecksumComputev>
  if (checksum == eeprom.checksum) {
 23e8b8e:	4b03      	ldr	r3, [pc, #12]	; (23e8b9c <_Z20EEPROM_ChecksumValidv+0x14>)
 23e8b90:	699b      	ldr	r3, [r3, #24]
}
 23e8b92:	1a1b      	subs	r3, r3, r0
 23e8b94:	4258      	negs	r0, r3
 23e8b96:	4158      	adcs	r0, r3
 23e8b98:	bd08      	pop	{r3, pc}
 23e8b9a:	bf00      	nop
 23e8b9c:	1006ae5c 	.word	0x1006ae5c

023e8ba0 <_Z22EEPROM_ClearRainTotalsl>:
 *=======================================================================================================================
 * EEPROM_ClearRainTotals() - Reset to default values
 *                           Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRainTotals(time32_t current_time) {
 23e8ba0:	b510      	push	{r4, lr}
 23e8ba2:	4604      	mov	r4, r0
  if (Time.isValid()) {
 23e8ba4:	f010 fe70 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23e8ba8:	b120      	cbz	r0, 23e8bb4 <_Z22EEPROM_ClearRainTotalsl+0x14>
 23e8baa:	4620      	mov	r0, r4
    EEPROM.put(eeprom_address, eeprom);
  }
  else {
    Output("EEPROM CLEAR ERROR");
  }
}
 23e8bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e8bb0:	f7ff bfd0 	b.w	23e8b54 <_Z12EEPROM_Resetl.part.0>
    Output("EEPROM CLEAR ERROR");
 23e8bb4:	4802      	ldr	r0, [pc, #8]	; (23e8bc0 <_Z22EEPROM_ClearRainTotalsl+0x20>)
}
 23e8bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM CLEAR ERROR");
 23e8bba:	f7fd bc57 	b.w	23e646c <_Z6OutputPKc>
 23e8bbe:	bf00      	nop
 23e8bc0:	023fd827 	.word	0x023fd827

023e8bc4 <_Z23EEPROM_ClearRain2Totalsv>:
 * EEPROM_ClearRain2Totals() - Reset Rain 2 Totals
 *                             Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRain2Totals() {
  eeprom.rgt2 = 0.0;
 23e8bc4:	2300      	movs	r3, #0
void EEPROM_ClearRain2Totals() {
 23e8bc6:	b510      	push	{r4, lr}
  eeprom.rgt2 = 0.0;
 23e8bc8:	4c07      	ldr	r4, [pc, #28]	; (23e8be8 <_Z23EEPROM_ClearRain2Totalsv+0x24>)
 23e8bca:	60a3      	str	r3, [r4, #8]
  eeprom.rgp2 = 0.0;
 23e8bcc:	60e3      	str	r3, [r4, #12]
  EEPROM_ChecksumUpdate();
 23e8bce:	f7ff ffb9 	bl	23e8b44 <_Z21EEPROM_ChecksumUpdatev>
  EEPROM.put(eeprom_address, eeprom);
 23e8bd2:	f011 f957 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
 23e8bd6:	4b05      	ldr	r3, [pc, #20]	; (23e8bec <_Z23EEPROM_ClearRain2Totalsv+0x28>)
 23e8bd8:	4621      	mov	r1, r4
}
 23e8bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e8bde:	221c      	movs	r2, #28
 23e8be0:	6818      	ldr	r0, [r3, #0]
 23e8be2:	f00e b979 	b.w	23f6ed8 <HAL_EEPROM_Put>
 23e8be6:	bf00      	nop
 23e8be8:	1006ae5c 	.word	0x1006ae5c
 23e8bec:	1006ae78 	.word	0x1006ae78

023e8bf0 <_Z17EEPROM_Initializev>:
 *=======================================================================================================================
 * EEPROM_Initialize() - Check status of EEPROM information and determine status
 *                       Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Initialize() {
 23e8bf0:	b570      	push	{r4, r5, r6, lr}
  if (Time.isValid()) {
 23e8bf2:	f010 fe49 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23e8bf6:	2800      	cmp	r0, #0
 23e8bf8:	d062      	beq.n	23e8cc0 <_Z17EEPROM_Initializev+0xd0>
    time32_t current_time = Time.now();
 23e8bfa:	f010 fe62 	bl	23f98c2 <_ZN9TimeClass3nowEv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e8bfe:	4c33      	ldr	r4, [pc, #204]	; (23e8ccc <_Z17EEPROM_Initializev+0xdc>)

    EEPROM.get(eeprom_address, eeprom);
 23e8c00:	4e33      	ldr	r6, [pc, #204]	; (23e8cd0 <_Z17EEPROM_Initializev+0xe0>)
    time32_t current_time = Time.now();
 23e8c02:	4605      	mov	r5, r0
    EEPROM.get(eeprom_address, eeprom);
 23e8c04:	f011 f93e 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
 23e8c08:	221c      	movs	r2, #28
 23e8c0a:	4621      	mov	r1, r4
 23e8c0c:	6830      	ldr	r0, [r6, #0]
 23e8c0e:	f00e f955 	bl	23f6ebc <HAL_EEPROM_Get>

    if (!EEPROM_ChecksumValid()) {
 23e8c12:	f7ff ffb9 	bl	23e8b88 <_Z20EEPROM_ChecksumValidv>
 23e8c16:	b918      	cbnz	r0, 23e8c20 <_Z17EEPROM_Initializev+0x30>
          EEPROM.put(eeprom_address, eeprom);
        }
        else {
          // if current time is before 6am and RT time before 6am 2 days ago - EEPROM has no valid data - clear EEPROM
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
          EEPROM_ClearRainTotals(current_time);
 23e8c18:	4628      	mov	r0, r5
 23e8c1a:	f7ff ffc1 	bl	23e8ba0 <_Z22EEPROM_ClearRainTotalsl>
 23e8c1e:	e02b      	b.n	23e8c78 <_Z17EEPROM_Initializev+0x88>
      time32_t seconds_today        = current_time % 86400;
 23e8c20:	4a2c      	ldr	r2, [pc, #176]	; (23e8cd4 <_Z17EEPROM_Initializev+0xe4>)
 23e8c22:	fb95 f3f2 	sdiv	r3, r5, r2
 23e8c26:	fb02 5313 	mls	r3, r2, r3, r5
      time32_t seconds_at_0000      = current_time - seconds_today;
 23e8c2a:	1aeb      	subs	r3, r5, r3
      time32_t seconds_at_0600      = seconds_at_0000 + 21600;
 23e8c2c:	f503 40a8 	add.w	r0, r3, #21504	; 0x5400
 23e8c30:	3060      	adds	r0, #96	; 0x60
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e8c32:	f5a3 417d 	sub.w	r1, r3, #64768	; 0xfd00
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e8c36:	4285      	cmp	r5, r0
 23e8c38:	6922      	ldr	r2, [r4, #16]
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e8c3a:	f1a1 0120 	sub.w	r1, r1, #32
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e8c3e:	dd1f      	ble.n	23e8c80 <_Z17EEPROM_Initializev+0x90>
 23e8c40:	4290      	cmp	r0, r2
 23e8c42:	da03      	bge.n	23e8c4c <_Z17EEPROM_Initializev+0x5c>
        Output("T>6, RT>6 - OK");
 23e8c44:	4824      	ldr	r0, [pc, #144]	; (23e8cd8 <_Z17EEPROM_Initializev+0xe8>)
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e8c46:	f7fd fc11 	bl	23e646c <_Z6OutputPKc>
 23e8c4a:	e00b      	b.n	23e8c64 <_Z17EEPROM_Initializev+0x74>
      else if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600) && (eeprom.rgts > seconds_yesterday_at_0600)){
 23e8c4c:	4291      	cmp	r1, r2
 23e8c4e:	da1b      	bge.n	23e8c88 <_Z17EEPROM_Initializev+0x98>
          Output("T>6, RT<=6 &&  RT>6Y- Move");  
 23e8c50:	4822      	ldr	r0, [pc, #136]	; (23e8cdc <_Z17EEPROM_Initializev+0xec>)
 23e8c52:	f7fd fc0b 	bl	23e646c <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e8c56:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e8c58:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e8c5a:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e8c5c:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e8c5e:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e8c60:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e8c62:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e8c64:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e8c66:	f7ff ff6d 	bl	23e8b44 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);          
 23e8c6a:	f011 f90b 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e8c6e:	221c      	movs	r2, #28
 23e8c70:	4621      	mov	r1, r4
 23e8c72:	6830      	ldr	r0, [r6, #0]
 23e8c74:	f00e f930 	bl	23f6ed8 <HAL_EEPROM_Put>
        }
      }
    }
    eeprom_valid = true;
 23e8c78:	2201      	movs	r2, #1
 23e8c7a:	4b19      	ldr	r3, [pc, #100]	; (23e8ce0 <_Z17EEPROM_Initializev+0xf0>)
 23e8c7c:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output("EEPROM INIT ERROR");
  }
}
 23e8c7e:	bd70      	pop	{r4, r5, r6, pc}
        if (eeprom.rgts > seconds_yesterday_at_0600) {
 23e8c80:	4291      	cmp	r1, r2
 23e8c82:	da01      	bge.n	23e8c88 <_Z17EEPROM_Initializev+0x98>
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e8c84:	4817      	ldr	r0, [pc, #92]	; (23e8ce4 <_Z17EEPROM_Initializev+0xf4>)
 23e8c86:	e7de      	b.n	23e8c46 <_Z17EEPROM_Initializev+0x56>
        else if (eeprom.rgts > (seconds_yesterday_at_0600 - 84600)) { 
 23e8c88:	f5a3 3311 	sub.w	r3, r3, #148480	; 0x24400
 23e8c8c:	f2a3 3397 	subw	r3, r3, #919	; 0x397
 23e8c90:	429a      	cmp	r2, r3
 23e8c92:	db11      	blt.n	23e8cb8 <_Z17EEPROM_Initializev+0xc8>
          Output("T<6, RT<6 && RT>6-2d - Move");  
 23e8c94:	4814      	ldr	r0, [pc, #80]	; (23e8ce8 <_Z17EEPROM_Initializev+0xf8>)
 23e8c96:	f7fd fbe9 	bl	23e646c <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e8c9a:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e8c9c:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e8c9e:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e8ca0:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e8ca2:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e8ca4:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e8ca6:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e8ca8:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e8caa:	f7ff ff4b 	bl	23e8b44 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);
 23e8cae:	f011 f8e9 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
 23e8cb2:	221c      	movs	r2, #28
 23e8cb4:	4905      	ldr	r1, [pc, #20]	; (23e8ccc <_Z17EEPROM_Initializev+0xdc>)
 23e8cb6:	e7dc      	b.n	23e8c72 <_Z17EEPROM_Initializev+0x82>
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
 23e8cb8:	480c      	ldr	r0, [pc, #48]	; (23e8cec <_Z17EEPROM_Initializev+0xfc>)
 23e8cba:	f7fd fbd7 	bl	23e646c <_Z6OutputPKc>
 23e8cbe:	e7ab      	b.n	23e8c18 <_Z17EEPROM_Initializev+0x28>
    Output("EEPROM INIT ERROR");
 23e8cc0:	480b      	ldr	r0, [pc, #44]	; (23e8cf0 <_Z17EEPROM_Initializev+0x100>)
}
 23e8cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output("EEPROM INIT ERROR");
 23e8cc6:	f7fd bbd1 	b.w	23e646c <_Z6OutputPKc>
 23e8cca:	bf00      	nop
 23e8ccc:	1006ae5c 	.word	0x1006ae5c
 23e8cd0:	1006ae78 	.word	0x1006ae78
 23e8cd4:	00015180 	.word	0x00015180
 23e8cd8:	023fd83a 	.word	0x023fd83a
 23e8cdc:	023fd849 	.word	0x023fd849
 23e8ce0:	1006ae7c 	.word	0x1006ae7c
 23e8ce4:	023fd864 	.word	0x023fd864
 23e8ce8:	023fd884 	.word	0x023fd884
 23e8cec:	023fd8a0 	.word	0x023fd8a0
 23e8cf0:	023fd8be 	.word	0x023fd8be

023e8cf4 <_Z23EEPROM_UpdateRainTotalsff>:
/* 
 *=======================================================================================================================
 * EEPROM_UpdateRainTotals() - 
 *=======================================================================================================================
 */
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e8cf4:	b510      	push	{r4, lr}
 23e8cf6:	ed2d 8b02 	vpush	{d8}
  if (eeprom_valid) {
 23e8cfa:	4b2f      	ldr	r3, [pc, #188]	; (23e8db8 <_Z23EEPROM_UpdateRainTotalsff+0xc4>)
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e8cfc:	eeb0 8a40 	vmov.f32	s16, s0
  if (eeprom_valid) {
 23e8d00:	781b      	ldrb	r3, [r3, #0]
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e8d02:	eef0 8a60 	vmov.f32	s17, s1
  if (eeprom_valid) {
 23e8d06:	2b00      	cmp	r3, #0
 23e8d08:	d053      	beq.n	23e8db2 <_Z23EEPROM_UpdateRainTotalsff+0xbe>
    time32_t current_time     = Time.now();
 23e8d0a:	f010 fdda 	bl	23f98c2 <_ZN9TimeClass3nowEv>
    time32_t seconds_at_0600  = current_time - (current_time % 86400) + 21600; // time - seconds so far today + seconds to 0600
 23e8d0e:	4b2b      	ldr	r3, [pc, #172]	; (23e8dbc <_Z23EEPROM_UpdateRainTotalsff+0xc8>)
 23e8d10:	492b      	ldr	r1, [pc, #172]	; (23e8dc0 <_Z23EEPROM_UpdateRainTotalsff+0xcc>)
 23e8d12:	fb90 f2f3 	sdiv	r2, r0, r3
 23e8d16:	fb03 0212 	mls	r2, r3, r2, r0
 23e8d1a:	1a82      	subs	r2, r0, r2
 23e8d1c:	f502 42a8 	add.w	r2, r2, #21504	; 0x5400
 23e8d20:	3260      	adds	r2, #96	; 0x60

    if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600)) {
 23e8d22:	4290      	cmp	r0, r2
 23e8d24:	4b27      	ldr	r3, [pc, #156]	; (23e8dc4 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e8d26:	dd28      	ble.n	23e8d7a <_Z23EEPROM_UpdateRainTotalsff+0x86>
 23e8d28:	691c      	ldr	r4, [r3, #16]
 23e8d2a:	42a2      	cmp	r2, r4
 23e8d2c:	db25      	blt.n	23e8d7a <_Z23EEPROM_UpdateRainTotalsff+0x86>
      // if rgts is before 0600 then we need to move today's totals to prior day
      eeprom.rgp1 = eeprom.rgt1;
 23e8d2e:	681a      	ldr	r2, [r3, #0]
      eeprom.rgt1 = 0;

      if (A4_State == A4_STATE_RAIN) {
 23e8d30:	680c      	ldr	r4, [r1, #0]
      eeprom.rgp1 = eeprom.rgt1;
 23e8d32:	605a      	str	r2, [r3, #4]
      eeprom.rgt1 = 0;
 23e8d34:	2200      	movs	r2, #0
      if (A4_State == A4_STATE_RAIN) {
 23e8d36:	2c02      	cmp	r4, #2
      eeprom.rgt1 = 0;
 23e8d38:	601a      	str	r2, [r3, #0]
      if (A4_State == A4_STATE_RAIN) {
 23e8d3a:	d134      	bne.n	23e8da6 <_Z23EEPROM_UpdateRainTotalsff+0xb2>
        eeprom.rgt2 = 0;
      }
    }

    // Only add valid rain to the total
    if (rgt1>0) {
 23e8d3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e8d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        eeprom.rgp2 = eeprom.rgt2;
 23e8d44:	689c      	ldr	r4, [r3, #8]
        eeprom.rgt2 = 0;
 23e8d46:	609a      	str	r2, [r3, #8]
        eeprom.rgp2 = eeprom.rgt2;
 23e8d48:	60dc      	str	r4, [r3, #12]
    if (rgt1>0) {
 23e8d4a:	dc1b      	bgt.n	23e8d84 <_Z23EEPROM_UpdateRainTotalsff+0x90>
      eeprom.rgt1 += rgt1;
    }
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e8d4c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e8d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8d54:	dc20      	bgt.n	23e8d98 <_Z23EEPROM_UpdateRainTotalsff+0xa4>
      eeprom.rgt2 += rgt2;
    }

    eeprom.rgts = current_time;
 23e8d56:	6118      	str	r0, [r3, #16]
    EEPROM_ChecksumUpdate();
 23e8d58:	f7ff fef4 	bl	23e8b44 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e8d5c:	f011 f892 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
 23e8d60:	4b19      	ldr	r3, [pc, #100]	; (23e8dc8 <_Z23EEPROM_UpdateRainTotalsff+0xd4>)
 23e8d62:	221c      	movs	r2, #28
 23e8d64:	6818      	ldr	r0, [r3, #0]
 23e8d66:	4917      	ldr	r1, [pc, #92]	; (23e8dc4 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e8d68:	f00e f8b6 	bl	23f6ed8 <HAL_EEPROM_Put>
    Output("EEPROM RT UPDATED");
  }
}
 23e8d6c:	ecbd 8b02 	vpop	{d8}
 23e8d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM RT UPDATED");
 23e8d74:	4815      	ldr	r0, [pc, #84]	; (23e8dcc <_Z23EEPROM_UpdateRainTotalsff+0xd8>)
 23e8d76:	f7fd bb79 	b.w	23e646c <_Z6OutputPKc>
    if (rgt1>0) {
 23e8d7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e8d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8d82:	dd05      	ble.n	23e8d90 <_Z23EEPROM_UpdateRainTotalsff+0x9c>
      eeprom.rgt1 += rgt1;
 23e8d84:	ed93 0a00 	vldr	s0, [r3]
 23e8d88:	ee30 8a08 	vadd.f32	s16, s0, s16
 23e8d8c:	ed83 8a00 	vstr	s16, [r3]
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e8d90:	680a      	ldr	r2, [r1, #0]
 23e8d92:	2a02      	cmp	r2, #2
 23e8d94:	d1df      	bne.n	23e8d56 <_Z23EEPROM_UpdateRainTotalsff+0x62>
 23e8d96:	e7d9      	b.n	23e8d4c <_Z23EEPROM_UpdateRainTotalsff+0x58>
      eeprom.rgt2 += rgt2;
 23e8d98:	edd3 0a02 	vldr	s1, [r3, #8]
 23e8d9c:	ee70 8aa8 	vadd.f32	s17, s1, s17
 23e8da0:	edc3 8a02 	vstr	s17, [r3, #8]
 23e8da4:	e7d7      	b.n	23e8d56 <_Z23EEPROM_UpdateRainTotalsff+0x62>
    if (rgt1>0) {
 23e8da6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e8daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8dae:	dce9      	bgt.n	23e8d84 <_Z23EEPROM_UpdateRainTotalsff+0x90>
 23e8db0:	e7d1      	b.n	23e8d56 <_Z23EEPROM_UpdateRainTotalsff+0x62>
}
 23e8db2:	ecbd 8b02 	vpop	{d8}
 23e8db6:	bd10      	pop	{r4, pc}
 23e8db8:	1006ae7c 	.word	0x1006ae7c
 23e8dbc:	00015180 	.word	0x00015180
 23e8dc0:	1006a25c 	.word	0x1006a25c
 23e8dc4:	1006ae5c 	.word	0x1006ae5c
 23e8dc8:	1006ae78 	.word	0x1006ae78
 23e8dcc:	023fd8d0 	.word	0x023fd8d0

023e8dd0 <_Z25EEPROM_SaveUnreportedRainv>:
/* 
 *=======================================================================================================================
 * EEPROM_SaveUnreportedRain() - 
 *=======================================================================================================================
 */
void EEPROM_SaveUnreportedRain() {
 23e8dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e8dd2:	ed2d 8b02 	vpush	{d8}
  if (raingauge1_interrupt_count || ((A4_State == A4_STATE_RAIN) && raingauge2_interrupt_count)) {
 23e8dd6:	4b4e      	ldr	r3, [pc, #312]	; (23e8f10 <_Z25EEPROM_SaveUnreportedRainv+0x140>)
 23e8dd8:	4f4e      	ldr	r7, [pc, #312]	; (23e8f14 <_Z25EEPROM_SaveUnreportedRainv+0x144>)
 23e8dda:	681a      	ldr	r2, [r3, #0]
 23e8ddc:	b942      	cbnz	r2, 23e8df0 <_Z25EEPROM_SaveUnreportedRainv+0x20>
 23e8dde:	683a      	ldr	r2, [r7, #0]
 23e8de0:	2a02      	cmp	r2, #2
 23e8de2:	f040 808e 	bne.w	23e8f02 <_Z25EEPROM_SaveUnreportedRainv+0x132>
 23e8de6:	4a4c      	ldr	r2, [pc, #304]	; (23e8f18 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e8de8:	6812      	ldr	r2, [r2, #0]
 23e8dea:	2a00      	cmp	r2, #0
 23e8dec:	f000 8089 	beq.w	23e8f02 <_Z25EEPROM_SaveUnreportedRainv+0x132>
    unsigned long rgds;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    unsigned long rg2ds = 0;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    float rain2 = 0.0;

    float rain = raingauge1_interrupt_count * 0.2;
 23e8df0:	6818      	ldr	r0, [r3, #0]
 23e8df2:	f7fb fb2b 	bl	23e444c <__aeabi_ui2d>
 23e8df6:	a344      	add	r3, pc, #272	; (adr r3, 23e8f08 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e8df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8dfc:	f7fb fba0 	bl	23e4540 <__aeabi_dmul>
 23e8e00:	f7fb fe96 	bl	23e4b30 <__aeabi_d2f>
 23e8e04:	ee08 0a90 	vmov	s17, r0
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e8e08:	f7fc ffec 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23e8e0c:	4a43      	ldr	r2, [pc, #268]	; (23e8f1c <_Z25EEPROM_SaveUnreportedRainv+0x14c>)
 23e8e0e:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e8e12:	1ac0      	subs	r0, r0, r3
 23e8e14:	eb61 0104 	sbc.w	r1, r1, r4
 23e8e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e8e1c:	2300      	movs	r3, #0
 23e8e1e:	f7fc f835 	bl	23e4e8c <__aeabi_uldivmod>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e8e22:	eef4 8a68 	vcmp.f32	s17, s17
 23e8e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e8e2a:	4606      	mov	r6, r0
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e8e2c:	d660      	bvs.n	23e8ef0 <_Z25EEPROM_SaveUnreportedRainv+0x120>
 23e8e2e:	ee18 0a90 	vmov	r0, s17
 23e8e32:	f7fb fb2d 	bl	23e4490 <__aeabi_f2d>
 23e8e36:	4604      	mov	r4, r0
 23e8e38:	203c      	movs	r0, #60	; 0x3c
 23e8e3a:	fbb6 f0f0 	udiv	r0, r6, r0
 23e8e3e:	460d      	mov	r5, r1
 23e8e40:	f7fb fb04 	bl	23e444c <__aeabi_ui2d>
 23e8e44:	2200      	movs	r2, #0
 23e8e46:	4b36      	ldr	r3, [pc, #216]	; (23e8f20 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e8e48:	f7fb fb7a 	bl	23e4540 <__aeabi_dmul>
 23e8e4c:	4602      	mov	r2, r0
 23e8e4e:	460b      	mov	r3, r1
 23e8e50:	4620      	mov	r0, r4
 23e8e52:	4629      	mov	r1, r5
 23e8e54:	f7fb fe04 	bl	23e4a60 <__aeabi_dcmpgt>
 23e8e58:	eddf 7a32 	vldr	s15, [pc, #200]	; 23e8f24 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e8e5c:	2800      	cmp	r0, #0
 23e8e5e:	fe48 8aa7 	vseleq.f32	s17, s17, s15
    
    if (A4_State == A4_STATE_RAIN) {
 23e8e62:	683b      	ldr	r3, [r7, #0]
 23e8e64:	2b02      	cmp	r3, #2
 23e8e66:	d146      	bne.n	23e8ef6 <_Z25EEPROM_SaveUnreportedRainv+0x126>
      rain2 = raingauge2_interrupt_count * 0.2;
 23e8e68:	4b2b      	ldr	r3, [pc, #172]	; (23e8f18 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e8e6a:	6818      	ldr	r0, [r3, #0]
 23e8e6c:	f7fb faee 	bl	23e444c <__aeabi_ui2d>
 23e8e70:	a325      	add	r3, pc, #148	; (adr r3, 23e8f08 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e8e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8e76:	f7fb fb63 	bl	23e4540 <__aeabi_dmul>
 23e8e7a:	f7fb fe59 	bl	23e4b30 <__aeabi_d2f>
 23e8e7e:	ee08 0a10 	vmov	s16, r0
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e8e82:	f7fc ffaf 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23e8e86:	4a28      	ldr	r2, [pc, #160]	; (23e8f28 <_Z25EEPROM_SaveUnreportedRainv+0x158>)
 23e8e88:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e8e8c:	1ac0      	subs	r0, r0, r3
 23e8e8e:	eb61 0104 	sbc.w	r1, r1, r4
 23e8e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e8e96:	2300      	movs	r3, #0
 23e8e98:	f7fb fff8 	bl	23e4e8c <__aeabi_uldivmod>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e8e9c:	eeb4 8a48 	vcmp.f32	s16, s16
 23e8ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e8ea4:	4606      	mov	r6, r0
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e8ea6:	d629      	bvs.n	23e8efc <_Z25EEPROM_SaveUnreportedRainv+0x12c>
 23e8ea8:	ee18 0a10 	vmov	r0, s16
 23e8eac:	f7fb faf0 	bl	23e4490 <__aeabi_f2d>
 23e8eb0:	4604      	mov	r4, r0
 23e8eb2:	203c      	movs	r0, #60	; 0x3c
 23e8eb4:	fbb6 f0f0 	udiv	r0, r6, r0
 23e8eb8:	460d      	mov	r5, r1
 23e8eba:	f7fb fac7 	bl	23e444c <__aeabi_ui2d>
 23e8ebe:	2200      	movs	r2, #0
 23e8ec0:	4b17      	ldr	r3, [pc, #92]	; (23e8f20 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e8ec2:	f7fb fb3d 	bl	23e4540 <__aeabi_dmul>
 23e8ec6:	4602      	mov	r2, r0
 23e8ec8:	460b      	mov	r3, r1
 23e8eca:	4620      	mov	r0, r4
 23e8ecc:	4629      	mov	r1, r5
 23e8ece:	f7fb fdc7 	bl	23e4a60 <__aeabi_dcmpgt>
 23e8ed2:	eddf 7a14 	vldr	s15, [pc, #80]	; 23e8f24 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e8ed6:	2800      	cmp	r0, #0
 23e8ed8:	fe08 8a27 	vseleq.f32	s16, s16, s15
    }

    EEPROM_UpdateRainTotals(rain, rain2);
 23e8edc:	eef0 0a48 	vmov.f32	s1, s16
 23e8ee0:	eeb0 0a68 	vmov.f32	s0, s17
  }
}
 23e8ee4:	ecbd 8b02 	vpop	{d8}
 23e8ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    EEPROM_UpdateRainTotals(rain, rain2);
 23e8eec:	f7ff bf02 	b.w	23e8cf4 <_Z23EEPROM_UpdateRainTotalsff>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e8ef0:	eddf 8a0c 	vldr	s17, [pc, #48]	; 23e8f24 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e8ef4:	e7b5      	b.n	23e8e62 <_Z25EEPROM_SaveUnreportedRainv+0x92>
    float rain2 = 0.0;
 23e8ef6:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 23e8f2c <_Z25EEPROM_SaveUnreportedRainv+0x15c>
 23e8efa:	e7ef      	b.n	23e8edc <_Z25EEPROM_SaveUnreportedRainv+0x10c>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e8efc:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e8f24 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e8f00:	e7ec      	b.n	23e8edc <_Z25EEPROM_SaveUnreportedRainv+0x10c>
}
 23e8f02:	ecbd 8b02 	vpop	{d8}
 23e8f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e8f08:	9999999a 	.word	0x9999999a
 23e8f0c:	3fc99999 	.word	0x3fc99999
 23e8f10:	1007aa5c 	.word	0x1007aa5c
 23e8f14:	1006a25c 	.word	0x1006a25c
 23e8f18:	1007aa70 	.word	0x1007aa70
 23e8f1c:	1007aa68 	.word	0x1007aa68
 23e8f20:	403e0000 	.word	0x403e0000
 23e8f24:	c479f99a 	.word	0xc479f99a
 23e8f28:	1007aa80 	.word	0x1007aa80
 23e8f2c:	00000000 	.word	0x00000000

023e8f30 <_Z13EEPROM_Updatev>:
/* 
 *=======================================================================================================================
 * EEPROM_Update() - Check status of EEPROM information and determine status
 *=======================================================================================================================
 */
void EEPROM_Update() {
 23e8f30:	b510      	push	{r4, lr}
  if (eeprom_valid && Time.isValid()) {
 23e8f32:	4b0d      	ldr	r3, [pc, #52]	; (23e8f68 <_Z13EEPROM_Updatev+0x38>)
 23e8f34:	781b      	ldrb	r3, [r3, #0]
 23e8f36:	b1ab      	cbz	r3, 23e8f64 <_Z13EEPROM_Updatev+0x34>
 23e8f38:	f010 fca6 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23e8f3c:	b190      	cbz	r0, 23e8f64 <_Z13EEPROM_Updatev+0x34>
    eeprom.rgts = Time.now();
 23e8f3e:	f010 fcc0 	bl	23f98c2 <_ZN9TimeClass3nowEv>
 23e8f42:	4c0a      	ldr	r4, [pc, #40]	; (23e8f6c <_Z13EEPROM_Updatev+0x3c>)
 23e8f44:	6120      	str	r0, [r4, #16]
    EEPROM_ChecksumUpdate();
 23e8f46:	f7ff fdfd 	bl	23e8b44 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e8f4a:	f010 ff9b 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
 23e8f4e:	4b08      	ldr	r3, [pc, #32]	; (23e8f70 <_Z13EEPROM_Updatev+0x40>)
 23e8f50:	4621      	mov	r1, r4
 23e8f52:	6818      	ldr	r0, [r3, #0]
 23e8f54:	221c      	movs	r2, #28
 23e8f56:	f00d ffbf 	bl	23f6ed8 <HAL_EEPROM_Put>
    Output("EEPROM UPDATED");
  }
}
 23e8f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM UPDATED");
 23e8f5e:	4805      	ldr	r0, [pc, #20]	; (23e8f74 <_Z13EEPROM_Updatev+0x44>)
 23e8f60:	f7fd ba84 	b.w	23e646c <_Z6OutputPKc>
}
 23e8f64:	bd10      	pop	{r4, pc}
 23e8f66:	bf00      	nop
 23e8f68:	1006ae7c 	.word	0x1006ae7c
 23e8f6c:	1006ae5c 	.word	0x1006ae5c
 23e8f70:	1006ae78 	.word	0x1006ae78
 23e8f74:	023fd8e2 	.word	0x023fd8e2

023e8f78 <_Z11EEPROM_Dumpv>:
/* 
 *=======================================================================================================================
 * EEPROM_Dump() - 
 *=======================================================================================================================
 */
void EEPROM_Dump() {
 23e8f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e8f7a:	ed2d 8b02 	vpush	{d8}
  size_t EEPROM_length = EEPROM.length();
 23e8f7e:	f010 ff81 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e8f82:	f00d ff8d 	bl	23f6ea0 <HAL_EEPROM_Length>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e8f86:	4d4e      	ldr	r5, [pc, #312]	; (23e90c0 <_Z11EEPROM_Dumpv+0x148>)
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e8f88:	4604      	mov	r4, r0

  EEPROM.get(eeprom_address, eeprom);
 23e8f8a:	f010 ff7b 	bl	23f9e84 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e8f8e:	4b4d      	ldr	r3, [pc, #308]	; (23e90c4 <_Z11EEPROM_Dumpv+0x14c>)
 23e8f90:	4629      	mov	r1, r5
 23e8f92:	6818      	ldr	r0, [r3, #0]
 23e8f94:	221c      	movs	r2, #28
 23e8f96:	f00d ff91 	bl	23f6ebc <HAL_EEPROM_Get>

  unsigned long checksum = EEPROM_ChecksumCompute();
 23e8f9a:	f7ff fdaf 	bl	23e8afc <_Z22EEPROM_ChecksumComputev>

  Output("EEPROM DUMP");

  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e8f9e:	4e4a      	ldr	r6, [pc, #296]	; (23e90c8 <_Z11EEPROM_Dumpv+0x150>)
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e8fa0:	4607      	mov	r7, r0
  Output("EEPROM DUMP");
 23e8fa2:	484a      	ldr	r0, [pc, #296]	; (23e90cc <_Z11EEPROM_Dumpv+0x154>)
 23e8fa4:	f7fd fa62 	bl	23e646c <_Z6OutputPKc>
  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e8fa8:	b2a2      	uxth	r2, r4
 23e8faa:	4949      	ldr	r1, [pc, #292]	; (23e90d0 <_Z11EEPROM_Dumpv+0x158>)
 23e8fac:	4630      	mov	r0, r6
 23e8fae:	f00e fd89 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23e8fb2:	4630      	mov	r0, r6
 23e8fb4:	f7fd fa5a 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e8fb8:	ed9f 8a46 	vldr	s16, [pc, #280]	; 23e90d4 <_Z11EEPROM_Dumpv+0x15c>
 23e8fbc:	ed95 7a00 	vldr	s14, [r5]
 23e8fc0:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e8fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e8fc8:	2664      	movs	r6, #100	; 0x64
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e8fca:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e8fce:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e8fd2:	fb93 f2f6 	sdiv	r2, r3, r6
 23e8fd6:	4c40      	ldr	r4, [pc, #256]	; (23e90d8 <_Z11EEPROM_Dumpv+0x160>)
 23e8fd8:	fb06 3312 	mls	r3, r6, r2, r3
 23e8fdc:	493f      	ldr	r1, [pc, #252]	; (23e90dc <_Z11EEPROM_Dumpv+0x164>)
 23e8fde:	ee17 2a90 	vmov	r2, s15
 23e8fe2:	4620      	mov	r0, r4
 23e8fe4:	f00e fd6e 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e8fe8:	4620      	mov	r0, r4
 23e8fea:	f7fd fa3f 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
 23e8fee:	ed95 7a01 	vldr	s14, [r5, #4]
 23e8ff2:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e8ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e8ffa:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
 23e8ffe:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e9002:	fb93 f2f6 	sdiv	r2, r3, r6
 23e9006:	4936      	ldr	r1, [pc, #216]	; (23e90e0 <_Z11EEPROM_Dumpv+0x168>)
 23e9008:	fb06 3312 	mls	r3, r6, r2, r3
 23e900c:	4620      	mov	r0, r4
 23e900e:	ee17 2a90 	vmov	r2, s15
 23e9012:	f00e fd57 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e9016:	4620      	mov	r0, r4
 23e9018:	f7fd fa28 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
 23e901c:	ed95 7a02 	vldr	s14, [r5, #8]
 23e9020:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e9024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e9028:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
 23e902c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e9030:	fb93 f2f6 	sdiv	r2, r3, r6
 23e9034:	492b      	ldr	r1, [pc, #172]	; (23e90e4 <_Z11EEPROM_Dumpv+0x16c>)
 23e9036:	fb06 3312 	mls	r3, r6, r2, r3
 23e903a:	4620      	mov	r0, r4
 23e903c:	ee17 2a90 	vmov	r2, s15
 23e9040:	f00e fd40 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e9044:	4620      	mov	r0, r4
 23e9046:	f7fd fa11 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
 23e904a:	edd5 7a03 	vldr	s15, [r5, #12]
 23e904e:	ee27 8a88 	vmul.f32	s16, s15, s16
 23e9052:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 23e9056:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
 23e905a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e905e:	fb93 f2f6 	sdiv	r2, r3, r6
 23e9062:	4921      	ldr	r1, [pc, #132]	; (23e90e8 <_Z11EEPROM_Dumpv+0x170>)
 23e9064:	fb06 3312 	mls	r3, r6, r2, r3
 23e9068:	4620      	mov	r0, r4
 23e906a:	ee17 2a90 	vmov	r2, s15
 23e906e:	f00e fd29 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e9072:	4620      	mov	r0, r4
 23e9074:	f7fd f9fa 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RGTS:%lu", eeprom.rgts);
 23e9078:	692a      	ldr	r2, [r5, #16]
 23e907a:	491c      	ldr	r1, [pc, #112]	; (23e90ec <_Z11EEPROM_Dumpv+0x174>)
 23e907c:	4620      	mov	r0, r4
 23e907e:	f00e fd21 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e9082:	4620      	mov	r0, r4
 23e9084:	f7fd f9f2 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " N2SFP:%lu", eeprom.n2sfp);
 23e9088:	696a      	ldr	r2, [r5, #20]
 23e908a:	4919      	ldr	r1, [pc, #100]	; (23e90f0 <_Z11EEPROM_Dumpv+0x178>)
 23e908c:	4620      	mov	r0, r4
 23e908e:	f00e fd19 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e9092:	4620      	mov	r0, r4
 23e9094:	f7fd f9ea 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CS:%lu", eeprom.checksum);
 23e9098:	69aa      	ldr	r2, [r5, #24]
 23e909a:	4916      	ldr	r1, [pc, #88]	; (23e90f4 <_Z11EEPROM_Dumpv+0x17c>)
 23e909c:	4620      	mov	r0, r4
 23e909e:	f00e fd11 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e90a2:	4620      	mov	r0, r4
 23e90a4:	f7fd f9e2 	bl	23e646c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CSC:%lu", checksum);
 23e90a8:	463a      	mov	r2, r7
 23e90aa:	4620      	mov	r0, r4
 23e90ac:	4912      	ldr	r1, [pc, #72]	; (23e90f8 <_Z11EEPROM_Dumpv+0x180>)
 23e90ae:	f00e fd09 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
}
 23e90b2:	ecbd 8b02 	vpop	{d8}
  Output (Buffer32Bytes);
 23e90b6:	4620      	mov	r0, r4
}
 23e90b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Output (Buffer32Bytes);
 23e90bc:	f7fd b9d6 	b.w	23e646c <_Z6OutputPKc>
 23e90c0:	1006ae5c 	.word	0x1006ae5c
 23e90c4:	1006ae78 	.word	0x1006ae78
 23e90c8:	1006f128 	.word	0x1006f128
 23e90cc:	023fd8f1 	.word	0x023fd8f1
 23e90d0:	023fd8fd 	.word	0x023fd8fd
 23e90d4:	42c80000 	.word	0x42c80000
 23e90d8:	1006a287 	.word	0x1006a287
 23e90dc:	023fd905 	.word	0x023fd905
 23e90e0:	023fd912 	.word	0x023fd912
 23e90e4:	023fd91f 	.word	0x023fd91f
 23e90e8:	023fd92c 	.word	0x023fd92c
 23e90ec:	023fd939 	.word	0x023fd939
 23e90f0:	023fd943 	.word	0x023fd943
 23e90f4:	023fd94e 	.word	0x023fd94e
 23e90f8:	023fd956 	.word	0x023fd956

023e90fc <_Z13SD_initializev>:
/* 
 *=======================================================================================================================
 * SD_initialize()
 *=======================================================================================================================
 */
void SD_initialize() {
 23e90fc:	b570      	push	{r4, r5, r6, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23e90fe:	4c41      	ldr	r4, [pc, #260]	; (23e9204 <_Z13SD_initializev+0x108>)
 23e9100:	b092      	sub	sp, #72	; 0x48
 23e9102:	e8d4 1f8f 	ldab	r1, [r4]
 23e9106:	f011 0101 	ands.w	r1, r1, #1
 23e910a:	d10b      	bne.n	23e9124 <_Z13SD_initializev+0x28>
 23e910c:	4620      	mov	r0, r4
 23e910e:	9103      	str	r1, [sp, #12]
 23e9110:	f00e fd9c 	bl	23f7c4c <__cxa_guard_acquire>
 23e9114:	9903      	ldr	r1, [sp, #12]
 23e9116:	b128      	cbz	r0, 23e9124 <_Z13SD_initializev+0x28>
 23e9118:	483b      	ldr	r0, [pc, #236]	; (23e9208 <_Z13SD_initializev+0x10c>)
 23e911a:	f010 f843 	bl	23f91a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23e911e:	4620      	mov	r0, r4
 23e9120:	f00e fda2 	bl	23f7c68 <__cxa_guard_release>
  /** Initialize SD card in SPI mode.
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
 23e9124:	2305      	movs	r3, #5
 23e9126:	f8ad 3010 	strh.w	r3, [sp, #16]
 23e912a:	4b38      	ldr	r3, [pc, #224]	; (23e920c <_Z13SD_initializev+0x110>)
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer or nullptr if failure.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
 23e912c:	4c38      	ldr	r4, [pc, #224]	; (23e9210 <_Z13SD_initializev+0x114>)
 23e912e:	9305      	str	r3, [sp, #20]
 23e9130:	4b35      	ldr	r3, [pc, #212]	; (23e9208 <_Z13SD_initializev+0x10c>)
 23e9132:	f204 468c 	addw	r6, r4, #1164	; 0x48c
 23e9136:	9306      	str	r3, [sp, #24]
 23e9138:	ad04      	add	r5, sp, #16
 23e913a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 23e913e:	4630      	mov	r0, r6
 23e9140:	f00b f8aa 	bl	23f4298 <_ZN9SdSpiCard5beginE11SdSpiConfig>
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
 23e9144:	f894 34a7 	ldrb.w	r3, [r4, #1191]	; 0x4a7
    m_card = m_cardFactory.newCard(spiConfig);
 23e9148:	f8c4 6488 	str.w	r6, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
 23e914c:	bb63      	cbnz	r3, 23e91a8 <_Z13SD_initializev+0xac>
  /** Initialize file system after call to cardBegin.
   *
   * \return true for success or false for failure.
   */
  bool volumeBegin() {
    return Vol::begin(m_card) || Vol::begin(m_card, true, 0);
 23e914e:	9300      	str	r3, [sp, #0]
 23e9150:	2301      	movs	r3, #1
 23e9152:	4631      	mov	r1, r6
 23e9154:	461a      	mov	r2, r3
 23e9156:	4620      	mov	r0, r4
 23e9158:	f00c ffdc 	bl	23f6114 <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e915c:	4603      	mov	r3, r0
 23e915e:	b938      	cbnz	r0, 23e9170 <_Z13SD_initializev+0x74>
 23e9160:	9000      	str	r0, [sp, #0]
 23e9162:	2201      	movs	r2, #1
 23e9164:	4620      	mov	r0, r4
 23e9166:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 23e916a:	f00c ffd3 	bl	23f6114 <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e916e:	b1d8      	cbz	r0, 23e91a8 <_Z13SD_initializev+0xac>
    Output ("SD:NF");
    SystemStatusBits |= SSB_SD;
    delay (5000);
  }
  else {
    if (!SD.exists(SD_obsdir)) {
 23e9170:	4928      	ldr	r1, [pc, #160]	; (23e9214 <_Z13SD_initializev+0x118>)
 23e9172:	4827      	ldr	r0, [pc, #156]	; (23e9210 <_Z13SD_initializev+0x114>)
 23e9174:	f7fc feb4 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9178:	2800      	cmp	r0, #0
 23e917a:	d13d      	bne.n	23e91f8 <_Z13SD_initializev+0xfc>
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
 23e917c:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
 23e9180:	b309      	cbz	r1, 23e91c6 <_Z13SD_initializev+0xca>
  FatFile() {}
 23e9182:	9004      	str	r0, [sp, #16]
    return sub.mkdir(vwd(), path, pFlag);
 23e9184:	2301      	movs	r3, #1
 23e9186:	4628      	mov	r0, r5
 23e9188:	4a22      	ldr	r2, [pc, #136]	; (23e9214 <_Z13SD_initializev+0x118>)
 23e918a:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23e918e:	f00a fac5 	bl	23f371c <_ZN7FatFile5mkdirEPS_PKcb>
      if (SD.mkdir(SD_obsdir)) {
 23e9192:	b320      	cbz	r0, 23e91de <_Z13SD_initializev+0xe2>
        Output ("SD:MKDIR OBS OK");
 23e9194:	4820      	ldr	r0, [pc, #128]	; (23e9218 <_Z13SD_initializev+0x11c>)
 23e9196:	f7fd f969 	bl	23e646c <_Z6OutputPKc>
        Output ("SD:Online");
 23e919a:	4820      	ldr	r0, [pc, #128]	; (23e921c <_Z13SD_initializev+0x120>)
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
      } 
    }
    else {
      Output ("SD:Online");
      Output ("SD:OBS DIR Exists");
 23e919c:	f7fd f966 	bl	23e646c <_Z6OutputPKc>
      SD_exists = true;
 23e91a0:	2201      	movs	r2, #1
 23e91a2:	4b1f      	ldr	r3, [pc, #124]	; (23e9220 <_Z13SD_initializev+0x124>)
 23e91a4:	701a      	strb	r2, [r3, #0]
    }
  }
}
 23e91a6:	e025      	b.n	23e91f4 <_Z13SD_initializev+0xf8>
    Output ("SD:NF");
 23e91a8:	481e      	ldr	r0, [pc, #120]	; (23e9224 <_Z13SD_initializev+0x128>)
 23e91aa:	f7fd f95f 	bl	23e646c <_Z6OutputPKc>
    delay (5000);
 23e91ae:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_SD;
 23e91b2:	4a1d      	ldr	r2, [pc, #116]	; (23e9228 <_Z13SD_initializev+0x12c>)
 23e91b4:	6813      	ldr	r3, [r2, #0]
 23e91b6:	f043 0302 	orr.w	r3, r3, #2
 23e91ba:	6013      	str	r3, [r2, #0]
}
 23e91bc:	b012      	add	sp, #72	; 0x48
 23e91be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay (5000);
 23e91c2:	f00e bd5f 	b.w	23f7c84 <delay>
           : m_xVol ? m_xVol->mkdir(path, pFlag)
 23e91c6:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
 23e91ca:	b140      	cbz	r0, 23e91de <_Z13SD_initializev+0xe2>
  ExFatFile() {}
 23e91cc:	9110      	str	r1, [sp, #64]	; 0x40
    return sub.mkdir(vwd(), path, pFlag);
 23e91ce:	2301      	movs	r3, #1
 23e91d0:	f500 6189 	add.w	r1, r0, #1096	; 0x448
 23e91d4:	4a0f      	ldr	r2, [pc, #60]	; (23e9214 <_Z13SD_initializev+0x118>)
 23e91d6:	4628      	mov	r0, r5
 23e91d8:	f00c f9bd 	bl	23f5556 <_ZN9ExFatFile5mkdirEPS_PKcb>
 23e91dc:	e7d9      	b.n	23e9192 <_Z13SD_initializev+0x96>
        Output ("SD:MKDIR OBS ERR");
 23e91de:	4813      	ldr	r0, [pc, #76]	; (23e922c <_Z13SD_initializev+0x130>)
 23e91e0:	f7fd f944 	bl	23e646c <_Z6OutputPKc>
        Output ("SD:Offline");
 23e91e4:	4812      	ldr	r0, [pc, #72]	; (23e9230 <_Z13SD_initializev+0x134>)
 23e91e6:	f7fd f941 	bl	23e646c <_Z6OutputPKc>
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
 23e91ea:	4a0f      	ldr	r2, [pc, #60]	; (23e9228 <_Z13SD_initializev+0x12c>)
 23e91ec:	6813      	ldr	r3, [r2, #0]
 23e91ee:	f043 0302 	orr.w	r3, r3, #2
 23e91f2:	6013      	str	r3, [r2, #0]
}
 23e91f4:	b012      	add	sp, #72	; 0x48
 23e91f6:	bd70      	pop	{r4, r5, r6, pc}
      Output ("SD:Online");
 23e91f8:	4808      	ldr	r0, [pc, #32]	; (23e921c <_Z13SD_initializev+0x120>)
 23e91fa:	f7fd f937 	bl	23e646c <_Z6OutputPKc>
      Output ("SD:OBS DIR Exists");
 23e91fe:	480d      	ldr	r0, [pc, #52]	; (23e9234 <_Z13SD_initializev+0x138>)
 23e9200:	e7cc      	b.n	23e919c <_Z13SD_initializev+0xa0>
 23e9202:	bf00      	nop
 23e9204:	1006a238 	.word	0x1006a238
 23e9208:	1006a23c 	.word	0x1006a23c
 23e920c:	00989680 	.word	0x00989680
 23e9210:	1006a2d0 	.word	0x1006a2d0
 23e9214:	1006a170 	.word	0x1006a170
 23e9218:	023fd965 	.word	0x023fd965
 23e921c:	023fd975 	.word	0x023fd975
 23e9220:	1006a77c 	.word	0x1006a77c
 23e9224:	023fd95f 	.word	0x023fd95f
 23e9228:	1006a178 	.word	0x1006a178
 23e922c:	023fd97f 	.word	0x023fd97f
 23e9230:	023fd990 	.word	0x023fd990
 23e9234:	023fd99b 	.word	0x023fd99b

023e9238 <_Z17SD_LogObservationPc>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23e9238:	2300      	movs	r3, #0
 23e923a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
/* 
 *=======================================================================================================================
 * SD_LogObservation()
 *=======================================================================================================================
 */
void SD_LogObservation(char *observations) {
 23e923e:	b530      	push	{r4, r5, lr}
 23e9240:	b0b3      	sub	sp, #204	; 0xcc
 23e9242:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23e9246:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e924a:	4b23      	ldr	r3, [pc, #140]	; (23e92d8 <_Z17SD_LogObservationPc+0xa0>)
 23e924c:	4605      	mov	r5, r0
 23e924e:	930a      	str	r3, [sp, #40]	; 0x28
  char SD_logfile[24];
  File fp;

  if (!SD_exists) {
 23e9250:	4b22      	ldr	r3, [pc, #136]	; (23e92dc <_Z17SD_LogObservationPc+0xa4>)
 23e9252:	781b      	ldrb	r3, [r3, #0]
 23e9254:	2b00      	cmp	r3, #0
 23e9256:	d034      	beq.n	23e92c2 <_Z17SD_LogObservationPc+0x8a>
    return;
  }

  if (!Time.isValid()) {
 23e9258:	f010 fb16 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23e925c:	2800      	cmp	r0, #0
 23e925e:	d030      	beq.n	23e92c2 <_Z17SD_LogObservationPc+0x8a>
    return;
  }
  
  sprintf (SD_logfile, "%s/%4d%02d%02d.log", SD_obsdir, Time.year(), Time.month(), Time.day());
 23e9260:	f010 fb78 	bl	23f9954 <_ZN9TimeClass4yearEv>
 23e9264:	9003      	str	r0, [sp, #12]
 23e9266:	f010 fb6d 	bl	23f9944 <_ZN9TimeClass5monthEv>
 23e926a:	4604      	mov	r4, r0
 23e926c:	f010 fb5e 	bl	23f992c <_ZN9TimeClass3dayEv>
 23e9270:	9b03      	ldr	r3, [sp, #12]
 23e9272:	e9cd 4000 	strd	r4, r0, [sp]
 23e9276:	4a1a      	ldr	r2, [pc, #104]	; (23e92e0 <_Z17SD_LogObservationPc+0xa8>)
 23e9278:	491a      	ldr	r1, [pc, #104]	; (23e92e4 <_Z17SD_LogObservationPc+0xac>)
 23e927a:	a804      	add	r0, sp, #16
 23e927c:	f00e fc22 	bl	23f7ac4 <sprintf>
  
  fp = SD.open(SD_logfile, FILE_WRITE); 
 23e9280:	aa04      	add	r2, sp, #16
 23e9282:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9286:	4918      	ldr	r1, [pc, #96]	; (23e92e8 <_Z17SD_LogObservationPc+0xb0>)
 23e9288:	a81e      	add	r0, sp, #120	; 0x78
 23e928a:	f00c ffc3 	bl	23f6214 <_ZN8FsVolume4openEPKci>
class Print
 23e928e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    move(&from);
 23e9290:	a922      	add	r1, sp, #136	; 0x88
 23e9292:	930b      	str	r3, [sp, #44]	; 0x2c
class Stream : public Print
 23e9294:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23e9296:	a80e      	add	r0, sp, #56	; 0x38
 23e9298:	930c      	str	r3, [sp, #48]	; 0x30
 23e929a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 23e929c:	4c13      	ldr	r4, [pc, #76]	; (23e92ec <_Z17SD_LogObservationPc+0xb4>)
 23e929e:	930d      	str	r3, [sp, #52]	; 0x34
 23e92a0:	f00c fed5 	bl	23f604e <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23e92a4:	a80e      	add	r0, sp, #56	; 0x38
 23e92a6:	f7fc fe94 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
  if (fp) {
 23e92aa:	b160      	cbz	r0, 23e92c6 <_Z17SD_LogObservationPc+0x8e>
    fp.println(observations);
 23e92ac:	4629      	mov	r1, r5
 23e92ae:	a80a      	add	r0, sp, #40	; 0x28
 23e92b0:	f00f fefe 	bl	23f90b0 <_ZN5Print7printlnEPKc>
    fp.close();
 23e92b4:	a80e      	add	r0, sp, #56	; 0x38
 23e92b6:	f00c fed4 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
    SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23e92ba:	6823      	ldr	r3, [r4, #0]
 23e92bc:	f023 0302 	bic.w	r3, r3, #2
 23e92c0:	6023      	str	r3, [r4, #0]
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("SD:Open(Log)ERR");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23e92c2:	b033      	add	sp, #204	; 0xcc
 23e92c4:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e92c6:	6823      	ldr	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e92c8:	4809      	ldr	r0, [pc, #36]	; (23e92f0 <_Z17SD_LogObservationPc+0xb8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e92ca:	f043 0302 	orr.w	r3, r3, #2
 23e92ce:	6023      	str	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e92d0:	f7fd f8cc 	bl	23e646c <_Z6OutputPKc>
    virtual ~Print() {}
 23e92d4:	e7f5      	b.n	23e92c2 <_Z17SD_LogObservationPc+0x8a>
 23e92d6:	bf00      	nop
 23e92d8:	023fe7b4 	.word	0x023fe7b4
 23e92dc:	1006a77c 	.word	0x1006a77c
 23e92e0:	1006a170 	.word	0x1006a170
 23e92e4:	023fd9ad 	.word	0x023fd9ad
 23e92e8:	1006a2d0 	.word	0x1006a2d0
 23e92ec:	1006a178 	.word	0x1006a178
 23e92f0:	023fd9c0 	.word	0x023fd9c0

023e92f4 <_Z13SD_N2S_Deletev>:
/* 
 *=======================================================================================================================
 * SD_N2S_Delete()
 *=======================================================================================================================
 */
bool SD_N2S_Delete() {
 23e92f4:	b538      	push	{r3, r4, r5, lr}
  bool result;

  if (SD_exists && SD.exists(SD_n2s_file)) {
 23e92f6:	4b17      	ldr	r3, [pc, #92]	; (23e9354 <_Z13SD_N2S_Deletev+0x60>)
 23e92f8:	4c17      	ldr	r4, [pc, #92]	; (23e9358 <_Z13SD_N2S_Deletev+0x64>)
 23e92fa:	781b      	ldrb	r3, [r3, #0]
 23e92fc:	b193      	cbz	r3, 23e9324 <_Z13SD_N2S_Deletev+0x30>
 23e92fe:	4917      	ldr	r1, [pc, #92]	; (23e935c <_Z13SD_N2S_Deletev+0x68>)
 23e9300:	4817      	ldr	r0, [pc, #92]	; (23e9360 <_Z13SD_N2S_Deletev+0x6c>)
 23e9302:	f7fc fded 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9306:	b168      	cbz	r0, 23e9324 <_Z13SD_N2S_Deletev+0x30>
    if (SD.remove (SD_n2s_file)) {
 23e9308:	4914      	ldr	r1, [pc, #80]	; (23e935c <_Z13SD_N2S_Deletev+0x68>)
 23e930a:	4815      	ldr	r0, [pc, #84]	; (23e9360 <_Z13SD_N2S_Deletev+0x6c>)
 23e930c:	f7fc fe03 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23e9310:	4605      	mov	r5, r0
 23e9312:	b9b0      	cbnz	r0, 23e9342 <_Z13SD_N2S_Deletev+0x4e>
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
      Output ("N2S->DEL:OK");
      result = true;
    }
    else {
      Output ("N2S->DEL:ERR");
 23e9314:	4813      	ldr	r0, [pc, #76]	; (23e9364 <_Z13SD_N2S_Deletev+0x70>)
 23e9316:	f7fd f8a9 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_SD; // Turn On Bit
 23e931a:	6823      	ldr	r3, [r4, #0]
 23e931c:	f043 0302 	orr.w	r3, r3, #2
 23e9320:	6023      	str	r3, [r4, #0]
      result = false;
 23e9322:	e007      	b.n	23e9334 <_Z13SD_N2S_Deletev+0x40>
    }
  }
  else {
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e9324:	6823      	ldr	r3, [r4, #0]
    Output ("N2S->DEL:NF");
 23e9326:	4810      	ldr	r0, [pc, #64]	; (23e9368 <_Z13SD_N2S_Deletev+0x74>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e9328:	f023 0310 	bic.w	r3, r3, #16
 23e932c:	6023      	str	r3, [r4, #0]
    result = true;
 23e932e:	2501      	movs	r5, #1
    Output ("N2S->DEL:NF");
 23e9330:	f7fd f89c 	bl	23e646c <_Z6OutputPKc>
  }
  eeprom.n2sfp = 0;
 23e9334:	2200      	movs	r2, #0
 23e9336:	4b0d      	ldr	r3, [pc, #52]	; (23e936c <_Z13SD_N2S_Deletev+0x78>)
 23e9338:	615a      	str	r2, [r3, #20]
  EEPROM_Update();
 23e933a:	f7ff fdf9 	bl	23e8f30 <_Z13EEPROM_Updatev>
  return (result);
}
 23e933e:	4628      	mov	r0, r5
 23e9340:	bd38      	pop	{r3, r4, r5, pc}
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e9342:	6823      	ldr	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23e9344:	480a      	ldr	r0, [pc, #40]	; (23e9370 <_Z13SD_N2S_Deletev+0x7c>)
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e9346:	f023 0310 	bic.w	r3, r3, #16
 23e934a:	6023      	str	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23e934c:	f7fd f88e 	bl	23e646c <_Z6OutputPKc>
      result = true;
 23e9350:	e7f0      	b.n	23e9334 <_Z13SD_N2S_Deletev+0x40>
 23e9352:	bf00      	nop
 23e9354:	1006a77c 	.word	0x1006a77c
 23e9358:	1006a178 	.word	0x1006a178
 23e935c:	1006a15f 	.word	0x1006a15f
 23e9360:	1006a2d0 	.word	0x1006a2d0
 23e9364:	023fd9e8 	.word	0x023fd9e8
 23e9368:	023fd9d0 	.word	0x023fd9d0
 23e936c:	1006ae5c 	.word	0x1006ae5c
 23e9370:	023fd9dc 	.word	0x023fd9dc

023e9374 <_Z17SD_NeedToSend_AddPc>:
/* 
 *=======================================================================================================================
 * SD_NeedToSend_Add()
 *=======================================================================================================================
 */
void SD_NeedToSend_Add(char *observation) {
 23e9374:	b530      	push	{r4, r5, lr}
    Stream() {_timeout=1000;}
 23e9376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23e937a:	2500      	movs	r5, #0
 23e937c:	b0a9      	sub	sp, #164	; 0xa4
 23e937e:	e9cd 5301 	strd	r5, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e9382:	4b26      	ldr	r3, [pc, #152]	; (23e941c <_Z17SD_NeedToSend_AddPc+0xa8>)
 23e9384:	4604      	mov	r4, r0
 23e9386:	9300      	str	r3, [sp, #0]
  File fp;

  if (!SD_exists) {
 23e9388:	4b25      	ldr	r3, [pc, #148]	; (23e9420 <_Z17SD_NeedToSend_AddPc+0xac>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23e938a:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 23e938e:	781b      	ldrb	r3, [r3, #0]
 23e9390:	b34b      	cbz	r3, 23e93e6 <_Z17SD_NeedToSend_AddPc+0x72>
    return;
  }
  
  fp = SD.open(SD_n2s_file, FILE_WRITE); // Open the file for reading and writing, starting at the end of the file.
 23e9392:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9396:	4a23      	ldr	r2, [pc, #140]	; (23e9424 <_Z17SD_NeedToSend_AddPc+0xb0>)
 23e9398:	4923      	ldr	r1, [pc, #140]	; (23e9428 <_Z17SD_NeedToSend_AddPc+0xb4>)
 23e939a:	a814      	add	r0, sp, #80	; 0x50
 23e939c:	f00c ff3a 	bl	23f6214 <_ZN8FsVolume4openEPKci>
class Print
 23e93a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23e93a2:	a804      	add	r0, sp, #16
 23e93a4:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23e93a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23e93a8:	a918      	add	r1, sp, #96	; 0x60
 23e93aa:	9302      	str	r3, [sp, #8]
 23e93ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23e93ae:	9303      	str	r3, [sp, #12]
 23e93b0:	f00c fe4d 	bl	23f604e <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23e93b4:	a804      	add	r0, sp, #16
 23e93b6:	f7fc fe0c 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
                                         // It will be created if it doesn't already exist.
  if (fp) {  
 23e93ba:	b340      	cbz	r0, 23e940e <_Z17SD_NeedToSend_AddPc+0x9a>
  PosType size() { return BaseFile::fileSize(); }
 23e93bc:	a804      	add	r0, sp, #16
 23e93be:	f7fc fdfc 	bl	23e5fba <_ZNK10FsBaseFile8fileSizeEv>
    if (fp.size() > SD_n2s_max_filesz) {
 23e93c2:	4b1a      	ldr	r3, [pc, #104]	; (23e942c <_Z17SD_NeedToSend_AddPc+0xb8>)
 23e93c4:	681b      	ldr	r3, [r3, #0]
 23e93c6:	4283      	cmp	r3, r0
 23e93c8:	eb75 0301 	sbcs.w	r3, r5, r1
 23e93cc:	d20d      	bcs.n	23e93ea <_Z17SD_NeedToSend_AddPc+0x76>
      fp.close();
 23e93ce:	a804      	add	r0, sp, #16
 23e93d0:	f00c fe47 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
      Output ("N2S:Full");
 23e93d4:	4816      	ldr	r0, [pc, #88]	; (23e9430 <_Z17SD_NeedToSend_AddPc+0xbc>)
 23e93d6:	f7fd f849 	bl	23e646c <_Z6OutputPKc>
      if (SD_N2S_Delete()) {
 23e93da:	f7ff ff8b 	bl	23e92f4 <_Z13SD_N2S_Deletev>
 23e93de:	b110      	cbz	r0, 23e93e6 <_Z17SD_NeedToSend_AddPc+0x72>
        // Only call ourself again if we truely deleted the file. Otherwise infinate loop.
        SD_NeedToSend_Add(observation); // Now go and log the data
 23e93e0:	4620      	mov	r0, r4
 23e93e2:	f7ff ffc7 	bl	23e9374 <_Z17SD_NeedToSend_AddPc>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("N2S:Open Error");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23e93e6:	b029      	add	sp, #164	; 0xa4
 23e93e8:	bd30      	pop	{r4, r5, pc}
      fp.println(observation); //Print data, followed by a carriage return and newline, to the File
 23e93ea:	4621      	mov	r1, r4
 23e93ec:	4668      	mov	r0, sp
 23e93ee:	f00f fe5f 	bl	23f90b0 <_ZN5Print7printlnEPKc>
      fp.close();
 23e93f2:	a804      	add	r0, sp, #16
 23e93f4:	f00c fe35 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23e93f8:	4a0e      	ldr	r2, [pc, #56]	; (23e9434 <_Z17SD_NeedToSend_AddPc+0xc0>)
      Output ("N2S:OBS Added");
 23e93fa:	480f      	ldr	r0, [pc, #60]	; (23e9438 <_Z17SD_NeedToSend_AddPc+0xc4>)
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23e93fc:	6813      	ldr	r3, [r2, #0]
 23e93fe:	f023 0302 	bic.w	r3, r3, #2
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23e9402:	f043 0310 	orr.w	r3, r3, #16
 23e9406:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23e9408:	f7fd f830 	bl	23e646c <_Z6OutputPKc>
 23e940c:	e7eb      	b.n	23e93e6 <_Z17SD_NeedToSend_AddPc+0x72>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e940e:	4a09      	ldr	r2, [pc, #36]	; (23e9434 <_Z17SD_NeedToSend_AddPc+0xc0>)
    Output ("N2S:Open Error");
 23e9410:	480a      	ldr	r0, [pc, #40]	; (23e943c <_Z17SD_NeedToSend_AddPc+0xc8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e9412:	6813      	ldr	r3, [r2, #0]
 23e9414:	f043 0302 	orr.w	r3, r3, #2
 23e9418:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23e941a:	e7f5      	b.n	23e9408 <_Z17SD_NeedToSend_AddPc+0x94>
 23e941c:	023fe7b4 	.word	0x023fe7b4
 23e9420:	1006a77c 	.word	0x1006a77c
 23e9424:	1006a15f 	.word	0x1006a15f
 23e9428:	1006a2d0 	.word	0x1006a2d0
 23e942c:	1006a16c 	.word	0x1006a16c
 23e9430:	023fd9f5 	.word	0x023fd9f5
 23e9434:	1006a178 	.word	0x1006a178
 23e9438:	023fd9fe 	.word	0x023fd9fe
 23e943c:	023fda0c 	.word	0x023fda0c

023e9440 <_Z16lora_msgs_to_n2sv>:
void lora_msgs_to_n2s() {
 23e9440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LORA_exists) {
 23e9444:	4b14      	ldr	r3, [pc, #80]	; (23e9498 <_Z16lora_msgs_to_n2sv+0x58>)
 23e9446:	781b      	ldrb	r3, [r3, #0]
 23e9448:	b31b      	cbz	r3, 23e9492 <_Z16lora_msgs_to_n2sv+0x52>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e944a:	2500      	movs	r5, #0
 23e944c:	4c13      	ldr	r4, [pc, #76]	; (23e949c <_Z16lora_msgs_to_n2sv+0x5c>)
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23e944e:	4f14      	ldr	r7, [pc, #80]	; (23e94a0 <_Z16lora_msgs_to_n2sv+0x60>)
 23e9450:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23e94b0 <_Z16lora_msgs_to_n2sv+0x70>
 23e9454:	4e13      	ldr	r6, [pc, #76]	; (23e94a4 <_Z16lora_msgs_to_n2sv+0x64>)
      if (m->need2log) {
 23e9456:	7823      	ldrb	r3, [r4, #0]
 23e9458:	b1b3      	cbz	r3, 23e9488 <_Z16lora_msgs_to_n2sv+0x48>
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23e945a:	6863      	ldr	r3, [r4, #4]
 23e945c:	4641      	mov	r1, r8
 23e945e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 23e9462:	f104 0208 	add.w	r2, r4, #8
 23e9466:	4630      	mov	r0, r6
 23e9468:	f00e fb2c 	bl	23f7ac4 <sprintf>
        SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e946c:	4630      	mov	r0, r6
 23e946e:	f7ff ff81 	bl	23e9374 <_Z17SD_NeedToSend_AddPc>
        lora_relay_msg_free(m);
 23e9472:	4620      	mov	r0, r4
 23e9474:	f7fd f984 	bl	23e6780 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
        sprintf (Buffer32Bytes, "LoRaMsg[%d]->N2S", i);
 23e9478:	462a      	mov	r2, r5
 23e947a:	490b      	ldr	r1, [pc, #44]	; (23e94a8 <_Z16lora_msgs_to_n2sv+0x68>)
 23e947c:	480b      	ldr	r0, [pc, #44]	; (23e94ac <_Z16lora_msgs_to_n2sv+0x6c>)
 23e947e:	f00e fb21 	bl	23f7ac4 <sprintf>
        Output (Buffer32Bytes);
 23e9482:	480a      	ldr	r0, [pc, #40]	; (23e94ac <_Z16lora_msgs_to_n2sv+0x6c>)
 23e9484:	f7fc fff2 	bl	23e646c <_Z6OutputPKc>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e9488:	3501      	adds	r5, #1
 23e948a:	2d40      	cmp	r5, #64	; 0x40
 23e948c:	f504 7484 	add.w	r4, r4, #264	; 0x108
 23e9490:	d1e1      	bne.n	23e9456 <_Z16lora_msgs_to_n2sv+0x16>
}
 23e9492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23e9496:	bf00      	nop
 23e9498:	1006a2b1 	.word	0x1006a2b1
 23e949c:	1006aec0 	.word	0x1006aec0
 23e94a0:	1006a1b0 	.word	0x1006a1b0
 23e94a4:	1006f128 	.word	0x1006f128
 23e94a8:	023fda21 	.word	0x023fda21
 23e94ac:	1006a287 	.word	0x1006a287
 23e94b0:	023fda1b 	.word	0x023fda1b

023e94b4 <_Z14lora_relay_msgPc>:
 *   INT,   Station ID
 *   INT,   Message Counter
 *   OBS    JSON Observation
 *=======================================================================================================================
 */
void lora_relay_msg(char *obs) {
 23e94b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  int unit_id = 0;
  unsigned int message_counter = 0;
  char *message;
  char *p;

  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23e94b6:	7802      	ldrb	r2, [r0, #0]
 23e94b8:	7843      	ldrb	r3, [r0, #1]
 23e94ba:	2a49      	cmp	r2, #73	; 0x49
void lora_relay_msg(char *obs) {
 23e94bc:	b087      	sub	sp, #28
  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23e94be:	d133      	bne.n	23e9528 <_Z14lora_relay_msgPc+0x74>
 23e94c0:	2b46      	cmp	r3, #70	; 0x46
 23e94c2:	d135      	bne.n	23e9530 <_Z14lora_relay_msgPc+0x7c>
    message_type = 1;
 23e94c4:	2501      	movs	r5, #1
    Output (Buffer32Bytes);
    return;
  }

  p = &obs[2]; // Start after message type 
  unit_id = atoi (strtok_r(p, ",", &p));
 23e94c6:	492c      	ldr	r1, [pc, #176]	; (23e9578 <_Z14lora_relay_msgPc+0xc4>)
 23e94c8:	aa05      	add	r2, sp, #20
  p = &obs[2]; // Start after message type 
 23e94ca:	3002      	adds	r0, #2
 23e94cc:	9005      	str	r0, [sp, #20]
  unit_id = atoi (strtok_r(p, ",", &p));
 23e94ce:	f013 fbd3 	bl	23fcc78 <strtok_r>
 23e94d2:	f013 faa1 	bl	23fca18 <atoi>
  message_counter = atoi (strtok_r(p, ",", &p));
 23e94d6:	4928      	ldr	r1, [pc, #160]	; (23e9578 <_Z14lora_relay_msgPc+0xc4>)
 23e94d8:	aa05      	add	r2, sp, #20
  unit_id = atoi (strtok_r(p, ",", &p));
 23e94da:	9003      	str	r0, [sp, #12]
  message_counter = atoi (strtok_r(p, ",", &p));
 23e94dc:	9805      	ldr	r0, [sp, #20]
 23e94de:	f013 fbcb 	bl	23fcc78 <strtok_r>
 23e94e2:	f013 fa99 	bl	23fca18 <atoi>
  message = p;

  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23e94e6:	4e25      	ldr	r6, [pc, #148]	; (23e957c <_Z14lora_relay_msgPc+0xc8>)
 23e94e8:	9b03      	ldr	r3, [sp, #12]
 23e94ea:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23e94ee:	4924      	ldr	r1, [pc, #144]	; (23e9580 <_Z14lora_relay_msgPc+0xcc>)
 23e94f0:	9000      	str	r0, [sp, #0]
 23e94f2:	4824      	ldr	r0, [pc, #144]	; (23e9584 <_Z14lora_relay_msgPc+0xd0>)
  message = p;
 23e94f4:	9f05      	ldr	r7, [sp, #20]
  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23e94f6:	f00e fae5 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e94fa:	4822      	ldr	r0, [pc, #136]	; (23e9584 <_Z14lora_relay_msgPc+0xd0>)
 23e94fc:	f7fc ffb6 	bl	23e646c <_Z6OutputPKc>
  // Output (message);

  // Locate storage index
  int idx = lora_relay_notinuse();
 23e9500:	f7fd f954 	bl	23e67ac <_Z19lora_relay_notinusev>

  if (idx == -1) {
 23e9504:	1c42      	adds	r2, r0, #1
  int idx = lora_relay_notinuse();
 23e9506:	4604      	mov	r4, r0
  if (idx == -1) {
 23e9508:	d11e      	bne.n	23e9548 <_Z14lora_relay_msgPc+0x94>
    Output ("LORA Relay NoSpace");
 23e950a:	481f      	ldr	r0, [pc, #124]	; (23e9588 <_Z14lora_relay_msgPc+0xd4>)
 23e950c:	f7fc ffae 	bl	23e646c <_Z6OutputPKc>

    // Dump all LoRA messages to N2S
    lora_msgs_to_n2s();  // No Space - Dump all LoRA messages to N2S, then save new message
 23e9510:	f7ff ff96 	bl	23e9440 <_Z16lora_msgs_to_n2sv>

    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23e9514:	f7fd f94a 	bl	23e67ac <_Z19lora_relay_notinusev>
    if (idx == -1) {
 23e9518:	1c43      	adds	r3, r0, #1
    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23e951a:	4604      	mov	r4, r0
    if (idx == -1) {
 23e951c:	d114      	bne.n	23e9548 <_Z14lora_relay_msgPc+0x94>
      Output ("LORA Relay MsgLost");
 23e951e:	481b      	ldr	r0, [pc, #108]	; (23e958c <_Z14lora_relay_msgPc+0xd8>)
  m = &lora_msg_relay[idx]; // Lets work with a pointer and not the index
  m->need2log = true;
  m->message_type = message_type;
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
  Output (Buffer32Bytes);
 23e9520:	f7fc ffa4 	bl	23e646c <_Z6OutputPKc>
}
 23e9524:	b007      	add	sp, #28
 23e9526:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((obs[0] == 'L') && (obs[1] == 'R')) {
 23e9528:	2a4c      	cmp	r2, #76	; 0x4c
 23e952a:	d101      	bne.n	23e9530 <_Z14lora_relay_msgPc+0x7c>
 23e952c:	2b52      	cmp	r3, #82	; 0x52
 23e952e:	d009      	beq.n	23e9544 <_Z14lora_relay_msgPc+0x90>
    sprintf (Buffer32Bytes, "LORA Relay %c%c Unkn", obs[0], obs[1]);
 23e9530:	4917      	ldr	r1, [pc, #92]	; (23e9590 <_Z14lora_relay_msgPc+0xdc>)
 23e9532:	4814      	ldr	r0, [pc, #80]	; (23e9584 <_Z14lora_relay_msgPc+0xd0>)
 23e9534:	f00e fac6 	bl	23f7ac4 <sprintf>
    Output (Buffer32Bytes);
 23e9538:	4812      	ldr	r0, [pc, #72]	; (23e9584 <_Z14lora_relay_msgPc+0xd0>)
}
 23e953a:	b007      	add	sp, #28
 23e953c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Output (Buffer32Bytes);
 23e9540:	f7fc bf94 	b.w	23e646c <_Z6OutputPKc>
    message_type = 2; 
 23e9544:	2502      	movs	r5, #2
 23e9546:	e7be      	b.n	23e94c6 <_Z14lora_relay_msgPc+0x12>
  m->need2log = true;
 23e9548:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e954c:	2101      	movs	r1, #1
 23e954e:	4363      	muls	r3, r4
 23e9550:	4810      	ldr	r0, [pc, #64]	; (23e9594 <_Z14lora_relay_msgPc+0xe0>)
 23e9552:	18c2      	adds	r2, r0, r3
 23e9554:	54c1      	strb	r1, [r0, r3]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e9556:	3308      	adds	r3, #8
 23e9558:	4639      	mov	r1, r7
  m->message_type = message_type;
 23e955a:	6055      	str	r5, [r2, #4]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e955c:	4418      	add	r0, r3
 23e955e:	22ff      	movs	r2, #255	; 0xff
 23e9560:	f013 fb4f 	bl	23fcc02 <strncpy>
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
 23e9564:	4623      	mov	r3, r4
 23e9566:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23e956a:	490b      	ldr	r1, [pc, #44]	; (23e9598 <_Z14lora_relay_msgPc+0xe4>)
 23e956c:	4805      	ldr	r0, [pc, #20]	; (23e9584 <_Z14lora_relay_msgPc+0xd0>)
 23e956e:	f00e faa9 	bl	23f7ac4 <sprintf>
  Output (Buffer32Bytes);
 23e9572:	4804      	ldr	r0, [pc, #16]	; (23e9584 <_Z14lora_relay_msgPc+0xd0>)
 23e9574:	e7d4      	b.n	23e9520 <_Z14lora_relay_msgPc+0x6c>
 23e9576:	bf00      	nop
 23e9578:	023fda47 	.word	0x023fda47
 23e957c:	1006a1b0 	.word	0x1006a1b0
 23e9580:	023fda49 	.word	0x023fda49
 23e9584:	1006a287 	.word	0x1006a287
 23e9588:	023fda5f 	.word	0x023fda5f
 23e958c:	023fda72 	.word	0x023fda72
 23e9590:	023fda32 	.word	0x023fda32
 23e9594:	1006aec0 	.word	0x1006aec0
 23e9598:	023fda85 	.word	0x023fda85

023e959c <_Z10SD_findKeyPK19__FlashStringHelperPc>:
 *  myInt_1=2
 *  myFloat_1=0.74
 * =======================================================================================================================
 */

int SD_findKey(const __FlashStringHelper * key, char * value) {
 23e959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e95a0:	4607      	mov	r7, r0
 23e95a2:	b0ac      	sub	sp, #176	; 0xb0
  
  // Disable LoRA SPI0 Chip Select
  pinMode(LORA_SS, OUTPUT);
 23e95a4:	2003      	movs	r0, #3
int SD_findKey(const __FlashStringHelper * key, char * value) {
 23e95a6:	460e      	mov	r6, r1
  pinMode(LORA_SS, OUTPUT);
 23e95a8:	2101      	movs	r1, #1
 23e95aa:	f010 fc1b 	bl	23f9de4 <pinMode>
  digitalWrite(LORA_SS, HIGH);
 23e95ae:	2101      	movs	r1, #1
 23e95b0:	2003      	movs	r0, #3
 23e95b2:	f010 fc28 	bl	23f9e06 <digitalWrite>
  
  File configFile = SD.open(CF_NAME);
 23e95b6:	2300      	movs	r3, #0
 23e95b8:	4a29      	ldr	r2, [pc, #164]	; (23e9660 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23e95ba:	492a      	ldr	r1, [pc, #168]	; (23e9664 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc8>)
 23e95bc:	a818      	add	r0, sp, #96	; 0x60
 23e95be:	f00c fe29 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23e95c2:	a81c      	add	r0, sp, #112	; 0x70
 23e95c4:	f7fc fd05 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>

  if (!configFile) {
 23e95c8:	4604      	mov	r4, r0
 23e95ca:	2800      	cmp	r0, #0
 23e95cc:	d035      	beq.n	23e963a <_Z10SD_findKeyPK19__FlashStringHelperPc+0x9e>
 23e95ce:	466b      	mov	r3, sp
    return(0);
  }

  char key_string[KEY_MAX_LENGTH];
  char SD_buffer[KEY_MAX_LENGTH + VALUE_MAX_LENGTH + 1]; // 1 is = character
  int key_length = 0;
 23e95d0:	2500      	movs	r5, #0
 23e95d2:	4698      	mov	r8, r3
  // Flash string to string
  PGM_P keyPoiter;
  keyPoiter = reinterpret_cast<PGM_P>(key);
  byte ch;
  do {
    ch = pgm_read_byte(keyPoiter++);
 23e95d4:	5d7a      	ldrb	r2, [r7, r5]
    if (ch != 0)
 23e95d6:	2a00      	cmp	r2, #0
 23e95d8:	d13d      	bne.n	23e9656 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xba>
    // WINDOWS uses CFLF = \r\n
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
    if (SD_buffer[buffer_length - 1] == '\r')
      buffer_length--; // trim the \r

    if (buffer_length > (key_length + 1)) { // 1 is = character
 23e95da:	1c6f      	adds	r7, r5, #1
  int available() override { return BaseFile::available(); }
 23e95dc:	a81c      	add	r0, sp, #112	; 0x70
 23e95de:	f7fc fcbf 	bl	23e5f60 <_ZNK10FsBaseFile9availableEv>
  while (configFile.available()) {
 23e95e2:	4604      	mov	r4, r0
 23e95e4:	b328      	cbz	r0, 23e9632 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x96>
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
 23e95e6:	233f      	movs	r3, #63	; 0x3f
 23e95e8:	aa08      	add	r2, sp, #32
 23e95ea:	210a      	movs	r1, #10
 23e95ec:	a818      	add	r0, sp, #96	; 0x60
 23e95ee:	f00f feea 	bl	23f93c6 <_ZN6Stream14readBytesUntilEcPcj>
 23e95f2:	4604      	mov	r4, r0
    if (SD_buffer[buffer_length - 1] == '\r')
 23e95f4:	1e43      	subs	r3, r0, #1
 23e95f6:	aa2c      	add	r2, sp, #176	; 0xb0
 23e95f8:	441a      	add	r2, r3
 23e95fa:	f812 2c90 	ldrb.w	r2, [r2, #-144]
      buffer_length--; // trim the \r
 23e95fe:	2a0d      	cmp	r2, #13
 23e9600:	bf08      	it	eq
 23e9602:	461c      	moveq	r4, r3
    if (buffer_length > (key_length + 1)) { // 1 is = character
 23e9604:	42a7      	cmp	r7, r4
 23e9606:	dae9      	bge.n	23e95dc <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
      if (memcmp(SD_buffer, key_string, key_length) == 0) { // equal
 23e9608:	462a      	mov	r2, r5
 23e960a:	4641      	mov	r1, r8
 23e960c:	a808      	add	r0, sp, #32
 23e960e:	f013 fa2d 	bl	23fca6c <memcmp>
 23e9612:	2800      	cmp	r0, #0
 23e9614:	d1e2      	bne.n	23e95dc <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
        if (SD_buffer[key_length] == '=') {
 23e9616:	ab2c      	add	r3, sp, #176	; 0xb0
 23e9618:	442b      	add	r3, r5
 23e961a:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 23e961e:	2b3d      	cmp	r3, #61	; 0x3d
 23e9620:	d1dc      	bne.n	23e95dc <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
          value_length = buffer_length - key_length - 1;
 23e9622:	1b64      	subs	r4, r4, r5
 23e9624:	3c01      	subs	r4, #1
          memcpy(value, SD_buffer + key_length + 1, value_length);
 23e9626:	ab08      	add	r3, sp, #32
 23e9628:	4622      	mov	r2, r4
 23e962a:	4630      	mov	r0, r6
 23e962c:	19d9      	adds	r1, r3, r7
 23e962e:	f013 fa2d 	bl	23fca8c <memcpy>
        }
      }
    }
  }

  configFile.close();  // close the file
 23e9632:	a81c      	add	r0, sp, #112	; 0x70
 23e9634:	f00c fd15 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
  return value_length;
 23e9638:	e009      	b.n	23e964e <_Z10SD_findKeyPK19__FlashStringHelperPc+0xb2>
    Serial.print(F("SD Card: error on opening file "));
 23e963a:	f010 fa59 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23e963e:	490a      	ldr	r1, [pc, #40]	; (23e9668 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xcc>)
 23e9640:	f00f fd26 	bl	23f9090 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(CF_NAME);
 23e9644:	f010 fa54 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23e9648:	4905      	ldr	r1, [pc, #20]	; (23e9660 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23e964a:	f00f fd31 	bl	23f90b0 <_ZN5Print7printlnEPKc>
}
 23e964e:	4620      	mov	r0, r4
 23e9650:	b02c      	add	sp, #176	; 0xb0
 23e9652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      key_string[key_length++] = ch;
 23e9656:	3501      	adds	r5, #1
 23e9658:	f803 2b01 	strb.w	r2, [r3], #1
  } while (ch != 0);
 23e965c:	e7ba      	b.n	23e95d4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x38>
 23e965e:	bf00      	nop
 23e9660:	023fdaa0 	.word	0x023fdaa0
 23e9664:	1006a2d0 	.word	0x1006a2d0
 23e9668:	023fdaab 	.word	0x023fdaab

023e966c <_Z16HELPER_ascii2IntPci>:

int HELPER_ascii2Int(char *ascii, int length) {
  int sign = 1;
  int number = 0;

  for (int i = 0; i < length; i++) {
 23e966c:	2300      	movs	r3, #0
int HELPER_ascii2Int(char *ascii, int length) {
 23e966e:	b5f0      	push	{r4, r5, r6, r7, lr}
  int number = 0;
 23e9670:	461c      	mov	r4, r3
  int sign = 1;
 23e9672:	2501      	movs	r5, #1
    char c = *(ascii + i);
    if (i == 0 && c == '-')
      sign = -1;
    else {
      if (c >= '0' && c <= '9')
        number = number * 10 + (c - '0');
 23e9674:	260a      	movs	r6, #10
  for (int i = 0; i < length; i++) {
 23e9676:	428b      	cmp	r3, r1
 23e9678:	da0e      	bge.n	23e9698 <_Z16HELPER_ascii2IntPci+0x2c>
    char c = *(ascii + i);
 23e967a:	5cc2      	ldrb	r2, [r0, r3]
    if (i == 0 && c == '-')
 23e967c:	b90b      	cbnz	r3, 23e9682 <_Z16HELPER_ascii2IntPci+0x16>
 23e967e:	2a2d      	cmp	r2, #45	; 0x2d
 23e9680:	d007      	beq.n	23e9692 <_Z16HELPER_ascii2IntPci+0x26>
      if (c >= '0' && c <= '9')
 23e9682:	3a30      	subs	r2, #48	; 0x30
 23e9684:	b2d7      	uxtb	r7, r2
 23e9686:	2f09      	cmp	r7, #9
 23e9688:	d801      	bhi.n	23e968e <_Z16HELPER_ascii2IntPci+0x22>
        number = number * 10 + (c - '0');
 23e968a:	fb06 2404 	mla	r4, r6, r4, r2
  for (int i = 0; i < length; i++) {
 23e968e:	3301      	adds	r3, #1
 23e9690:	e7f1      	b.n	23e9676 <_Z16HELPER_ascii2IntPci+0xa>
      sign = -1;
 23e9692:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23e9696:	e7fa      	b.n	23e968e <_Z16HELPER_ascii2IntPci+0x22>
    }
  }

  return number * sign;
}
 23e9698:	fb04 f005 	mul.w	r0, r4, r5
 23e969c:	bdf0      	pop	{r4, r5, r6, r7, pc}

023e969e <_Z20HELPER_ascii2CharStrPci>:
    str += String(c);
  }
  return str;
}

char* HELPER_ascii2CharStr(char *ascii, int length) {
 23e969e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e96a0:	4606      	mov	r6, r0
  char *str;
  str = (char *) malloc (length+1);
 23e96a2:	1c48      	adds	r0, r1, #1
char* HELPER_ascii2CharStr(char *ascii, int length) {
 23e96a4:	460c      	mov	r4, r1
  str = (char *) malloc (length+1);
 23e96a6:	f00e f9e3 	bl	23f7a70 <malloc>
  str[0] = 0;
 23e96aa:	2100      	movs	r1, #0
  str = (char *) malloc (length+1);
 23e96ac:	4605      	mov	r5, r0
  for (int i = 0; i < length; i++) {
    char c = *(ascii + i);
    str[i] = c;
    str[i+1] = 0;
 23e96ae:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
  str[0] = 0;
 23e96b2:	f800 1b01 	strb.w	r1, [r0], #1
    str[i+1] = 0;
 23e96b6:	9201      	str	r2, [sp, #4]
 23e96b8:	f013 f9f5 	bl	23fcaa6 <memset>
    str[i] = c;
 23e96bc:	4631      	mov	r1, r6
 23e96be:	4628      	mov	r0, r5
 23e96c0:	9a01      	ldr	r2, [sp, #4]
 23e96c2:	f013 f9e3 	bl	23fca8c <memcpy>
  }
  return str;
}
 23e96c6:	4628      	mov	r0, r5
 23e96c8:	b002      	add	sp, #8
 23e96ca:	bd70      	pop	{r4, r5, r6, pc}

023e96cc <_Z10SD_findIntPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return value_length > 0;
}

int SD_findInt(const __FlashStringHelper * key) {
 23e96cc:	b500      	push	{lr}
 23e96ce:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23e96d0:	4669      	mov	r1, sp
 23e96d2:	f7ff ff63 	bl	23e959c <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23e96d6:	4601      	mov	r1, r0
  return HELPER_ascii2Int(value_string, value_length);
 23e96d8:	4668      	mov	r0, sp
 23e96da:	f7ff ffc7 	bl	23e966c <_Z16HELPER_ascii2IntPci>
}
 23e96de:	b009      	add	sp, #36	; 0x24
 23e96e0:	f85d fb04 	ldr.w	pc, [sp], #4

023e96e4 <_Z14SD_findCharStrPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return HELPER_ascii2String(value_string, value_length);
}

char* SD_findCharStr(const __FlashStringHelper * key) {
 23e96e4:	b500      	push	{lr}
 23e96e6:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23e96e8:	4669      	mov	r1, sp
 23e96ea:	f7ff ff57 	bl	23e959c <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23e96ee:	4601      	mov	r1, r0
  return HELPER_ascii2CharStr(value_string, value_length);
 23e96f0:	4668      	mov	r0, sp
 23e96f2:	f7ff ffd4 	bl	23e969e <_Z20HELPER_ascii2CharStrPci>
}
 23e96f6:	b009      	add	sp, #36	; 0x24
 23e96f8:	f85d fb04 	ldr.w	pc, [sp], #4

023e96fc <_Z17SD_ReadConfigFilev>:
/* 
 * =======================================================================================================================
 * SD_ReadConfigFile()
 * =======================================================================================================================
 */
void SD_ReadConfigFile() {
 23e96fc:	b510      	push	{r4, lr}
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23e96fe:	4822      	ldr	r0, [pc, #136]	; (23e9788 <_Z17SD_ReadConfigFilev+0x8c>)
 23e9700:	f7ff fff0 	bl	23e96e4 <_Z14SD_findCharStrPK19__FlashStringHelper>
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23e9704:	4c21      	ldr	r4, [pc, #132]	; (23e978c <_Z17SD_ReadConfigFilev+0x90>)
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23e9706:	4b22      	ldr	r3, [pc, #136]	; (23e9790 <_Z17SD_ReadConfigFilev+0x94>)
 23e9708:	4602      	mov	r2, r0
 23e970a:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23e970c:	4921      	ldr	r1, [pc, #132]	; (23e9794 <_Z17SD_ReadConfigFilev+0x98>)
 23e970e:	4620      	mov	r0, r4
 23e9710:	f00e f9d8 	bl	23f7ac4 <sprintf>
 23e9714:	4620      	mov	r0, r4
 23e9716:	f7fc fea9 	bl	23e646c <_Z6OutputPKc>

  cf_aes_myiv     = SD_findLong(F("aes_myiv"));
 23e971a:	481f      	ldr	r0, [pc, #124]	; (23e9798 <_Z17SD_ReadConfigFilev+0x9c>)
 23e971c:	f7ff ffd6 	bl	23e96cc <_Z10SD_findIntPK19__FlashStringHelper>
 23e9720:	4b1e      	ldr	r3, [pc, #120]	; (23e979c <_Z17SD_ReadConfigFilev+0xa0>)
 23e9722:	4602      	mov	r2, r0
 23e9724:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_myiv=[%lu]", cf_aes_myiv);   Output (msgbuf);
 23e9726:	491e      	ldr	r1, [pc, #120]	; (23e97a0 <_Z17SD_ReadConfigFilev+0xa4>)
 23e9728:	4620      	mov	r0, r4
 23e972a:	f00e f9cb 	bl	23f7ac4 <sprintf>
 23e972e:	4620      	mov	r0, r4
 23e9730:	f7fc fe9c 	bl	23e646c <_Z6OutputPKc>

  cf_lora_unitid  = SD_findInt(F("lora_unitid"));
 23e9734:	481b      	ldr	r0, [pc, #108]	; (23e97a4 <_Z17SD_ReadConfigFilev+0xa8>)
 23e9736:	f7ff ffc9 	bl	23e96cc <_Z10SD_findIntPK19__FlashStringHelper>
 23e973a:	4b1b      	ldr	r3, [pc, #108]	; (23e97a8 <_Z17SD_ReadConfigFilev+0xac>)
 23e973c:	4602      	mov	r2, r0
 23e973e:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_unitid=[%d]", cf_lora_unitid); Output (msgbuf);
 23e9740:	491a      	ldr	r1, [pc, #104]	; (23e97ac <_Z17SD_ReadConfigFilev+0xb0>)
 23e9742:	4620      	mov	r0, r4
 23e9744:	f00e f9be 	bl	23f7ac4 <sprintf>
 23e9748:	4620      	mov	r0, r4
 23e974a:	f7fc fe8f 	bl	23e646c <_Z6OutputPKc>

  cf_lora_txpower = SD_findInt(F("lora_txpower"));
 23e974e:	4818      	ldr	r0, [pc, #96]	; (23e97b0 <_Z17SD_ReadConfigFilev+0xb4>)
 23e9750:	f7ff ffbc 	bl	23e96cc <_Z10SD_findIntPK19__FlashStringHelper>
 23e9754:	4b17      	ldr	r3, [pc, #92]	; (23e97b4 <_Z17SD_ReadConfigFilev+0xb8>)
 23e9756:	4602      	mov	r2, r0
 23e9758:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_txpower=[%d]", cf_lora_txpower); Output (msgbuf);
 23e975a:	4917      	ldr	r1, [pc, #92]	; (23e97b8 <_Z17SD_ReadConfigFilev+0xbc>)
 23e975c:	4620      	mov	r0, r4
 23e975e:	f00e f9b1 	bl	23f7ac4 <sprintf>
 23e9762:	4620      	mov	r0, r4
 23e9764:	f7fc fe82 	bl	23e646c <_Z6OutputPKc>

  cf_lora_freq   = SD_findInt(F("lora_freq"));
 23e9768:	4814      	ldr	r0, [pc, #80]	; (23e97bc <_Z17SD_ReadConfigFilev+0xc0>)
 23e976a:	f7ff ffaf 	bl	23e96cc <_Z10SD_findIntPK19__FlashStringHelper>
 23e976e:	4b14      	ldr	r3, [pc, #80]	; (23e97c0 <_Z17SD_ReadConfigFilev+0xc4>)
 23e9770:	4602      	mov	r2, r0
 23e9772:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23e9774:	4913      	ldr	r1, [pc, #76]	; (23e97c4 <_Z17SD_ReadConfigFilev+0xc8>)
 23e9776:	4620      	mov	r0, r4
 23e9778:	f00e f9a4 	bl	23f7ac4 <sprintf>
 23e977c:	4620      	mov	r0, r4
 23e977e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23e9782:	f7fc be73 	b.w	23e646c <_Z6OutputPKc>
 23e9786:	bf00      	nop
 23e9788:	023fdacb 	.word	0x023fdacb
 23e978c:	1006f128 	.word	0x1006f128
 23e9790:	1006ac7c 	.word	0x1006ac7c
 23e9794:	023fdad4 	.word	0x023fdad4
 23e9798:	023fdae5 	.word	0x023fdae5
 23e979c:	1006ac78 	.word	0x1006ac78
 23e97a0:	023fdaee 	.word	0x023fdaee
 23e97a4:	023fdb00 	.word	0x023fdb00
 23e97a8:	1006a198 	.word	0x1006a198
 23e97ac:	023fdb0c 	.word	0x023fdb0c
 23e97b0:	023fdb20 	.word	0x023fdb20
 23e97b4:	1006a194 	.word	0x1006a194
 23e97b8:	023fdb2d 	.word	0x023fdb2d
 23e97bc:	023fdb42 	.word	0x023fdb42
 23e97c0:	1006a190 	.word	0x1006a190
 23e97c4:	023fdb4c 	.word	0x023fdb4c

023e97c8 <_Z9OBS_Cleari>:
 * ======================================================================================================================
 * OBS_Clear() - Set OBS to not in use
 * ======================================================================================================================
 */
void OBS_Clear(int i) {
  obs[i].inuse =false;
 23e97c8:	f640 2398 	movw	r3, #2712	; 0xa98
 23e97cc:	4358      	muls	r0, r3
 23e97ce:	2300      	movs	r3, #0
 23e97d0:	4a05      	ldr	r2, [pc, #20]	; (23e97e8 <_Z9OBS_Cleari+0x20>)
 23e97d2:	5413      	strb	r3, [r2, r0]
  for (int s=0; s<MAX_SENSORS; s++) {
 23e97d4:	4410      	add	r0, r2
    obs[i].sensor[s].inuse = false;
 23e97d6:	461a      	mov	r2, r3
  for (int s=0; s<MAX_SENSORS; s++) {
 23e97d8:	3301      	adds	r3, #1
 23e97da:	2b60      	cmp	r3, #96	; 0x60
    obs[i].sensor[s].inuse = false;
 23e97dc:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  for (int s=0; s<MAX_SENSORS; s++) {
 23e97e0:	f100 001c 	add.w	r0, r0, #28
 23e97e4:	d1f8      	bne.n	23e97d8 <_Z9OBS_Cleari+0x10>
  }
}
 23e97e6:	4770      	bx	lr
 23e97e8:	1006f550 	.word	0x1006f550

023e97ec <_Z11OBS_N2S_Addi>:
/*
 * ======================================================================================================================
 * OBS_N2S_Add() - Save OBS to N2S file
 * ======================================================================================================================
 */
void OBS_N2S_Add(int i) {
 23e97ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23e97f0:	f640 2598 	movw	r5, #2712	; 0xa98
 23e97f4:	4345      	muls	r5, r0
 23e97f6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 23e9990 <_Z11OBS_N2S_Addi+0x1a4>
void OBS_N2S_Add(int i) {
 23e97fa:	4607      	mov	r7, r0
  if (obs[i].inuse) {     // Sanity check
 23e97fc:	f819 3005 	ldrb.w	r3, [r9, r5]
void OBS_N2S_Add(int i) {
 23e9800:	b097      	sub	sp, #92	; 0x5c
  if (obs[i].inuse) {     // Sanity check
 23e9802:	eb09 0405 	add.w	r4, r9, r5
 23e9806:	2b00      	cmp	r3, #0
 23e9808:	f000 809a 	beq.w	23e9940 <_Z11OBS_N2S_Addi+0x154>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23e980c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 23e9980 <_Z11OBS_N2S_Addi+0x194>
 23e9810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e9814:	2100      	movs	r1, #0
 23e9816:	4640      	mov	r0, r8
 23e9818:	f013 f945 	bl	23fcaa6 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23e981c:	4b53      	ldr	r3, [pc, #332]	; (23e996c <_Z11OBS_N2S_Addi+0x180>)
        state_(BEGIN) {
 23e981e:	2600      	movs	r6, #0
        n_(0) {
 23e9820:	9309      	str	r3, [sp, #36]	; 0x24
 23e9822:	f240 33ff 	movw	r3, #1023	; 0x3ff

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23e9826:	a809      	add	r0, sp, #36	; 0x24
 23e9828:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
        state_(BEGIN) {
 23e982c:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
        n_(0) {
 23e9830:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 23e9834:	f00f f95d 	bl	23f8af2 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23e9838:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e983c:	f00f ff20 	bl	23f9680 <_ZN9TimeClass4yearEx>
 23e9840:	9007      	str	r0, [sp, #28]
 23e9842:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e9846:	f00f ff11 	bl	23f966c <_ZN9TimeClass5monthEx>
 23e984a:	9006      	str	r0, [sp, #24]
 23e984c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e9850:	f00f ff04 	bl	23f965c <_ZN9TimeClass3dayEx>
 23e9854:	9005      	str	r0, [sp, #20]
 23e9856:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e985a:	f00f fee7 	bl	23f962c <_ZN9TimeClass4hourEx>
 23e985e:	4682      	mov	sl, r0
 23e9860:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e9864:	f00f feea 	bl	23f963c <_ZN9TimeClass6minuteEx>
 23e9868:	4683      	mov	fp, r0
 23e986a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e986e:	f00f feed 	bl	23f964c <_ZN9TimeClass6secondEx>
 23e9872:	9b05      	ldr	r3, [sp, #20]
 23e9874:	e9cd b002 	strd	fp, r0, [sp, #8]
 23e9878:	493d      	ldr	r1, [pc, #244]	; (23e9970 <_Z11OBS_N2S_Addi+0x184>)
 23e987a:	f8cd a004 	str.w	sl, [sp, #4]
 23e987e:	9300      	str	r3, [sp, #0]
 23e9880:	a80e      	add	r0, sp, #56	; 0x38
 23e9882:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23e9886:	f00e f91d 	bl	23f7ac4 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23e988a:	493a      	ldr	r1, [pc, #232]	; (23e9974 <_Z11OBS_N2S_Addi+0x188>)
 23e988c:	a809      	add	r0, sp, #36	; 0x24
 23e988e:	f7fc fb19 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e9892:	a90e      	add	r1, sp, #56	; 0x38
 23e9894:	f7fc fa50 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23e9898:	4937      	ldr	r1, [pc, #220]	; (23e9978 <_Z11OBS_N2S_Addi+0x18c>)
 23e989a:	a809      	add	r0, sp, #36	; 0x24
 23e989c:	f7fc fb12 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e98a0:	4682      	mov	sl, r0
 23e98a2:	6920      	ldr	r0, [r4, #16]
 23e98a4:	f7fa fdf4 	bl	23e4490 <__aeabi_f2d>
 23e98a8:	ec41 0b10 	vmov	d0, r0, r1
 23e98ac:	2104      	movs	r1, #4
 23e98ae:	4650      	mov	r0, sl
 23e98b0:	f00f f976 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>

    // Modify System Status and Set From Need to Send file bit
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23e98b4:	6963      	ldr	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23e98b6:	4931      	ldr	r1, [pc, #196]	; (23e997c <_Z11OBS_N2S_Addi+0x190>)
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23e98b8:	f043 0320 	orr.w	r3, r3, #32
 23e98bc:	6163      	str	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23e98be:	a809      	add	r0, sp, #36	; 0x24
 23e98c0:	f7fc fb00 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e98c4:	6961      	ldr	r1, [r4, #20]
 23e98c6:	f00f f921 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23e98ca:	3518      	adds	r5, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23e98cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 23e9994 <_Z11OBS_N2S_Addi+0x1a8>
 23e98d0:	44a9      	add	r9, r5
      if (obs[i].sensor[s].inuse) {
 23e98d2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23e98d6:	b1a3      	cbz	r3, 23e9902 <_Z11OBS_N2S_Addi+0x116>
        switch (obs[i].sensor[s].type) {
 23e98d8:	6a23      	ldr	r3, [r4, #32]
 23e98da:	2b01      	cmp	r3, #1
 23e98dc:	d033      	beq.n	23e9946 <_Z11OBS_N2S_Addi+0x15a>
 23e98de:	2b02      	cmp	r3, #2
 23e98e0:	d039      	beq.n	23e9956 <_Z11OBS_N2S_Addi+0x16a>
 23e98e2:	2b00      	cmp	r3, #0
 23e98e4:	d13d      	bne.n	23e9962 <_Z11OBS_N2S_Addi+0x176>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23e98e6:	4649      	mov	r1, r9
 23e98e8:	a809      	add	r0, sp, #36	; 0x24
 23e98ea:	f7fc faeb 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e98ee:	4605      	mov	r5, r0
 23e98f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23e98f2:	f7fa fdcd 	bl	23e4490 <__aeabi_f2d>
 23e98f6:	ec41 0b10 	vmov	d0, r0, r1
 23e98fa:	2101      	movs	r1, #1
 23e98fc:	4628      	mov	r0, r5
 23e98fe:	f00f f94f 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23e9902:	3601      	adds	r6, #1
 23e9904:	2e60      	cmp	r6, #96	; 0x60
 23e9906:	f104 041c 	add.w	r4, r4, #28
 23e990a:	f109 091c 	add.w	r9, r9, #28
 23e990e:	d1e0      	bne.n	23e98d2 <_Z11OBS_N2S_Addi+0xe6>
            break;
        }
      }
    }
    writer.endObject();
 23e9910:	a809      	add	r0, sp, #36	; 0x24
 23e9912:	f00f f8d8 	bl	23f8ac6 <_ZN5spark10JSONWriter9endObjectEv>

    sprintf (msgbuf+strlen(msgbuf), ",FS");  // Add Particle Event Type after JSON structure
 23e9916:	481a      	ldr	r0, [pc, #104]	; (23e9980 <_Z11OBS_N2S_Addi+0x194>)
 23e9918:	f7fb fc52 	bl	23e51c0 <strlen>
 23e991c:	4919      	ldr	r1, [pc, #100]	; (23e9984 <_Z11OBS_N2S_Addi+0x198>)
 23e991e:	4440      	add	r0, r8
 23e9920:	f013 f936 	bl	23fcb90 <strcpy>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e9924:	4816      	ldr	r0, [pc, #88]	; (23e9980 <_Z11OBS_N2S_Addi+0x194>)
 23e9926:	f7ff fd25 	bl	23e9374 <_Z17SD_NeedToSend_AddPc>
    sprintf (Buffer32Bytes, "OBS->%d Add N2S", i);
 23e992a:	463a      	mov	r2, r7
 23e992c:	4916      	ldr	r1, [pc, #88]	; (23e9988 <_Z11OBS_N2S_Addi+0x19c>)
 23e992e:	4817      	ldr	r0, [pc, #92]	; (23e998c <_Z11OBS_N2S_Addi+0x1a0>)
 23e9930:	f00e f8c8 	bl	23f7ac4 <sprintf>
    Output(Buffer32Bytes);
 23e9934:	4815      	ldr	r0, [pc, #84]	; (23e998c <_Z11OBS_N2S_Addi+0x1a0>)
 23e9936:	f7fc fd99 	bl	23e646c <_Z6OutputPKc>
    Serial_write (msgbuf);
 23e993a:	4811      	ldr	r0, [pc, #68]	; (23e9980 <_Z11OBS_N2S_Addi+0x194>)
 23e993c:	f7fc fd6c 	bl	23e6418 <_Z12Serial_writePKc>
  }
}
 23e9940:	b017      	add	sp, #92	; 0x5c
 23e9942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23e9946:	4649      	mov	r1, r9
 23e9948:	a809      	add	r0, sp, #36	; 0x24
 23e994a:	f7fc fabb 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e994e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e9950:	f00f f8dc 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>
            break;
 23e9954:	e7d5      	b.n	23e9902 <_Z11OBS_N2S_Addi+0x116>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e9956:	4649      	mov	r1, r9
 23e9958:	a809      	add	r0, sp, #36	; 0x24
 23e995a:	f7fc fab3 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e995e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 23e9960:	e7f6      	b.n	23e9950 <_Z11OBS_N2S_Addi+0x164>
            Output ("WhyAmIHere?");
 23e9962:	4650      	mov	r0, sl
 23e9964:	f7fc fd82 	bl	23e646c <_Z6OutputPKc>
            break;
 23e9968:	e7cb      	b.n	23e9902 <_Z11OBS_N2S_Addi+0x116>
 23e996a:	bf00      	nop
 23e996c:	023ff9e8 	.word	0x023ff9e8
 23e9970:	023fd213 	.word	0x023fd213
 23e9974:	023fdb5e 	.word	0x023fdb5e
 23e9978:	023fdb61 	.word	0x023fdb61
 23e997c:	023fdb65 	.word	0x023fdb65
 23e9980:	1006f128 	.word	0x1006f128
 23e9984:	023fdb75 	.word	0x023fdb75
 23e9988:	023fdb79 	.word	0x023fdb79
 23e998c:	1006a287 	.word	0x1006a287
 23e9990:	1006f550 	.word	0x1006f550
 23e9994:	023fdb69 	.word	0x023fdb69

023e9998 <_Z17OBS_FS_Build_JSONi>:
/*
 * ======================================================================================================================
 * OBS_FS_Build_JSON() - Create JSON observation in msgbuf
 * ======================================================================================================================
 */
bool OBS_FS_Build_JSON(int i) {
 23e9998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23e999c:	f640 2498 	movw	r4, #2712	; 0xa98
 23e99a0:	4344      	muls	r4, r0
 23e99a2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 23e9af0 <_Z17OBS_FS_Build_JSONi+0x158>
bool OBS_FS_Build_JSON(int i) {
 23e99a6:	b095      	sub	sp, #84	; 0x54
  if (obs[i].inuse) {     // Sanity check
 23e99a8:	f818 7004 	ldrb.w	r7, [r8, r4]
 23e99ac:	eb08 0504 	add.w	r5, r8, r4
 23e99b0:	2f00      	cmp	r7, #0
 23e99b2:	d07b      	beq.n	23e9aac <_Z17OBS_FS_Build_JSONi+0x114>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23e99b4:	4b48      	ldr	r3, [pc, #288]	; (23e9ad8 <_Z17OBS_FS_Build_JSONi+0x140>)
 23e99b6:	2100      	movs	r1, #0
 23e99b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e99bc:	4618      	mov	r0, r3
 23e99be:	f013 f872 	bl	23fcaa6 <memset>
        state_(BEGIN) {
 23e99c2:	2600      	movs	r6, #0
        n_(0) {
 23e99c4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23e99c8:	4a44      	ldr	r2, [pc, #272]	; (23e9adc <_Z17OBS_FS_Build_JSONi+0x144>)
 23e99ca:	9009      	str	r0, [sp, #36]	; 0x24

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23e99cc:	a807      	add	r0, sp, #28
 23e99ce:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
 23e99d2:	9207      	str	r2, [sp, #28]
        state_(BEGIN) {
 23e99d4:	f88d 6020 	strb.w	r6, [sp, #32]
 23e99d8:	f00f f88b 	bl	23f8af2 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23e99dc:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e99e0:	f00f fe4e 	bl	23f9680 <_ZN9TimeClass4yearEx>
 23e99e4:	9005      	str	r0, [sp, #20]
 23e99e6:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e99ea:	f00f fe3f 	bl	23f966c <_ZN9TimeClass5monthEx>
 23e99ee:	9004      	str	r0, [sp, #16]
 23e99f0:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e99f4:	f00f fe32 	bl	23f965c <_ZN9TimeClass3dayEx>
 23e99f8:	4681      	mov	r9, r0
 23e99fa:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e99fe:	f00f fe15 	bl	23f962c <_ZN9TimeClass4hourEx>
 23e9a02:	4682      	mov	sl, r0
 23e9a04:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e9a08:	f00f fe18 	bl	23f963c <_ZN9TimeClass6minuteEx>
 23e9a0c:	4683      	mov	fp, r0
 23e9a0e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e9a12:	f00f fe1b 	bl	23f964c <_ZN9TimeClass6secondEx>
 23e9a16:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e9a1a:	e9cd b002 	strd	fp, r0, [sp, #8]
 23e9a1e:	e9cd 9a00 	strd	r9, sl, [sp]
 23e9a22:	492f      	ldr	r1, [pc, #188]	; (23e9ae0 <_Z17OBS_FS_Build_JSONi+0x148>)
 23e9a24:	a80c      	add	r0, sp, #48	; 0x30
 23e9a26:	f00e f84d 	bl	23f7ac4 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23e9a2a:	492e      	ldr	r1, [pc, #184]	; (23e9ae4 <_Z17OBS_FS_Build_JSONi+0x14c>)
 23e9a2c:	a807      	add	r0, sp, #28
 23e9a2e:	f7fc fa49 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e9a32:	a90c      	add	r1, sp, #48	; 0x30
 23e9a34:	f7fc f980 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23e9a38:	492b      	ldr	r1, [pc, #172]	; (23e9ae8 <_Z17OBS_FS_Build_JSONi+0x150>)
 23e9a3a:	a807      	add	r0, sp, #28
 23e9a3c:	f7fc fa42 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e9a40:	4681      	mov	r9, r0
 23e9a42:	6928      	ldr	r0, [r5, #16]
 23e9a44:	f7fa fd24 	bl	23e4490 <__aeabi_f2d>
 23e9a48:	ec41 0b10 	vmov	d0, r0, r1
 23e9a4c:	2104      	movs	r1, #4
 23e9a4e:	4648      	mov	r0, r9
 23e9a50:	f00f f8a6 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("hth").value((int) obs[i].hth);
 23e9a54:	4925      	ldr	r1, [pc, #148]	; (23e9aec <_Z17OBS_FS_Build_JSONi+0x154>)
 23e9a56:	a807      	add	r0, sp, #28
 23e9a58:	f7fc fa34 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e9a5c:	6969      	ldr	r1, [r5, #20]
 23e9a5e:	f00f f855 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23e9a62:	3418      	adds	r4, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23e9a64:	f8df 908c 	ldr.w	r9, [pc, #140]	; 23e9af4 <_Z17OBS_FS_Build_JSONi+0x15c>
 23e9a68:	4444      	add	r4, r8
      if (obs[i].sensor[s].inuse) {
 23e9a6a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23e9a6e:	b19b      	cbz	r3, 23e9a98 <_Z17OBS_FS_Build_JSONi+0x100>
        switch (obs[i].sensor[s].type) {
 23e9a70:	6a2b      	ldr	r3, [r5, #32]
 23e9a72:	2b01      	cmp	r3, #1
 23e9a74:	d01e      	beq.n	23e9ab4 <_Z17OBS_FS_Build_JSONi+0x11c>
 23e9a76:	2b02      	cmp	r3, #2
 23e9a78:	d024      	beq.n	23e9ac4 <_Z17OBS_FS_Build_JSONi+0x12c>
 23e9a7a:	bb4b      	cbnz	r3, 23e9ad0 <_Z17OBS_FS_Build_JSONi+0x138>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23e9a7c:	4621      	mov	r1, r4
 23e9a7e:	a807      	add	r0, sp, #28
 23e9a80:	f7fc fa20 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e9a84:	4680      	mov	r8, r0
 23e9a86:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23e9a88:	f7fa fd02 	bl	23e4490 <__aeabi_f2d>
 23e9a8c:	ec41 0b10 	vmov	d0, r0, r1
 23e9a90:	2101      	movs	r1, #1
 23e9a92:	4640      	mov	r0, r8
 23e9a94:	f00f f884 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23e9a98:	3601      	adds	r6, #1
 23e9a9a:	2e60      	cmp	r6, #96	; 0x60
 23e9a9c:	f105 051c 	add.w	r5, r5, #28
 23e9aa0:	f104 041c 	add.w	r4, r4, #28
 23e9aa4:	d1e1      	bne.n	23e9a6a <_Z17OBS_FS_Build_JSONi+0xd2>
            break;
        }
      }
    }
    writer.endObject();
 23e9aa6:	a807      	add	r0, sp, #28
 23e9aa8:	f00f f80d 	bl	23f8ac6 <_ZN5spark10JSONWriter9endObjectEv>
    return (true);
  }
  else {
    return (false);
  }
}
 23e9aac:	4638      	mov	r0, r7
 23e9aae:	b015      	add	sp, #84	; 0x54
 23e9ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23e9ab4:	4621      	mov	r1, r4
 23e9ab6:	a807      	add	r0, sp, #28
 23e9ab8:	f7fc fa04 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e9abc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e9abe:	f00f f825 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>
            break;
 23e9ac2:	e7e9      	b.n	23e9a98 <_Z17OBS_FS_Build_JSONi+0x100>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e9ac4:	4621      	mov	r1, r4
 23e9ac6:	a807      	add	r0, sp, #28
 23e9ac8:	f7fc f9fc 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23e9acc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 23e9ace:	e7f6      	b.n	23e9abe <_Z17OBS_FS_Build_JSONi+0x126>
            Output ("WhyAmIHere?");
 23e9ad0:	4648      	mov	r0, r9
 23e9ad2:	f7fc fccb 	bl	23e646c <_Z6OutputPKc>
            break;
 23e9ad6:	e7df      	b.n	23e9a98 <_Z17OBS_FS_Build_JSONi+0x100>
 23e9ad8:	1006f128 	.word	0x1006f128
 23e9adc:	023ff9e8 	.word	0x023ff9e8
 23e9ae0:	023fd213 	.word	0x023fd213
 23e9ae4:	023fdb5e 	.word	0x023fdb5e
 23e9ae8:	023fdb61 	.word	0x023fdb61
 23e9aec:	023fdb65 	.word	0x023fdb65
 23e9af0:	1006f550 	.word	0x1006f550
 23e9af4:	023fdb69 	.word	0x023fdb69

023e9af8 <_Z20OBS_Relay_Build_JSONv>:
 */
int OBS_Relay_Build_JSON() {
  LORA_MSG_RELAY_STR *m;
  int relay_type = 0;

  memset(msgbuf, 0, sizeof(msgbuf));
 23e9af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e9afc:	2100      	movs	r1, #0
int OBS_Relay_Build_JSON() {
 23e9afe:	b538      	push	{r3, r4, r5, lr}
  memset(msgbuf, 0, sizeof(msgbuf));
 23e9b00:	480c      	ldr	r0, [pc, #48]	; (23e9b34 <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23e9b02:	f012 ffd0 	bl	23fcaa6 <memset>
  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);

  // Locate message we need to log
  int i = lora_relay_need2log_idx();
 23e9b06:	f7fc fe61 	bl	23e67cc <_Z23lora_relay_need2log_idxv>
  if (i >= 0) {
 23e9b0a:	2800      	cmp	r0, #0
 23e9b0c:	db10      	blt.n	23e9b30 <_Z20OBS_Relay_Build_JSONv+0x38>
    m = &lora_msg_relay[i];
 23e9b0e:	f44f 7484 	mov.w	r4, #264	; 0x108
 23e9b12:	4344      	muls	r4, r0
    strncpy (msgbuf, m->message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e9b14:	4d08      	ldr	r5, [pc, #32]	; (23e9b38 <_Z20OBS_Relay_Build_JSONv+0x40>)
 23e9b16:	f104 0108 	add.w	r1, r4, #8
 23e9b1a:	22ff      	movs	r2, #255	; 0xff
 23e9b1c:	4805      	ldr	r0, [pc, #20]	; (23e9b34 <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23e9b1e:	4429      	add	r1, r5
 23e9b20:	f013 f86f 	bl	23fcc02 <strncpy>
    relay_type = m->message_type;
 23e9b24:	1928      	adds	r0, r5, r4
 23e9b26:	6844      	ldr	r4, [r0, #4]
    lora_relay_msg_free(m);
 23e9b28:	f7fc fe2a 	bl	23e6780 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
  }
  return (relay_type);
}
 23e9b2c:	4620      	mov	r0, r4
 23e9b2e:	bd38      	pop	{r3, r4, r5, pc}
  int relay_type = 0;
 23e9b30:	2400      	movs	r4, #0
  return (relay_type);
 23e9b32:	e7fb      	b.n	23e9b2c <_Z20OBS_Relay_Build_JSONv+0x34>
 23e9b34:	1006f128 	.word	0x1006f128
 23e9b38:	1006aec0 	.word	0x1006aec0

023e9b3c <_Z7OBS_Logi>:
/*
 * ======================================================================================================================
 * OBS_Log() - Save OBS to Log file
 * ======================================================================================================================
 */
void OBS_Log(int i) {
 23e9b3c:	b507      	push	{r0, r1, r2, lr}
 23e9b3e:	9001      	str	r0, [sp, #4]
  if (OBS_FS_Build_JSON(i)) {
 23e9b40:	f7ff ff2a 	bl	23e9998 <_Z17OBS_FS_Build_JSONi>
 23e9b44:	9a01      	ldr	r2, [sp, #4]
 23e9b46:	b178      	cbz	r0, 23e9b68 <_Z7OBS_Logi+0x2c>
    sprintf (Buffer32Bytes, "OBS[%d]->SD", i);
 23e9b48:	4909      	ldr	r1, [pc, #36]	; (23e9b70 <_Z7OBS_Logi+0x34>)
 23e9b4a:	480a      	ldr	r0, [pc, #40]	; (23e9b74 <_Z7OBS_Logi+0x38>)
 23e9b4c:	f00d ffba 	bl	23f7ac4 <sprintf>
    Output(Buffer32Bytes);
 23e9b50:	4808      	ldr	r0, [pc, #32]	; (23e9b74 <_Z7OBS_Logi+0x38>)
 23e9b52:	f7fc fc8b 	bl	23e646c <_Z6OutputPKc>
    Serial_write (msgbuf);
 23e9b56:	4808      	ldr	r0, [pc, #32]	; (23e9b78 <_Z7OBS_Logi+0x3c>)
 23e9b58:	f7fc fc5e 	bl	23e6418 <_Z12Serial_writePKc>

    SD_LogObservation(msgbuf);
 23e9b5c:	4806      	ldr	r0, [pc, #24]	; (23e9b78 <_Z7OBS_Logi+0x3c>)
  }
}
 23e9b5e:	b003      	add	sp, #12
 23e9b60:	f85d eb04 	ldr.w	lr, [sp], #4
    SD_LogObservation(msgbuf);
 23e9b64:	f7ff bb68 	b.w	23e9238 <_Z17SD_LogObservationPc>
}
 23e9b68:	b003      	add	sp, #12
 23e9b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 23e9b6e:	bf00      	nop
 23e9b70:	023fdb89 	.word	0x023fdb89
 23e9b74:	1006a287 	.word	0x1006a287
 23e9b78:	1006f128 	.word	0x1006f128

023e9b7c <_Z15OBS_N2S_SaveAllv>:
/*
 * ======================================================================================================================
 * OBS_N2S_SaveAll() - Save All N Observations to Need2Send File
 * ======================================================================================================================
 */
void OBS_N2S_SaveAll() {
 23e9b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int relay_type;

  // Save All Station Observations to N2S file
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e9b7e:	2400      	movs	r4, #0
    OBS_N2S_Add (i);
 23e9b80:	4620      	mov	r0, r4
 23e9b82:	f7ff fe33 	bl	23e97ec <_Z11OBS_N2S_Addi>
    OBS_Clear(i);
 23e9b86:	4620      	mov	r0, r4
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e9b88:	3401      	adds	r4, #1
    OBS_Clear(i);
 23e9b8a:	f7ff fe1d 	bl	23e97c8 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e9b8e:	2c11      	cmp	r4, #17
 23e9b90:	d1f6      	bne.n	23e9b80 <_Z15OBS_N2S_SaveAllv+0x4>
  }

  // Save All Rain and Soil LoRa Observations to N2S file
  while (lora_relay_need2log()) {
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23e9b92:	4d0e      	ldr	r5, [pc, #56]	; (23e9bcc <_Z15OBS_N2S_SaveAllv+0x50>)
 23e9b94:	4f0e      	ldr	r7, [pc, #56]	; (23e9bd0 <_Z15OBS_N2S_SaveAllv+0x54>)
 23e9b96:	4e0f      	ldr	r6, [pc, #60]	; (23e9bd4 <_Z15OBS_N2S_SaveAllv+0x58>)
  while (lora_relay_need2log()) {
 23e9b98:	f7fc fdfa 	bl	23e6790 <_Z19lora_relay_need2logv>
 23e9b9c:	b1a8      	cbz	r0, 23e9bca <_Z15OBS_N2S_SaveAllv+0x4e>
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23e9b9e:	f7ff ffab 	bl	23e9af8 <_Z20OBS_Relay_Build_JSONv>
 23e9ba2:	4604      	mov	r4, r0
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23e9ba4:	4809      	ldr	r0, [pc, #36]	; (23e9bcc <_Z15OBS_N2S_SaveAllv+0x50>)
 23e9ba6:	f7fb fb0b 	bl	23e51c0 <strlen>
 23e9baa:	4631      	mov	r1, r6
 23e9bac:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 23e9bb0:	4428      	add	r0, r5
 23e9bb2:	f00d ff87 	bl	23f7ac4 <sprintf>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e9bb6:	4805      	ldr	r0, [pc, #20]	; (23e9bcc <_Z15OBS_N2S_SaveAllv+0x50>)
 23e9bb8:	f7ff fbdc 	bl	23e9374 <_Z17SD_NeedToSend_AddPc>
    Output("LR->N2S");
 23e9bbc:	4806      	ldr	r0, [pc, #24]	; (23e9bd8 <_Z15OBS_N2S_SaveAllv+0x5c>)
 23e9bbe:	f7fc fc55 	bl	23e646c <_Z6OutputPKc>
    Serial_write (msgbuf); 
 23e9bc2:	4802      	ldr	r0, [pc, #8]	; (23e9bcc <_Z15OBS_N2S_SaveAllv+0x50>)
 23e9bc4:	f7fc fc28 	bl	23e6418 <_Z12Serial_writePKc>
  while (lora_relay_need2log()) {
 23e9bc8:	e7e6      	b.n	23e9b98 <_Z15OBS_N2S_SaveAllv+0x1c>
  }
}
 23e9bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e9bcc:	1006f128 	.word	0x1006f128
 23e9bd0:	1006a1b0 	.word	0x1006a1b0
 23e9bd4:	023fdb95 	.word	0x023fdb95
 23e9bd8:	023fdb9a 	.word	0x023fdb9a

023e9bdc <_Z8OBS_Lastv>:
 * OBS_Last() - Find Last OBS and return index or -1 if empty
 * ======================================================================================================================
 */
int OBS_Last() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e9bdc:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23e9bde:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9be2:	4a06      	ldr	r2, [pc, #24]	; (23e9bfc <_Z8OBS_Lastv+0x20>)
 23e9be4:	fb03 f100 	mul.w	r1, r3, r0
 23e9be8:	5c89      	ldrb	r1, [r1, r2]
 23e9bea:	b909      	cbnz	r1, 23e9bf0 <_Z8OBS_Lastv+0x14>
      if (i == 0) {
        return (-1);
      }
      else {
        return (i-1);
 23e9bec:	3801      	subs	r0, #1
 23e9bee:	4770      	bx	lr
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e9bf0:	3001      	adds	r0, #1
 23e9bf2:	2811      	cmp	r0, #17
 23e9bf4:	d1f6      	bne.n	23e9be4 <_Z8OBS_Lastv+0x8>
      }
    }
  }
  // Arrary full, Never found an empty, return last in Array
  return (MAX_ONE_MINUTE_OBS-1);
 23e9bf6:	2010      	movs	r0, #16
}
 23e9bf8:	4770      	bx	lr
 23e9bfa:	bf00      	nop
 23e9bfc:	1006f550 	.word	0x1006f550

023e9c00 <_Z8OBS_Fullv>:
 * OBS_Full() - Return true if there are open spots
 * ======================================================================================================================
 */
bool OBS_Full() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e9c00:	2300      	movs	r3, #0
    if (obs[i].inuse == false) {
 23e9c02:	f640 2298 	movw	r2, #2712	; 0xa98
 23e9c06:	4904      	ldr	r1, [pc, #16]	; (23e9c18 <_Z8OBS_Fullv+0x18>)
 23e9c08:	fb02 f003 	mul.w	r0, r2, r3
 23e9c0c:	5c40      	ldrb	r0, [r0, r1]
 23e9c0e:	b110      	cbz	r0, 23e9c16 <_Z8OBS_Fullv+0x16>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e9c10:	3301      	adds	r3, #1
 23e9c12:	2b11      	cmp	r3, #17
 23e9c14:	d1f8      	bne.n	23e9c08 <_Z8OBS_Fullv+0x8>
      return (false);
    }
  }
  return (true);
}
 23e9c16:	4770      	bx	lr
 23e9c18:	1006f550 	.word	0x1006f550

023e9c1c <_Z8OBS_Openv>:
/*
 * ======================================================================================================================
 * OBS_Open() - Find a free OBS and return index
 * ======================================================================================================================
 */
int OBS_Open() {
 23e9c1c:	b508      	push	{r3, lr}
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e9c1e:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23e9c20:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9c24:	4a07      	ldr	r2, [pc, #28]	; (23e9c44 <_Z8OBS_Openv+0x28>)
 23e9c26:	fb03 f100 	mul.w	r1, r3, r0
 23e9c2a:	5c89      	ldrb	r1, [r1, r2]
 23e9c2c:	b141      	cbz	r1, 23e9c40 <_Z8OBS_Openv+0x24>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e9c2e:	3001      	adds	r0, #1
 23e9c30:	2811      	cmp	r0, #17
 23e9c32:	d1f8      	bne.n	23e9c26 <_Z8OBS_Openv+0xa>
      return (i);
    }
  }

  // All Observations are inuse
  Output ("OBS[ALL]->N2S");
 23e9c34:	4804      	ldr	r0, [pc, #16]	; (23e9c48 <_Z8OBS_Openv+0x2c>)
 23e9c36:	f7fc fc19 	bl	23e646c <_Z6OutputPKc>

  // Save All N Observations to Need2Send File
  OBS_N2S_SaveAll();
 23e9c3a:	f7ff ff9f 	bl	23e9b7c <_Z15OBS_N2S_SaveAllv>
 23e9c3e:	2000      	movs	r0, #0

  // All OBS are Clear so return the first OBS 
  return (0);
}
 23e9c40:	bd08      	pop	{r3, pc}
 23e9c42:	bf00      	nop
 23e9c44:	1006f550 	.word	0x1006f550
 23e9c48:	023fdba2 	.word	0x023fdba2

023e9c4c <_Z10GetPinNametPc>:
void GetPinName(pin_t pin, char *pinname) {
 23e9c4c:	b530      	push	{r4, r5, lr}
 23e9c4e:	b0b1      	sub	sp, #196	; 0xc4
 23e9c50:	4605      	mov	r5, r0
 23e9c52:	460c      	mov	r4, r1
  const PinMap pinTable[] = {
 23e9c54:	22c0      	movs	r2, #192	; 0xc0
 23e9c56:	4668      	mov	r0, sp
 23e9c58:	490b      	ldr	r1, [pc, #44]	; (23e9c88 <_Z10GetPinNametPc+0x3c>)
 23e9c5a:	f012 ff17 	bl	23fca8c <memcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23e9c5e:	2300      	movs	r3, #0
      if (pin == pinTable[i].pin) {
 23e9c60:	f83d 2033 	ldrh.w	r2, [sp, r3, lsl #3]
 23e9c64:	42aa      	cmp	r2, r5
 23e9c66:	d10a      	bne.n	23e9c7e <_Z10GetPinNametPc+0x32>
          strcpy(pinname, pinTable[i].name);
 23e9c68:	aa30      	add	r2, sp, #192	; 0xc0
 23e9c6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23e9c6e:	f853 1cbc 	ldr.w	r1, [r3, #-188]
  strcpy(pinname, "NF");
 23e9c72:	4620      	mov	r0, r4
}
 23e9c74:	b031      	add	sp, #196	; 0xc4
 23e9c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  strcpy(pinname, "NF");
 23e9c7a:	f012 bf89 	b.w	23fcb90 <strcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23e9c7e:	3301      	adds	r3, #1
 23e9c80:	2b18      	cmp	r3, #24
 23e9c82:	d1ed      	bne.n	23e9c60 <_Z10GetPinNametPc+0x14>
  strcpy(pinname, "NF");
 23e9c84:	4901      	ldr	r1, [pc, #4]	; (23e9c8c <_Z10GetPinNametPc+0x40>)
 23e9c86:	e7f4      	b.n	23e9c72 <_Z10GetPinNametPc+0x26>
 23e9c88:	023fcde4 	.word	0x023fcde4
 23e9c8c:	023fd5fc 	.word	0x023fd5fc

023e9c90 <_Z17OutputResetReasonv>:
void OutputResetReason() {
 23e9c90:	b570      	push	{r4, r5, r6, lr}
        int reason = RESET_REASON_NONE;
 23e9c92:	2400      	movs	r4, #0
 23e9c94:	b0a2      	sub	sp, #136	; 0x88
  const ResetReasonEntry resetReasonTable[] = {
 23e9c96:	ae04      	add	r6, sp, #16
 23e9c98:	2278      	movs	r2, #120	; 0x78
 23e9c9a:	4916      	ldr	r1, [pc, #88]	; (23e9cf4 <_Z17OutputResetReasonv+0x64>)
 23e9c9c:	4630      	mov	r0, r6
 23e9c9e:	f012 fef5 	bl	23fca8c <memcpy>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23e9ca2:	4622      	mov	r2, r4
 23e9ca4:	4621      	mov	r1, r4
 23e9ca6:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 23e9ca8:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23e9caa:	f00d f8b3 	bl	23f6e14 <HAL_Core_Get_Last_Reset_Info>
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23e9cae:	4622      	mov	r2, r4
 23e9cb0:	4620      	mov	r0, r4
 23e9cb2:	a903      	add	r1, sp, #12
        return reason;
 23e9cb4:	9d03      	ldr	r5, [sp, #12]
        uint32_t data = 0;
 23e9cb6:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23e9cb8:	f00d f8ac 	bl	23f6e14 <HAL_Core_Get_Last_Reset_Info>
        return data;
 23e9cbc:	9b03      	ldr	r3, [sp, #12]
    if (resetReasonTable[i].code == resetReason) {
 23e9cbe:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
 23e9cc2:	42aa      	cmp	r2, r5
 23e9cc4:	d110      	bne.n	23e9ce8 <_Z17OutputResetReasonv+0x58>
        reasonText = resetReasonTable[i].description;
 23e9cc6:	aa22      	add	r2, sp, #136	; 0x88
 23e9cc8:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 23e9ccc:	f854 2c74 	ldr.w	r2, [r4, #-116]
  sprintf(msgbuf, "RR:%s (%d,%lu)", reasonText, resetReason, resetData);
 23e9cd0:	9300      	str	r3, [sp, #0]
 23e9cd2:	4909      	ldr	r1, [pc, #36]	; (23e9cf8 <_Z17OutputResetReasonv+0x68>)
 23e9cd4:	462b      	mov	r3, r5
 23e9cd6:	4809      	ldr	r0, [pc, #36]	; (23e9cfc <_Z17OutputResetReasonv+0x6c>)
 23e9cd8:	f00d fef4 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23e9cdc:	4807      	ldr	r0, [pc, #28]	; (23e9cfc <_Z17OutputResetReasonv+0x6c>)
}
 23e9cde:	b022      	add	sp, #136	; 0x88
 23e9ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output(msgbuf);
 23e9ce4:	f7fc bbc2 	b.w	23e646c <_Z6OutputPKc>
  for (unsigned int i = 0; i < sizeof(resetReasonTable) / sizeof(resetReasonTable[0]); i++) {
 23e9ce8:	3401      	adds	r4, #1
 23e9cea:	2c0f      	cmp	r4, #15
 23e9cec:	d1e7      	bne.n	23e9cbe <_Z17OutputResetReasonv+0x2e>
  const char* reasonText = "Unknown Reset Reason";
 23e9cee:	4a04      	ldr	r2, [pc, #16]	; (23e9d00 <_Z17OutputResetReasonv+0x70>)
 23e9cf0:	e7ee      	b.n	23e9cd0 <_Z17OutputResetReasonv+0x40>
 23e9cf2:	bf00      	nop
 23e9cf4:	023fcea4 	.word	0x023fcea4
 23e9cf8:	023fdbb0 	.word	0x023fdbb0
 23e9cfc:	1006f128 	.word	0x1006f128
 23e9d00:	023fcff7 	.word	0x023fcff7

023e9d04 <_Z11DeviceResetv>:
void DeviceReset() {
 23e9d04:	b508      	push	{r3, lr}
  digitalWrite(REBOOT_PIN, HIGH);
 23e9d06:	2101      	movs	r1, #1
 23e9d08:	2013      	movs	r0, #19
 23e9d0a:	f010 f87c 	bl	23f9e06 <digitalWrite>
  delay(5000);
 23e9d0e:	f241 3088 	movw	r0, #5000	; 0x1388
 23e9d12:	f00d ffb7 	bl	23f7c84 <delay>
  digitalWrite(REBOOT_PIN, LOW);
 23e9d16:	2100      	movs	r1, #0
 23e9d18:	2013      	movs	r0, #19
 23e9d1a:	f010 f874 	bl	23f9e06 <digitalWrite>
  delay(2000); 
 23e9d1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e9d22:	f00d ffaf 	bl	23f7c84 <delay>
}
 23e9d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  System.reset();
 23e9d2a:	f00f bc15 	b.w	23f9558 <_ZN11SystemClass5resetEv>
	...

023e9d30 <_Z17Function_DoAction6String>:
int Function_DoAction(String s) {
 23e9d30:	b530      	push	{r4, r5, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23e9d32:	6805      	ldr	r5, [r0, #0]
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23e9d34:	498c      	ldr	r1, [pc, #560]	; (23e9f68 <_Z17Function_DoAction6String+0x238>)
 23e9d36:	4628      	mov	r0, r5
int Function_DoAction(String s) {
 23e9d38:	b095      	sub	sp, #84	; 0x54
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23e9d3a:	f7fb fa37 	bl	23e51ac <strcmp>
 23e9d3e:	4604      	mov	r4, r0
 23e9d40:	b968      	cbnz	r0, 23e9d5e <_Z17Function_DoAction6String+0x2e>
    Output("DoAction:REBOOT");     // Do a SEND before a REBOOT to address the abive issue.
 23e9d42:	488a      	ldr	r0, [pc, #552]	; (23e9f6c <_Z17Function_DoAction6String+0x23c>)
 23e9d44:	f7fc fb92 	bl	23e646c <_Z6OutputPKc>
    EEPROM_SaveUnreportedRain();
 23e9d48:	f7ff f842 	bl	23e8dd0 <_Z25EEPROM_SaveUnreportedRainv>
    delay(1000);
 23e9d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23e9d50:	f00d ff98 	bl	23f7c84 <delay>
    DeviceReset();
 23e9d54:	f7ff ffd6 	bl	23e9d04 <_Z11DeviceResetv>
}
 23e9d58:	4620      	mov	r0, r4
 23e9d5a:	b015      	add	sp, #84	; 0x54
 23e9d5c:	bd30      	pop	{r4, r5, pc}
  else if (strcmp (s,"INFO") == 0) {  // Send System Information
 23e9d5e:	4628      	mov	r0, r5
 23e9d60:	4983      	ldr	r1, [pc, #524]	; (23e9f70 <_Z17Function_DoAction6String+0x240>)
 23e9d62:	f7fb fa23 	bl	23e51ac <strcmp>
 23e9d66:	4604      	mov	r4, r0
 23e9d68:	b930      	cbnz	r0, 23e9d78 <_Z17Function_DoAction6String+0x48>
    Output("DoAction:INFO");
 23e9d6a:	4882      	ldr	r0, [pc, #520]	; (23e9f74 <_Z17Function_DoAction6String+0x244>)
 23e9d6c:	f7fc fb7e 	bl	23e646c <_Z6OutputPKc>
    SendSystemInformation=true;
 23e9d70:	2201      	movs	r2, #1
 23e9d72:	4b81      	ldr	r3, [pc, #516]	; (23e9f78 <_Z17Function_DoAction6String+0x248>)
 23e9d74:	701a      	strb	r2, [r3, #0]
    return(0);  
 23e9d76:	e7ef      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"SEND") == 0) {  // Send OBS Now
 23e9d78:	4628      	mov	r0, r5
 23e9d7a:	4980      	ldr	r1, [pc, #512]	; (23e9f7c <_Z17Function_DoAction6String+0x24c>)
 23e9d7c:	f7fb fa16 	bl	23e51ac <strcmp>
 23e9d80:	4604      	mov	r4, r0
 23e9d82:	b940      	cbnz	r0, 23e9d96 <_Z17Function_DoAction6String+0x66>
    Output("DoAction:SEND");
 23e9d84:	487e      	ldr	r0, [pc, #504]	; (23e9f80 <_Z17Function_DoAction6String+0x250>)
 23e9d86:	f7fc fb71 	bl	23e646c <_Z6OutputPKc>
    LastTransmitTime=0;
 23e9d8a:	2000      	movs	r0, #0
 23e9d8c:	2100      	movs	r1, #0
 23e9d8e:	4b7d      	ldr	r3, [pc, #500]	; (23e9f84 <_Z17Function_DoAction6String+0x254>)
 23e9d90:	e9c3 0100 	strd	r0, r1, [r3]
    return(0);  
 23e9d94:	e7e0      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"CRT") == 0) { // Clear Rain Totals
 23e9d96:	4628      	mov	r0, r5
 23e9d98:	497b      	ldr	r1, [pc, #492]	; (23e9f88 <_Z17Function_DoAction6String+0x258>)
 23e9d9a:	f7fb fa07 	bl	23e51ac <strcmp>
 23e9d9e:	4604      	mov	r4, r0
 23e9da0:	b948      	cbnz	r0, 23e9db6 <_Z17Function_DoAction6String+0x86>
    time32_t current_time = Time.now();
 23e9da2:	f00f fd8e 	bl	23f98c2 <_ZN9TimeClass3nowEv>
 23e9da6:	4605      	mov	r5, r0
    Output("DoAction:CRT");
 23e9da8:	4878      	ldr	r0, [pc, #480]	; (23e9f8c <_Z17Function_DoAction6String+0x25c>)
 23e9daa:	f7fc fb5f 	bl	23e646c <_Z6OutputPKc>
    EEPROM_ClearRainTotals(current_time);
 23e9dae:	4628      	mov	r0, r5
 23e9db0:	f7fe fef6 	bl	23e8ba0 <_Z22EEPROM_ClearRainTotalsl>
    return(0);
 23e9db4:	e7d0      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4DIST") == 0) { // Set A4 State File to Distance
 23e9db6:	4628      	mov	r0, r5
 23e9db8:	4975      	ldr	r1, [pc, #468]	; (23e9f90 <_Z17Function_DoAction6String+0x260>)
 23e9dba:	f7fb f9f7 	bl	23e51ac <strcmp>
 23e9dbe:	4604      	mov	r4, r0
 23e9dc0:	2800      	cmp	r0, #0
 23e9dc2:	d158      	bne.n	23e9e76 <_Z17Function_DoAction6String+0x146>
    Output("DoAction:A4DIST");
 23e9dc4:	4873      	ldr	r0, [pc, #460]	; (23e9f94 <_Z17Function_DoAction6String+0x264>)
 23e9dc6:	f7fc fb51 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23e9dca:	4b73      	ldr	r3, [pc, #460]	; (23e9f98 <_Z17Function_DoAction6String+0x268>)
 23e9dcc:	781b      	ldrb	r3, [r3, #0]
 23e9dce:	2b00      	cmp	r3, #0
 23e9dd0:	d04b      	beq.n	23e9e6a <_Z17Function_DoAction6String+0x13a>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e9dd2:	4972      	ldr	r1, [pc, #456]	; (23e9f9c <_Z17Function_DoAction6String+0x26c>)
 23e9dd4:	4872      	ldr	r0, [pc, #456]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9dd6:	f7fc f883 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9dda:	b148      	cbz	r0, 23e9df0 <_Z17Function_DoAction6String+0xc0>
        EEPROM_ClearRain2Totals();
 23e9ddc:	f7fe fef2 	bl	23e8bc4 <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23e9de0:	496e      	ldr	r1, [pc, #440]	; (23e9f9c <_Z17Function_DoAction6String+0x26c>)
 23e9de2:	486f      	ldr	r0, [pc, #444]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9de4:	f7fc f897 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23e9de8:	b1d8      	cbz	r0, 23e9e22 <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23e9dea:	486e      	ldr	r0, [pc, #440]	; (23e9fa4 <_Z17Function_DoAction6String+0x274>)
 23e9dec:	f7fc fb3e 	bl	23e646c <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e9df0:	496d      	ldr	r1, [pc, #436]	; (23e9fa8 <_Z17Function_DoAction6String+0x278>)
 23e9df2:	486b      	ldr	r0, [pc, #428]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9df4:	f7fc f874 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9df8:	b1c8      	cbz	r0, 23e9e2e <_Z17Function_DoAction6String+0xfe>
        Output ("A4=DIST, ALREADY EXISTS");    
 23e9dfa:	486c      	ldr	r0, [pc, #432]	; (23e9fac <_Z17Function_DoAction6String+0x27c>)
          Output ("A4=DIST, SET");
 23e9dfc:	f7fc fb36 	bl	23e646c <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23e9e00:	4b6b      	ldr	r3, [pc, #428]	; (23e9fb0 <_Z17Function_DoAction6String+0x280>)
 23e9e02:	4a6c      	ldr	r2, [pc, #432]	; (23e9fb4 <_Z17Function_DoAction6String+0x284>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9e04:	496c      	ldr	r1, [pc, #432]	; (23e9fb8 <_Z17Function_DoAction6String+0x288>)
 23e9e06:	4866      	ldr	r0, [pc, #408]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
      dg_adjustment = 2.5;
 23e9e08:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9e0a:	f7fc f869 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9e0e:	b350      	cbz	r0, 23e9e66 <_Z17Function_DoAction6String+0x136>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e9e10:	4969      	ldr	r1, [pc, #420]	; (23e9fb8 <_Z17Function_DoAction6String+0x288>)
 23e9e12:	4863      	ldr	r0, [pc, #396]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9e14:	f7fc f87f 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23e9e18:	b1f8      	cbz	r0, 23e9e5a <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK, 10M SET");
 23e9e1a:	4868      	ldr	r0, [pc, #416]	; (23e9fbc <_Z17Function_DoAction6String+0x28c>)
        Output ("TXI15M SET"); 
 23e9e1c:	f7fc fb26 	bl	23e646c <_Z6OutputPKc>
 23e9e20:	e79a      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL RAIN:ERR");
 23e9e22:	4867      	ldr	r0, [pc, #412]	; (23e9fc0 <_Z17Function_DoAction6String+0x290>)
          Output ("A4=RAIN, DEL DIST:ERR");
 23e9e24:	f7fc fb22 	bl	23e646c <_Z6OutputPKc>
          return(-2);
 23e9e28:	f06f 0401 	mvn.w	r4, #1
 23e9e2c:	e794      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_A4_DIST_FILE, FILE_WRITE);
 23e9e2e:	4668      	mov	r0, sp
 23e9e30:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9e34:	4a5c      	ldr	r2, [pc, #368]	; (23e9fa8 <_Z17Function_DoAction6String+0x278>)
 23e9e36:	495a      	ldr	r1, [pc, #360]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9e38:	f00c f9ec 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23e9e3c:	a804      	add	r0, sp, #16
 23e9e3e:	f7fc f8c8 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9e42:	b120      	cbz	r0, 23e9e4e <_Z17Function_DoAction6String+0x11e>
          fp.close();
 23e9e44:	a804      	add	r0, sp, #16
 23e9e46:	f00c f90c 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          Output ("A4=DIST, SET");
 23e9e4a:	485e      	ldr	r0, [pc, #376]	; (23e9fc4 <_Z17Function_DoAction6String+0x294>)
 23e9e4c:	e7d6      	b.n	23e9dfc <_Z17Function_DoAction6String+0xcc>
          Output ("A4=DIST, OPEN ERR");
 23e9e4e:	485e      	ldr	r0, [pc, #376]	; (23e9fc8 <_Z17Function_DoAction6String+0x298>)
          Output ("A4=RAIN, OPEN ERR");
 23e9e50:	f7fc fb0c 	bl	23e646c <_Z6OutputPKc>
          return(-3);
 23e9e54:	f06f 0402 	mvn.w	r4, #2
 23e9e58:	e77e      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL 5M:ERR");
 23e9e5a:	485c      	ldr	r0, [pc, #368]	; (23e9fcc <_Z17Function_DoAction6String+0x29c>)
          Output ("A4=RAIN, DEL 5M:ERR");
 23e9e5c:	f7fc fb06 	bl	23e646c <_Z6OutputPKc>
          return(-4);
 23e9e60:	f06f 0403 	mvn.w	r4, #3
 23e9e64:	e778      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
        Output ("A4=DIST, 10M");
 23e9e66:	485a      	ldr	r0, [pc, #360]	; (23e9fd0 <_Z17Function_DoAction6String+0x2a0>)
 23e9e68:	e7d8      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
      Output("A4=DIST, SD NF"); 
 23e9e6a:	485a      	ldr	r0, [pc, #360]	; (23e9fd4 <_Z17Function_DoAction6String+0x2a4>)
    Output("DoAction:UKN"); 
 23e9e6c:	f7fc fafe 	bl	23e646c <_Z6OutputPKc>
    return(-1);
 23e9e70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23e9e74:	e770      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4RAIN") == 0) { // Set A4 State File to Rain
 23e9e76:	4628      	mov	r0, r5
 23e9e78:	4957      	ldr	r1, [pc, #348]	; (23e9fd8 <_Z17Function_DoAction6String+0x2a8>)
 23e9e7a:	f7fb f997 	bl	23e51ac <strcmp>
 23e9e7e:	4604      	mov	r4, r0
 23e9e80:	2800      	cmp	r0, #0
 23e9e82:	d141      	bne.n	23e9f08 <_Z17Function_DoAction6String+0x1d8>
    Output("DoAction:A4RAIN");
 23e9e84:	4855      	ldr	r0, [pc, #340]	; (23e9fdc <_Z17Function_DoAction6String+0x2ac>)
 23e9e86:	f7fc faf1 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23e9e8a:	4b43      	ldr	r3, [pc, #268]	; (23e9f98 <_Z17Function_DoAction6String+0x268>)
 23e9e8c:	781b      	ldrb	r3, [r3, #0]
 23e9e8e:	2b00      	cmp	r3, #0
 23e9e90:	d038      	beq.n	23e9f04 <_Z17Function_DoAction6String+0x1d4>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e9e92:	4945      	ldr	r1, [pc, #276]	; (23e9fa8 <_Z17Function_DoAction6String+0x278>)
 23e9e94:	4842      	ldr	r0, [pc, #264]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9e96:	f7fc f823 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9e9a:	b138      	cbz	r0, 23e9eac <_Z17Function_DoAction6String+0x17c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23e9e9c:	4942      	ldr	r1, [pc, #264]	; (23e9fa8 <_Z17Function_DoAction6String+0x278>)
 23e9e9e:	4840      	ldr	r0, [pc, #256]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9ea0:	f7fc f839 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23e9ea4:	b1b0      	cbz	r0, 23e9ed4 <_Z17Function_DoAction6String+0x1a4>
          Output ("A4=RAIN, DEL DIST:OK");
 23e9ea6:	484e      	ldr	r0, [pc, #312]	; (23e9fe0 <_Z17Function_DoAction6String+0x2b0>)
 23e9ea8:	f7fc fae0 	bl	23e646c <_Z6OutputPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9eac:	4942      	ldr	r1, [pc, #264]	; (23e9fb8 <_Z17Function_DoAction6String+0x288>)
 23e9eae:	483c      	ldr	r0, [pc, #240]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9eb0:	f7fc f816 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9eb4:	b138      	cbz	r0, 23e9ec6 <_Z17Function_DoAction6String+0x196>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e9eb6:	4940      	ldr	r1, [pc, #256]	; (23e9fb8 <_Z17Function_DoAction6String+0x288>)
 23e9eb8:	4839      	ldr	r0, [pc, #228]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9eba:	f7fc f82c 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23e9ebe:	b158      	cbz	r0, 23e9ed8 <_Z17Function_DoAction6String+0x1a8>
          Output ("A4=RAIN, DEL 5M:OK");
 23e9ec0:	4848      	ldr	r0, [pc, #288]	; (23e9fe4 <_Z17Function_DoAction6String+0x2b4>)
 23e9ec2:	f7fc fad3 	bl	23e646c <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e9ec6:	4935      	ldr	r1, [pc, #212]	; (23e9f9c <_Z17Function_DoAction6String+0x26c>)
 23e9ec8:	4835      	ldr	r0, [pc, #212]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9eca:	f7fc f809 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9ece:	b128      	cbz	r0, 23e9edc <_Z17Function_DoAction6String+0x1ac>
        Output ("A4=RAIN, ALREADY EXISTS");      
 23e9ed0:	4845      	ldr	r0, [pc, #276]	; (23e9fe8 <_Z17Function_DoAction6String+0x2b8>)
 23e9ed2:	e7a3      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, DEL DIST:ERR");
 23e9ed4:	4845      	ldr	r0, [pc, #276]	; (23e9fec <_Z17Function_DoAction6String+0x2bc>)
 23e9ed6:	e7a5      	b.n	23e9e24 <_Z17Function_DoAction6String+0xf4>
          Output ("A4=RAIN, DEL 5M:ERR");
 23e9ed8:	4845      	ldr	r0, [pc, #276]	; (23e9ff0 <_Z17Function_DoAction6String+0x2c0>)
 23e9eda:	e7bf      	b.n	23e9e5c <_Z17Function_DoAction6String+0x12c>
        EEPROM_ClearRain2Totals(); // Just a good thing to do.
 23e9edc:	f7fe fe72 	bl	23e8bc4 <_Z23EEPROM_ClearRain2Totalsv>
        File fp = SD.open(SD_A4_RAIN_FILE, FILE_WRITE);
 23e9ee0:	4668      	mov	r0, sp
 23e9ee2:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9ee6:	4a2d      	ldr	r2, [pc, #180]	; (23e9f9c <_Z17Function_DoAction6String+0x26c>)
 23e9ee8:	492d      	ldr	r1, [pc, #180]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9eea:	f00c f993 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23e9eee:	a804      	add	r0, sp, #16
 23e9ef0:	f7fc f86f 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9ef4:	b120      	cbz	r0, 23e9f00 <_Z17Function_DoAction6String+0x1d0>
          fp.close();
 23e9ef6:	a804      	add	r0, sp, #16
 23e9ef8:	f00c f8b3 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAIN, SET");
 23e9efc:	483d      	ldr	r0, [pc, #244]	; (23e9ff4 <_Z17Function_DoAction6String+0x2c4>)
 23e9efe:	e78d      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, OPEN ERR");
 23e9f00:	483d      	ldr	r0, [pc, #244]	; (23e9ff8 <_Z17Function_DoAction6String+0x2c8>)
 23e9f02:	e7a5      	b.n	23e9e50 <_Z17Function_DoAction6String+0x120>
      Output("A4=RAIN, SD NF"); 
 23e9f04:	483d      	ldr	r0, [pc, #244]	; (23e9ffc <_Z17Function_DoAction6String+0x2cc>)
 23e9f06:	e7b1      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"5MDIST") == 0) { // Set 5M Distance Sensor State File
 23e9f08:	4628      	mov	r0, r5
 23e9f0a:	493d      	ldr	r1, [pc, #244]	; (23ea000 <_Z17Function_DoAction6String+0x2d0>)
 23e9f0c:	f7fb f94e 	bl	23e51ac <strcmp>
 23e9f10:	4604      	mov	r4, r0
 23e9f12:	2800      	cmp	r0, #0
 23e9f14:	f040 8082 	bne.w	23ea01c <_Z17Function_DoAction6String+0x2ec>
    Output("DoAction:5MDIST");
 23e9f18:	483a      	ldr	r0, [pc, #232]	; (23ea004 <_Z17Function_DoAction6String+0x2d4>)
 23e9f1a:	f7fc faa7 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23e9f1e:	4b1e      	ldr	r3, [pc, #120]	; (23e9f98 <_Z17Function_DoAction6String+0x268>)
 23e9f20:	781b      	ldrb	r3, [r3, #0]
 23e9f22:	b1fb      	cbz	r3, 23e9f64 <_Z17Function_DoAction6String+0x234>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9f24:	4924      	ldr	r1, [pc, #144]	; (23e9fb8 <_Z17Function_DoAction6String+0x288>)
 23e9f26:	481e      	ldr	r0, [pc, #120]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9f28:	f7fb ffda 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23e9f2c:	b108      	cbz	r0, 23e9f32 <_Z17Function_DoAction6String+0x202>
        Output ("5MDIST, ALREADY EXISTS");      
 23e9f2e:	4836      	ldr	r0, [pc, #216]	; (23ea008 <_Z17Function_DoAction6String+0x2d8>)
 23e9f30:	e774      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_5M_DIST_FILE, FILE_WRITE);
 23e9f32:	4668      	mov	r0, sp
 23e9f34:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9f38:	4a1f      	ldr	r2, [pc, #124]	; (23e9fb8 <_Z17Function_DoAction6String+0x288>)
 23e9f3a:	4919      	ldr	r1, [pc, #100]	; (23e9fa0 <_Z17Function_DoAction6String+0x270>)
 23e9f3c:	f00c f96a 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23e9f40:	a804      	add	r0, sp, #16
 23e9f42:	f7fc f846 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9f46:	b138      	cbz	r0, 23e9f58 <_Z17Function_DoAction6String+0x228>
          fp.close();
 23e9f48:	a804      	add	r0, sp, #16
 23e9f4a:	f00c f88a 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          dg_adjustment = 1.25;
 23e9f4e:	4b18      	ldr	r3, [pc, #96]	; (23e9fb0 <_Z17Function_DoAction6String+0x280>)
 23e9f50:	4a2e      	ldr	r2, [pc, #184]	; (23ea00c <_Z17Function_DoAction6String+0x2dc>)
          Output ("5MDIST SET");
 23e9f52:	482f      	ldr	r0, [pc, #188]	; (23ea010 <_Z17Function_DoAction6String+0x2e0>)
          dg_adjustment = 1.25;
 23e9f54:	601a      	str	r2, [r3, #0]
          Output ("5MDIST SET");
 23e9f56:	e761      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
          Output ("5MDIST OPEN ERR");
 23e9f58:	482e      	ldr	r0, [pc, #184]	; (23ea014 <_Z17Function_DoAction6String+0x2e4>)
          Output ("A4=RAW, OPEN ERR");
 23e9f5a:	f7fc fa87 	bl	23e646c <_Z6OutputPKc>
          return(-5);
 23e9f5e:	f06f 0404 	mvn.w	r4, #4
 23e9f62:	e6f9      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
      Output("5MDIST, SD NF"); 
 23e9f64:	482c      	ldr	r0, [pc, #176]	; (23ea018 <_Z17Function_DoAction6String+0x2e8>)
 23e9f66:	e781      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
 23e9f68:	023fdbc8 	.word	0x023fdbc8
 23e9f6c:	023fdbbf 	.word	0x023fdbbf
 23e9f70:	023fdbd8 	.word	0x023fdbd8
 23e9f74:	023fdbcf 	.word	0x023fdbcf
 23e9f78:	1006a175 	.word	0x1006a175
 23e9f7c:	023fdbe6 	.word	0x023fdbe6
 23e9f80:	023fdbdd 	.word	0x023fdbdd
 23e9f84:	1006a2c0 	.word	0x1006a2c0
 23e9f88:	023fdbf4 	.word	0x023fdbf4
 23e9f8c:	023fdbeb 	.word	0x023fdbeb
 23e9f90:	023fdc01 	.word	0x023fdc01
 23e9f94:	023fdbf8 	.word	0x023fdbf8
 23e9f98:	1006a77c 	.word	0x1006a77c
 23e9f9c:	1006a122 	.word	0x1006a122
 23e9fa0:	1006a2d0 	.word	0x1006a2d0
 23e9fa4:	023fdc08 	.word	0x023fdc08
 23e9fa8:	1006a117 	.word	0x1006a117
 23e9fac:	023fdc33 	.word	0x023fdc33
 23e9fb0:	1006a1a0 	.word	0x1006a1a0
 23e9fb4:	40200000 	.word	0x40200000
 23e9fb8:	1006a10c 	.word	0x1006a10c
 23e9fbc:	023fdc6a 	.word	0x023fdc6a
 23e9fc0:	023fdc1d 	.word	0x023fdc1d
 23e9fc4:	023fdc4b 	.word	0x023fdc4b
 23e9fc8:	023fdc58 	.word	0x023fdc58
 23e9fcc:	023fdc86 	.word	0x023fdc86
 23e9fd0:	023fdc9a 	.word	0x023fdc9a
 23e9fd4:	023fdca7 	.word	0x023fdca7
 23e9fd8:	023fdcbf 	.word	0x023fdcbf
 23e9fdc:	023fdcb6 	.word	0x023fdcb6
 23e9fe0:	023fdcc6 	.word	0x023fdcc6
 23e9fe4:	023fdcf1 	.word	0x023fdcf1
 23e9fe8:	023fdd18 	.word	0x023fdd18
 23e9fec:	023fdcdb 	.word	0x023fdcdb
 23e9ff0:	023fdd04 	.word	0x023fdd04
 23e9ff4:	023fdd30 	.word	0x023fdd30
 23e9ff8:	023fdd3d 	.word	0x023fdd3d
 23e9ffc:	023fdd4f 	.word	0x023fdd4f
 23ea000:	023fdd67 	.word	0x023fdd67
 23ea004:	023fdd5e 	.word	0x023fdd5e
 23ea008:	023fdd6e 	.word	0x023fdd6e
 23ea00c:	3fa00000 	.word	0x3fa00000
 23ea010:	023fdd85 	.word	0x023fdd85
 23ea014:	023fdd90 	.word	0x023fdd90
 23ea018:	023fdda0 	.word	0x023fdda0
  else if (strcmp (s,"A4RAW") == 0) { // Set A4 State File to Raw
 23ea01c:	4628      	mov	r0, r5
 23ea01e:	4989      	ldr	r1, [pc, #548]	; (23ea244 <_Z17Function_DoAction6String+0x514>)
 23ea020:	f7fb f8c4 	bl	23e51ac <strcmp>
 23ea024:	4604      	mov	r4, r0
 23ea026:	2800      	cmp	r0, #0
 23ea028:	d153      	bne.n	23ea0d2 <_Z17Function_DoAction6String+0x3a2>
    Output("DoAction:A4RAW");
 23ea02a:	4887      	ldr	r0, [pc, #540]	; (23ea248 <_Z17Function_DoAction6String+0x518>)
 23ea02c:	f7fc fa1e 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23ea030:	4b86      	ldr	r3, [pc, #536]	; (23ea24c <_Z17Function_DoAction6String+0x51c>)
 23ea032:	781b      	ldrb	r3, [r3, #0]
 23ea034:	2b00      	cmp	r3, #0
 23ea036:	d04a      	beq.n	23ea0ce <_Z17Function_DoAction6String+0x39e>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23ea038:	4985      	ldr	r1, [pc, #532]	; (23ea250 <_Z17Function_DoAction6String+0x520>)
 23ea03a:	4886      	ldr	r0, [pc, #536]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea03c:	f7fb ff50 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea040:	b158      	cbz	r0, 23ea05a <_Z17Function_DoAction6String+0x32a>
        EEPROM_ClearRain2Totals();
 23ea042:	f7fe fdbf 	bl	23e8bc4 <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23ea046:	4982      	ldr	r1, [pc, #520]	; (23ea250 <_Z17Function_DoAction6String+0x520>)
 23ea048:	4882      	ldr	r0, [pc, #520]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea04a:	f7fb ff64 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea04e:	2800      	cmp	r0, #0
 23ea050:	f43f aee7 	beq.w	23e9e22 <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23ea054:	4880      	ldr	r0, [pc, #512]	; (23ea258 <_Z17Function_DoAction6String+0x528>)
 23ea056:	f7fc fa09 	bl	23e646c <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23ea05a:	4980      	ldr	r1, [pc, #512]	; (23ea25c <_Z17Function_DoAction6String+0x52c>)
 23ea05c:	487d      	ldr	r0, [pc, #500]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea05e:	f7fb ff3f 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea062:	b138      	cbz	r0, 23ea074 <_Z17Function_DoAction6String+0x344>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23ea064:	497d      	ldr	r1, [pc, #500]	; (23ea25c <_Z17Function_DoAction6String+0x52c>)
 23ea066:	487b      	ldr	r0, [pc, #492]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea068:	f7fb ff55 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea06c:	b1d8      	cbz	r0, 23ea0a6 <_Z17Function_DoAction6String+0x376>
          Output ("A4=DIST, DEL DIST:OK");
 23ea06e:	487c      	ldr	r0, [pc, #496]	; (23ea260 <_Z17Function_DoAction6String+0x530>)
 23ea070:	f7fc f9fc 	bl	23e646c <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23ea074:	4b7b      	ldr	r3, [pc, #492]	; (23ea264 <_Z17Function_DoAction6String+0x534>)
 23ea076:	4a7c      	ldr	r2, [pc, #496]	; (23ea268 <_Z17Function_DoAction6String+0x538>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ea078:	497c      	ldr	r1, [pc, #496]	; (23ea26c <_Z17Function_DoAction6String+0x53c>)
 23ea07a:	4876      	ldr	r0, [pc, #472]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
      dg_adjustment = 2.5;
 23ea07c:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ea07e:	f7fb ff2f 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea082:	b148      	cbz	r0, 23ea098 <_Z17Function_DoAction6String+0x368>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23ea084:	4979      	ldr	r1, [pc, #484]	; (23ea26c <_Z17Function_DoAction6String+0x53c>)
 23ea086:	4873      	ldr	r0, [pc, #460]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea088:	f7fb ff45 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea08c:	2800      	cmp	r0, #0
 23ea08e:	f43f aee4 	beq.w	23e9e5a <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK");
 23ea092:	4877      	ldr	r0, [pc, #476]	; (23ea270 <_Z17Function_DoAction6String+0x540>)
 23ea094:	f7fc f9ea 	bl	23e646c <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
 23ea098:	4976      	ldr	r1, [pc, #472]	; (23ea274 <_Z17Function_DoAction6String+0x544>)
 23ea09a:	486e      	ldr	r0, [pc, #440]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea09c:	f7fb ff20 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea0a0:	b118      	cbz	r0, 23ea0aa <_Z17Function_DoAction6String+0x37a>
        Output ("A4=RAW, ALREADY EXISTS");    
 23ea0a2:	4875      	ldr	r0, [pc, #468]	; (23ea278 <_Z17Function_DoAction6String+0x548>)
 23ea0a4:	e6ba      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
          Output ("A4=DIST, DEL DIST:ERR");
 23ea0a6:	4875      	ldr	r0, [pc, #468]	; (23ea27c <_Z17Function_DoAction6String+0x54c>)
 23ea0a8:	e6d2      	b.n	23e9e50 <_Z17Function_DoAction6String+0x120>
        File fp = SD.open(SD_A4_RAW_FILE, FILE_WRITE);
 23ea0aa:	4668      	mov	r0, sp
 23ea0ac:	f244 2302 	movw	r3, #16898	; 0x4202
 23ea0b0:	4a70      	ldr	r2, [pc, #448]	; (23ea274 <_Z17Function_DoAction6String+0x544>)
 23ea0b2:	4968      	ldr	r1, [pc, #416]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea0b4:	f00c f8ae 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23ea0b8:	a804      	add	r0, sp, #16
 23ea0ba:	f7fb ff8a 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23ea0be:	b120      	cbz	r0, 23ea0ca <_Z17Function_DoAction6String+0x39a>
          fp.close();
 23ea0c0:	a804      	add	r0, sp, #16
 23ea0c2:	f00b ffce 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAW, SET");
 23ea0c6:	486e      	ldr	r0, [pc, #440]	; (23ea280 <_Z17Function_DoAction6String+0x550>)
 23ea0c8:	e6a8      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAW, OPEN ERR");
 23ea0ca:	486e      	ldr	r0, [pc, #440]	; (23ea284 <_Z17Function_DoAction6String+0x554>)
 23ea0cc:	e745      	b.n	23e9f5a <_Z17Function_DoAction6String+0x22a>
      Output("A4=RAW, SD NF"); 
 23ea0ce:	486e      	ldr	r0, [pc, #440]	; (23ea288 <_Z17Function_DoAction6String+0x558>)
 23ea0d0:	e6cc      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A4CLR") == 0) { // Clear A4 State Files
 23ea0d2:	4628      	mov	r0, r5
 23ea0d4:	496d      	ldr	r1, [pc, #436]	; (23ea28c <_Z17Function_DoAction6String+0x55c>)
 23ea0d6:	f7fb f869 	bl	23e51ac <strcmp>
 23ea0da:	4604      	mov	r4, r0
 23ea0dc:	2800      	cmp	r0, #0
 23ea0de:	d166      	bne.n	23ea1ae <_Z17Function_DoAction6String+0x47e>
    Output("DoAction:A4CLR");
 23ea0e0:	486b      	ldr	r0, [pc, #428]	; (23ea290 <_Z17Function_DoAction6String+0x560>)
 23ea0e2:	f7fc f9c3 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23ea0e6:	4b59      	ldr	r3, [pc, #356]	; (23ea24c <_Z17Function_DoAction6String+0x51c>)
 23ea0e8:	781b      	ldrb	r3, [r3, #0]
 23ea0ea:	2b00      	cmp	r3, #0
 23ea0ec:	d05d      	beq.n	23ea1aa <_Z17Function_DoAction6String+0x47a>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23ea0ee:	495b      	ldr	r1, [pc, #364]	; (23ea25c <_Z17Function_DoAction6String+0x52c>)
 23ea0f0:	4858      	ldr	r0, [pc, #352]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea0f2:	f7fb fef5 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea0f6:	b308      	cbz	r0, 23ea13c <_Z17Function_DoAction6String+0x40c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23ea0f8:	4958      	ldr	r1, [pc, #352]	; (23ea25c <_Z17Function_DoAction6String+0x52c>)
 23ea0fa:	4856      	ldr	r0, [pc, #344]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea0fc:	f7fb ff0b 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea100:	b130      	cbz	r0, 23ea110 <_Z17Function_DoAction6String+0x3e0>
          A4_State = A4_STATE_NULL;
 23ea102:	2200      	movs	r2, #0
 23ea104:	4b63      	ldr	r3, [pc, #396]	; (23ea294 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL DIST:OK");
 23ea106:	4864      	ldr	r0, [pc, #400]	; (23ea298 <_Z17Function_DoAction6String+0x568>)
          A4_State = A4_STATE_NULL;
 23ea108:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23ea10a:	f7fc f9af 	bl	23e646c <_Z6OutputPKc>
 23ea10e:	e004      	b.n	23ea11a <_Z17Function_DoAction6String+0x3ea>
          Output ("A4=CLR, DEL DIST:ERR");
 23ea110:	4862      	ldr	r0, [pc, #392]	; (23ea29c <_Z17Function_DoAction6String+0x56c>)
 23ea112:	f7fc f9ab 	bl	23e646c <_Z6OutputPKc>
          state=-2;
 23ea116:	f06f 0401 	mvn.w	r4, #1
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23ea11a:	494d      	ldr	r1, [pc, #308]	; (23ea250 <_Z17Function_DoAction6String+0x520>)
 23ea11c:	484d      	ldr	r0, [pc, #308]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea11e:	f7fb fedf 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea122:	b310      	cbz	r0, 23ea16a <_Z17Function_DoAction6String+0x43a>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23ea124:	494a      	ldr	r1, [pc, #296]	; (23ea250 <_Z17Function_DoAction6String+0x520>)
 23ea126:	484b      	ldr	r0, [pc, #300]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea128:	f7fb fef5 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea12c:	b140      	cbz	r0, 23ea140 <_Z17Function_DoAction6String+0x410>
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23ea12e:	2200      	movs	r2, #0
 23ea130:	4b58      	ldr	r3, [pc, #352]	; (23ea294 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAIN:OK");
 23ea132:	485b      	ldr	r0, [pc, #364]	; (23ea2a0 <_Z17Function_DoAction6String+0x570>)
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23ea134:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23ea136:	f7fc f999 	bl	23e646c <_Z6OutputPKc>
 23ea13a:	e005      	b.n	23ea148 <_Z17Function_DoAction6String+0x418>
        Output ("A4=CLR, DEL RAIN:NF");
 23ea13c:	4859      	ldr	r0, [pc, #356]	; (23ea2a4 <_Z17Function_DoAction6String+0x574>)
 23ea13e:	e7e4      	b.n	23ea10a <_Z17Function_DoAction6String+0x3da>
          Output ("A4=CLR, DEL RAIN:ERR");
 23ea140:	4859      	ldr	r0, [pc, #356]	; (23ea2a8 <_Z17Function_DoAction6String+0x578>)
 23ea142:	f7fc f993 	bl	23e646c <_Z6OutputPKc>
          state+=-3; // returns a -3 if also failed removing DIST file
 23ea146:	3c03      	subs	r4, #3
      if (SD.exists(SD_A4_RAW_FILE)) {
 23ea148:	494a      	ldr	r1, [pc, #296]	; (23ea274 <_Z17Function_DoAction6String+0x544>)
 23ea14a:	4842      	ldr	r0, [pc, #264]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea14c:	f7fb fec8 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea150:	b320      	cbz	r0, 23ea19c <_Z17Function_DoAction6String+0x46c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23ea152:	4948      	ldr	r1, [pc, #288]	; (23ea274 <_Z17Function_DoAction6String+0x544>)
 23ea154:	483f      	ldr	r0, [pc, #252]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea156:	f7fb fede 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea15a:	b140      	cbz	r0, 23ea16e <_Z17Function_DoAction6String+0x43e>
          A4_State = A4_STATE_NULL;
 23ea15c:	2200      	movs	r2, #0
 23ea15e:	4b4d      	ldr	r3, [pc, #308]	; (23ea294 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAW:OK");
 23ea160:	4852      	ldr	r0, [pc, #328]	; (23ea2ac <_Z17Function_DoAction6String+0x57c>)
          A4_State = A4_STATE_NULL;
 23ea162:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23ea164:	f7fc f982 	bl	23e646c <_Z6OutputPKc>
 23ea168:	e005      	b.n	23ea176 <_Z17Function_DoAction6String+0x446>
        Output ("A4=CLR, DEL RAIN:NF");
 23ea16a:	484e      	ldr	r0, [pc, #312]	; (23ea2a4 <_Z17Function_DoAction6String+0x574>)
 23ea16c:	e7e3      	b.n	23ea136 <_Z17Function_DoAction6String+0x406>
          Output ("A4=CLR, DEL RAW:ERR");
 23ea16e:	4850      	ldr	r0, [pc, #320]	; (23ea2b0 <_Z17Function_DoAction6String+0x580>)
 23ea170:	f7fc f97c 	bl	23e646c <_Z6OutputPKc>
          state+=-4; // returns a -4 if also failed removing RAW file
 23ea174:	3c04      	subs	r4, #4
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ea176:	493d      	ldr	r1, [pc, #244]	; (23ea26c <_Z17Function_DoAction6String+0x53c>)
 23ea178:	4836      	ldr	r0, [pc, #216]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea17a:	f7fb feb1 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea17e:	2800      	cmp	r0, #0
 23ea180:	f43f adea 	beq.w	23e9d58 <_Z17Function_DoAction6String+0x28>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23ea184:	4939      	ldr	r1, [pc, #228]	; (23ea26c <_Z17Function_DoAction6String+0x53c>)
 23ea186:	4833      	ldr	r0, [pc, #204]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea188:	f7fb fec5 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea18c:	b140      	cbz	r0, 23ea1a0 <_Z17Function_DoAction6String+0x470>
          Output ("A4=CLR, DEL 5M:OK");
 23ea18e:	4849      	ldr	r0, [pc, #292]	; (23ea2b4 <_Z17Function_DoAction6String+0x584>)
 23ea190:	f7fc f96c 	bl	23e646c <_Z6OutputPKc>
          dg_adjustment = 2.5;
 23ea194:	4b33      	ldr	r3, [pc, #204]	; (23ea264 <_Z17Function_DoAction6String+0x534>)
 23ea196:	4a34      	ldr	r2, [pc, #208]	; (23ea268 <_Z17Function_DoAction6String+0x538>)
 23ea198:	601a      	str	r2, [r3, #0]
 23ea19a:	e5dd      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
        Output ("A4=CLR, DEL RAIN:NF");
 23ea19c:	4841      	ldr	r0, [pc, #260]	; (23ea2a4 <_Z17Function_DoAction6String+0x574>)
 23ea19e:	e7e1      	b.n	23ea164 <_Z17Function_DoAction6String+0x434>
          Output ("A4=CLR, DEL 5M:ERR");
 23ea1a0:	4845      	ldr	r0, [pc, #276]	; (23ea2b8 <_Z17Function_DoAction6String+0x588>)
 23ea1a2:	f7fc f963 	bl	23e646c <_Z6OutputPKc>
          state+=-5;
 23ea1a6:	3c05      	subs	r4, #5
 23ea1a8:	e5d6      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
      Output("A4=CLR, SD NF"); 
 23ea1aa:	4844      	ldr	r0, [pc, #272]	; (23ea2bc <_Z17Function_DoAction6String+0x58c>)
 23ea1ac:	e65e      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5RAW") == 0) { // Set A5 State File to Raw
 23ea1ae:	4628      	mov	r0, r5
 23ea1b0:	4943      	ldr	r1, [pc, #268]	; (23ea2c0 <_Z17Function_DoAction6String+0x590>)
 23ea1b2:	f7fa fffb 	bl	23e51ac <strcmp>
 23ea1b6:	4604      	mov	r4, r0
 23ea1b8:	bb18      	cbnz	r0, 23ea202 <_Z17Function_DoAction6String+0x4d2>
    Output("DoAction:A5RAW");
 23ea1ba:	4842      	ldr	r0, [pc, #264]	; (23ea2c4 <_Z17Function_DoAction6String+0x594>)
 23ea1bc:	f7fc f956 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23ea1c0:	4b22      	ldr	r3, [pc, #136]	; (23ea24c <_Z17Function_DoAction6String+0x51c>)
 23ea1c2:	781b      	ldrb	r3, [r3, #0]
 23ea1c4:	b1db      	cbz	r3, 23ea1fe <_Z17Function_DoAction6String+0x4ce>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23ea1c6:	4940      	ldr	r1, [pc, #256]	; (23ea2c8 <_Z17Function_DoAction6String+0x598>)
 23ea1c8:	4822      	ldr	r0, [pc, #136]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea1ca:	f7fb fe89 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea1ce:	b108      	cbz	r0, 23ea1d4 <_Z17Function_DoAction6String+0x4a4>
        Output ("A5=RAW, ALREADY EXISTS");    
 23ea1d0:	483e      	ldr	r0, [pc, #248]	; (23ea2cc <_Z17Function_DoAction6String+0x59c>)
 23ea1d2:	e623      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_A5_RAW_FILE, FILE_WRITE);
 23ea1d4:	4668      	mov	r0, sp
 23ea1d6:	f244 2302 	movw	r3, #16898	; 0x4202
 23ea1da:	4a3b      	ldr	r2, [pc, #236]	; (23ea2c8 <_Z17Function_DoAction6String+0x598>)
 23ea1dc:	491d      	ldr	r1, [pc, #116]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea1de:	f00c f819 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23ea1e2:	a804      	add	r0, sp, #16
 23ea1e4:	f7fb fef5 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23ea1e8:	b138      	cbz	r0, 23ea1fa <_Z17Function_DoAction6String+0x4ca>
          fp.close();
 23ea1ea:	a804      	add	r0, sp, #16
 23ea1ec:	f00b ff39 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          A5_State = A5_STATE_RAW;
 23ea1f0:	2201      	movs	r2, #1
 23ea1f2:	4b37      	ldr	r3, [pc, #220]	; (23ea2d0 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=RAW, SET");
 23ea1f4:	4837      	ldr	r0, [pc, #220]	; (23ea2d4 <_Z17Function_DoAction6String+0x5a4>)
          A5_State = A5_STATE_RAW;
 23ea1f6:	601a      	str	r2, [r3, #0]
          Output ("A5=RAW, SET");
 23ea1f8:	e610      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
          Output ("A5=RAW, OPEN ERR");
 23ea1fa:	4837      	ldr	r0, [pc, #220]	; (23ea2d8 <_Z17Function_DoAction6String+0x5a8>)
 23ea1fc:	e612      	b.n	23e9e24 <_Z17Function_DoAction6String+0xf4>
      Output("A5=RAW, SD NF"); 
 23ea1fe:	4837      	ldr	r0, [pc, #220]	; (23ea2dc <_Z17Function_DoAction6String+0x5ac>)
 23ea200:	e634      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5CLR") == 0) { // Clear A5 State Files
 23ea202:	4628      	mov	r0, r5
 23ea204:	4936      	ldr	r1, [pc, #216]	; (23ea2e0 <_Z17Function_DoAction6String+0x5b0>)
 23ea206:	f7fa ffd1 	bl	23e51ac <strcmp>
 23ea20a:	4604      	mov	r4, r0
 23ea20c:	2800      	cmp	r0, #0
 23ea20e:	d173      	bne.n	23ea2f8 <_Z17Function_DoAction6String+0x5c8>
    Output("DoAction:A5CLR");
 23ea210:	4834      	ldr	r0, [pc, #208]	; (23ea2e4 <_Z17Function_DoAction6String+0x5b4>)
 23ea212:	f7fc f92b 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23ea216:	4b0d      	ldr	r3, [pc, #52]	; (23ea24c <_Z17Function_DoAction6String+0x51c>)
 23ea218:	781b      	ldrb	r3, [r3, #0]
 23ea21a:	b18b      	cbz	r3, 23ea240 <_Z17Function_DoAction6String+0x510>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23ea21c:	492a      	ldr	r1, [pc, #168]	; (23ea2c8 <_Z17Function_DoAction6String+0x598>)
 23ea21e:	480d      	ldr	r0, [pc, #52]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea220:	f7fb fe5e 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea224:	b150      	cbz	r0, 23ea23c <_Z17Function_DoAction6String+0x50c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23ea226:	4913      	ldr	r1, [pc, #76]	; (23ea274 <_Z17Function_DoAction6String+0x544>)
 23ea228:	480a      	ldr	r0, [pc, #40]	; (23ea254 <_Z17Function_DoAction6String+0x524>)
 23ea22a:	f7fb fe74 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea22e:	b118      	cbz	r0, 23ea238 <_Z17Function_DoAction6String+0x508>
          A5_State = A5_STATE_NULL;
 23ea230:	4b27      	ldr	r3, [pc, #156]	; (23ea2d0 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=CLR, DEL RAW:OK");
 23ea232:	482d      	ldr	r0, [pc, #180]	; (23ea2e8 <_Z17Function_DoAction6String+0x5b8>)
          A5_State = A5_STATE_NULL;
 23ea234:	601c      	str	r4, [r3, #0]
          Output ("A5=CLR, DEL RAW:OK");
 23ea236:	e5f1      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
          Output ("A5=CLR, DEL RAW:ERR");
 23ea238:	482c      	ldr	r0, [pc, #176]	; (23ea2ec <_Z17Function_DoAction6String+0x5bc>)
 23ea23a:	e5f3      	b.n	23e9e24 <_Z17Function_DoAction6String+0xf4>
        Output ("A5=CLR, DEL A5RAW:NF");
 23ea23c:	482c      	ldr	r0, [pc, #176]	; (23ea2f0 <_Z17Function_DoAction6String+0x5c0>)
 23ea23e:	e5ed      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
      Output("A5=CLR, SD NF"); 
 23ea240:	482c      	ldr	r0, [pc, #176]	; (23ea2f4 <_Z17Function_DoAction6String+0x5c4>)
 23ea242:	e613      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
 23ea244:	023fddb7 	.word	0x023fddb7
 23ea248:	023fddae 	.word	0x023fddae
 23ea24c:	1006a77c 	.word	0x1006a77c
 23ea250:	1006a122 	.word	0x1006a122
 23ea254:	1006a2d0 	.word	0x1006a2d0
 23ea258:	023fdc08 	.word	0x023fdc08
 23ea25c:	1006a117 	.word	0x1006a117
 23ea260:	023fddbd 	.word	0x023fddbd
 23ea264:	1006a1a0 	.word	0x1006a1a0
 23ea268:	40200000 	.word	0x40200000
 23ea26c:	1006a10c 	.word	0x1006a10c
 23ea270:	023fdde8 	.word	0x023fdde8
 23ea274:	1006a12d 	.word	0x1006a12d
 23ea278:	023fddfb 	.word	0x023fddfb
 23ea27c:	023fddd2 	.word	0x023fddd2
 23ea280:	023fde12 	.word	0x023fde12
 23ea284:	023fde1e 	.word	0x023fde1e
 23ea288:	023fde2f 	.word	0x023fde2f
 23ea28c:	023fde46 	.word	0x023fde46
 23ea290:	023fde3d 	.word	0x023fde3d
 23ea294:	1006a25c 	.word	0x1006a25c
 23ea298:	023fde4c 	.word	0x023fde4c
 23ea29c:	023fde60 	.word	0x023fde60
 23ea2a0:	023fde89 	.word	0x023fde89
 23ea2a4:	023fde75 	.word	0x023fde75
 23ea2a8:	023fde9d 	.word	0x023fde9d
 23ea2ac:	023fdeb2 	.word	0x023fdeb2
 23ea2b0:	023fdec5 	.word	0x023fdec5
 23ea2b4:	023fded9 	.word	0x023fded9
 23ea2b8:	023fdeeb 	.word	0x023fdeeb
 23ea2bc:	023fdefe 	.word	0x023fdefe
 23ea2c0:	023fdf15 	.word	0x023fdf15
 23ea2c4:	023fdf0c 	.word	0x023fdf0c
 23ea2c8:	1006a137 	.word	0x1006a137
 23ea2cc:	023fdf1b 	.word	0x023fdf1b
 23ea2d0:	1006a260 	.word	0x1006a260
 23ea2d4:	023fdf32 	.word	0x023fdf32
 23ea2d8:	023fdf3e 	.word	0x023fdf3e
 23ea2dc:	023fdf4f 	.word	0x023fdf4f
 23ea2e0:	023fdf66 	.word	0x023fdf66
 23ea2e4:	023fdf5d 	.word	0x023fdf5d
 23ea2e8:	023fdf6c 	.word	0x023fdf6c
 23ea2ec:	023fdf7f 	.word	0x023fdf7f
 23ea2f0:	023fdf93 	.word	0x023fdf93
 23ea2f4:	023fdfa8 	.word	0x023fdfa8
  else if (strcmp (s,"TXI5M") == 0) { // SetTransmit Interval to 5 Minutes
 23ea2f8:	4628      	mov	r0, r5
 23ea2fa:	4966      	ldr	r1, [pc, #408]	; (23ea494 <_Z17Function_DoAction6String+0x764>)
 23ea2fc:	f7fa ff56 	bl	23e51ac <strcmp>
 23ea300:	4604      	mov	r4, r0
 23ea302:	2800      	cmp	r0, #0
 23ea304:	d13d      	bne.n	23ea382 <_Z17Function_DoAction6String+0x652>
    Output("DoAction:TXI5M");
 23ea306:	4864      	ldr	r0, [pc, #400]	; (23ea498 <_Z17Function_DoAction6String+0x768>)
 23ea308:	f7fc f8b0 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23ea30c:	4b63      	ldr	r3, [pc, #396]	; (23ea49c <_Z17Function_DoAction6String+0x76c>)
 23ea30e:	781b      	ldrb	r3, [r3, #0]
 23ea310:	2b00      	cmp	r3, #0
 23ea312:	d034      	beq.n	23ea37e <_Z17Function_DoAction6String+0x64e>
      if (SD.exists(SD_TX5M_FILE)) {
 23ea314:	4962      	ldr	r1, [pc, #392]	; (23ea4a0 <_Z17Function_DoAction6String+0x770>)
 23ea316:	4863      	ldr	r0, [pc, #396]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea318:	f7fb fde2 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea31c:	b170      	cbz	r0, 23ea33c <_Z17Function_DoAction6String+0x60c>
        Output ("TXI5M, ALREADY SET"); 
 23ea31e:	4862      	ldr	r0, [pc, #392]	; (23ea4a8 <_Z17Function_DoAction6String+0x778>)
 23ea320:	f7fc f8a4 	bl	23e646c <_Z6OutputPKc>
        obs_tx_interval = 5;     
 23ea324:	2005      	movs	r0, #5
 23ea326:	2100      	movs	r1, #0
 23ea328:	4b60      	ldr	r3, [pc, #384]	; (23ea4ac <_Z17Function_DoAction6String+0x77c>)
 23ea32a:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX10M_FILE)) {
 23ea32e:	4960      	ldr	r1, [pc, #384]	; (23ea4b0 <_Z17Function_DoAction6String+0x780>)
 23ea330:	485c      	ldr	r0, [pc, #368]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea332:	f7fb fdd5 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea336:	b9d0      	cbnz	r0, 23ea36e <_Z17Function_DoAction6String+0x63e>
    return(0);
 23ea338:	2400      	movs	r4, #0
 23ea33a:	e50d      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_TX5M_FILE, FILE_WRITE);
 23ea33c:	4668      	mov	r0, sp
 23ea33e:	f244 2302 	movw	r3, #16898	; 0x4202
 23ea342:	4a57      	ldr	r2, [pc, #348]	; (23ea4a0 <_Z17Function_DoAction6String+0x770>)
 23ea344:	4957      	ldr	r1, [pc, #348]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea346:	f00b ff65 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23ea34a:	a804      	add	r0, sp, #16
 23ea34c:	f7fb fe41 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23ea350:	b158      	cbz	r0, 23ea36a <_Z17Function_DoAction6String+0x63a>
          fp.close();
 23ea352:	a804      	add	r0, sp, #16
 23ea354:	f00b fe85 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 5;
 23ea358:	2005      	movs	r0, #5
 23ea35a:	2100      	movs	r1, #0
 23ea35c:	4b53      	ldr	r3, [pc, #332]	; (23ea4ac <_Z17Function_DoAction6String+0x77c>)
 23ea35e:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI5M SET");
 23ea362:	4854      	ldr	r0, [pc, #336]	; (23ea4b4 <_Z17Function_DoAction6String+0x784>)
 23ea364:	f7fc f882 	bl	23e646c <_Z6OutputPKc>
    virtual ~Print() {}
 23ea368:	e7e1      	b.n	23ea32e <_Z17Function_DoAction6String+0x5fe>
          Output ("TXI5M OPEN ERR");
 23ea36a:	4853      	ldr	r0, [pc, #332]	; (23ea4b8 <_Z17Function_DoAction6String+0x788>)
 23ea36c:	e55a      	b.n	23e9e24 <_Z17Function_DoAction6String+0xf4>
        if (SD.remove (SD_TX10M_FILE)) {
 23ea36e:	4950      	ldr	r1, [pc, #320]	; (23ea4b0 <_Z17Function_DoAction6String+0x780>)
 23ea370:	484c      	ldr	r0, [pc, #304]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea372:	f7fb fdd0 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea376:	2800      	cmp	r0, #0
 23ea378:	d0de      	beq.n	23ea338 <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX10M File");
 23ea37a:	4850      	ldr	r0, [pc, #320]	; (23ea4bc <_Z17Function_DoAction6String+0x78c>)
 23ea37c:	e54e      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
      Output("TXI5M, SD NF"); 
 23ea37e:	4850      	ldr	r0, [pc, #320]	; (23ea4c0 <_Z17Function_DoAction6String+0x790>)
 23ea380:	e574      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI10M") == 0) { // SetTransmit Interval to 10 Minutes
 23ea382:	4628      	mov	r0, r5
 23ea384:	494f      	ldr	r1, [pc, #316]	; (23ea4c4 <_Z17Function_DoAction6String+0x794>)
 23ea386:	f7fa ff11 	bl	23e51ac <strcmp>
 23ea38a:	4604      	mov	r4, r0
 23ea38c:	2800      	cmp	r0, #0
 23ea38e:	d13c      	bne.n	23ea40a <_Z17Function_DoAction6String+0x6da>
    Output("DoAction:TXI10M");
 23ea390:	484d      	ldr	r0, [pc, #308]	; (23ea4c8 <_Z17Function_DoAction6String+0x798>)
 23ea392:	f7fc f86b 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23ea396:	4b41      	ldr	r3, [pc, #260]	; (23ea49c <_Z17Function_DoAction6String+0x76c>)
 23ea398:	781b      	ldrb	r3, [r3, #0]
 23ea39a:	2b00      	cmp	r3, #0
 23ea39c:	d033      	beq.n	23ea406 <_Z17Function_DoAction6String+0x6d6>
      if (SD.exists(SD_TX10M_FILE)) {
 23ea39e:	4944      	ldr	r1, [pc, #272]	; (23ea4b0 <_Z17Function_DoAction6String+0x780>)
 23ea3a0:	4840      	ldr	r0, [pc, #256]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea3a2:	f7fb fd9d 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea3a6:	b1a8      	cbz	r0, 23ea3d4 <_Z17Function_DoAction6String+0x6a4>
        Output ("TXI10M, ALREADY SET"); 
 23ea3a8:	4848      	ldr	r0, [pc, #288]	; (23ea4cc <_Z17Function_DoAction6String+0x79c>)
 23ea3aa:	f7fc f85f 	bl	23e646c <_Z6OutputPKc>
        obs_tx_interval = 10;     
 23ea3ae:	200a      	movs	r0, #10
 23ea3b0:	2100      	movs	r1, #0
 23ea3b2:	4b3e      	ldr	r3, [pc, #248]	; (23ea4ac <_Z17Function_DoAction6String+0x77c>)
 23ea3b4:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX5M_FILE)) {
 23ea3b8:	4939      	ldr	r1, [pc, #228]	; (23ea4a0 <_Z17Function_DoAction6String+0x770>)
 23ea3ba:	483a      	ldr	r0, [pc, #232]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea3bc:	f7fb fd90 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea3c0:	2800      	cmp	r0, #0
 23ea3c2:	d0b9      	beq.n	23ea338 <_Z17Function_DoAction6String+0x608>
        if (SD.remove (SD_TX5M_FILE)) {
 23ea3c4:	4936      	ldr	r1, [pc, #216]	; (23ea4a0 <_Z17Function_DoAction6String+0x770>)
 23ea3c6:	4837      	ldr	r0, [pc, #220]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea3c8:	f7fb fda5 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea3cc:	2800      	cmp	r0, #0
 23ea3ce:	d0b3      	beq.n	23ea338 <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX5M File");
 23ea3d0:	483f      	ldr	r0, [pc, #252]	; (23ea4d0 <_Z17Function_DoAction6String+0x7a0>)
 23ea3d2:	e523      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_TX10M_FILE, FILE_WRITE);
 23ea3d4:	4668      	mov	r0, sp
 23ea3d6:	f244 2302 	movw	r3, #16898	; 0x4202
 23ea3da:	4a35      	ldr	r2, [pc, #212]	; (23ea4b0 <_Z17Function_DoAction6String+0x780>)
 23ea3dc:	4931      	ldr	r1, [pc, #196]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea3de:	f00b ff19 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23ea3e2:	a804      	add	r0, sp, #16
 23ea3e4:	f7fb fdf5 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23ea3e8:	b158      	cbz	r0, 23ea402 <_Z17Function_DoAction6String+0x6d2>
          fp.close();
 23ea3ea:	a804      	add	r0, sp, #16
 23ea3ec:	f00b fe39 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 10;
 23ea3f0:	200a      	movs	r0, #10
 23ea3f2:	2100      	movs	r1, #0
 23ea3f4:	4b2d      	ldr	r3, [pc, #180]	; (23ea4ac <_Z17Function_DoAction6String+0x77c>)
 23ea3f6:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI10M SET");
 23ea3fa:	4836      	ldr	r0, [pc, #216]	; (23ea4d4 <_Z17Function_DoAction6String+0x7a4>)
 23ea3fc:	f7fc f836 	bl	23e646c <_Z6OutputPKc>
 23ea400:	e7da      	b.n	23ea3b8 <_Z17Function_DoAction6String+0x688>
          Output ("TXI10M OPEN ERR");
 23ea402:	4835      	ldr	r0, [pc, #212]	; (23ea4d8 <_Z17Function_DoAction6String+0x7a8>)
 23ea404:	e50e      	b.n	23e9e24 <_Z17Function_DoAction6String+0xf4>
      Output("TXI10M, SD NF"); 
 23ea406:	4835      	ldr	r0, [pc, #212]	; (23ea4dc <_Z17Function_DoAction6String+0x7ac>)
 23ea408:	e530      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI15M") == 0) { // SetTransmit Interval to 15 Minutes
 23ea40a:	4628      	mov	r0, r5
 23ea40c:	4934      	ldr	r1, [pc, #208]	; (23ea4e0 <_Z17Function_DoAction6String+0x7b0>)
 23ea40e:	f7fa fecd 	bl	23e51ac <strcmp>
 23ea412:	4604      	mov	r4, r0
 23ea414:	2800      	cmp	r0, #0
 23ea416:	d13b      	bne.n	23ea490 <_Z17Function_DoAction6String+0x760>
    Output("DoAction:TXI15M");
 23ea418:	4832      	ldr	r0, [pc, #200]	; (23ea4e4 <_Z17Function_DoAction6String+0x7b4>)
 23ea41a:	f7fc f827 	bl	23e646c <_Z6OutputPKc>
    if (SD_exists) {
 23ea41e:	4b1f      	ldr	r3, [pc, #124]	; (23ea49c <_Z17Function_DoAction6String+0x76c>)
 23ea420:	781b      	ldrb	r3, [r3, #0]
 23ea422:	2b00      	cmp	r3, #0
 23ea424:	d032      	beq.n	23ea48c <_Z17Function_DoAction6String+0x75c>
      if (!SD.exists(SD_TX5M_FILE) && !SD.exists(SD_TX10M_FILE)) {
 23ea426:	491e      	ldr	r1, [pc, #120]	; (23ea4a0 <_Z17Function_DoAction6String+0x770>)
 23ea428:	481e      	ldr	r0, [pc, #120]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea42a:	f7fb fd59 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea42e:	4d1f      	ldr	r5, [pc, #124]	; (23ea4ac <_Z17Function_DoAction6String+0x77c>)
 23ea430:	b960      	cbnz	r0, 23ea44c <_Z17Function_DoAction6String+0x71c>
 23ea432:	491f      	ldr	r1, [pc, #124]	; (23ea4b0 <_Z17Function_DoAction6String+0x780>)
 23ea434:	481b      	ldr	r0, [pc, #108]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea436:	f7fb fd53 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea43a:	b938      	cbnz	r0, 23ea44c <_Z17Function_DoAction6String+0x71c>
        Output ("TXI15M, ALREADY SET"); 
 23ea43c:	482a      	ldr	r0, [pc, #168]	; (23ea4e8 <_Z17Function_DoAction6String+0x7b8>)
 23ea43e:	f7fc f815 	bl	23e646c <_Z6OutputPKc>
        obs_tx_interval = 15;     
 23ea442:	220f      	movs	r2, #15
 23ea444:	2300      	movs	r3, #0
 23ea446:	e9c5 2300 	strd	r2, r3, [r5]
 23ea44a:	e485      	b.n	23e9d58 <_Z17Function_DoAction6String+0x28>
        if (SD.exists(SD_TX5M_FILE)) {
 23ea44c:	4914      	ldr	r1, [pc, #80]	; (23ea4a0 <_Z17Function_DoAction6String+0x770>)
 23ea44e:	4815      	ldr	r0, [pc, #84]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea450:	f7fb fd46 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea454:	b138      	cbz	r0, 23ea466 <_Z17Function_DoAction6String+0x736>
          if (SD.remove (SD_TX5M_FILE)) {
 23ea456:	4912      	ldr	r1, [pc, #72]	; (23ea4a0 <_Z17Function_DoAction6String+0x770>)
 23ea458:	4812      	ldr	r0, [pc, #72]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea45a:	f7fb fd5c 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea45e:	b110      	cbz	r0, 23ea466 <_Z17Function_DoAction6String+0x736>
            Output ("TXI15M: Removed TX5M File");
 23ea460:	4822      	ldr	r0, [pc, #136]	; (23ea4ec <_Z17Function_DoAction6String+0x7bc>)
 23ea462:	f7fc f803 	bl	23e646c <_Z6OutputPKc>
        if (SD.exists(SD_TX10M_FILE)) {
 23ea466:	4912      	ldr	r1, [pc, #72]	; (23ea4b0 <_Z17Function_DoAction6String+0x780>)
 23ea468:	480e      	ldr	r0, [pc, #56]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea46a:	f7fb fd39 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea46e:	b138      	cbz	r0, 23ea480 <_Z17Function_DoAction6String+0x750>
          if (SD.remove (SD_TX10M_FILE)) {
 23ea470:	490f      	ldr	r1, [pc, #60]	; (23ea4b0 <_Z17Function_DoAction6String+0x780>)
 23ea472:	480c      	ldr	r0, [pc, #48]	; (23ea4a4 <_Z17Function_DoAction6String+0x774>)
 23ea474:	f7fb fd4f 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea478:	b110      	cbz	r0, 23ea480 <_Z17Function_DoAction6String+0x750>
            Output ("TXI15M: Removed TX10M File");
 23ea47a:	481d      	ldr	r0, [pc, #116]	; (23ea4f0 <_Z17Function_DoAction6String+0x7c0>)
 23ea47c:	f7fb fff6 	bl	23e646c <_Z6OutputPKc>
        obs_tx_interval = 15;
 23ea480:	220f      	movs	r2, #15
 23ea482:	2300      	movs	r3, #0
        Output ("TXI15M SET"); 
 23ea484:	481b      	ldr	r0, [pc, #108]	; (23ea4f4 <_Z17Function_DoAction6String+0x7c4>)
        obs_tx_interval = 15;
 23ea486:	e9c5 2300 	strd	r2, r3, [r5]
        Output ("TXI15M SET"); 
 23ea48a:	e4c7      	b.n	23e9e1c <_Z17Function_DoAction6String+0xec>
      Output("TXI15M, SD NF"); 
 23ea48c:	481a      	ldr	r0, [pc, #104]	; (23ea4f8 <_Z17Function_DoAction6String+0x7c8>)
 23ea48e:	e4ed      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
    Output("DoAction:UKN"); 
 23ea490:	481a      	ldr	r0, [pc, #104]	; (23ea4fc <_Z17Function_DoAction6String+0x7cc>)
 23ea492:	e4eb      	b.n	23e9e6c <_Z17Function_DoAction6String+0x13c>
 23ea494:	023fdfbf 	.word	0x023fdfbf
 23ea498:	023fdfb6 	.word	0x023fdfb6
 23ea49c:	1006a77c 	.word	0x1006a77c
 23ea4a0:	1006a155 	.word	0x1006a155
 23ea4a4:	1006a2d0 	.word	0x1006a2d0
 23ea4a8:	023fdfc5 	.word	0x023fdfc5
 23ea4ac:	1006a1a8 	.word	0x1006a1a8
 23ea4b0:	1006a14a 	.word	0x1006a14a
 23ea4b4:	023fdfd8 	.word	0x023fdfd8
 23ea4b8:	023fdfe2 	.word	0x023fdfe2
 23ea4bc:	023fdff1 	.word	0x023fdff1
 23ea4c0:	023fe00b 	.word	0x023fe00b
 23ea4c4:	023fe021 	.word	0x023fe021
 23ea4c8:	023fe018 	.word	0x023fe018
 23ea4cc:	023fe028 	.word	0x023fe028
 23ea4d0:	023fe057 	.word	0x023fe057
 23ea4d4:	023fe03c 	.word	0x023fe03c
 23ea4d8:	023fe047 	.word	0x023fe047
 23ea4dc:	023fe070 	.word	0x023fe070
 23ea4e0:	023fe087 	.word	0x023fe087
 23ea4e4:	023fe07e 	.word	0x023fe07e
 23ea4e8:	023fe08e 	.word	0x023fe08e
 23ea4ec:	023fe0a2 	.word	0x023fe0a2
 23ea4f0:	023fe0bc 	.word	0x023fe0bc
 23ea4f4:	023fe0d7 	.word	0x023fe0d7
 23ea4f8:	023fe0e2 	.word	0x023fe0e2
 23ea4fc:	023fe0f0 	.word	0x023fe0f0

023ea500 <_Z14TXI_Initializev>:
/* 
 *=======================================================================================================================
 * TXI_Initialize() - Transmit Interval 5, 10 or 15 minutes
 *=======================================================================================================================
 */
void TXI_Initialize() {
 23ea500:	b510      	push	{r4, lr}
  Output ("TXI:INIT");
 23ea502:	4822      	ldr	r0, [pc, #136]	; (23ea58c <_Z14TXI_Initializev+0x8c>)
 23ea504:	f7fb ffb2 	bl	23e646c <_Z6OutputPKc>
  if (SD_exists) {
 23ea508:	4b21      	ldr	r3, [pc, #132]	; (23ea590 <_Z14TXI_Initializev+0x90>)
 23ea50a:	4c22      	ldr	r4, [pc, #136]	; (23ea594 <_Z14TXI_Initializev+0x94>)
 23ea50c:	781b      	ldrb	r3, [r3, #0]
 23ea50e:	b1c3      	cbz	r3, 23ea542 <_Z14TXI_Initializev+0x42>
    if (SD.exists(SD_TX5M_FILE)) {
 23ea510:	4921      	ldr	r1, [pc, #132]	; (23ea598 <_Z14TXI_Initializev+0x98>)
 23ea512:	4822      	ldr	r0, [pc, #136]	; (23ea59c <_Z14TXI_Initializev+0x9c>)
 23ea514:	f7fb fce4 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea518:	b1e8      	cbz	r0, 23ea556 <_Z14TXI_Initializev+0x56>
      Output ("TXI5M Found");
 23ea51a:	4821      	ldr	r0, [pc, #132]	; (23ea5a0 <_Z14TXI_Initializev+0xa0>)
 23ea51c:	f7fb ffa6 	bl	23e646c <_Z6OutputPKc>
      obs_tx_interval = 5;
 23ea520:	2205      	movs	r2, #5
 23ea522:	2300      	movs	r3, #0
      if (SD.exists(SD_TX10M_FILE)) {
 23ea524:	491f      	ldr	r1, [pc, #124]	; (23ea5a4 <_Z14TXI_Initializev+0xa4>)
 23ea526:	481d      	ldr	r0, [pc, #116]	; (23ea59c <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 5;
 23ea528:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX10M_FILE)) {
 23ea52c:	f7fb fcd8 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea530:	b138      	cbz	r0, 23ea542 <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX10M_FILE)) {
 23ea532:	491c      	ldr	r1, [pc, #112]	; (23ea5a4 <_Z14TXI_Initializev+0xa4>)
 23ea534:	4819      	ldr	r0, [pc, #100]	; (23ea59c <_Z14TXI_Initializev+0x9c>)
 23ea536:	f7fb fcee 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea53a:	b110      	cbz	r0, 23ea542 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 10M");
 23ea53c:	481a      	ldr	r0, [pc, #104]	; (23ea5a8 <_Z14TXI_Initializev+0xa8>)
    else if (SD.exists(SD_TX10M_FILE)) {
      Output ("TXI10M Found");
      obs_tx_interval = 10;
      if (SD.exists(SD_TX5M_FILE)) {
        if (SD.remove (SD_TX5M_FILE)) {
          Output ("TXI:RM 5M");
 23ea53e:	f7fb ff95 	bl	23e646c <_Z6OutputPKc>
        }
      }
    }
  }
  sprintf (msgbuf, "TXI=%dM", (int) obs_tx_interval);
 23ea542:	6822      	ldr	r2, [r4, #0]
 23ea544:	4919      	ldr	r1, [pc, #100]	; (23ea5ac <_Z14TXI_Initializev+0xac>)
 23ea546:	481a      	ldr	r0, [pc, #104]	; (23ea5b0 <_Z14TXI_Initializev+0xb0>)
 23ea548:	f00d fabc 	bl	23f7ac4 <sprintf>
  Output(msgbuf);  
 23ea54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output(msgbuf);  
 23ea550:	4817      	ldr	r0, [pc, #92]	; (23ea5b0 <_Z14TXI_Initializev+0xb0>)
 23ea552:	f7fb bf8b 	b.w	23e646c <_Z6OutputPKc>
    else if (SD.exists(SD_TX10M_FILE)) {
 23ea556:	4913      	ldr	r1, [pc, #76]	; (23ea5a4 <_Z14TXI_Initializev+0xa4>)
 23ea558:	4810      	ldr	r0, [pc, #64]	; (23ea59c <_Z14TXI_Initializev+0x9c>)
 23ea55a:	f7fb fcc1 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea55e:	2800      	cmp	r0, #0
 23ea560:	d0ef      	beq.n	23ea542 <_Z14TXI_Initializev+0x42>
      Output ("TXI10M Found");
 23ea562:	4814      	ldr	r0, [pc, #80]	; (23ea5b4 <_Z14TXI_Initializev+0xb4>)
 23ea564:	f7fb ff82 	bl	23e646c <_Z6OutputPKc>
      obs_tx_interval = 10;
 23ea568:	220a      	movs	r2, #10
 23ea56a:	2300      	movs	r3, #0
      if (SD.exists(SD_TX5M_FILE)) {
 23ea56c:	490a      	ldr	r1, [pc, #40]	; (23ea598 <_Z14TXI_Initializev+0x98>)
 23ea56e:	480b      	ldr	r0, [pc, #44]	; (23ea59c <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 10;
 23ea570:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX5M_FILE)) {
 23ea574:	f7fb fcb4 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ea578:	2800      	cmp	r0, #0
 23ea57a:	d0e2      	beq.n	23ea542 <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX5M_FILE)) {
 23ea57c:	4906      	ldr	r1, [pc, #24]	; (23ea598 <_Z14TXI_Initializev+0x98>)
 23ea57e:	4807      	ldr	r0, [pc, #28]	; (23ea59c <_Z14TXI_Initializev+0x9c>)
 23ea580:	f7fb fcc9 	bl	23e5f16 <_ZN8FsVolume6removeEPKc>
 23ea584:	2800      	cmp	r0, #0
 23ea586:	d0dc      	beq.n	23ea542 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 5M");
 23ea588:	480b      	ldr	r0, [pc, #44]	; (23ea5b8 <_Z14TXI_Initializev+0xb8>)
 23ea58a:	e7d8      	b.n	23ea53e <_Z14TXI_Initializev+0x3e>
 23ea58c:	023fe0fd 	.word	0x023fe0fd
 23ea590:	1006a77c 	.word	0x1006a77c
 23ea594:	1006a1a8 	.word	0x1006a1a8
 23ea598:	1006a155 	.word	0x1006a155
 23ea59c:	1006a2d0 	.word	0x1006a2d0
 23ea5a0:	023fe106 	.word	0x023fe106
 23ea5a4:	1006a14a 	.word	0x1006a14a
 23ea5a8:	023fe112 	.word	0x023fe112
 23ea5ac:	023fe134 	.word	0x023fe134
 23ea5b0:	1006f128 	.word	0x1006f128
 23ea5b4:	023fe11d 	.word	0x023fe11d
 23ea5b8:	023fe12a 	.word	0x023fe12a

023ea5bc <_Z9HeartBeatv>:
/*
 * ======================================================================================================================
 * HeartBeat() - Burns 250 ms 
 * ======================================================================================================================
 */
void HeartBeat() {
 23ea5bc:	b508      	push	{r3, lr}
#if (PLATFORM_ID == PLATFORM_MSOM)
  Watchdog.refresh();
 23ea5be:	f7fb fc65 	bl	23e5e8c <_ZN8particle13WatchdogClass11getInstanceEv>
 23ea5c2:	f00f fac2 	bl	23f9b4a <_ZN8particle13WatchdogClass7refreshEv>
#else
  digitalWrite(HEARTBEAT_PIN, HIGH);
  delay(250);
  digitalWrite(HEARTBEAT_PIN, LOW);
#endif
}
 23ea5c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(250);
 23ea5ca:	20fa      	movs	r0, #250	; 0xfa
 23ea5cc:	f00d bb5a 	b.w	23f7c84 <delay>

023ea5d0 <_Z17Serial_Initializev>:
/*
 * ======================================================================================================================
 * Serial_Initialize() -
 * ======================================================================================================================
 */
void Serial_Initialize() {
 23ea5d0:	b510      	push	{r4, lr}
  // serial console enable pin
  pinMode(SCE_PIN, INPUT_PULLUP);   // Internal pullup resistor biases the pin to supply voltage.
 23ea5d2:	4c20      	ldr	r4, [pc, #128]	; (23ea654 <_Z17Serial_Initializev+0x84>)
 23ea5d4:	2102      	movs	r1, #2
 23ea5d6:	8820      	ldrh	r0, [r4, #0]
 23ea5d8:	f00f fc04 	bl	23f9de4 <pinMode>
                                    // If jumper set to ground, we enable serial console (low = enable)
  if (digitalRead(SCE_PIN) == LOW) {
 23ea5dc:	8820      	ldrh	r0, [r4, #0]
 23ea5de:	f00f fc2b 	bl	23f9e38 <digitalRead>
 23ea5e2:	4c1d      	ldr	r4, [pc, #116]	; (23ea658 <_Z17Serial_Initializev+0x88>)
 23ea5e4:	b908      	cbnz	r0, 23ea5ea <_Z17Serial_Initializev+0x1a>
    SerialConsoleEnabled = true;
 23ea5e6:	2301      	movs	r3, #1
 23ea5e8:	7023      	strb	r3, [r4, #0]
  }

  // There are libraries that print to Serial Console so we need to initialize no mater what the jumper is set to.
  Serial.begin(9600);
 23ea5ea:	f00f fa81 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23ea5ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23ea5f2:	f00f fa6d 	bl	23f9ad0 <_ZN9USBSerial5beginEl>
  delay(1000); // prevents usb driver crash on startup, do not omit this
 23ea5f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ea5fa:	f00d fb43 	bl	23f7c84 <delay>

  if (SerialConsoleEnabled) {
 23ea5fe:	7823      	ldrb	r3, [r4, #0]
 23ea600:	b33b      	cbz	r3, 23ea652 <_Z17Serial_Initializev+0x82>
    // Wait for serial port to be available
    if (!Serial.isConnected()) {
 23ea602:	f00f fa75 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23ea606:	f00f fa67 	bl	23f9ad8 <_ZN9USBSerial11isConnectedEv>
 23ea60a:	b910      	cbnz	r0, 23ea612 <_Z17Serial_Initializev+0x42>
      OLED_write("Wait4 Serial Console");
 23ea60c:	4813      	ldr	r0, [pc, #76]	; (23ea65c <_Z17Serial_Initializev+0x8c>)
 23ea60e:	f7fb fe89 	bl	23e6324 <_Z10OLED_writePKc>
void Serial_Initialize() {
 23ea612:	243d      	movs	r4, #61	; 0x3d
    }
    int countdown=60; // Wait N seconds for serial connection, then move on.
    while (!Serial.isConnected() && countdown) {
 23ea614:	f00f fa6c 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23ea618:	f00f fa5e 	bl	23f9ad8 <_ZN9USBSerial11isConnectedEv>
 23ea61c:	b948      	cbnz	r0, 23ea632 <_Z17Serial_Initializev+0x62>
 23ea61e:	3c01      	subs	r4, #1
 23ea620:	d007      	beq.n	23ea632 <_Z17Serial_Initializev+0x62>
      HeartBeat(); // Provices 250ms delay
 23ea622:	f7ff ffcb 	bl	23ea5bc <_Z9HeartBeatv>
      Blink(1, 750);
 23ea626:	f240 21ee 	movw	r1, #750	; 0x2ee
 23ea62a:	2001      	movs	r0, #1
 23ea62c:	f7fb fd2a 	bl	23e6084 <_Z5Blinkii>
    while (!Serial.isConnected() && countdown) {
 23ea630:	e7f0      	b.n	23ea614 <_Z17Serial_Initializev+0x44>
      countdown--;
    }

    Serial_writeln(""); // Send carriage return and linefeed
 23ea632:	480b      	ldr	r0, [pc, #44]	; (23ea660 <_Z17Serial_Initializev+0x90>)
 23ea634:	f7fb ff02 	bl	23e643c <_Z14Serial_writelnPKc>
    
    if (DisplayEnabled) {
 23ea638:	4b0a      	ldr	r3, [pc, #40]	; (23ea664 <_Z17Serial_Initializev+0x94>)
 23ea63a:	781b      	ldrb	r3, [r3, #0]
 23ea63c:	b13b      	cbz	r3, 23ea64e <_Z17Serial_Initializev+0x7e>
      Serial_writeln ("OLED:Enabled");
 23ea63e:	480a      	ldr	r0, [pc, #40]	; (23ea668 <_Z17Serial_Initializev+0x98>)
    }
    else {
      Serial_writeln ("OLED:Disabled");
 23ea640:	f7fb fefc 	bl	23e643c <_Z14Serial_writelnPKc>
    }
    Output ("SC:Enabled");
  }
}
 23ea644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output ("SC:Enabled");
 23ea648:	4808      	ldr	r0, [pc, #32]	; (23ea66c <_Z17Serial_Initializev+0x9c>)
 23ea64a:	f7fb bf0f 	b.w	23e646c <_Z6OutputPKc>
      Serial_writeln ("OLED:Disabled");
 23ea64e:	4808      	ldr	r0, [pc, #32]	; (23ea670 <_Z17Serial_Initializev+0xa0>)
 23ea650:	e7f6      	b.n	23ea640 <_Z17Serial_Initializev+0x70>
}
 23ea652:	bd10      	pop	{r4, pc}
 23ea654:	1006a108 	.word	0x1006a108
 23ea658:	1006a7d3 	.word	0x1006a7d3
 23ea65c:	023fe13c 	.word	0x023fe13c
 23ea660:	023fe708 	.word	0x023fe708
 23ea664:	1006a101 	.word	0x1006a101
 23ea668:	023fe151 	.word	0x023fe151
 23ea66c:	023fe16c 	.word	0x023fe16c
 23ea670:	023fe15e 	.word	0x023fe15e

023ea674 <_Z17Output_Initializev>:
/*
 * ======================================================================================================================
 * Output_Initialize() -
 * ======================================================================================================================
 */
void Output_Initialize() {
 23ea674:	b508      	push	{r3, lr}
  OLED_initialize();
 23ea676:	f7fb ff03 	bl	23e6480 <_Z15OLED_initializev>
  Output("SER:Init");
 23ea67a:	4805      	ldr	r0, [pc, #20]	; (23ea690 <_Z17Output_Initializev+0x1c>)
 23ea67c:	f7fb fef6 	bl	23e646c <_Z6OutputPKc>
  Serial_Initialize();
 23ea680:	f7ff ffa6 	bl	23ea5d0 <_Z17Serial_Initializev>
  Output("SER:OK");
 23ea684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output("SER:OK");
 23ea688:	4802      	ldr	r0, [pc, #8]	; (23ea694 <_Z17Output_Initializev+0x20>)
 23ea68a:	f7fb beef 	b.w	23e646c <_Z6OutputPKc>
 23ea68e:	bf00      	nop
 23ea690:	023fe177 	.word	0x023fe177
 23ea694:	023fe180 	.word	0x023fe180

023ea698 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 23ea698:	2200      	movs	r2, #0
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 23ea69a:	b570      	push	{r4, r5, r6, lr}
 23ea69c:	b08c      	sub	sp, #48	; 0x30
 23ea69e:	460d      	mov	r5, r1
    const int ret = diag_get_source(id, &src, nullptr);
 23ea6a0:	4669      	mov	r1, sp
 23ea6a2:	4676      	mov	r6, lr
    const diag_source* src = nullptr;
 23ea6a4:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
 23ea6a6:	f00c ff97 	bl	23f75d8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 23ea6aa:	b9e8      	cbnz	r0, 23ea6e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x50>
        return ret;
    }
    return get(src, val);
 23ea6ac:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
 23ea6ae:	b10c      	cbz	r4, 23ea6b4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 23ea6b0:	6923      	ldr	r3, [r4, #16]
 23ea6b2:	b97b      	cbnz	r3, 23ea6d4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>
 23ea6b4:	222c      	movs	r2, #44	; 0x2c
 23ea6b6:	2100      	movs	r1, #0
 23ea6b8:	a801      	add	r0, sp, #4
 23ea6ba:	f012 f9f4 	bl	23fcaa6 <memset>
 23ea6be:	4b0b      	ldr	r3, [pc, #44]	; (23ea6ec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x54>)
 23ea6c0:	9604      	str	r6, [sp, #16]
 23ea6c2:	9301      	str	r3, [sp, #4]
 23ea6c4:	4b0a      	ldr	r3, [pc, #40]	; (23ea6f0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x58>)
 23ea6c6:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23ea6c8:	467b      	mov	r3, pc
 23ea6ca:	2100      	movs	r1, #0
 23ea6cc:	a801      	add	r0, sp, #4
 23ea6ce:	9303      	str	r3, [sp, #12]
 23ea6d0:	f00c ff90 	bl	23f75f4 <panic_ext>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 23ea6d4:	230c      	movs	r3, #12
 23ea6d6:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23ea6da:	2304      	movs	r3, #4
 23ea6dc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 23ea6de:	2101      	movs	r1, #1
 23ea6e0:	4620      	mov	r0, r4
 23ea6e2:	6923      	ldr	r3, [r4, #16]
 23ea6e4:	aa01      	add	r2, sp, #4
 23ea6e6:	4798      	blx	r3
}
 23ea6e8:	b00c      	add	sp, #48	; 0x30
 23ea6ea:	bd70      	pop	{r4, r5, r6, pc}
 23ea6ec:	000a002c 	.word	0x000a002c
 23ea6f0:	023fe187 	.word	0x023fe187

023ea6f4 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
 23ea6f4:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 23ea6f6:	2003      	movs	r0, #3
 23ea6f8:	a901      	add	r1, sp, #4
 23ea6fa:	f7ff ffcd 	bl	23ea698 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 23ea6fe:	b940      	cbnz	r0, 23ea712 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 23ea700:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23ea704:	ee00 3a10 	vmov	s0, r3
 23ea708:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
 23ea70c:	b003      	add	sp, #12
 23ea70e:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
 23ea712:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23ea716:	e7f9      	b.n	23ea70c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

023ea718 <_ZNK11SystemClass12batteryStateEv.isra.0>:
    int batteryState() const {
 23ea718:	b507      	push	{r0, r1, r2, lr}
 23ea71a:	2007      	movs	r0, #7
 23ea71c:	a901      	add	r1, sp, #4
 23ea71e:	f7ff ffbb 	bl	23ea698 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23ea722:	2800      	cmp	r0, #0
        return val;
 23ea724:	bfa8      	it	ge
 23ea726:	9801      	ldrge	r0, [sp, #4]
    }
 23ea728:	b003      	add	sp, #12
 23ea72a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ea730 <_Z6OBS_Dov>:
/*
 * ======================================================================================================================
 * OBS_Do() - Get Observations - Should be called once a minute
 * ======================================================================================================================
 */
void OBS_Do() {
 23ea730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ea734:	ed2d 8b06 	vpush	{d8-d10}
 23ea738:	b099      	sub	sp, #100	; 0x64

// Output("DB:OBS_Start");


  // Safty Check for Vaild Time
  if (!Time.isValid()) {
 23ea73a:	f00f f8a5 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23ea73e:	b948      	cbnz	r0, 23ea754 <_Z6OBS_Dov+0x24>
    Output ("OBS_Do: Time NV");
 23ea740:	4803      	ldr	r0, [pc, #12]	; (23ea750 <_Z6OBS_Dov+0x20>)
  // Save Observation to SD Card
  OBS_Log(oidx);

  lastOBS = System.millis();
// Output("DB:OBS_Exit");
}
 23ea742:	b019      	add	sp, #100	; 0x64
 23ea744:	ecbd 8b06 	vpop	{d8-d10}
 23ea748:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Output ("OBS_Do: Time NV");
 23ea74c:	f7fb be8e 	b.w	23e646c <_Z6OutputPKc>
 23ea750:	023fe1a8 	.word	0x023fe1a8
  Wind_GustUpdate(); // Update Gust and Gust Direction readings
 23ea754:	f7fd ff0c 	bl	23e8570 <_Z15Wind_GustUpdatev>
  int BatteryState = System.batteryState();
 23ea758:	f7ff ffde 	bl	23ea718 <_ZNK11SystemClass12batteryStateEv.isra.0>
  CellularSignal sig = Cellular.RSSI();
 23ea75c:	49de      	ldr	r1, [pc, #888]	; (23eaad8 <_Z6OBS_Dov+0x3a8>)
  int BatteryState = System.batteryState();
 23ea75e:	4681      	mov	r9, r0
  CellularSignal sig = Cellular.RSSI();
 23ea760:	a804      	add	r0, sp, #16
 23ea762:	f00d faff 	bl	23f7d64 <_ZN5spark13CellularClass4RSSIEv>
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23ea766:	48dd      	ldr	r0, [pc, #884]	; (23eaadc <_Z6OBS_Dov+0x3ac>)
 23ea768:	f00e fc10 	bl	23f8f8c <_ZN4PMIC8getFaultEv>
  if (BatteryState>0 && BatteryState<6) {
 23ea76c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 23ea770:	2b04      	cmp	r3, #4
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23ea772:	4682      	mov	sl, r0
  if (BatteryState>0 && BatteryState<6) {
 23ea774:	f200 81f8 	bhi.w	23eab68 <_Z6OBS_Dov+0x438>
    BatteryPoC = System.batteryCharge();
 23ea778:	f7ff ffbc 	bl	23ea6f4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23ea77c:	eeb0 8a40 	vmov.f32	s16, s0
  oidx = OBS_Open();    // Get a free observation spot
 23ea780:	f7ff fa4c 	bl	23e9c1c <_Z8OBS_Openv>
  obs[oidx].inuse = true;
 23ea784:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea788:	f04f 0801 	mov.w	r8, #1
 23ea78c:	4346      	muls	r6, r0
 23ea78e:	4cd4      	ldr	r4, [pc, #848]	; (23eaae0 <_Z6OBS_Dov+0x3b0>)
  oidx = OBS_Open();    // Get a free observation spot
 23ea790:	9000      	str	r0, [sp, #0]
  obs[oidx].inuse = true;
 23ea792:	f804 8006 	strb.w	r8, [r4, r6]
  obs[oidx].ts = Time.now();
 23ea796:	f00f f894 	bl	23f98c2 <_ZN9TimeClass3nowEv>
  obs[oidx].inuse = true;
 23ea79a:	19a7      	adds	r7, r4, r6
  obs[oidx].ts = Time.now();
 23ea79c:	17c3      	asrs	r3, r0, #31
 23ea79e:	e9c7 0302 	strd	r0, r3, [r7, #8]
  obs[oidx].css = sig.getStrength();
 23ea7a2:	a804      	add	r0, sp, #16
 23ea7a4:	f00d fb3c 	bl	23f7e20 <_ZNK14CellularSignal11getStrengthEv>
 23ea7a8:	f106 0518 	add.w	r5, r6, #24
 23ea7ac:	ed87 0a04 	vstr	s0, [r7, #16]
  strcpy (obs[oidx].sensor[sidx].id, "bcs");
 23ea7b0:	49cc      	ldr	r1, [pc, #816]	; (23eaae4 <_Z6OBS_Dov+0x3b4>)
 23ea7b2:	1960      	adds	r0, r4, r5
 23ea7b4:	f012 f9ec 	bl	23fcb90 <strcpy>
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23ea7b8:	f106 0034 	add.w	r0, r6, #52	; 0x34
 23ea7bc:	49ca      	ldr	r1, [pc, #808]	; (23eaae8 <_Z6OBS_Dov+0x3b8>)
  obs[oidx].sensor[sidx].type = I_OBS;
 23ea7be:	f8c7 8020 	str.w	r8, [r7, #32]
  obs[oidx].sensor[sidx].i_obs = BatteryState;
 23ea7c2:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  obs[oidx].sensor[sidx++].inuse = true;
 23ea7c6:	f887 8030 	strb.w	r8, [r7, #48]	; 0x30
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23ea7ca:	4420      	add	r0, r4
 23ea7cc:	f012 f9e0 	bl	23fcb90 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea7d0:	2300      	movs	r3, #0
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23ea7d2:	f106 0050 	add.w	r0, r6, #80	; 0x50
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  obs[oidx].sensor[sidx].f_obs = BatteryPoC;
 23ea7d8:	ed87 8a10 	vstr	s16, [r7, #64]	; 0x40
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23ea7dc:	49c3      	ldr	r1, [pc, #780]	; (23eaaec <_Z6OBS_Dov+0x3bc>)
  obs[oidx].sensor[sidx++].inuse = true;
 23ea7de:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23ea7e2:	4420      	add	r0, r4
 23ea7e4:	f012 f9d4 	bl	23fcb90 <strcpy>
  obs[oidx].sensor[sidx].i_obs = cfr;
 23ea7e8:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
  obs[oidx].sensor[sidx].type = I_OBS;
 23ea7ec:	f8c7 8058 	str.w	r8, [r7, #88]	; 0x58
  obs[oidx].sensor[sidx++].inuse = true;
 23ea7f0:	f887 8068 	strb.w	r8, [r7, #104]	; 0x68
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23ea7f4:	f7fb faf6 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ea7f8:	468c      	mov	ip, r1
 23ea7fa:	4fbd      	ldr	r7, [pc, #756]	; (23eaaf0 <_Z6OBS_Dov+0x3c0>)
 23ea7fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ea800:	683b      	ldr	r3, [r7, #0]
 23ea802:	6879      	ldr	r1, [r7, #4]
 23ea804:	1ac0      	subs	r0, r0, r3
 23ea806:	eb6c 0101 	sbc.w	r1, ip, r1
 23ea80a:	2300      	movs	r3, #0
 23ea80c:	f7fa fb3e 	bl	23e4e8c <__aeabi_uldivmod>
  rain = raingauge1_interrupt_count * 0.2;
 23ea810:	f8df b32c 	ldr.w	fp, [pc, #812]	; 23eab40 <_Z6OBS_Dov+0x410>
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23ea814:	4682      	mov	sl, r0
  rain = raingauge1_interrupt_count * 0.2;
 23ea816:	f8db 0000 	ldr.w	r0, [fp]
 23ea81a:	f7f9 fe17 	bl	23e444c <__aeabi_ui2d>
 23ea81e:	a3ac      	add	r3, pc, #688	; (adr r3, 23eaad0 <_Z6OBS_Dov+0x3a0>)
 23ea820:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea824:	f7f9 fe8c 	bl	23e4540 <__aeabi_dmul>
 23ea828:	f7fa f982 	bl	23e4b30 <__aeabi_d2f>
 23ea82c:	ee08 0a10 	vmov	s16, r0
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23ea830:	eeb4 8a48 	vcmp.f32	s16, s16
 23ea834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea838:	f180 8199 	bvs.w	23eab6e <_Z6OBS_Dov+0x43e>
 23ea83c:	f7f9 fe28 	bl	23e4490 <__aeabi_f2d>
 23ea840:	4680      	mov	r8, r0
 23ea842:	203c      	movs	r0, #60	; 0x3c
 23ea844:	fbba f0f0 	udiv	r0, sl, r0
 23ea848:	4689      	mov	r9, r1
 23ea84a:	f7f9 fdff 	bl	23e444c <__aeabi_ui2d>
 23ea84e:	2200      	movs	r2, #0
 23ea850:	4ba8      	ldr	r3, [pc, #672]	; (23eaaf4 <_Z6OBS_Dov+0x3c4>)
 23ea852:	f7f9 fe75 	bl	23e4540 <__aeabi_dmul>
 23ea856:	4602      	mov	r2, r0
 23ea858:	460b      	mov	r3, r1
 23ea85a:	4640      	mov	r0, r8
 23ea85c:	4649      	mov	r1, r9
 23ea85e:	f7fa f8ff 	bl	23e4a60 <__aeabi_dcmpgt>
 23ea862:	eddf 7aa5 	vldr	s15, [pc, #660]	; 23eaaf8 <_Z6OBS_Dov+0x3c8>
 23ea866:	2800      	cmp	r0, #0
 23ea868:	fe08 8a27 	vseleq.f32	s16, s16, s15
  raingauge1_interrupt_count = 0;
 23ea86c:	2300      	movs	r3, #0
 23ea86e:	f8cb 3000 	str.w	r3, [fp]
  raingauge1_interrupt_stime = System.millis();
 23ea872:	f7fb fab7 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ea876:	e9c7 0100 	strd	r0, r1, [r7]
  raingauge1_interrupt_ltime = 0; // used to debounce the tip
 23ea87a:	2000      	movs	r0, #0
 23ea87c:	2100      	movs	r1, #0
 23ea87e:	4b9f      	ldr	r3, [pc, #636]	; (23eaafc <_Z6OBS_Dov+0x3cc>)
 23ea880:	e9c3 0100 	strd	r0, r1, [r3]
  if (A4_State == A4_STATE_RAIN) {
 23ea884:	4b9e      	ldr	r3, [pc, #632]	; (23eab00 <_Z6OBS_Dov+0x3d0>)
 23ea886:	681b      	ldr	r3, [r3, #0]
 23ea888:	2b02      	cmp	r3, #2
 23ea88a:	f040 8176 	bne.w	23eab7a <_Z6OBS_Dov+0x44a>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23ea88e:	f7fb faa9 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ea892:	468c      	mov	ip, r1
 23ea894:	4f9b      	ldr	r7, [pc, #620]	; (23eab04 <_Z6OBS_Dov+0x3d4>)
 23ea896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ea89a:	683b      	ldr	r3, [r7, #0]
 23ea89c:	6879      	ldr	r1, [r7, #4]
 23ea89e:	1ac0      	subs	r0, r0, r3
 23ea8a0:	eb6c 0101 	sbc.w	r1, ip, r1
 23ea8a4:	2300      	movs	r3, #0
 23ea8a6:	f7fa faf1 	bl	23e4e8c <__aeabi_uldivmod>
    rain2 = raingauge2_interrupt_count * 0.2;
 23ea8aa:	f8df 9298 	ldr.w	r9, [pc, #664]	; 23eab44 <_Z6OBS_Dov+0x414>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23ea8ae:	4680      	mov	r8, r0
    rain2 = raingauge2_interrupt_count * 0.2;
 23ea8b0:	f8d9 0000 	ldr.w	r0, [r9]
 23ea8b4:	f7f9 fdca 	bl	23e444c <__aeabi_ui2d>
 23ea8b8:	a385      	add	r3, pc, #532	; (adr r3, 23eaad0 <_Z6OBS_Dov+0x3a0>)
 23ea8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea8be:	f7f9 fe3f 	bl	23e4540 <__aeabi_dmul>
 23ea8c2:	f7fa f935 	bl	23e4b30 <__aeabi_d2f>
 23ea8c6:	ee09 0a10 	vmov	s18, r0
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23ea8ca:	eeb4 9a49 	vcmp.f32	s18, s18
 23ea8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea8d2:	f180 814f 	bvs.w	23eab74 <_Z6OBS_Dov+0x444>
 23ea8d6:	f7f9 fddb 	bl	23e4490 <__aeabi_f2d>
 23ea8da:	4682      	mov	sl, r0
 23ea8dc:	203c      	movs	r0, #60	; 0x3c
 23ea8de:	fbb8 f0f0 	udiv	r0, r8, r0
 23ea8e2:	468b      	mov	fp, r1
 23ea8e4:	f7f9 fdb2 	bl	23e444c <__aeabi_ui2d>
 23ea8e8:	2200      	movs	r2, #0
 23ea8ea:	4b82      	ldr	r3, [pc, #520]	; (23eaaf4 <_Z6OBS_Dov+0x3c4>)
 23ea8ec:	f7f9 fe28 	bl	23e4540 <__aeabi_dmul>
 23ea8f0:	4602      	mov	r2, r0
 23ea8f2:	460b      	mov	r3, r1
 23ea8f4:	4650      	mov	r0, sl
 23ea8f6:	4659      	mov	r1, fp
 23ea8f8:	f7fa f8b2 	bl	23e4a60 <__aeabi_dcmpgt>
 23ea8fc:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23eaaf8 <_Z6OBS_Dov+0x3c8>
 23ea900:	2800      	cmp	r0, #0
 23ea902:	fe09 9a27 	vseleq.f32	s18, s18, s15
    raingauge2_interrupt_count = 0;
 23ea906:	2300      	movs	r3, #0
 23ea908:	f8c9 3000 	str.w	r3, [r9]
    raingauge2_interrupt_stime = System.millis();
 23ea90c:	f7fb fa6a 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ea910:	e9c7 0100 	strd	r0, r1, [r7]
    raingauge2_interrupt_ltime = 0; // used to debounce the tip
 23ea914:	2000      	movs	r0, #0
 23ea916:	2100      	movs	r1, #0
 23ea918:	4b7b      	ldr	r3, [pc, #492]	; (23eab08 <_Z6OBS_Dov+0x3d8>)
 23ea91a:	e9c3 0100 	strd	r0, r1, [r3]
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea91e:	f640 2798 	movw	r7, #2712	; 0xa98
 23ea922:	f04f 0800 	mov.w	r8, #0
  obs[oidx].sensor[sidx++].inuse = true;
 23ea926:	f04f 0901 	mov.w	r9, #1
  EEPROM_UpdateRainTotals(rain, rain2);
 23ea92a:	eeb0 0a48 	vmov.f32	s0, s16
 23ea92e:	eef0 0a49 	vmov.f32	s1, s18
 23ea932:	f7fe f9df 	bl	23e8cf4 <_Z23EEPROM_UpdateRainTotalsff>
  strcpy (obs[oidx].sensor[sidx].id, "rg");
 23ea936:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 23ea93a:	4974      	ldr	r1, [pc, #464]	; (23eab0c <_Z6OBS_Dov+0x3dc>)
 23ea93c:	4420      	add	r0, r4
 23ea93e:	f012 f927 	bl	23fcb90 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea942:	9b00      	ldr	r3, [sp, #0]
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23ea944:	f8df a200 	ldr.w	sl, [pc, #512]	; 23eab48 <_Z6OBS_Dov+0x418>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea948:	fb07 4703 	mla	r7, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23ea94c:	f106 0088 	add.w	r0, r6, #136	; 0x88
 23ea950:	496f      	ldr	r1, [pc, #444]	; (23eab10 <_Z6OBS_Dov+0x3e0>)
  obs[oidx].sensor[sidx].f_obs = rain;
 23ea952:	ed87 8a1e 	vstr	s16, [r7, #120]	; 0x78
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea956:	f8c7 8074 	str.w	r8, [r7, #116]	; 0x74
  obs[oidx].sensor[sidx++].inuse = true;
 23ea95a:	f887 9084 	strb.w	r9, [r7, #132]	; 0x84
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23ea95e:	4420      	add	r0, r4
 23ea960:	f012 f916 	bl	23fcb90 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23ea964:	f8da 3000 	ldr.w	r3, [sl]
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23ea968:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 23ea96c:	4969      	ldr	r1, [pc, #420]	; (23eab14 <_Z6OBS_Dov+0x3e4>)
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23ea96e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea972:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
  obs[oidx].sensor[sidx++].inuse = true;
 23ea976:	f887 90a0 	strb.w	r9, [r7, #160]	; 0xa0
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23ea97a:	4420      	add	r0, r4
 23ea97c:	f012 f908 	bl	23fcb90 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23ea980:	f8da 3004 	ldr.w	r3, [sl, #4]
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23ea984:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23ea988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23ea98c:	4962      	ldr	r1, [pc, #392]	; (23eab18 <_Z6OBS_Dov+0x3e8>)
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea98e:	f8c7 80ac 	str.w	r8, [r7, #172]	; 0xac
  obs[oidx].sensor[sidx++].inuse = true;
 23ea992:	f887 90bc 	strb.w	r9, [r7, #188]	; 0xbc
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23ea996:	4420      	add	r0, r4
 23ea998:	f012 f8fa 	bl	23fcb90 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ea99c:	f8c7 80c8 	str.w	r8, [r7, #200]	; 0xc8
  ws = Wind_SpeedAverage();
 23ea9a0:	f7fd fdcc 	bl	23e853c <_Z17Wind_SpeedAveragev>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ea9a4:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea9ac:	f180 80e8 	bvs.w	23eab80 <_Z6OBS_Dov+0x450>
 23ea9b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ea9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea9b8:	f100 80e2 	bmi.w	23eab80 <_Z6OBS_Dov+0x450>
 23ea9bc:	eddf 7a57 	vldr	s15, [pc, #348]	; 23eab1c <_Z6OBS_Dov+0x3ec>
 23ea9c0:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea9c4:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23eaaf8 <_Z6OBS_Dov+0x3c8>
 23ea9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea9cc:	fe37 0a80 	vselgt.f32	s0, s15, s0
  obs[oidx].sensor[sidx].f_obs = ws;
 23ea9d0:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23ea9d4:	f04f 0901 	mov.w	r9, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23ea9d8:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23ea9da:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
  obs[oidx].sensor[sidx].f_obs = ws;
 23ea9de:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23ea9e2:	494f      	ldr	r1, [pc, #316]	; (23eab20 <_Z6OBS_Dov+0x3f0>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23ea9e4:	ed88 0a33 	vstr	s0, [r8, #204]	; 0xcc
  obs[oidx].sensor[sidx++].inuse = true;
 23ea9e8:	f888 90d8 	strb.w	r9, [r8, #216]	; 0xd8
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23ea9ec:	4420      	add	r0, r4
 23ea9ee:	f012 f8cf 	bl	23fcb90 <strcpy>
  obs[oidx].sensor[sidx].type = I_OBS;
 23ea9f2:	f8c8 90e4 	str.w	r9, [r8, #228]	; 0xe4
  wd = Wind_DirectionVector();
 23ea9f6:	f7fd fd0b 	bl	23e8410 <_Z20Wind_DirectionVectorv>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ea9fa:	2800      	cmp	r0, #0
 23ea9fc:	f2c0 80c3 	blt.w	23eab86 <_Z6OBS_Dov+0x456>
 23eaa00:	4b48      	ldr	r3, [pc, #288]	; (23eab24 <_Z6OBS_Dov+0x3f4>)
 23eaa02:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23eaa06:	bfc8      	it	gt
 23eaa08:	4618      	movgt	r0, r3
  obs[oidx].sensor[sidx].i_obs = wd;
 23eaa0a:	9b00      	ldr	r3, [sp, #0]
  return(wind.gust);
 23eaa0c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 23eab4c <_Z6OBS_Dov+0x41c>
 23eaa10:	fb07 4703 	mla	r7, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
 23eaa14:	2301      	movs	r3, #1
  obs[oidx].sensor[sidx].i_obs = wd;
 23eaa16:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23eaa1a:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
  obs[oidx].sensor[sidx++].inuse = true;
 23eaa1e:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23eaa22:	4941      	ldr	r1, [pc, #260]	; (23eab28 <_Z6OBS_Dov+0x3f8>)
 23eaa24:	4420      	add	r0, r4
 23eaa26:	f012 f8b3 	bl	23fcb90 <strcpy>
 23eaa2a:	edd9 7a79 	vldr	s15, [r9, #484]	; 0x1e4
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eaa2e:	eef4 7a67 	vcmp.f32	s15, s15
  obs[oidx].sensor[sidx].type = F_OBS;
 23eaa32:	2300      	movs	r3, #0
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eaa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  obs[oidx].sensor[sidx].type = F_OBS;
 23eaa38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eaa3c:	f180 80a5 	bvs.w	23eab8a <_Z6OBS_Dov+0x45a>
 23eaa40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23eaa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa48:	f100 809f 	bmi.w	23eab8a <_Z6OBS_Dov+0x45a>
 23eaa4c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 23eab1c <_Z6OBS_Dov+0x3ec>
 23eaa50:	eef4 7a47 	vcmp.f32	s15, s14
 23eaa54:	ed9f 7a28 	vldr	s14, [pc, #160]	; 23eaaf8 <_Z6OBS_Dov+0x3c8>
 23eaa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa5c:	fe77 7a27 	vselgt.f32	s15, s14, s15
  obs[oidx].sensor[sidx].f_obs = ws;
 23eaa60:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23eaa64:	f04f 0a01 	mov.w	sl, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23eaa68:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23eaa6a:	f506 708a 	add.w	r0, r6, #276	; 0x114
  obs[oidx].sensor[sidx].f_obs = ws;
 23eaa6e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23eaa72:	492e      	ldr	r1, [pc, #184]	; (23eab2c <_Z6OBS_Dov+0x3fc>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23eaa74:	edc8 7a41 	vstr	s15, [r8, #260]	; 0x104
  obs[oidx].sensor[sidx++].inuse = true;
 23eaa78:	f888 a110 	strb.w	sl, [r8, #272]	; 0x110
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23eaa7c:	4420      	add	r0, r4
 23eaa7e:	f012 f887 	bl	23fcb90 <strcpy>
  return(wind.gust_direction);
 23eaa82:	f8d9 31e8 	ldr.w	r3, [r9, #488]	; 0x1e8
  obs[oidx].sensor[sidx].type = I_OBS;
 23eaa86:	f8c8 a11c 	str.w	sl, [r8, #284]	; 0x11c
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23eaa8a:	2b00      	cmp	r3, #0
 23eaa8c:	f2c0 8080 	blt.w	23eab90 <_Z6OBS_Dov+0x460>
 23eaa90:	4a24      	ldr	r2, [pc, #144]	; (23eab24 <_Z6OBS_Dov+0x3f4>)
 23eaa92:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 23eaa96:	bfc8      	it	gt
 23eaa98:	4613      	movgt	r3, r2
  obs[oidx].sensor[sidx].i_obs = wd;
 23eaa9a:	9a00      	ldr	r2, [sp, #0]
 23eaa9c:	fb07 4702 	mla	r7, r7, r2, r4
 23eaaa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  obs[oidx].sensor[sidx++].inuse = true;
 23eaaa4:	2301      	movs	r3, #1
 23eaaa6:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
  if (BMX_1_exists) {
 23eaaaa:	4b21      	ldr	r3, [pc, #132]	; (23eab30 <_Z6OBS_Dov+0x400>)
 23eaaac:	781b      	ldrb	r3, [r3, #0]
 23eaaae:	2b00      	cmp	r3, #0
 23eaab0:	f000 8142 	beq.w	23ead38 <_Z6OBS_Dov+0x608>
    if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23eaab4:	4b1f      	ldr	r3, [pc, #124]	; (23eab34 <_Z6OBS_Dov+0x404>)
 23eaab6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23eab50 <_Z6OBS_Dov+0x420>
 23eaaba:	781b      	ldrb	r3, [r3, #0]
 23eaabc:	2b58      	cmp	r3, #88	; 0x58
 23eaabe:	d169      	bne.n	23eab94 <_Z6OBS_Dov+0x464>
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23eaac0:	481d      	ldr	r0, [pc, #116]	; (23eab38 <_Z6OBS_Dov+0x408>)
 23eaac2:	f004 feab 	bl	23ef81c <_ZN15Adafruit_BMP28012readPressureEv>
 23eaac6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23eab3c <_Z6OBS_Dov+0x40c>
 23eaaca:	e043      	b.n	23eab54 <_Z6OBS_Dov+0x424>
 23eaacc:	f3af 8000 	nop.w
 23eaad0:	9999999a 	.word	0x9999999a
 23eaad4:	3fc99999 	.word	0x3fc99999
 23eaad8:	1007aeb8 	.word	0x1007aeb8
 23eaadc:	1007aa58 	.word	0x1007aa58
 23eaae0:	1006f550 	.word	0x1006f550
 23eaae4:	023fe1b8 	.word	0x023fe1b8
 23eaae8:	023fe1bc 	.word	0x023fe1bc
 23eaaec:	023fe1c0 	.word	0x023fe1c0
 23eaaf0:	1007aa68 	.word	0x1007aa68
 23eaaf4:	403e0000 	.word	0x403e0000
 23eaaf8:	c479f99a 	.word	0xc479f99a
 23eaafc:	1007aa60 	.word	0x1007aa60
 23eab00:	1006a25c 	.word	0x1006a25c
 23eab04:	1007aa80 	.word	0x1007aa80
 23eab08:	1007aa78 	.word	0x1007aa78
 23eab0c:	023fe1c4 	.word	0x023fe1c4
 23eab10:	023fe1c7 	.word	0x023fe1c7
 23eab14:	023fe1cb 	.word	0x023fe1cb
 23eab18:	023fe1cf 	.word	0x023fe1cf
 23eab1c:	42ce0000 	.word	0x42ce0000
 23eab20:	023fe1d2 	.word	0x023fe1d2
 23eab24:	fffffc19 	.word	0xfffffc19
 23eab28:	023fe1d5 	.word	0x023fe1d5
 23eab2c:	023fe1d8 	.word	0x023fe1d8
 23eab30:	1006a282 	.word	0x1006a282
 23eab34:	1006a281 	.word	0x1006a281
 23eab38:	1006abf8 	.word	0x1006abf8
 23eab3c:	42c80000 	.word	0x42c80000
 23eab40:	1007aa5c 	.word	0x1007aa5c
 23eab44:	1007aa70 	.word	0x1007aa70
 23eab48:	1006ae5c 	.word	0x1006ae5c
 23eab4c:	1007ac6c 	.word	0x1007ac6c
 23eab50:	1006a283 	.word	0x1006a283
      t = bmp1.readTemperature();           // bt1
 23eab54:	487b      	ldr	r0, [pc, #492]	; (23ead44 <_Z6OBS_Dov+0x614>)
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23eab56:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp1.readTemperature();           // bt1
 23eab5a:	f004 fe1f 	bl	23ef79c <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm31.readTemperature();           // bt1
 23eab5e:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23eab62:	eddf 8a79 	vldr	s17, [pc, #484]	; 23ead48 <_Z6OBS_Dov+0x618>
 23eab66:	e03e      	b.n	23eabe6 <_Z6OBS_Dov+0x4b6>
  float BatteryPoC = 0.0; // Battery Percent of Charge
 23eab68:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ead48 <_Z6OBS_Dov+0x618>
 23eab6c:	e608      	b.n	23ea780 <_Z6OBS_Dov+0x50>
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23eab6e:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23eab72:	e67b      	b.n	23ea86c <_Z6OBS_Dov+0x13c>
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23eab74:	ed9f 9a75 	vldr	s18, [pc, #468]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23eab78:	e6c5      	b.n	23ea906 <_Z6OBS_Dov+0x1d6>
  float rain2 = 0.0;
 23eab7a:	ed9f 9a73 	vldr	s18, [pc, #460]	; 23ead48 <_Z6OBS_Dov+0x618>
 23eab7e:	e6ce      	b.n	23ea91e <_Z6OBS_Dov+0x1ee>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eab80:	ed9f 0a72 	vldr	s0, [pc, #456]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23eab84:	e724      	b.n	23ea9d0 <_Z6OBS_Dov+0x2a0>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23eab86:	4872      	ldr	r0, [pc, #456]	; (23ead50 <_Z6OBS_Dov+0x620>)
 23eab88:	e73f      	b.n	23eaa0a <_Z6OBS_Dov+0x2da>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eab8a:	eddf 7a70 	vldr	s15, [pc, #448]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23eab8e:	e767      	b.n	23eaa60 <_Z6OBS_Dov+0x330>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23eab90:	4b6f      	ldr	r3, [pc, #444]	; (23ead50 <_Z6OBS_Dov+0x620>)
 23eab92:	e782      	b.n	23eaa9a <_Z6OBS_Dov+0x36a>
    else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23eab94:	2b60      	cmp	r3, #96	; 0x60
 23eab96:	f040 80bb 	bne.w	23ead10 <_Z6OBS_Dov+0x5e0>
      if (BMX_1_type == BMX_TYPE_BME280) {
 23eab9a:	f899 3000 	ldrb.w	r3, [r9]
 23eab9e:	2b02      	cmp	r3, #2
 23eaba0:	f040 80af 	bne.w	23ead02 <_Z6OBS_Dov+0x5d2>
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23eaba4:	486b      	ldr	r0, [pc, #428]	; (23ead54 <_Z6OBS_Dov+0x624>)
 23eaba6:	f004 f9f1 	bl	23eef8c <_ZN15Adafruit_BME28012readPressureEv>
 23eabaa:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23ead58 <_Z6OBS_Dov+0x628>
        t = bme1.readTemperature();         // bt1
 23eabae:	4869      	ldr	r0, [pc, #420]	; (23ead54 <_Z6OBS_Dov+0x624>)
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23eabb0:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme1.readTemperature();         // bt1
 23eabb4:	f004 f9b8 	bl	23eef28 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme1.readHumidity();            // bh1 
 23eabb8:	4866      	ldr	r0, [pc, #408]	; (23ead54 <_Z6OBS_Dov+0x624>)
        t = bme1.readTemperature();         // bt1
 23eabba:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme1.readHumidity();            // bh1 
 23eabbe:	f004 fab5 	bl	23ef12c <_ZN15Adafruit_BME28012readHumidityEv>
 23eabc2:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_1_type == BMX_TYPE_BMP390) {
 23eabc6:	f899 3000 	ldrb.w	r3, [r9]
 23eabca:	2b04      	cmp	r3, #4
 23eabcc:	d10b      	bne.n	23eabe6 <_Z6OBS_Dov+0x4b6>
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23eabce:	4863      	ldr	r0, [pc, #396]	; (23ead5c <_Z6OBS_Dov+0x62c>)
 23eabd0:	f005 f82f 	bl	23efc32 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23eabd4:	eddf 7a60 	vldr	s15, [pc, #384]	; 23ead58 <_Z6OBS_Dov+0x628>
        t = bm31.readTemperature();         // bt1 
 23eabd8:	4860      	ldr	r0, [pc, #384]	; (23ead5c <_Z6OBS_Dov+0x62c>)
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23eabda:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm31.readTemperature();         // bt1 
 23eabde:	f005 f81d 	bl	23efc1c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23eabe2:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eabe6:	eef4 9a69 	vcmp.f32	s19, s19
 23eabea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eabee:	f180 809a 	bvs.w	23ead26 <_Z6OBS_Dov+0x5f6>
 23eabf2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 23ead60 <_Z6OBS_Dov+0x630>
 23eabf6:	eef4 9ae7 	vcmpe.f32	s19, s15
 23eabfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eabfe:	f100 8092 	bmi.w	23ead26 <_Z6OBS_Dov+0x5f6>
 23eac02:	eddf 7a58 	vldr	s15, [pc, #352]	; 23ead64 <_Z6OBS_Dov+0x634>
 23eac06:	eef4 9a67 	vcmp.f32	s19, s15
 23eac0a:	eddf 7a50 	vldr	s15, [pc, #320]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23eac0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac12:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eac16:	eeb4 8a48 	vcmp.f32	s16, s16
 23eac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac1e:	f180 8085 	bvs.w	23ead2c <_Z6OBS_Dov+0x5fc>
 23eac22:	eddf 7a51 	vldr	s15, [pc, #324]	; 23ead68 <_Z6OBS_Dov+0x638>
 23eac26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eac2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac2e:	d47d      	bmi.n	23ead2c <_Z6OBS_Dov+0x5fc>
 23eac30:	eddf 7a4e 	vldr	s15, [pc, #312]	; 23ead6c <_Z6OBS_Dov+0x63c>
 23eac34:	eeb4 8a67 	vcmp.f32	s16, s15
 23eac38:	eddf 7a44 	vldr	s15, [pc, #272]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23eac3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac40:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eac44:	eef4 8a68 	vcmp.f32	s17, s17
 23eac48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac4c:	d671      	bvs.n	23ead32 <_Z6OBS_Dov+0x602>
 23eac4e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23eac52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac56:	d46c      	bmi.n	23ead32 <_Z6OBS_Dov+0x602>
 23eac58:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23ead58 <_Z6OBS_Dov+0x628>
 23eac5c:	eef4 8a67 	vcmp.f32	s17, s15
 23eac60:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23eac64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac68:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    obs[oidx].sensor[sidx].type = F_OBS;
 23eac6c:	f640 2798 	movw	r7, #2712	; 0xa98
 23eac70:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eac74:	f04f 0801 	mov.w	r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "bp1");
 23eac78:	f506 7098 	add.w	r0, r6, #304	; 0x130
 23eac7c:	493c      	ldr	r1, [pc, #240]	; (23ead70 <_Z6OBS_Dov+0x640>)
 23eac7e:	4420      	add	r0, r4
 23eac80:	f011 ff86 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eac84:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23eac86:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
    obs[oidx].sensor[sidx].type = F_OBS;
 23eac8a:	fb07 4703 	mla	r7, r7, r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23eac8e:	4939      	ldr	r1, [pc, #228]	; (23ead74 <_Z6OBS_Dov+0x644>)
    obs[oidx].sensor[sidx].f_obs = p;
 23eac90:	edc7 9a4f 	vstr	s19, [r7, #316]	; 0x13c
    obs[oidx].sensor[sidx].type = F_OBS;
 23eac94:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
    obs[oidx].sensor[sidx++].inuse = true;
 23eac98:	f887 8148 	strb.w	r8, [r7, #328]	; 0x148
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23eac9c:	4420      	add	r0, r4
 23eac9e:	f011 ff77 	bl	23fcb90 <strcpy>
    if (BMX_1_type == BMX_TYPE_BME280) {
 23eaca2:	f899 3000 	ldrb.w	r3, [r9]
    obs[oidx].sensor[sidx].f_obs = t;
 23eaca6:	ed87 8a56 	vstr	s16, [r7, #344]	; 0x158
    if (BMX_1_type == BMX_TYPE_BME280) {
 23eacaa:	2b02      	cmp	r3, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eacac:	f8c7 a154 	str.w	sl, [r7, #340]	; 0x154
    obs[oidx].sensor[sidx++].inuse = true;
 23eacb0:	f887 8164 	strb.w	r8, [r7, #356]	; 0x164
    if (BMX_1_type == BMX_TYPE_BME280) {
 23eacb4:	d143      	bne.n	23ead3e <_Z6OBS_Dov+0x60e>
      strcpy (obs[oidx].sensor[sidx].id, "bh1");
 23eacb6:	f506 70b4 	add.w	r0, r6, #360	; 0x168
 23eacba:	492f      	ldr	r1, [pc, #188]	; (23ead78 <_Z6OBS_Dov+0x648>)
 23eacbc:	4420      	add	r0, r4
 23eacbe:	f011 ff67 	bl	23fcb90 <strcpy>
      obs[oidx].sensor[sidx++].inuse = true;
 23eacc2:	f887 8180 	strb.w	r8, [r7, #384]	; 0x180
      obs[oidx].sensor[sidx].f_obs = h;
 23eacc6:	edc7 8a5d 	vstr	s17, [r7, #372]	; 0x174
      obs[oidx].sensor[sidx++].inuse = true;
 23eacca:	f04f 080d 	mov.w	r8, #13
      obs[oidx].sensor[sidx].type = F_OBS;
 23eacce:	f8c7 a170 	str.w	sl, [r7, #368]	; 0x170
  if (BMX_2_exists) {
 23eacd2:	4b2a      	ldr	r3, [pc, #168]	; (23ead7c <_Z6OBS_Dov+0x64c>)
 23eacd4:	781b      	ldrb	r3, [r3, #0]
 23eacd6:	2b00      	cmp	r3, #0
 23eacd8:	f000 8108 	beq.w	23eaeec <_Z6OBS_Dov+0x7bc>
    if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23eacdc:	4b28      	ldr	r3, [pc, #160]	; (23ead80 <_Z6OBS_Dov+0x650>)
 23eacde:	781b      	ldrb	r3, [r3, #0]
 23eace0:	2b58      	cmp	r3, #88	; 0x58
 23eace2:	d151      	bne.n	23ead88 <_Z6OBS_Dov+0x658>
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23eace4:	4827      	ldr	r0, [pc, #156]	; (23ead84 <_Z6OBS_Dov+0x654>)
 23eace6:	f004 fd99 	bl	23ef81c <_ZN15Adafruit_BMP28012readPressureEv>
 23eacea:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23ead58 <_Z6OBS_Dov+0x628>
      t = bmp2.readTemperature();           // bt2
 23eacee:	4825      	ldr	r0, [pc, #148]	; (23ead84 <_Z6OBS_Dov+0x654>)
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23eacf0:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp2.readTemperature();           // bt2
 23eacf4:	f004 fd52 	bl	23ef79c <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm32.readTemperature();           // bt2
 23eacf8:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23eacfc:	eddf 8a12 	vldr	s17, [pc, #72]	; 23ead48 <_Z6OBS_Dov+0x618>
 23ead00:	e06a      	b.n	23eadd8 <_Z6OBS_Dov+0x6a8>
    float h = 0.0;
 23ead02:	eddf 8a11 	vldr	s17, [pc, #68]	; 23ead48 <_Z6OBS_Dov+0x618>
    float t = 0.0;
 23ead06:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23ead0a:	eef0 9a68 	vmov.f32	s19, s17
 23ead0e:	e75a      	b.n	23eabc6 <_Z6OBS_Dov+0x496>
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ead10:	4812      	ldr	r0, [pc, #72]	; (23ead5c <_Z6OBS_Dov+0x62c>)
 23ead12:	f004 ff8e 	bl	23efc32 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ead16:	eddf 7a10 	vldr	s15, [pc, #64]	; 23ead58 <_Z6OBS_Dov+0x628>
      t = bm31.readTemperature();           // bt1
 23ead1a:	4810      	ldr	r0, [pc, #64]	; (23ead5c <_Z6OBS_Dov+0x62c>)
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ead1c:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm31.readTemperature();           // bt1
 23ead20:	f004 ff7c 	bl	23efc1c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ead24:	e71b      	b.n	23eab5e <_Z6OBS_Dov+0x42e>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ead26:	eddf 9a09 	vldr	s19, [pc, #36]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23ead2a:	e774      	b.n	23eac16 <_Z6OBS_Dov+0x4e6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ead2c:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23ead30:	e788      	b.n	23eac44 <_Z6OBS_Dov+0x514>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ead32:	eddf 8a06 	vldr	s17, [pc, #24]	; 23ead4c <_Z6OBS_Dov+0x61c>
 23ead36:	e799      	b.n	23eac6c <_Z6OBS_Dov+0x53c>
  obs[oidx].sensor[sidx++].inuse = true;
 23ead38:	f04f 080a 	mov.w	r8, #10
 23ead3c:	e7c9      	b.n	23eacd2 <_Z6OBS_Dov+0x5a2>
    obs[oidx].sensor[sidx++].inuse = true;
 23ead3e:	f04f 080c 	mov.w	r8, #12
 23ead42:	e7c6      	b.n	23eacd2 <_Z6OBS_Dov+0x5a2>
 23ead44:	1006abf8 	.word	0x1006abf8
 23ead48:	00000000 	.word	0x00000000
 23ead4c:	c479f99a 	.word	0xc479f99a
 23ead50:	fffffc19 	.word	0xfffffc19
 23ead54:	1006ab48 	.word	0x1006ab48
 23ead58:	42c80000 	.word	0x42c80000
 23ead5c:	1006a948 	.word	0x1006a948
 23ead60:	43960000 	.word	0x43960000
 23ead64:	44898000 	.word	0x44898000
 23ead68:	c2200000 	.word	0xc2200000
 23ead6c:	42700000 	.word	0x42700000
 23ead70:	023fe1dc 	.word	0x023fe1dc
 23ead74:	023fe1e0 	.word	0x023fe1e0
 23ead78:	023fe1e4 	.word	0x023fe1e4
 23ead7c:	1006a285 	.word	0x1006a285
 23ead80:	1006a284 	.word	0x1006a284
 23ead84:	1006ac38 	.word	0x1006ac38
    else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23ead88:	2b60      	cmp	r3, #96	; 0x60
 23ead8a:	f041 8325 	bne.w	23ec3d8 <_Z6OBS_Dov+0x1ca8>
      if (BMX_2_type == BMX_TYPE_BME280) {
 23ead8e:	4edc      	ldr	r6, [pc, #880]	; (23eb100 <_Z6OBS_Dov+0x9d0>)
 23ead90:	7833      	ldrb	r3, [r6, #0]
 23ead92:	2b02      	cmp	r3, #2
 23ead94:	f041 8318 	bne.w	23ec3c8 <_Z6OBS_Dov+0x1c98>
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23ead98:	48da      	ldr	r0, [pc, #872]	; (23eb104 <_Z6OBS_Dov+0x9d4>)
 23ead9a:	f004 f8f7 	bl	23eef8c <_ZN15Adafruit_BME28012readPressureEv>
 23ead9e:	eddf 7ada 	vldr	s15, [pc, #872]	; 23eb108 <_Z6OBS_Dov+0x9d8>
        t = bme2.readTemperature();         // bt2
 23eada2:	48d8      	ldr	r0, [pc, #864]	; (23eb104 <_Z6OBS_Dov+0x9d4>)
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23eada4:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme2.readTemperature();         // bt2
 23eada8:	f004 f8be 	bl	23eef28 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme2.readHumidity();            // bh2 
 23eadac:	48d5      	ldr	r0, [pc, #852]	; (23eb104 <_Z6OBS_Dov+0x9d4>)
        t = bme2.readTemperature();         // bt2
 23eadae:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme2.readHumidity();            // bh2 
 23eadb2:	f004 f9bb 	bl	23ef12c <_ZN15Adafruit_BME28012readHumidityEv>
 23eadb6:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_2_type == BMX_TYPE_BMP390) {
 23eadba:	7833      	ldrb	r3, [r6, #0]
 23eadbc:	2b04      	cmp	r3, #4
 23eadbe:	d10b      	bne.n	23eadd8 <_Z6OBS_Dov+0x6a8>
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23eadc0:	48d2      	ldr	r0, [pc, #840]	; (23eb10c <_Z6OBS_Dov+0x9dc>)
 23eadc2:	f004 ff36 	bl	23efc32 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23eadc6:	eddf 7ad0 	vldr	s15, [pc, #832]	; 23eb108 <_Z6OBS_Dov+0x9d8>
        t = bm32.readTemperature();         // bt2       
 23eadca:	48d0      	ldr	r0, [pc, #832]	; (23eb10c <_Z6OBS_Dov+0x9dc>)
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23eadcc:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm32.readTemperature();         // bt2       
 23eadd0:	f004 ff24 	bl	23efc1c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23eadd4:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eadd8:	eef4 9a69 	vcmp.f32	s19, s19
 23eaddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eade0:	f181 8306 	bvs.w	23ec3f0 <_Z6OBS_Dov+0x1cc0>
 23eade4:	eddf 7aca 	vldr	s15, [pc, #808]	; 23eb110 <_Z6OBS_Dov+0x9e0>
 23eade8:	eef4 9ae7 	vcmpe.f32	s19, s15
 23eadec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eadf0:	f101 82fe 	bmi.w	23ec3f0 <_Z6OBS_Dov+0x1cc0>
 23eadf4:	eddf 7ac7 	vldr	s15, [pc, #796]	; 23eb114 <_Z6OBS_Dov+0x9e4>
 23eadf8:	eef4 9a67 	vcmp.f32	s19, s15
 23eadfc:	eddf 7ad6 	vldr	s15, [pc, #856]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae04:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eae08:	eeb4 8a48 	vcmp.f32	s16, s16
 23eae0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae10:	f181 82f2 	bvs.w	23ec3f8 <_Z6OBS_Dov+0x1cc8>
 23eae14:	eddf 7ace 	vldr	s15, [pc, #824]	; 23eb150 <_Z6OBS_Dov+0xa20>
 23eae18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae20:	f101 82ea 	bmi.w	23ec3f8 <_Z6OBS_Dov+0x1cc8>
 23eae24:	eddf 7acb 	vldr	s15, [pc, #812]	; 23eb154 <_Z6OBS_Dov+0xa24>
 23eae28:	eeb4 8a67 	vcmp.f32	s16, s15
 23eae2c:	eddf 7aca 	vldr	s15, [pc, #808]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eae30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae34:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eae38:	eef4 8a68 	vcmp.f32	s17, s17
 23eae3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae40:	f181 82de 	bvs.w	23ec400 <_Z6OBS_Dov+0x1cd0>
 23eae44:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23eae48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae4c:	f101 82d8 	bmi.w	23ec400 <_Z6OBS_Dov+0x1cd0>
 23eae50:	eddf 7aad 	vldr	s15, [pc, #692]	; 23eb108 <_Z6OBS_Dov+0x9d8>
 23eae54:	eef4 8a67 	vcmp.f32	s17, s15
 23eae58:	eddf 7abf 	vldr	s15, [pc, #764]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eae5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae60:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23eae64:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eae68:	f640 2698 	movw	r6, #2712	; 0xa98
 23eae6c:	fb0b f908 	mul.w	r9, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23eae70:	eb05 0009 	add.w	r0, r5, r9
 23eae74:	49a8      	ldr	r1, [pc, #672]	; (23eb118 <_Z6OBS_Dov+0x9e8>)
 23eae76:	4420      	add	r0, r4
 23eae78:	f011 fe8a 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eae7c:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eae7e:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eae82:	435e      	muls	r6, r3
 23eae84:	2300      	movs	r3, #0
 23eae86:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23eae8a:	eb09 000b 	add.w	r0, r9, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23eae8e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23eae90:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eae92:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = p;
 23eae94:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eae98:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23eae9c:	499f      	ldr	r1, [pc, #636]	; (23eb11c <_Z6OBS_Dov+0x9ec>)
 23eae9e:	4420      	add	r0, r4
 23eaea0:	f011 fe76 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaea4:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eaea6:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaeaa:	fb0b 6207 	mla	r2, fp, r7, r6
 23eaeae:	4422      	add	r2, r4
    obs[oidx].sensor[sidx].f_obs = t;
 23eaeb0:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaeb4:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eaeb6:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    if (BMX_2_type == BMX_TYPE_BME280) {
 23eaeba:	4a91      	ldr	r2, [pc, #580]	; (23eb100 <_Z6OBS_Dov+0x9d0>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eaebc:	f108 0702 	add.w	r7, r8, #2
    if (BMX_2_type == BMX_TYPE_BME280) {
 23eaec0:	7812      	ldrb	r2, [r2, #0]
 23eaec2:	2a02      	cmp	r2, #2
 23eaec4:	f041 82a0 	bne.w	23ec408 <_Z6OBS_Dov+0x1cd8>
      obs[oidx].sensor[sidx].type = F_OBS;
 23eaec8:	fb0b 6607 	mla	r6, fp, r7, r6
      strcpy (obs[oidx].sensor[sidx].id, "bh2");
 23eaecc:	f109 0038 	add.w	r0, r9, #56	; 0x38
 23eaed0:	4428      	add	r0, r5
 23eaed2:	4993      	ldr	r1, [pc, #588]	; (23eb120 <_Z6OBS_Dov+0x9f0>)
 23eaed4:	4420      	add	r0, r4
 23eaed6:	f011 fe5b 	bl	23fcb90 <strcpy>
      obs[oidx].sensor[sidx].type = F_OBS;
 23eaeda:	4426      	add	r6, r4
 23eaedc:	2300      	movs	r3, #0
      obs[oidx].sensor[sidx].f_obs = h;
 23eaede:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
      obs[oidx].sensor[sidx].type = F_OBS;
 23eaee2:	6233      	str	r3, [r6, #32]
      obs[oidx].sensor[sidx++].inuse = true;
 23eaee4:	f108 0803 	add.w	r8, r8, #3
 23eaee8:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (HTU21DF_exists) {
 23eaeec:	4b8d      	ldr	r3, [pc, #564]	; (23eb124 <_Z6OBS_Dov+0x9f4>)
 23eaeee:	781b      	ldrb	r3, [r3, #0]
 23eaef0:	2b00      	cmp	r3, #0
 23eaef2:	d070      	beq.n	23eafd6 <_Z6OBS_Dov+0x8a6>
    strcpy (obs[oidx].sensor[sidx].id, "hh1");
 23eaef4:	261c      	movs	r6, #28
 23eaef6:	fb06 f608 	mul.w	r6, r6, r8
 23eaefa:	19a8      	adds	r0, r5, r6
 23eaefc:	498a      	ldr	r1, [pc, #552]	; (23eb128 <_Z6OBS_Dov+0x9f8>)
 23eaefe:	4420      	add	r0, r4
 23eaf00:	f011 fe46 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaf04:	f640 2398 	movw	r3, #2712	; 0xa98
 23eaf08:	9a00      	ldr	r2, [sp, #0]
    h = htu.readHumidity();
 23eaf0a:	4888      	ldr	r0, [pc, #544]	; (23eb12c <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaf0c:	fb03 6302 	mla	r3, r3, r2, r6
 23eaf10:	2200      	movs	r2, #0
 23eaf12:	4423      	add	r3, r4
 23eaf14:	621a      	str	r2, [r3, #32]
    h = htu.readHumidity();
 23eaf16:	f005 fed5 	bl	23f0cc4 <_ZN16Adafruit_HTU21DF12readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eaf1a:	eeb4 0a40 	vcmp.f32	s0, s0
 23eaf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf22:	f181 8274 	bvs.w	23ec40e <_Z6OBS_Dov+0x1cde>
 23eaf26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eaf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf2e:	f101 826e 	bmi.w	23ec40e <_Z6OBS_Dov+0x1cde>
 23eaf32:	eddf 7a75 	vldr	s15, [pc, #468]	; 23eb108 <_Z6OBS_Dov+0x9d8>
 23eaf36:	eeb4 0a67 	vcmp.f32	s0, s15
 23eaf3a:	eddf 7a87 	vldr	s15, [pc, #540]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eaf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf42:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23eaf46:	f640 2998 	movw	r9, #2712	; 0xa98
 23eaf4a:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23eaf4e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23eaf50:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23eaf52:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = h;
 23eaf56:	fb09 f903 	mul.w	r9, r9, r3
 23eaf5a:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23eaf5e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = h;
 23eaf60:	4423      	add	r3, r4
 23eaf62:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eaf66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23eaf6a:	4971      	ldr	r1, [pc, #452]	; (23eb130 <_Z6OBS_Dov+0xa00>)
 23eaf6c:	4420      	add	r0, r4
 23eaf6e:	f011 fe0f 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaf72:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eaf74:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaf78:	fb0a 9907 	mla	r9, sl, r7, r9
 23eaf7c:	44a1      	add	r9, r4
    t = htu.readTemperature();
 23eaf7e:	486b      	ldr	r0, [pc, #428]	; (23eb12c <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaf80:	f8c9 3020 	str.w	r3, [r9, #32]
    t = htu.readTemperature();
 23eaf84:	f005 fe5e 	bl	23f0c44 <_ZN16Adafruit_HTU21DF15readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eaf88:	eeb4 0a40 	vcmp.f32	s0, s0
 23eaf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf90:	f181 8241 	bvs.w	23ec416 <_Z6OBS_Dov+0x1ce6>
 23eaf94:	eddf 7a6e 	vldr	s15, [pc, #440]	; 23eb150 <_Z6OBS_Dov+0xa20>
 23eaf98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eaf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eafa0:	f101 8239 	bmi.w	23ec416 <_Z6OBS_Dov+0x1ce6>
 23eafa4:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23eb154 <_Z6OBS_Dov+0xa24>
 23eafa8:	eeb4 0a67 	vcmp.f32	s0, s15
 23eafac:	eddf 7a6a 	vldr	s15, [pc, #424]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eafb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eafb4:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eafb8:	f640 2398 	movw	r3, #2712	; 0xa98
 23eafbc:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eafbe:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = t;
 23eafc2:	4353      	muls	r3, r2
 23eafc4:	221c      	movs	r2, #28
 23eafc6:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eafca:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eafcc:	4423      	add	r3, r4
 23eafce:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eafd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_1_exists) {
 23eafd6:	4b57      	ldr	r3, [pc, #348]	; (23eb134 <_Z6OBS_Dov+0xa04>)
 23eafd8:	781b      	ldrb	r3, [r3, #0]
 23eafda:	2b00      	cmp	r3, #0
 23eafdc:	f001 825a 	beq.w	23ec494 <_Z6OBS_Dov+0x1d64>
    strcpy (obs[oidx].sensor[sidx].id, "st1");
 23eafe0:	261c      	movs	r6, #28
 23eafe2:	fb06 f608 	mul.w	r6, r6, r8
 23eafe6:	19a8      	adds	r0, r5, r6
 23eafe8:	4953      	ldr	r1, [pc, #332]	; (23eb138 <_Z6OBS_Dov+0xa08>)
 23eafea:	4420      	add	r0, r4
 23eafec:	f011 fdd0 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaff0:	f640 2398 	movw	r3, #2712	; 0xa98
 23eaff4:	9a00      	ldr	r2, [sp, #0]
    t = sht1.readTemperature();
 23eaff6:	4851      	ldr	r0, [pc, #324]	; (23eb13c <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaff8:	fb03 6302 	mla	r3, r3, r2, r6
 23eaffc:	2200      	movs	r2, #0
 23eaffe:	4423      	add	r3, r4
 23eb000:	621a      	str	r2, [r3, #32]
    t = sht1.readTemperature();
 23eb002:	f006 f9d3 	bl	23f13ac <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb006:	eeb4 0a40 	vcmp.f32	s0, s0
 23eb00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb00e:	f181 8239 	bvs.w	23ec484 <_Z6OBS_Dov+0x1d54>
 23eb012:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23eb150 <_Z6OBS_Dov+0xa20>
 23eb016:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eb01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb01e:	f101 8231 	bmi.w	23ec484 <_Z6OBS_Dov+0x1d54>
 23eb022:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23eb154 <_Z6OBS_Dov+0xa24>
 23eb026:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb02a:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eb02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb032:	fe37 8a80 	vselgt.f32	s16, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eb036:	f640 2998 	movw	r9, #2712	; 0xa98
 23eb03a:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23eb03e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eb040:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23eb042:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23eb046:	fb09 f903 	mul.w	r9, r9, r3
 23eb04a:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23eb04e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23eb050:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = t;
 23eb056:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23eb05a:	4939      	ldr	r1, [pc, #228]	; (23eb140 <_Z6OBS_Dov+0xa10>)
 23eb05c:	4420      	add	r0, r4
 23eb05e:	f011 fd97 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb062:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb064:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb068:	fb0a 9907 	mla	r9, sl, r7, r9
 23eb06c:	44a1      	add	r9, r4
    h = sht1.readHumidity();
 23eb06e:	4833      	ldr	r0, [pc, #204]	; (23eb13c <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb070:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht1.readHumidity();
 23eb074:	f006 f9a8 	bl	23f13c8 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb078:	eeb4 0a40 	vcmp.f32	s0, s0
 23eb07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb080:	f181 8204 	bvs.w	23ec48c <_Z6OBS_Dov+0x1d5c>
 23eb084:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eb088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb08c:	f101 81fe 	bmi.w	23ec48c <_Z6OBS_Dov+0x1d5c>
 23eb090:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23eb108 <_Z6OBS_Dov+0x9d8>
 23eb094:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb098:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eb09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb0a0:	fe77 9a80 	vselgt.f32	s19, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23eb0a4:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb0a8:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb0aa:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23eb0ae:	4353      	muls	r3, r2
 23eb0b0:	221c      	movs	r2, #28
 23eb0b2:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eb0b6:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23eb0b8:	4423      	add	r3, r4
 23eb0ba:	edc3 9a09 	vstr	s19, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb0be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_2_exists) {
 23eb0c2:	4b20      	ldr	r3, [pc, #128]	; (23eb144 <_Z6OBS_Dov+0xa14>)
 23eb0c4:	781b      	ldrb	r3, [r3, #0]
 23eb0c6:	2b00      	cmp	r3, #0
 23eb0c8:	f000 80a0 	beq.w	23eb20c <_Z6OBS_Dov+0xadc>
    strcpy (obs[oidx].sensor[sidx].id, "st2");
 23eb0cc:	261c      	movs	r6, #28
 23eb0ce:	fb06 f608 	mul.w	r6, r6, r8
 23eb0d2:	19a8      	adds	r0, r5, r6
 23eb0d4:	491c      	ldr	r1, [pc, #112]	; (23eb148 <_Z6OBS_Dov+0xa18>)
 23eb0d6:	4420      	add	r0, r4
 23eb0d8:	f011 fd5a 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb0dc:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb0e0:	9a00      	ldr	r2, [sp, #0]
    t = sht2.readTemperature();
 23eb0e2:	481a      	ldr	r0, [pc, #104]	; (23eb14c <_Z6OBS_Dov+0xa1c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb0e4:	fb03 6302 	mla	r3, r3, r2, r6
 23eb0e8:	2200      	movs	r2, #0
 23eb0ea:	4423      	add	r3, r4
 23eb0ec:	621a      	str	r2, [r3, #32]
    t = sht2.readTemperature();
 23eb0ee:	f006 f95d 	bl	23f13ac <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb0f2:	eeb4 0a40 	vcmp.f32	s0, s0
 23eb0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb0fa:	f181 81d1 	bvs.w	23ec4a0 <_Z6OBS_Dov+0x1d70>
 23eb0fe:	e02d      	b.n	23eb15c <_Z6OBS_Dov+0xa2c>
 23eb100:	1006a286 	.word	0x1006a286
 23eb104:	1006aba0 	.word	0x1006aba0
 23eb108:	42c80000 	.word	0x42c80000
 23eb10c:	1006aa48 	.word	0x1006aa48
 23eb110:	43960000 	.word	0x43960000
 23eb114:	44898000 	.word	0x44898000
 23eb118:	023fe1e8 	.word	0x023fe1e8
 23eb11c:	023fe1ec 	.word	0x023fe1ec
 23eb120:	023fe1f0 	.word	0x023fe1f0
 23eb124:	1006a2b0 	.word	0x1006a2b0
 23eb128:	023fe1f4 	.word	0x023fe1f4
 23eb12c:	1006ae90 	.word	0x1006ae90
 23eb130:	023fe1f8 	.word	0x023fe1f8
 23eb134:	1006a7d0 	.word	0x1006a7d0
 23eb138:	023fe1fc 	.word	0x023fe1fc
 23eb13c:	1007abb4 	.word	0x1007abb4
 23eb140:	023fe200 	.word	0x023fe200
 23eb144:	1006a7d1 	.word	0x1006a7d1
 23eb148:	023fe204 	.word	0x023fe204
 23eb14c:	1007abc4 	.word	0x1007abc4
 23eb150:	c2200000 	.word	0xc2200000
 23eb154:	42700000 	.word	0x42700000
 23eb158:	c479f99a 	.word	0xc479f99a
 23eb15c:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 23eb150 <_Z6OBS_Dov+0xa20>
 23eb160:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eb164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb168:	f101 819a 	bmi.w	23ec4a0 <_Z6OBS_Dov+0x1d70>
 23eb16c:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 23eb154 <_Z6OBS_Dov+0xa24>
 23eb170:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb174:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 23eb158 <_Z6OBS_Dov+0xa28>
 23eb178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb17c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eb180:	f640 2998 	movw	r9, #2712	; 0xa98
 23eb184:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23eb188:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eb18a:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23eb18c:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23eb190:	fb09 f903 	mul.w	r9, r9, r3
 23eb194:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23eb198:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23eb19a:	4423      	add	r3, r4
 23eb19c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23eb1a4:	49ce      	ldr	r1, [pc, #824]	; (23eb4e0 <_Z6OBS_Dov+0xdb0>)
 23eb1a6:	4420      	add	r0, r4
 23eb1a8:	f011 fcf2 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb1ac:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1ae:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb1b2:	fb0a 9907 	mla	r9, sl, r7, r9
 23eb1b6:	44a1      	add	r9, r4
    h = sht2.readHumidity();
 23eb1b8:	48ca      	ldr	r0, [pc, #808]	; (23eb4e4 <_Z6OBS_Dov+0xdb4>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb1ba:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht2.readHumidity();
 23eb1be:	f006 f903 	bl	23f13c8 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb1c2:	eeb4 0a40 	vcmp.f32	s0, s0
 23eb1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb1ca:	f181 816d 	bvs.w	23ec4a8 <_Z6OBS_Dov+0x1d78>
 23eb1ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eb1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb1d6:	f101 8167 	bmi.w	23ec4a8 <_Z6OBS_Dov+0x1d78>
 23eb1da:	eddf 7ac3 	vldr	s15, [pc, #780]	; 23eb4e8 <_Z6OBS_Dov+0xdb8>
 23eb1de:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb1e2:	eddf 7ac2 	vldr	s15, [pc, #776]	; 23eb4ec <_Z6OBS_Dov+0xdbc>
 23eb1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb1ea:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23eb1ee:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb1f2:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1f4:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23eb1f8:	4353      	muls	r3, r2
 23eb1fa:	221c      	movs	r2, #28
 23eb1fc:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eb200:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23eb202:	4423      	add	r3, r4
 23eb204:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HDC_1_exists) {
 23eb20c:	4bb8      	ldr	r3, [pc, #736]	; (23eb4f0 <_Z6OBS_Dov+0xdc0>)
 23eb20e:	f8df b324 	ldr.w	fp, [pc, #804]	; 23eb534 <_Z6OBS_Dov+0xe04>
 23eb212:	781b      	ldrb	r3, [r3, #0]
 23eb214:	2b00      	cmp	r3, #0
 23eb216:	f000 808d 	beq.w	23eb334 <_Z6OBS_Dov+0xc04>
    double t = -999.9;
 23eb21a:	f20f 2abc 	addw	sl, pc, #700	; 0x2bc
 23eb21e:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23eb222:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23eb226:	48b3      	ldr	r0, [pc, #716]	; (23eb4f4 <_Z6OBS_Dov+0xdc4>)
 23eb228:	aa0c      	add	r2, sp, #48	; 0x30
 23eb22a:	a902      	add	r1, sp, #8
    double t = -999.9;
 23eb22c:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23eb230:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23eb234:	f005 fc54 	bl	23f0ae0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23eb238:	2800      	cmp	r0, #0
 23eb23a:	f001 8142 	beq.w	23ec4c2 <_Z6OBS_Dov+0x1d92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb23e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23eb242:	4632      	mov	r2, r6
 23eb244:	463b      	mov	r3, r7
 23eb246:	4630      	mov	r0, r6
 23eb248:	4639      	mov	r1, r7
 23eb24a:	f7f9 fc13 	bl	23e4a74 <__aeabi_dcmpun>
 23eb24e:	2800      	cmp	r0, #0
 23eb250:	f041 812e 	bne.w	23ec4b0 <_Z6OBS_Dov+0x1d80>
 23eb254:	2200      	movs	r2, #0
 23eb256:	4630      	mov	r0, r6
 23eb258:	4639      	mov	r1, r7
 23eb25a:	4ba7      	ldr	r3, [pc, #668]	; (23eb4f8 <_Z6OBS_Dov+0xdc8>)
 23eb25c:	f7f9 fbe2 	bl	23e4a24 <__aeabi_dcmplt>
 23eb260:	2800      	cmp	r0, #0
 23eb262:	f041 8125 	bne.w	23ec4b0 <_Z6OBS_Dov+0x1d80>
 23eb266:	2200      	movs	r2, #0
 23eb268:	4630      	mov	r0, r6
 23eb26a:	4639      	mov	r1, r7
 23eb26c:	4ba3      	ldr	r3, [pc, #652]	; (23eb4fc <_Z6OBS_Dov+0xdcc>)
 23eb26e:	f7f9 fbf7 	bl	23e4a60 <__aeabi_dcmpgt>
 23eb272:	2800      	cmp	r0, #0
 23eb274:	f041 811c 	bne.w	23ec4b0 <_Z6OBS_Dov+0x1d80>
 23eb278:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb27c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23eb280:	4632      	mov	r2, r6
 23eb282:	463b      	mov	r3, r7
 23eb284:	4630      	mov	r0, r6
 23eb286:	4639      	mov	r1, r7
 23eb288:	f7f9 fbf4 	bl	23e4a74 <__aeabi_dcmpun>
 23eb28c:	2800      	cmp	r0, #0
 23eb28e:	f041 8113 	bne.w	23ec4b8 <_Z6OBS_Dov+0x1d88>
 23eb292:	2200      	movs	r2, #0
 23eb294:	2300      	movs	r3, #0
 23eb296:	4630      	mov	r0, r6
 23eb298:	4639      	mov	r1, r7
 23eb29a:	f7f9 fbc3 	bl	23e4a24 <__aeabi_dcmplt>
 23eb29e:	2800      	cmp	r0, #0
 23eb2a0:	f041 810a 	bne.w	23ec4b8 <_Z6OBS_Dov+0x1d88>
 23eb2a4:	2200      	movs	r2, #0
 23eb2a6:	4630      	mov	r0, r6
 23eb2a8:	4639      	mov	r1, r7
 23eb2aa:	4b95      	ldr	r3, [pc, #596]	; (23eb500 <_Z6OBS_Dov+0xdd0>)
 23eb2ac:	f7f9 fbd8 	bl	23e4a60 <__aeabi_dcmpgt>
 23eb2b0:	2800      	cmp	r0, #0
 23eb2b2:	f041 8101 	bne.w	23ec4b8 <_Z6OBS_Dov+0x1d88>
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23eb2b6:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb2ba:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23eb2be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23eb2c2:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23eb2c6:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb2c8:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb2cc:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23eb2d0:	19e8      	adds	r0, r5, r7
 23eb2d2:	498c      	ldr	r1, [pc, #560]	; (23eb504 <_Z6OBS_Dov+0xdd4>)
 23eb2d4:	4420      	add	r0, r4
 23eb2d6:	f011 fc5b 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb2da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb2de:	2200      	movs	r2, #0
 23eb2e0:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb2e2:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb2e6:	435e      	muls	r6, r3
 23eb2e8:	eb07 0906 	add.w	r9, r7, r6
 23eb2ec:	44a1      	add	r9, r4
 23eb2ee:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb2f2:	f7f9 fc1d 	bl	23e4b30 <__aeabi_d2f>
 23eb2f6:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23eb2fa:	f107 001c 	add.w	r0, r7, #28
 23eb2fe:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eb300:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23eb304:	4980      	ldr	r1, [pc, #512]	; (23eb508 <_Z6OBS_Dov+0xdd8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb306:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23eb30a:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb30c:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23eb30e:	f011 fc3f 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23eb312:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb316:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb318:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb31c:	461a      	mov	r2, r3
 23eb31e:	231c      	movs	r3, #28
 23eb320:	fb03 6602 	mla	r6, r3, r2, r6
 23eb324:	2200      	movs	r2, #0
 23eb326:	4426      	add	r6, r4
 23eb328:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23eb32a:	f7f9 fc01 	bl	23e4b30 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23eb32e:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23eb332:	6270      	str	r0, [r6, #36]	; 0x24
  if (HDC_2_exists) {
 23eb334:	4b75      	ldr	r3, [pc, #468]	; (23eb50c <_Z6OBS_Dov+0xddc>)
 23eb336:	781b      	ldrb	r3, [r3, #0]
 23eb338:	2b00      	cmp	r3, #0
 23eb33a:	f000 808d 	beq.w	23eb458 <_Z6OBS_Dov+0xd28>
    double t = -999.9;
 23eb33e:	f20f 1a98 	addw	sl, pc, #408	; 0x198
 23eb342:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23eb346:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23eb34a:	4871      	ldr	r0, [pc, #452]	; (23eb510 <_Z6OBS_Dov+0xde0>)
 23eb34c:	aa0c      	add	r2, sp, #48	; 0x30
 23eb34e:	a902      	add	r1, sp, #8
    double t = -999.9;
 23eb350:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23eb354:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23eb358:	f005 fbc2 	bl	23f0ae0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23eb35c:	2800      	cmp	r0, #0
 23eb35e:	f001 80c2 	beq.w	23ec4e6 <_Z6OBS_Dov+0x1db6>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb362:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23eb366:	4632      	mov	r2, r6
 23eb368:	463b      	mov	r3, r7
 23eb36a:	4630      	mov	r0, r6
 23eb36c:	4639      	mov	r1, r7
 23eb36e:	f7f9 fb81 	bl	23e4a74 <__aeabi_dcmpun>
 23eb372:	2800      	cmp	r0, #0
 23eb374:	f041 80ae 	bne.w	23ec4d4 <_Z6OBS_Dov+0x1da4>
 23eb378:	2200      	movs	r2, #0
 23eb37a:	4630      	mov	r0, r6
 23eb37c:	4639      	mov	r1, r7
 23eb37e:	4b5e      	ldr	r3, [pc, #376]	; (23eb4f8 <_Z6OBS_Dov+0xdc8>)
 23eb380:	f7f9 fb50 	bl	23e4a24 <__aeabi_dcmplt>
 23eb384:	2800      	cmp	r0, #0
 23eb386:	f041 80a5 	bne.w	23ec4d4 <_Z6OBS_Dov+0x1da4>
 23eb38a:	2200      	movs	r2, #0
 23eb38c:	4630      	mov	r0, r6
 23eb38e:	4639      	mov	r1, r7
 23eb390:	4b5a      	ldr	r3, [pc, #360]	; (23eb4fc <_Z6OBS_Dov+0xdcc>)
 23eb392:	f7f9 fb65 	bl	23e4a60 <__aeabi_dcmpgt>
 23eb396:	2800      	cmp	r0, #0
 23eb398:	f041 809c 	bne.w	23ec4d4 <_Z6OBS_Dov+0x1da4>
 23eb39c:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb3a0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23eb3a4:	4632      	mov	r2, r6
 23eb3a6:	463b      	mov	r3, r7
 23eb3a8:	4630      	mov	r0, r6
 23eb3aa:	4639      	mov	r1, r7
 23eb3ac:	f7f9 fb62 	bl	23e4a74 <__aeabi_dcmpun>
 23eb3b0:	2800      	cmp	r0, #0
 23eb3b2:	f041 8093 	bne.w	23ec4dc <_Z6OBS_Dov+0x1dac>
 23eb3b6:	2200      	movs	r2, #0
 23eb3b8:	2300      	movs	r3, #0
 23eb3ba:	4630      	mov	r0, r6
 23eb3bc:	4639      	mov	r1, r7
 23eb3be:	f7f9 fb31 	bl	23e4a24 <__aeabi_dcmplt>
 23eb3c2:	2800      	cmp	r0, #0
 23eb3c4:	f041 808a 	bne.w	23ec4dc <_Z6OBS_Dov+0x1dac>
 23eb3c8:	2200      	movs	r2, #0
 23eb3ca:	4630      	mov	r0, r6
 23eb3cc:	4639      	mov	r1, r7
 23eb3ce:	4b4c      	ldr	r3, [pc, #304]	; (23eb500 <_Z6OBS_Dov+0xdd0>)
 23eb3d0:	f7f9 fb46 	bl	23e4a60 <__aeabi_dcmpgt>
 23eb3d4:	2800      	cmp	r0, #0
 23eb3d6:	f041 8081 	bne.w	23ec4dc <_Z6OBS_Dov+0x1dac>
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23eb3da:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb3de:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23eb3e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23eb3e6:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23eb3ea:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb3ec:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb3f0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23eb3f4:	19e8      	adds	r0, r5, r7
 23eb3f6:	4947      	ldr	r1, [pc, #284]	; (23eb514 <_Z6OBS_Dov+0xde4>)
 23eb3f8:	4420      	add	r0, r4
 23eb3fa:	f011 fbc9 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb402:	2200      	movs	r2, #0
 23eb404:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb406:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb40a:	435e      	muls	r6, r3
 23eb40c:	eb07 0906 	add.w	r9, r7, r6
 23eb410:	44a1      	add	r9, r4
 23eb412:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb416:	f7f9 fb8b 	bl	23e4b30 <__aeabi_d2f>
 23eb41a:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23eb41e:	f107 001c 	add.w	r0, r7, #28
 23eb422:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eb424:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23eb428:	493b      	ldr	r1, [pc, #236]	; (23eb518 <_Z6OBS_Dov+0xde8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb42a:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23eb42e:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb430:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23eb432:	f011 fbad 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23eb436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb43a:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb43c:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb440:	461a      	mov	r2, r3
 23eb442:	231c      	movs	r3, #28
 23eb444:	fb03 6602 	mla	r6, r3, r2, r6
 23eb448:	2200      	movs	r2, #0
 23eb44a:	4426      	add	r6, r4
 23eb44c:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23eb44e:	f7f9 fb6f 	bl	23e4b30 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23eb452:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23eb456:	6270      	str	r0, [r6, #36]	; 0x24
  if (LPS_1_exists) {
 23eb458:	4b30      	ldr	r3, [pc, #192]	; (23eb51c <_Z6OBS_Dov+0xdec>)
 23eb45a:	781b      	ldrb	r3, [r3, #0]
 23eb45c:	2b00      	cmp	r3, #0
 23eb45e:	f000 809a 	beq.w	23eb596 <_Z6OBS_Dov+0xe66>
    float t = lps1.readTemperature();
 23eb462:	482f      	ldr	r0, [pc, #188]	; (23eb520 <_Z6OBS_Dov+0xdf0>)
 23eb464:	f005 fc84 	bl	23f0d70 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23eb468:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps1.readPressure();
 23eb46c:	482c      	ldr	r0, [pc, #176]	; (23eb520 <_Z6OBS_Dov+0xdf0>)
 23eb46e:	f005 fca1 	bl	23f0db4 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb472:	eeb4 aa4a 	vcmp.f32	s20, s20
 23eb476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps1.readPressure();
 23eb47a:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb47e:	f181 803b 	bvs.w	23ec4f8 <_Z6OBS_Dov+0x1dc8>
 23eb482:	eddf 7a28 	vldr	s15, [pc, #160]	; 23eb524 <_Z6OBS_Dov+0xdf4>
 23eb486:	eeb4 aae7 	vcmpe.f32	s20, s15
 23eb48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb48e:	f101 8033 	bmi.w	23ec4f8 <_Z6OBS_Dov+0x1dc8>
 23eb492:	eddf 7a25 	vldr	s15, [pc, #148]	; 23eb528 <_Z6OBS_Dov+0xdf8>
 23eb496:	eeb4 aa67 	vcmp.f32	s20, s15
 23eb49a:	eddf 7a14 	vldr	s15, [pc, #80]	; 23eb4ec <_Z6OBS_Dov+0xdbc>
 23eb49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb4a2:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eb4a6:	eef4 8a68 	vcmp.f32	s17, s17
 23eb4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb4ae:	f181 8027 	bvs.w	23ec500 <_Z6OBS_Dov+0x1dd0>
 23eb4b2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23eb52c <_Z6OBS_Dov+0xdfc>
 23eb4b6:	eef4 8ae7 	vcmpe.f32	s17, s15
 23eb4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb4be:	f101 801f 	bmi.w	23ec500 <_Z6OBS_Dov+0x1dd0>
 23eb4c2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23eb530 <_Z6OBS_Dov+0xe00>
 23eb4c6:	eef4 8a67 	vcmp.f32	s17, s15
 23eb4ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 23eb4ec <_Z6OBS_Dov+0xdbc>
 23eb4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb4d2:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23eb4d6:	e02f      	b.n	23eb538 <_Z6OBS_Dov+0xe08>
 23eb4d8:	33333333 	.word	0x33333333
 23eb4dc:	c08f3f33 	.word	0xc08f3f33
 23eb4e0:	023fe208 	.word	0x023fe208
 23eb4e4:	1007abc4 	.word	0x1007abc4
 23eb4e8:	42c80000 	.word	0x42c80000
 23eb4ec:	c479f99a 	.word	0xc479f99a
 23eb4f0:	1006a2ac 	.word	0x1006a2ac
 23eb4f4:	1006ae80 	.word	0x1006ae80
 23eb4f8:	c0440000 	.word	0xc0440000
 23eb4fc:	404e0000 	.word	0x404e0000
 23eb500:	40590000 	.word	0x40590000
 23eb504:	023fe21a 	.word	0x023fe21a
 23eb508:	023fe21f 	.word	0x023fe21f
 23eb50c:	1006a2ad 	.word	0x1006a2ad
 23eb510:	1006ae88 	.word	0x1006ae88
 23eb514:	023fe224 	.word	0x023fe224
 23eb518:	023fe229 	.word	0x023fe229
 23eb51c:	1006a2b2 	.word	0x1006a2b2
 23eb520:	1006f0c0 	.word	0x1006f0c0
 23eb524:	c2200000 	.word	0xc2200000
 23eb528:	42700000 	.word	0x42700000
 23eb52c:	43960000 	.word	0x43960000
 23eb530:	44898000 	.word	0x44898000
 23eb534:	1006a178 	.word	0x1006a178
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23eb538:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb53a:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb53e:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb542:	f04f 0901 	mov.w	r9, #1
 23eb546:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23eb54a:	19e8      	adds	r0, r5, r7
 23eb54c:	49d7      	ldr	r1, [pc, #860]	; (23eb8ac <_Z6OBS_Dov+0x117c>)
 23eb54e:	4420      	add	r0, r4
 23eb550:	f011 fb1e 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb554:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23eb556:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb55a:	435e      	muls	r6, r3
 23eb55c:	19b9      	adds	r1, r7, r6
 23eb55e:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23eb560:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eb562:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb566:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb56a:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb56e:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23eb572:	4420      	add	r0, r4
 23eb574:	49ce      	ldr	r1, [pc, #824]	; (23eb8b0 <_Z6OBS_Dov+0x1180>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb576:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23eb578:	f011 fb0a 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb57c:	231c      	movs	r3, #28
 23eb57e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb580:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb584:	fb03 6602 	mla	r6, r3, r2, r6
 23eb588:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23eb58a:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb58e:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb592:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (LPS_2_exists) {
 23eb596:	4bc7      	ldr	r3, [pc, #796]	; (23eb8b4 <_Z6OBS_Dov+0x1184>)
 23eb598:	781b      	ldrb	r3, [r3, #0]
 23eb59a:	2b00      	cmp	r3, #0
 23eb59c:	d068      	beq.n	23eb670 <_Z6OBS_Dov+0xf40>
    float t = lps2.readTemperature();
 23eb59e:	48c6      	ldr	r0, [pc, #792]	; (23eb8b8 <_Z6OBS_Dov+0x1188>)
 23eb5a0:	f005 fbe6 	bl	23f0d70 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23eb5a4:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps2.readPressure();
 23eb5a8:	48c3      	ldr	r0, [pc, #780]	; (23eb8b8 <_Z6OBS_Dov+0x1188>)
 23eb5aa:	f005 fc03 	bl	23f0db4 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb5ae:	eeb4 aa4a 	vcmp.f32	s20, s20
 23eb5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps2.readPressure();
 23eb5b6:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb5ba:	f180 87a5 	bvs.w	23ec508 <_Z6OBS_Dov+0x1dd8>
 23eb5be:	eddf 7abf 	vldr	s15, [pc, #764]	; 23eb8bc <_Z6OBS_Dov+0x118c>
 23eb5c2:	eeb4 aae7 	vcmpe.f32	s20, s15
 23eb5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb5ca:	f100 879d 	bmi.w	23ec508 <_Z6OBS_Dov+0x1dd8>
 23eb5ce:	eddf 7abc 	vldr	s15, [pc, #752]	; 23eb8c0 <_Z6OBS_Dov+0x1190>
 23eb5d2:	eeb4 aa67 	vcmp.f32	s20, s15
 23eb5d6:	eddf 7abb 	vldr	s15, [pc, #748]	; 23eb8c4 <_Z6OBS_Dov+0x1194>
 23eb5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb5de:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eb5e2:	eef4 8a68 	vcmp.f32	s17, s17
 23eb5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb5ea:	f180 8791 	bvs.w	23ec510 <_Z6OBS_Dov+0x1de0>
 23eb5ee:	eddf 7ab6 	vldr	s15, [pc, #728]	; 23eb8c8 <_Z6OBS_Dov+0x1198>
 23eb5f2:	eef4 8ae7 	vcmpe.f32	s17, s15
 23eb5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb5fa:	f100 8789 	bmi.w	23ec510 <_Z6OBS_Dov+0x1de0>
 23eb5fe:	eddf 7ab3 	vldr	s15, [pc, #716]	; 23eb8cc <_Z6OBS_Dov+0x119c>
 23eb602:	eef4 8a67 	vcmp.f32	s17, s15
 23eb606:	eddf 7aaf 	vldr	s15, [pc, #700]	; 23eb8c4 <_Z6OBS_Dov+0x1194>
 23eb60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb60e:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23eb612:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb614:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb618:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb61c:	f04f 0901 	mov.w	r9, #1
 23eb620:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23eb624:	19e8      	adds	r0, r5, r7
 23eb626:	49aa      	ldr	r1, [pc, #680]	; (23eb8d0 <_Z6OBS_Dov+0x11a0>)
 23eb628:	4420      	add	r0, r4
 23eb62a:	f011 fab1 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb62e:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23eb630:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb634:	435e      	muls	r6, r3
 23eb636:	19b9      	adds	r1, r7, r6
 23eb638:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23eb63a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eb63c:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb640:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb644:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb648:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23eb64c:	4420      	add	r0, r4
 23eb64e:	49a1      	ldr	r1, [pc, #644]	; (23eb8d4 <_Z6OBS_Dov+0x11a4>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb650:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23eb652:	f011 fa9d 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb656:	231c      	movs	r3, #28
 23eb658:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb65a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb65e:	fb03 6602 	mla	r6, r3, r2, r6
 23eb662:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23eb664:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb668:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb66c:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (HIH8_exists) {
 23eb670:	4b99      	ldr	r3, [pc, #612]	; (23eb8d8 <_Z6OBS_Dov+0x11a8>)
 23eb672:	781b      	ldrb	r3, [r3, #0]
 23eb674:	2b00      	cmp	r3, #0
 23eb676:	d06b      	beq.n	23eb750 <_Z6OBS_Dov+0x1020>
    float t = 0.0;
 23eb678:	2600      	movs	r6, #0
    bool status = hih8_getTempHumid(&t, &h);
 23eb67a:	a90c      	add	r1, sp, #48	; 0x30
 23eb67c:	a802      	add	r0, sp, #8
    float t = 0.0;
 23eb67e:	9602      	str	r6, [sp, #8]
    float h = 0.0;
 23eb680:	960c      	str	r6, [sp, #48]	; 0x30
    bool status = hih8_getTempHumid(&t, &h);
 23eb682:	f7fb fc71 	bl	23e6f68 <_Z17hih8_getTempHumidPfS_>
    if (!status) {
 23eb686:	b910      	cbnz	r0, 23eb68e <_Z6OBS_Dov+0xf5e>
      t = -999.99;
 23eb688:	4b94      	ldr	r3, [pc, #592]	; (23eb8dc <_Z6OBS_Dov+0x11ac>)
      h = 0.0;
 23eb68a:	960c      	str	r6, [sp, #48]	; 0x30
      t = -999.99;
 23eb68c:	9302      	str	r3, [sp, #8]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb68e:	ed9d aa02 	vldr	s20, [sp, #8]
 23eb692:	eeb4 aa4a 	vcmp.f32	s20, s20
 23eb696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb69a:	f180 873d 	bvs.w	23ec518 <_Z6OBS_Dov+0x1de8>
 23eb69e:	eddf 7a87 	vldr	s15, [pc, #540]	; 23eb8bc <_Z6OBS_Dov+0x118c>
 23eb6a2:	eeb4 aae7 	vcmpe.f32	s20, s15
 23eb6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb6aa:	f100 8735 	bmi.w	23ec518 <_Z6OBS_Dov+0x1de8>
 23eb6ae:	eddf 7a84 	vldr	s15, [pc, #528]	; 23eb8c0 <_Z6OBS_Dov+0x1190>
 23eb6b2:	eeb4 aa67 	vcmp.f32	s20, s15
 23eb6b6:	eddf 7a83 	vldr	s15, [pc, #524]	; 23eb8c4 <_Z6OBS_Dov+0x1194>
 23eb6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb6be:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb6c2:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 23eb6c6:	eef4 8a68 	vcmp.f32	s17, s17
 23eb6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb6ce:	f180 8727 	bvs.w	23ec520 <_Z6OBS_Dov+0x1df0>
 23eb6d2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23eb6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb6da:	f100 8721 	bmi.w	23ec520 <_Z6OBS_Dov+0x1df0>
 23eb6de:	eddf 7a80 	vldr	s15, [pc, #512]	; 23eb8e0 <_Z6OBS_Dov+0x11b0>
 23eb6e2:	eef4 8a67 	vcmp.f32	s17, s15
 23eb6e6:	eddf 7a77 	vldr	s15, [pc, #476]	; 23eb8c4 <_Z6OBS_Dov+0x1194>
 23eb6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb6ee:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23eb6f2:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb6f4:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb6f8:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb6fc:	f04f 0901 	mov.w	r9, #1
 23eb700:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23eb704:	19e8      	adds	r0, r5, r7
 23eb706:	4977      	ldr	r1, [pc, #476]	; (23eb8e4 <_Z6OBS_Dov+0x11b4>)
 23eb708:	4420      	add	r0, r4
 23eb70a:	f011 fa41 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb70e:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eb710:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb714:	435e      	muls	r6, r3
 23eb716:	19b9      	adds	r1, r7, r6
 23eb718:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eb71a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eb71c:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eb720:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb724:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb728:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eb72c:	4420      	add	r0, r4
 23eb72e:	496e      	ldr	r1, [pc, #440]	; (23eb8e8 <_Z6OBS_Dov+0x11b8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb730:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eb732:	f011 fa2d 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb736:	231c      	movs	r3, #28
 23eb738:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb73a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb73e:	fb03 6602 	mla	r6, r3, r2, r6
 23eb742:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = h;
 23eb744:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb748:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb74c:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (SI1145_exists) {
 23eb750:	4e66      	ldr	r6, [pc, #408]	; (23eb8ec <_Z6OBS_Dov+0x11bc>)
 23eb752:	7833      	ldrb	r3, [r6, #0]
 23eb754:	2b00      	cmp	r3, #0
 23eb756:	f000 811d 	beq.w	23eb994 <_Z6OBS_Dov+0x1264>
    float si_vis = uv.readVisible();
 23eb75a:	4865      	ldr	r0, [pc, #404]	; (23eb8f0 <_Z6OBS_Dov+0x11c0>)
 23eb75c:	f005 fe89 	bl	23f1472 <_ZN15Adafruit_SI114511readVisibleEv>
 23eb760:	ee07 0a90 	vmov	s15, r0
    float si_ir = uv.readIR();
 23eb764:	4862      	ldr	r0, [pc, #392]	; (23eb8f0 <_Z6OBS_Dov+0x11c0>)
    float si_vis = uv.readVisible();
 23eb766:	eef8 aa67 	vcvt.f32.u32	s21, s15
    float si_ir = uv.readIR();
 23eb76a:	f005 fe85 	bl	23f1478 <_ZN15Adafruit_SI11456readIREv>
 23eb76e:	ee07 0a90 	vmov	s15, r0
    float si_uv = uv.readUV()/100.0;
 23eb772:	485f      	ldr	r0, [pc, #380]	; (23eb8f0 <_Z6OBS_Dov+0x11c0>)
    float si_ir = uv.readIR();
 23eb774:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    float si_uv = uv.readUV()/100.0;
 23eb778:	f005 fe78 	bl	23f146c <_ZN15Adafruit_SI11456readUVEv>
 23eb77c:	f7f8 fe76 	bl	23e446c <__aeabi_i2d>
 23eb780:	2200      	movs	r2, #0
 23eb782:	4b5c      	ldr	r3, [pc, #368]	; (23eb8f4 <_Z6OBS_Dov+0x11c4>)
 23eb784:	f7f9 f806 	bl	23e4794 <__aeabi_ddiv>
 23eb788:	f7f9 f9d2 	bl	23e4b30 <__aeabi_d2f>
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23eb78c:	ee7a 7a8a 	vadd.f32	s15, s21, s20
    float si_uv = uv.readUV()/100.0;
 23eb790:	ee08 0a90 	vmov	s17, r0
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23eb794:	ee77 7aa8 	vadd.f32	s15, s15, s17
 23eb798:	eef5 7a40 	vcmp.f32	s15, #0.0
 23eb79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb7a0:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23eb910 <_Z6OBS_Dov+0x11e0>
 23eb7a4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 23eb914 <_Z6OBS_Dov+0x11e4>
 23eb7a8:	4f53      	ldr	r7, [pc, #332]	; (23eb8f8 <_Z6OBS_Dov+0x11c8>)
 23eb7aa:	d141      	bne.n	23eb830 <_Z6OBS_Dov+0x1100>
 23eb7ac:	ed99 7a00 	vldr	s14, [r9]
 23eb7b0:	edda 7a00 	vldr	s15, [sl]
 23eb7b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 23eb7b8:	ed97 7a00 	vldr	s14, [r7]
 23eb7bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 23eb7c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 23eb7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb7c8:	d032      	beq.n	23eb830 <_Z6OBS_Dov+0x1100>
      Output ("SI RESET");
 23eb7ca:	484c      	ldr	r0, [pc, #304]	; (23eb8fc <_Z6OBS_Dov+0x11cc>)
 23eb7cc:	f7fa fe4e 	bl	23e646c <_Z6OutputPKc>
      if (uv.begin()) {
 23eb7d0:	f00e fb8c 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23eb7d4:	2160      	movs	r1, #96	; 0x60
 23eb7d6:	4602      	mov	r2, r0
 23eb7d8:	4845      	ldr	r0, [pc, #276]	; (23eb8f0 <_Z6OBS_Dov+0x11c0>)
 23eb7da:	f005 feaf 	bl	23f153c <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23eb7de:	2800      	cmp	r0, #0
 23eb7e0:	f000 86a2 	beq.w	23ec528 <_Z6OBS_Dov+0x1df8>
        SI1145_exists = true;
 23eb7e4:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23eb7e6:	4846      	ldr	r0, [pc, #280]	; (23eb900 <_Z6OBS_Dov+0x11d0>)
        SI1145_exists = true;
 23eb7e8:	7033      	strb	r3, [r6, #0]
        Output ("SI ONLINE");
 23eb7ea:	f7fa fe3f 	bl	23e646c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23eb7ee:	f8db 3000 	ldr.w	r3, [fp]
        si_vis = uv.readVisible();
 23eb7f2:	483f      	ldr	r0, [pc, #252]	; (23eb8f0 <_Z6OBS_Dov+0x11c0>)
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23eb7f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 23eb7f8:	f8cb 3000 	str.w	r3, [fp]
        si_vis = uv.readVisible();
 23eb7fc:	f005 fe39 	bl	23f1472 <_ZN15Adafruit_SI114511readVisibleEv>
 23eb800:	ee07 0a90 	vmov	s15, r0
        si_ir = uv.readIR();
 23eb804:	483a      	ldr	r0, [pc, #232]	; (23eb8f0 <_Z6OBS_Dov+0x11c0>)
        si_vis = uv.readVisible();
 23eb806:	eef8 aa67 	vcvt.f32.u32	s21, s15
        si_ir = uv.readIR();
 23eb80a:	f005 fe35 	bl	23f1478 <_ZN15Adafruit_SI11456readIREv>
 23eb80e:	ee07 0a90 	vmov	s15, r0
        si_uv = uv.readUV()/100.0;
 23eb812:	4837      	ldr	r0, [pc, #220]	; (23eb8f0 <_Z6OBS_Dov+0x11c0>)
        si_ir = uv.readIR();
 23eb814:	eeb8 aa67 	vcvt.f32.u32	s20, s15
        si_uv = uv.readUV()/100.0;
 23eb818:	f005 fe28 	bl	23f146c <_ZN15Adafruit_SI11456readUVEv>
 23eb81c:	f7f8 fe26 	bl	23e446c <__aeabi_i2d>
 23eb820:	2200      	movs	r2, #0
 23eb822:	4b34      	ldr	r3, [pc, #208]	; (23eb8f4 <_Z6OBS_Dov+0x11c4>)
 23eb824:	f7f8 ffb6 	bl	23e4794 <__aeabi_ddiv>
 23eb828:	f7f9 f982 	bl	23e4b30 <__aeabi_d2f>
 23eb82c:	ee08 0a90 	vmov	s17, r0
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23eb830:	eef4 aa6a 	vcmp.f32	s21, s21
 23eb834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    si_last_vis = si_vis;
 23eb838:	edca aa00 	vstr	s21, [sl]
    si_last_ir = si_ir;
 23eb83c:	ed89 aa00 	vstr	s20, [r9]
    si_last_uv = si_uv;
 23eb840:	edc7 8a00 	vstr	s17, [r7]
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23eb844:	f180 867c 	bvs.w	23ec540 <_Z6OBS_Dov+0x1e10>
 23eb848:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23eb904 <_Z6OBS_Dov+0x11d4>
 23eb84c:	eef4 aa67 	vcmp.f32	s21, s15
 23eb850:	eddf 7a1c 	vldr	s15, [pc, #112]	; 23eb8c4 <_Z6OBS_Dov+0x1194>
 23eb854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb858:	fe77 aaaa 	vselgt.f32	s21, s15, s21
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23eb85c:	eeb4 aa4a 	vcmp.f32	s20, s20
 23eb860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb864:	f180 8670 	bvs.w	23ec548 <_Z6OBS_Dov+0x1e18>
 23eb868:	eddf 7a27 	vldr	s15, [pc, #156]	; 23eb908 <_Z6OBS_Dov+0x11d8>
 23eb86c:	eeb4 aa67 	vcmp.f32	s20, s15
 23eb870:	eddf 7a14 	vldr	s15, [pc, #80]	; 23eb8c4 <_Z6OBS_Dov+0x1194>
 23eb874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb878:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23eb87c:	eef4 8a68 	vcmp.f32	s17, s17
 23eb880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb884:	f180 8664 	bvs.w	23ec550 <_Z6OBS_Dov+0x1e20>
 23eb888:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23eb88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb890:	f100 865e 	bmi.w	23ec550 <_Z6OBS_Dov+0x1e20>
 23eb894:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23eb90c <_Z6OBS_Dov+0x11dc>
 23eb898:	eef4 8a67 	vcmp.f32	s17, s15
 23eb89c:	eddf 7a09 	vldr	s15, [pc, #36]	; 23eb8c4 <_Z6OBS_Dov+0x1194>
 23eb8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb8a4:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23eb8a8:	e036      	b.n	23eb918 <_Z6OBS_Dov+0x11e8>
 23eb8aa:	bf00      	nop
 23eb8ac:	023fe22e 	.word	0x023fe22e
 23eb8b0:	023fe233 	.word	0x023fe233
 23eb8b4:	1006a2b3 	.word	0x1006a2b3
 23eb8b8:	1006f0dc 	.word	0x1006f0dc
 23eb8bc:	c2200000 	.word	0xc2200000
 23eb8c0:	42700000 	.word	0x42700000
 23eb8c4:	c479f99a 	.word	0xc479f99a
 23eb8c8:	43960000 	.word	0x43960000
 23eb8cc:	44898000 	.word	0x44898000
 23eb8d0:	023fe238 	.word	0x023fe238
 23eb8d4:	023fe23d 	.word	0x023fe23d
 23eb8d8:	1006a2ae 	.word	0x1006a2ae
 23eb8dc:	c479ff5c 	.word	0xc479ff5c
 23eb8e0:	42c80000 	.word	0x42c80000
 23eb8e4:	023fe242 	.word	0x023fe242
 23eb8e8:	023fe246 	.word	0x023fe246
 23eb8ec:	1006a7d2 	.word	0x1006a7d2
 23eb8f0:	1007ac18 	.word	0x1007ac18
 23eb8f4:	40590000 	.word	0x40590000
 23eb8f8:	1007abd8 	.word	0x1007abd8
 23eb8fc:	023fe24a 	.word	0x023fe24a
 23eb900:	023fd7dc 	.word	0x023fd7dc
 23eb904:	44fa0000 	.word	0x44fa0000
 23eb908:	467a0000 	.word	0x467a0000
 23eb90c:	447a0000 	.word	0x447a0000
 23eb910:	1007abdc 	.word	0x1007abdc
 23eb914:	1007abd4 	.word	0x1007abd4
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23eb918:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb91c:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb920:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23eb924:	19e8      	adds	r0, r5, r7
 23eb926:	49d5      	ldr	r1, [pc, #852]	; (23ebc7c <_Z6OBS_Dov+0x154c>)
 23eb928:	4420      	add	r0, r4
 23eb92a:	f011 f931 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb92e:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb930:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb934:	435e      	muls	r6, r3
 23eb936:	2300      	movs	r3, #0
 23eb938:	19ba      	adds	r2, r7, r6
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eb93a:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb93e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eb940:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb942:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_vis;
 23eb944:	edc2 aa09 	vstr	s21, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eb948:	49cd      	ldr	r1, [pc, #820]	; (23ebc80 <_Z6OBS_Dov+0x1550>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb94a:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eb94e:	4420      	add	r0, r4
 23eb950:	f011 f91e 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb954:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb956:	f108 0901 	add.w	r9, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb95a:	fb0b 6909 	mla	r9, fp, r9, r6
 23eb95e:	eb04 0209 	add.w	r2, r4, r9
    obs[oidx].sensor[sidx++].inuse = true;
 23eb962:	f108 0902 	add.w	r9, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb966:	fb0b 6609 	mla	r6, fp, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23eb96a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23eb96e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb970:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_ir;
 23eb972:	ed82 aa09 	vstr	s20, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23eb976:	49c3      	ldr	r1, [pc, #780]	; (23ebc84 <_Z6OBS_Dov+0x1554>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb978:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23eb97c:	4420      	add	r0, r4
 23eb97e:	f011 f907 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb982:	4426      	add	r6, r4
 23eb984:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = si_uv;
 23eb986:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb98a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb98c:	f108 0803 	add.w	r8, r8, #3
 23eb990:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (MCP_1_exists) {
 23eb994:	4bbc      	ldr	r3, [pc, #752]	; (23ebc88 <_Z6OBS_Dov+0x1558>)
 23eb996:	781b      	ldrb	r3, [r3, #0]
 23eb998:	b3c3      	cbz	r3, 23eba0c <_Z6OBS_Dov+0x12dc>
    strcpy (obs[oidx].sensor[sidx].id, "mt1");
 23eb99a:	261c      	movs	r6, #28
 23eb99c:	fb06 f608 	mul.w	r6, r6, r8
 23eb9a0:	1970      	adds	r0, r6, r5
 23eb9a2:	49ba      	ldr	r1, [pc, #744]	; (23ebc8c <_Z6OBS_Dov+0x155c>)
 23eb9a4:	4420      	add	r0, r4
 23eb9a6:	f011 f8f3 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb9aa:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb9ae:	9a00      	ldr	r2, [sp, #0]
    t = mcp1.readTempC();
 23eb9b0:	48b7      	ldr	r0, [pc, #732]	; (23ebc90 <_Z6OBS_Dov+0x1560>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb9b2:	fb03 6602 	mla	r6, r3, r2, r6
 23eb9b6:	2300      	movs	r3, #0
 23eb9b8:	4426      	add	r6, r4
 23eb9ba:	6233      	str	r3, [r6, #32]
    t = mcp1.readTempC();
 23eb9bc:	f005 fb66 	bl	23f108c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb9c0:	eeb4 0a40 	vcmp.f32	s0, s0
 23eb9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb9c8:	f180 85c6 	bvs.w	23ec558 <_Z6OBS_Dov+0x1e28>
 23eb9cc:	eddf 7ab1 	vldr	s15, [pc, #708]	; 23ebc94 <_Z6OBS_Dov+0x1564>
 23eb9d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eb9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb9d8:	f100 85be 	bmi.w	23ec558 <_Z6OBS_Dov+0x1e28>
 23eb9dc:	eddf 7aae 	vldr	s15, [pc, #696]	; 23ebc98 <_Z6OBS_Dov+0x1568>
 23eb9e0:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb9e4:	eddf 7aad 	vldr	s15, [pc, #692]	; 23ebc9c <_Z6OBS_Dov+0x156c>
 23eb9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb9ec:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eb9f0:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb9f4:	9a00      	ldr	r2, [sp, #0]
 23eb9f6:	4353      	muls	r3, r2
 23eb9f8:	221c      	movs	r2, #28
 23eb9fa:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eb9fe:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eba00:	4423      	add	r3, r4
 23eba02:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eba06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eba0a:	4490      	add	r8, r2
  if (MCP_2_exists) {
 23eba0c:	4ba4      	ldr	r3, [pc, #656]	; (23ebca0 <_Z6OBS_Dov+0x1570>)
 23eba0e:	781b      	ldrb	r3, [r3, #0]
 23eba10:	b3c3      	cbz	r3, 23eba84 <_Z6OBS_Dov+0x1354>
    strcpy (obs[oidx].sensor[sidx].id, "mt2");
 23eba12:	261c      	movs	r6, #28
 23eba14:	fb06 f608 	mul.w	r6, r6, r8
 23eba18:	1970      	adds	r0, r6, r5
 23eba1a:	49a2      	ldr	r1, [pc, #648]	; (23ebca4 <_Z6OBS_Dov+0x1574>)
 23eba1c:	4420      	add	r0, r4
 23eba1e:	f011 f8b7 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eba22:	f640 2398 	movw	r3, #2712	; 0xa98
 23eba26:	9a00      	ldr	r2, [sp, #0]
    t = mcp2.readTempC();
 23eba28:	489f      	ldr	r0, [pc, #636]	; (23ebca8 <_Z6OBS_Dov+0x1578>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eba2a:	fb03 6602 	mla	r6, r3, r2, r6
 23eba2e:	2300      	movs	r3, #0
 23eba30:	4426      	add	r6, r4
 23eba32:	6233      	str	r3, [r6, #32]
    t = mcp2.readTempC();
 23eba34:	f005 fb2a 	bl	23f108c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eba38:	eeb4 0a40 	vcmp.f32	s0, s0
 23eba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eba40:	f180 858e 	bvs.w	23ec560 <_Z6OBS_Dov+0x1e30>
 23eba44:	eddf 7a93 	vldr	s15, [pc, #588]	; 23ebc94 <_Z6OBS_Dov+0x1564>
 23eba48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eba4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eba50:	f100 8586 	bmi.w	23ec560 <_Z6OBS_Dov+0x1e30>
 23eba54:	eddf 7a90 	vldr	s15, [pc, #576]	; 23ebc98 <_Z6OBS_Dov+0x1568>
 23eba58:	eeb4 0a67 	vcmp.f32	s0, s15
 23eba5c:	eddf 7a8f 	vldr	s15, [pc, #572]	; 23ebc9c <_Z6OBS_Dov+0x156c>
 23eba60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eba64:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eba68:	f640 2398 	movw	r3, #2712	; 0xa98
 23eba6c:	9a00      	ldr	r2, [sp, #0]
 23eba6e:	4353      	muls	r3, r2
 23eba70:	221c      	movs	r2, #28
 23eba72:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eba76:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eba78:	4423      	add	r3, r4
 23eba7a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eba7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eba82:	4490      	add	r8, r2
  if (MCP_3_exists) {
 23eba84:	4b89      	ldr	r3, [pc, #548]	; (23ebcac <_Z6OBS_Dov+0x157c>)
 23eba86:	781b      	ldrb	r3, [r3, #0]
 23eba88:	2b00      	cmp	r3, #0
 23eba8a:	f000 8571 	beq.w	23ec570 <_Z6OBS_Dov+0x1e40>
    strcpy (obs[oidx].sensor[sidx].id, "gt1");
 23eba8e:	261c      	movs	r6, #28
 23eba90:	fb06 f608 	mul.w	r6, r6, r8
 23eba94:	1970      	adds	r0, r6, r5
 23eba96:	4986      	ldr	r1, [pc, #536]	; (23ebcb0 <_Z6OBS_Dov+0x1580>)
 23eba98:	4420      	add	r0, r4
 23eba9a:	f011 f879 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eba9e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebaa2:	9a00      	ldr	r2, [sp, #0]
    t = mcp3.readTempC();
 23ebaa4:	4883      	ldr	r0, [pc, #524]	; (23ebcb4 <_Z6OBS_Dov+0x1584>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebaa6:	fb03 6602 	mla	r6, r3, r2, r6
 23ebaaa:	2300      	movs	r3, #0
 23ebaac:	4426      	add	r6, r4
 23ebaae:	6233      	str	r3, [r6, #32]
    t = mcp3.readTempC();
 23ebab0:	f005 faec 	bl	23f108c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ebab4:	eeb4 0a40 	vcmp.f32	s0, s0
 23ebab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebabc:	f180 8554 	bvs.w	23ec568 <_Z6OBS_Dov+0x1e38>
 23ebac0:	eddf 7a74 	vldr	s15, [pc, #464]	; 23ebc94 <_Z6OBS_Dov+0x1564>
 23ebac4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ebac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebacc:	f100 854c 	bmi.w	23ec568 <_Z6OBS_Dov+0x1e38>
 23ebad0:	eddf 7a71 	vldr	s15, [pc, #452]	; 23ebc98 <_Z6OBS_Dov+0x1568>
 23ebad4:	eeb4 0a67 	vcmp.f32	s0, s15
 23ebad8:	eddf 7a70 	vldr	s15, [pc, #448]	; 23ebc9c <_Z6OBS_Dov+0x156c>
 23ebadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebae0:	fe77 8a80 	vselgt.f32	s17, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ebae4:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebae8:	9a00      	ldr	r2, [sp, #0]
 23ebaea:	4353      	muls	r3, r2
 23ebaec:	221c      	movs	r2, #28
 23ebaee:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ebaf2:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ebaf4:	4423      	add	r3, r4
 23ebaf6:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebafa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ebafe:	4490      	add	r8, r2
  if (MCP_4_exists) {
 23ebb00:	4b6d      	ldr	r3, [pc, #436]	; (23ebcb8 <_Z6OBS_Dov+0x1588>)
 23ebb02:	781b      	ldrb	r3, [r3, #0]
 23ebb04:	b3c3      	cbz	r3, 23ebb78 <_Z6OBS_Dov+0x1448>
    strcpy (obs[oidx].sensor[sidx].id, "gt2");
 23ebb06:	261c      	movs	r6, #28
 23ebb08:	fb06 f608 	mul.w	r6, r6, r8
 23ebb0c:	1970      	adds	r0, r6, r5
 23ebb0e:	496b      	ldr	r1, [pc, #428]	; (23ebcbc <_Z6OBS_Dov+0x158c>)
 23ebb10:	4420      	add	r0, r4
 23ebb12:	f011 f83d 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebb16:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebb1a:	9a00      	ldr	r2, [sp, #0]
    t = mcp4.readTempC();
 23ebb1c:	4868      	ldr	r0, [pc, #416]	; (23ebcc0 <_Z6OBS_Dov+0x1590>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebb1e:	fb03 6602 	mla	r6, r3, r2, r6
 23ebb22:	2300      	movs	r3, #0
 23ebb24:	4426      	add	r6, r4
 23ebb26:	6233      	str	r3, [r6, #32]
    t = mcp4.readTempC();
 23ebb28:	f005 fab0 	bl	23f108c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ebb2c:	eeb4 0a40 	vcmp.f32	s0, s0
 23ebb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebb34:	f180 8520 	bvs.w	23ec578 <_Z6OBS_Dov+0x1e48>
 23ebb38:	eddf 7a56 	vldr	s15, [pc, #344]	; 23ebc94 <_Z6OBS_Dov+0x1564>
 23ebb3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ebb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebb44:	f100 8518 	bmi.w	23ec578 <_Z6OBS_Dov+0x1e48>
 23ebb48:	eddf 7a53 	vldr	s15, [pc, #332]	; 23ebc98 <_Z6OBS_Dov+0x1568>
 23ebb4c:	eeb4 0a67 	vcmp.f32	s0, s15
 23ebb50:	eddf 7a52 	vldr	s15, [pc, #328]	; 23ebc9c <_Z6OBS_Dov+0x156c>
 23ebb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebb58:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ebb5c:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebb60:	9a00      	ldr	r2, [sp, #0]
 23ebb62:	4353      	muls	r3, r2
 23ebb64:	221c      	movs	r2, #28
 23ebb66:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ebb6a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ebb6c:	4423      	add	r3, r4
 23ebb6e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebb72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ebb76:	4490      	add	r8, r2
  if (VEML7700_exists) {
 23ebb78:	4b52      	ldr	r3, [pc, #328]	; (23ebcc4 <_Z6OBS_Dov+0x1594>)
 23ebb7a:	781b      	ldrb	r3, [r3, #0]
 23ebb7c:	b37b      	cbz	r3, 23ebbde <_Z6OBS_Dov+0x14ae>
    float lux = veml.readLux(VEML_LUX_AUTO);
 23ebb7e:	2102      	movs	r1, #2
 23ebb80:	4851      	ldr	r0, [pc, #324]	; (23ebcc8 <_Z6OBS_Dov+0x1598>)
 23ebb82:	f006 fcb1 	bl	23f24e8 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23ebb86:	eeb4 0a40 	vcmp.f32	s0, s0
 23ebb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebb8e:	f180 84f7 	bvs.w	23ec580 <_Z6OBS_Dov+0x1e50>
 23ebb92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ebb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebb9a:	f100 84f1 	bmi.w	23ec580 <_Z6OBS_Dov+0x1e50>
 23ebb9e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23ebccc <_Z6OBS_Dov+0x159c>
 23ebba2:	eeb4 0a67 	vcmp.f32	s0, s15
 23ebba6:	eddf 7a4a 	vldr	s15, [pc, #296]	; 23ebcd0 <_Z6OBS_Dov+0x15a0>
 23ebbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebbae:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "vlx");
 23ebbb2:	261c      	movs	r6, #28
 23ebbb4:	fb06 f608 	mul.w	r6, r6, r8
 23ebbb8:	1970      	adds	r0, r6, r5
 23ebbba:	4946      	ldr	r1, [pc, #280]	; (23ebcd4 <_Z6OBS_Dov+0x15a4>)
 23ebbbc:	4420      	add	r0, r4
 23ebbbe:	f010 ffe7 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebbc2:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebbc6:	9a00      	ldr	r2, [sp, #0]
 23ebbc8:	fb03 6302 	mla	r3, r3, r2, r6
 23ebbcc:	2200      	movs	r2, #0
 23ebbce:	4423      	add	r3, r4
 23ebbd0:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebbd2:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23ebbd4:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebbd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ebbdc:	4490      	add	r8, r2
  if (BLX_exists) {
 23ebbde:	4b3e      	ldr	r3, [pc, #248]	; (23ebcd8 <_Z6OBS_Dov+0x15a8>)
 23ebbe0:	781b      	ldrb	r3, [r3, #0]
 23ebbe2:	b36b      	cbz	r3, 23ebc40 <_Z6OBS_Dov+0x1510>
    float lux=blx_takereading();
 23ebbe4:	f7fb ff14 	bl	23e7a10 <_Z15blx_takereadingv>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23ebbe8:	eeb4 0a40 	vcmp.f32	s0, s0
 23ebbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebbf0:	f180 84ca 	bvs.w	23ec588 <_Z6OBS_Dov+0x1e58>
 23ebbf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ebbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebbfc:	f100 84c4 	bmi.w	23ec588 <_Z6OBS_Dov+0x1e58>
 23ebc00:	eddf 7a36 	vldr	s15, [pc, #216]	; 23ebcdc <_Z6OBS_Dov+0x15ac>
 23ebc04:	eeb4 0a67 	vcmp.f32	s0, s15
 23ebc08:	eddf 7a24 	vldr	s15, [pc, #144]	; 23ebc9c <_Z6OBS_Dov+0x156c>
 23ebc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebc10:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "blx");
 23ebc14:	261c      	movs	r6, #28
 23ebc16:	fb06 f608 	mul.w	r6, r6, r8
 23ebc1a:	1970      	adds	r0, r6, r5
 23ebc1c:	4930      	ldr	r1, [pc, #192]	; (23ebce0 <_Z6OBS_Dov+0x15b0>)
 23ebc1e:	4420      	add	r0, r4
 23ebc20:	f010 ffb6 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebc24:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebc28:	9a00      	ldr	r2, [sp, #0]
 23ebc2a:	fb03 6302 	mla	r3, r3, r2, r6
 23ebc2e:	2200      	movs	r2, #0
 23ebc30:	4423      	add	r3, r4
 23ebc32:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebc34:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23ebc36:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebc3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ebc3e:	4490      	add	r8, r2
  if (A4_State == A4_STATE_DISTANCE) {
 23ebc40:	4b28      	ldr	r3, [pc, #160]	; (23ebce4 <_Z6OBS_Dov+0x15b4>)
 23ebc42:	681f      	ldr	r7, [r3, #0]
 23ebc44:	2f01      	cmp	r7, #1
 23ebc46:	d151      	bne.n	23ebcec <_Z6OBS_Dov+0x15bc>
    strcpy (obs[oidx].sensor[sidx].id, "sg"); // sg = snow or stream
 23ebc48:	261c      	movs	r6, #28
 23ebc4a:	fb06 f608 	mul.w	r6, r6, r8
 23ebc4e:	1970      	adds	r0, r6, r5
 23ebc50:	4925      	ldr	r1, [pc, #148]	; (23ebce8 <_Z6OBS_Dov+0x15b8>)
 23ebc52:	4420      	add	r0, r4
 23ebc54:	f010 ff9c 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebc58:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebc5c:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebc5e:	f108 0801 	add.w	r8, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebc62:	fb03 6602 	mla	r6, r3, r2, r6
 23ebc66:	2300      	movs	r3, #0
 23ebc68:	4426      	add	r6, r4
 23ebc6a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = DistanceGauge_Median();
 23ebc6c:	f7fc fad8 	bl	23e8220 <_Z20DistanceGauge_Medianv>
 23ebc70:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebc74:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23ebc78:	e038      	b.n	23ebcec <_Z6OBS_Dov+0x15bc>
 23ebc7a:	bf00      	nop
 23ebc7c:	023fe253 	.word	0x023fe253
 23ebc80:	023fe257 	.word	0x023fe257
 23ebc84:	023fe25b 	.word	0x023fe25b
 23ebc88:	1006a2c8 	.word	0x1006a2c8
 23ebc8c:	023fe2fa 	.word	0x023fe2fa
 23ebc90:	1006f0f8 	.word	0x1006f0f8
 23ebc94:	c2200000 	.word	0xc2200000
 23ebc98:	42700000 	.word	0x42700000
 23ebc9c:	c479f99a 	.word	0xc479f99a
 23ebca0:	1006a2c9 	.word	0x1006a2c9
 23ebca4:	023fe301 	.word	0x023fe301
 23ebca8:	1006f104 	.word	0x1006f104
 23ebcac:	1006a2ca 	.word	0x1006a2ca
 23ebcb0:	023fe4af 	.word	0x023fe4af
 23ebcb4:	1006f110 	.word	0x1006f110
 23ebcb8:	1006a2cb 	.word	0x1006a2cb
 23ebcbc:	023fe4ba 	.word	0x023fe4ba
 23ebcc0:	1006f11c 	.word	0x1006f11c
 23ebcc4:	1006a7e4 	.word	0x1006a7e4
 23ebcc8:	1007ac20 	.word	0x1007ac20
 23ebccc:	47ea6000 	.word	0x47ea6000
 23ebcd0:	c479c000 	.word	0xc479c000
 23ebcd4:	023fe25f 	.word	0x023fe25f
 23ebcd8:	1006a280 	.word	0x1006a280
 23ebcdc:	48438200 	.word	0x48438200
 23ebce0:	023fe263 	.word	0x023fe263
 23ebce4:	1006a25c 	.word	0x1006a25c
 23ebce8:	023fe267 	.word	0x023fe267
  if (A4_State == A4_STATE_RAW) {
 23ebcec:	4bd5      	ldr	r3, [pc, #852]	; (23ec044 <_Z6OBS_Dov+0x1914>)
 23ebcee:	681b      	ldr	r3, [r3, #0]
 23ebcf0:	2b03      	cmp	r3, #3
 23ebcf2:	f040 844d 	bne.w	23ec590 <_Z6OBS_Dov+0x1e60>
    strcpy (obs[oidx].sensor[sidx].id, "a4r");
 23ebcf6:	261c      	movs	r6, #28
 23ebcf8:	fb06 f608 	mul.w	r6, r6, r8
 23ebcfc:	1970      	adds	r0, r6, r5
 23ebcfe:	49d2      	ldr	r1, [pc, #840]	; (23ec048 <_Z6OBS_Dov+0x1918>)
 23ebd00:	4420      	add	r0, r4
 23ebd02:	f010 ff45 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebd06:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebd0a:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ebd0c:	200f      	movs	r0, #15
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebd0e:	fb03 6602 	mla	r6, r3, r2, r6
 23ebd12:	2300      	movs	r3, #0
 23ebd14:	4426      	add	r6, r4
 23ebd16:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ebd18:	f7fc fa48 	bl	23e81ac <_Z11Pin_ReadAvgi>
    obs[oidx].sensor[sidx++].inuse = true;
 23ebd1c:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ebd1e:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebd22:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 23ebd26:	4498      	add	r8, r3
  if (A5_State == A5_STATE_RAW) {
 23ebd28:	4bc8      	ldr	r3, [pc, #800]	; (23ec04c <_Z6OBS_Dov+0x191c>)
 23ebd2a:	681f      	ldr	r7, [r3, #0]
 23ebd2c:	2f01      	cmp	r7, #1
 23ebd2e:	d118      	bne.n	23ebd62 <_Z6OBS_Dov+0x1632>
    strcpy (obs[oidx].sensor[sidx].id, "a5r");
 23ebd30:	261c      	movs	r6, #28
 23ebd32:	fb06 f608 	mul.w	r6, r6, r8
 23ebd36:	1970      	adds	r0, r6, r5
 23ebd38:	49c5      	ldr	r1, [pc, #788]	; (23ec050 <_Z6OBS_Dov+0x1920>)
 23ebd3a:	4420      	add	r0, r4
 23ebd3c:	f010 ff28 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebd40:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebd44:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23ebd46:	200e      	movs	r0, #14
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebd48:	fb03 6602 	mla	r6, r3, r2, r6
 23ebd4c:	2300      	movs	r3, #0
 23ebd4e:	4426      	add	r6, r4
 23ebd50:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23ebd52:	f7fc fa2b 	bl	23e81ac <_Z11Pin_ReadAvgi>
 23ebd56:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebd5a:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23ebd5e:	f108 0801 	add.w	r8, r8, #1
  if (PM25AQI_exists) {
 23ebd62:	4bbc      	ldr	r3, [pc, #752]	; (23ec054 <_Z6OBS_Dov+0x1924>)
 23ebd64:	781b      	ldrb	r3, [r3, #0]
 23ebd66:	2b00      	cmp	r3, #0
 23ebd68:	f000 8087 	beq.w	23ebe7a <_Z6OBS_Dov+0x174a>
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ebd6c:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebd70:	f640 2698 	movw	r6, #2712	; 0xa98
 23ebd74:	f04f 0b01 	mov.w	fp, #1
 23ebd78:	fb0a f708 	mul.w	r7, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ebd7c:	19e8      	adds	r0, r5, r7
 23ebd7e:	49b6      	ldr	r1, [pc, #728]	; (23ec058 <_Z6OBS_Dov+0x1928>)
 23ebd80:	4420      	add	r0, r4
 23ebd82:	f010 ff05 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebd86:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ebd88:	f8df 9320 	ldr.w	r9, [pc, #800]	; 23ec0ac <_Z6OBS_Dov+0x197c>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebd8c:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ebd8e:	eb07 000a 	add.w	r0, r7, sl
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ebd92:	f8b9 3000 	ldrh.w	r3, [r9]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebd96:	19ba      	adds	r2, r7, r6
 23ebd98:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ebd9a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ebd9c:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ebd9e:	49af      	ldr	r1, [pc, #700]	; (23ec05c <_Z6OBS_Dov+0x192c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ebda0:	eb08 030b 	add.w	r3, r8, fp
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebda4:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebda8:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ebdac:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ebdae:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ebdb0:	f010 feee 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebdb4:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ebdb6:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebdba:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ebdbe:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebdc2:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ebdc4:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ebdc6:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ebdc8:	49a5      	ldr	r1, [pc, #660]	; (23ec060 <_Z6OBS_Dov+0x1930>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ebdca:	f108 0202 	add.w	r2, r8, #2
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebdce:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebdd2:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ebdd6:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ebdd8:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ebdda:	f010 fed9 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebdde:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ebde0:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebde4:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ebde8:	f107 0054 	add.w	r0, r7, #84	; 0x54
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebdec:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ebdee:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ebdf0:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ebdf2:	499c      	ldr	r1, [pc, #624]	; (23ec064 <_Z6OBS_Dov+0x1934>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ebdf4:	f108 0303 	add.w	r3, r8, #3
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebdf8:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebdfc:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ebe00:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe02:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ebe04:	f010 fec4 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe08:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ebe0a:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe0e:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ebe12:	f107 0070 	add.w	r0, r7, #112	; 0x70
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe16:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ebe18:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ebe1a:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ebe1c:	4992      	ldr	r1, [pc, #584]	; (23ec068 <_Z6OBS_Dov+0x1938>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe1e:	f108 0204 	add.w	r2, r8, #4
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe22:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe26:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ebe2a:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe2c:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ebe2e:	f010 feaf 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe32:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ebe34:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe38:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ebe3c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe40:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ebe42:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ebe44:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ebe46:	4989      	ldr	r1, [pc, #548]	; (23ec06c <_Z6OBS_Dov+0x193c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe48:	f108 0305 	add.w	r3, r8, #5
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe4c:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe50:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ebe54:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe56:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ebe58:	f010 fe9a 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe5c:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe5e:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe62:	fb0a 6603 	mla	r6, sl, r3, r6
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23ebe66:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ebe6a:	4426      	add	r6, r4
 23ebe6c:	f8c6 b020 	str.w	fp, [r6, #32]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23ebe70:	62b3      	str	r3, [r6, #40]	; 0x28
    obs[oidx].sensor[sidx++].inuse = true;
 23ebe72:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
    pm25aqi_clear();
 23ebe76:	f7fb fe21 	bl	23e7abc <_Z13pm25aqi_clearv>
  if (HI_exists) {
 23ebe7a:	4b7d      	ldr	r3, [pc, #500]	; (23ec070 <_Z6OBS_Dov+0x1940>)
 23ebe7c:	781b      	ldrb	r3, [r3, #0]
 23ebe7e:	2b00      	cmp	r3, #0
 23ebe80:	f000 83d0 	beq.w	23ec624 <_Z6OBS_Dov+0x1ef4>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ebe84:	261c      	movs	r6, #28
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ebe86:	eef0 0a69 	vmov.f32	s1, s19
 23ebe8a:	eeb0 0a48 	vmov.f32	s0, s16
 23ebe8e:	f7fb fa2b 	bl	23e72e8 <_Z12hi_calculateff>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ebe92:	fb06 f608 	mul.w	r6, r6, r8
 23ebe96:	1970      	adds	r0, r6, r5
 23ebe98:	4976      	ldr	r1, [pc, #472]	; (23ec074 <_Z6OBS_Dov+0x1944>)
 23ebe9a:	4420      	add	r0, r4
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ebe9c:	ee10 7a10 	vmov	r7, s0
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ebea0:	f010 fe76 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebea4:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebea8:	9a00      	ldr	r2, [sp, #0]
 23ebeaa:	fb03 6302 	mla	r3, r3, r2, r6
 23ebeae:	2200      	movs	r2, #0
 23ebeb0:	4423      	add	r3, r4
 23ebeb2:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ebeb4:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) heat_index;
 23ebeb6:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ebeb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ebebc:	4490      	add	r8, r2
  if (WBT_exists) {
 23ebebe:	4b6e      	ldr	r3, [pc, #440]	; (23ec078 <_Z6OBS_Dov+0x1948>)
 23ebec0:	781b      	ldrb	r3, [r3, #0]
 23ebec2:	2b00      	cmp	r3, #0
 23ebec4:	f000 83b0 	beq.w	23ec628 <_Z6OBS_Dov+0x1ef8>
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ebec8:	ee19 0a90 	vmov	r0, s19
 23ebecc:	f7f8 fae0 	bl	23e4490 <__aeabi_f2d>
 23ebed0:	ec41 0b19 	vmov	d9, r0, r1
 23ebed4:	ee18 0a10 	vmov	r0, s16
 23ebed8:	f7f8 fada 	bl	23e4490 <__aeabi_f2d>
 23ebedc:	eeb0 1a49 	vmov.f32	s2, s18
 23ebee0:	eef0 1a69 	vmov.f32	s3, s19
 23ebee4:	ec41 0b10 	vmov	d0, r0, r1
 23ebee8:	f7fb f916 	bl	23e7118 <_Z13wbt_calculatedd>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ebeec:	261c      	movs	r6, #28
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ebeee:	ec51 0b10 	vmov	r0, r1, d0
 23ebef2:	f7f8 fe1d 	bl	23e4b30 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ebef6:	fb06 f608 	mul.w	r6, r6, r8
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ebefa:	4681      	mov	r9, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ebefc:	1970      	adds	r0, r6, r5
 23ebefe:	4420      	add	r0, r4
 23ebf00:	495e      	ldr	r1, [pc, #376]	; (23ec07c <_Z6OBS_Dov+0x194c>)
 23ebf02:	f010 fe45 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebf06:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebf0a:	9a00      	ldr	r2, [sp, #0]
 23ebf0c:	fb03 6602 	mla	r6, r3, r2, r6
 23ebf10:	2300      	movs	r3, #0
 23ebf12:	4434      	add	r4, r6
 23ebf14:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx++].inuse = true;  
 23ebf16:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) wetbulb_temp;
 23ebf18:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;  
 23ebf1c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 23ebf20:	4498      	add	r8, r3
  if (WBGT_exists) {
 23ebf22:	4b57      	ldr	r3, [pc, #348]	; (23ec080 <_Z6OBS_Dov+0x1950>)
 23ebf24:	4c57      	ldr	r4, [pc, #348]	; (23ec084 <_Z6OBS_Dov+0x1954>)
 23ebf26:	781b      	ldrb	r3, [r3, #0]
 23ebf28:	2b00      	cmp	r3, #0
 23ebf2a:	d039      	beq.n	23ebfa0 <_Z6OBS_Dov+0x1870>
    if (MCP_3_exists) {
 23ebf2c:	4b56      	ldr	r3, [pc, #344]	; (23ec088 <_Z6OBS_Dov+0x1958>)
 23ebf2e:	781b      	ldrb	r3, [r3, #0]
 23ebf30:	2b00      	cmp	r3, #0
 23ebf32:	f000 837c 	beq.w	23ec62e <_Z6OBS_Dov+0x1efe>
      wbgt = wbgt_using_wbt(sht1_temp, mcp3_temp, wetbulb_temp); // TempAir, TempGlobe, TempWetBulb
 23ebf36:	4648      	mov	r0, r9
 23ebf38:	f7f8 faaa 	bl	23e4490 <__aeabi_f2d>
 23ebf3c:	ec41 0b1a 	vmov	d10, r0, r1
 23ebf40:	ee18 0a90 	vmov	r0, s17
 23ebf44:	f7f8 faa4 	bl	23e4490 <__aeabi_f2d>
 23ebf48:	ec41 0b19 	vmov	d9, r0, r1
 23ebf4c:	ee18 0a10 	vmov	r0, s16
 23ebf50:	f7f8 fa9e 	bl	23e4490 <__aeabi_f2d>
 23ebf54:	eeb0 2a4a 	vmov.f32	s4, s20
 23ebf58:	eef0 2a6a 	vmov.f32	s5, s21
 23ebf5c:	eeb0 1a49 	vmov.f32	s2, s18
 23ebf60:	eef0 1a69 	vmov.f32	s3, s19
 23ebf64:	ec41 0b10 	vmov	d0, r0, r1
 23ebf68:	f7fb fbea 	bl	23e7740 <_Z14wbgt_using_wbtddd>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ebf6c:	261c      	movs	r6, #28
      wbgt = wbgt_using_hi(heat_index);
 23ebf6e:	ec51 0b10 	vmov	r0, r1, d0
 23ebf72:	f7f8 fddd 	bl	23e4b30 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ebf76:	fb06 f608 	mul.w	r6, r6, r8
      wbgt = wbgt_using_hi(heat_index);
 23ebf7a:	4607      	mov	r7, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ebf7c:	1970      	adds	r0, r6, r5
 23ebf7e:	4943      	ldr	r1, [pc, #268]	; (23ec08c <_Z6OBS_Dov+0x195c>)
 23ebf80:	4420      	add	r0, r4
 23ebf82:	f010 fe05 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebf86:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebf8a:	9a00      	ldr	r2, [sp, #0]
 23ebf8c:	fb03 6302 	mla	r3, r3, r2, r6
 23ebf90:	2200      	movs	r2, #0
 23ebf92:	4423      	add	r3, r4
 23ebf94:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ebf96:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) wbgt;
 23ebf98:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ebf9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ebf9e:	4490      	add	r8, r2
  if (TLW_exists) {
 23ebfa0:	4b3b      	ldr	r3, [pc, #236]	; (23ec090 <_Z6OBS_Dov+0x1960>)
 23ebfa2:	781b      	ldrb	r3, [r3, #0]
 23ebfa4:	2b00      	cmp	r3, #0
 23ebfa6:	f000 808c 	beq.w	23ec0c2 <_Z6OBS_Dov+0x1992>
    tlw.newReading();
 23ebfaa:	483a      	ldr	r0, [pc, #232]	; (23ec094 <_Z6OBS_Dov+0x1964>)
 23ebfac:	f006 fb42 	bl	23f2634 <_ZN8LeafSens10newReadingEv>
    delay(100);
 23ebfb0:	2064      	movs	r0, #100	; 0x64
 23ebfb2:	f00b fe67 	bl	23f7c84 <delay>
    float w = tlw.getWet();
 23ebfb6:	4837      	ldr	r0, [pc, #220]	; (23ec094 <_Z6OBS_Dov+0x1964>)
 23ebfb8:	f006 fb52 	bl	23f2660 <_ZN8LeafSens6getWetEv>
    float t = tlw.getTemp();
 23ebfbc:	4835      	ldr	r0, [pc, #212]	; (23ec094 <_Z6OBS_Dov+0x1964>)
    float w = tlw.getWet();
 23ebfbe:	eef0 8a40 	vmov.f32	s17, s0
    float t = tlw.getTemp();
 23ebfc2:	f006 fb5f 	bl	23f2684 <_ZN8LeafSens7getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ebfc6:	eeb4 0a40 	vcmp.f32	s0, s0
 23ebfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebfce:	f180 8336 	bvs.w	23ec63e <_Z6OBS_Dov+0x1f0e>
 23ebfd2:	eddf 7a31 	vldr	s15, [pc, #196]	; 23ec098 <_Z6OBS_Dov+0x1968>
 23ebfd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ebfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebfde:	f100 832e 	bmi.w	23ec63e <_Z6OBS_Dov+0x1f0e>
 23ebfe2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23ec09c <_Z6OBS_Dov+0x196c>
 23ebfe6:	eeb4 0a67 	vcmp.f32	s0, s15
 23ebfea:	eddf 7a2d 	vldr	s15, [pc, #180]	; 23ec0a0 <_Z6OBS_Dov+0x1970>
 23ebfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebff2:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ebff6:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebffa:	f640 2698 	movw	r6, #2712	; 0xa98
 23ebffe:	f04f 0900 	mov.w	r9, #0
    obs[oidx].sensor[sidx++].inuse = true; 
 23ec002:	2701      	movs	r7, #1
 23ec004:	fb0a f208 	mul.w	r2, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ec008:	18a8      	adds	r0, r5, r2
 23ec00a:	4926      	ldr	r1, [pc, #152]	; (23ec0a4 <_Z6OBS_Dov+0x1974>)
 23ec00c:	4420      	add	r0, r4
 23ec00e:	9201      	str	r2, [sp, #4]
 23ec010:	f010 fdbe 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec014:	9b00      	ldr	r3, [sp, #0]
 23ec016:	9a01      	ldr	r2, [sp, #4]
 23ec018:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ec01a:	eb02 000a 	add.w	r0, r2, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec01e:	1993      	adds	r3, r2, r6
 23ec020:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ec022:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) w;
 23ec024:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec028:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true; 
 23ec02c:	f108 0b01 	add.w	fp, r8, #1
 23ec030:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ec034:	491c      	ldr	r1, [pc, #112]	; (23ec0a8 <_Z6OBS_Dov+0x1978>)
 23ec036:	4420      	add	r0, r4
 23ec038:	f010 fdaa 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec03c:	fb0a 630b 	mla	r3, sl, fp, r6
 23ec040:	e036      	b.n	23ec0b0 <_Z6OBS_Dov+0x1980>
 23ec042:	bf00      	nop
 23ec044:	1006a25c 	.word	0x1006a25c
 23ec048:	023fe26a 	.word	0x023fe26a
 23ec04c:	1006a260 	.word	0x1006a260
 23ec050:	023fe27c 	.word	0x023fe27c
 23ec054:	1006a2cc 	.word	0x1006a2cc
 23ec058:	023fe280 	.word	0x023fe280
 23ec05c:	023fe287 	.word	0x023fe287
 23ec060:	023fe28e 	.word	0x023fe28e
 23ec064:	023fe296 	.word	0x023fe296
 23ec068:	023fe29d 	.word	0x023fe29d
 23ec06c:	023fe2a4 	.word	0x023fe2a4
 23ec070:	1006a2af 	.word	0x1006a2af
 23ec074:	023fe2ac 	.word	0x023fe2ac
 23ec078:	1006a7e6 	.word	0x1006a7e6
 23ec07c:	023fe2af 	.word	0x023fe2af
 23ec080:	1006a7e5 	.word	0x1006a7e5
 23ec084:	1006f550 	.word	0x1006f550
 23ec088:	1006a2ca 	.word	0x1006a2ca
 23ec08c:	023fe2b3 	.word	0x023fe2b3
 23ec090:	1006a7e0 	.word	0x1006a7e0
 23ec094:	1007ac00 	.word	0x1007ac00
 23ec098:	c2200000 	.word	0xc2200000
 23ec09c:	42700000 	.word	0x42700000
 23ec0a0:	c479f99a 	.word	0xc479f99a
 23ec0a4:	023fe2b8 	.word	0x023fe2b8
 23ec0a8:	023fe2bd 	.word	0x023fe2bd
 23ec0ac:	1007aa24 	.word	0x1007aa24
 23ec0b0:	4423      	add	r3, r4
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec0b2:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec0b6:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec0ba:	f108 0802 	add.w	r8, r8, #2
 23ec0be:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
  if (TSM_exists) {
 23ec0c2:	4bd7      	ldr	r3, [pc, #860]	; (23ec420 <_Z6OBS_Dov+0x1cf0>)
 23ec0c4:	781b      	ldrb	r3, [r3, #0]
 23ec0c6:	2b00      	cmp	r3, #0
 23ec0c8:	d07f      	beq.n	23ec1ca <_Z6OBS_Dov+0x1a9a>
    tsm.newReading();
 23ec0ca:	48d6      	ldr	r0, [pc, #856]	; (23ec424 <_Z6OBS_Dov+0x1cf4>)
 23ec0cc:	f008 fb47 	bl	23f475e <_ZN5SVCS310newReadingEv>
    delay(100);
 23ec0d0:	2064      	movs	r0, #100	; 0x64
 23ec0d2:	f00b fdd7 	bl	23f7c84 <delay>
    float e25 = tsm.getE25();
 23ec0d6:	48d3      	ldr	r0, [pc, #844]	; (23ec424 <_Z6OBS_Dov+0x1cf4>)
 23ec0d8:	f008 fb58 	bl	23f478c <_ZN5SVCS36getE25Ev>
    float ec = tsm.getEC();
 23ec0dc:	48d1      	ldr	r0, [pc, #836]	; (23ec424 <_Z6OBS_Dov+0x1cf4>)
    float e25 = tsm.getE25();
 23ec0de:	eef0 9a40 	vmov.f32	s19, s0
    float ec = tsm.getEC();
 23ec0e2:	f008 fb65 	bl	23f47b0 <_ZN5SVCS35getECEv>
    float vwc = tsm.getVWC();
 23ec0e6:	48cf      	ldr	r0, [pc, #828]	; (23ec424 <_Z6OBS_Dov+0x1cf4>)
    float ec = tsm.getEC();
 23ec0e8:	eeb0 9a40 	vmov.f32	s18, s0
    float vwc = tsm.getVWC();
 23ec0ec:	f008 fb84 	bl	23f47f8 <_ZN5SVCS36getVWCEv>
    float t = tsm.getTemp();
 23ec0f0:	48cc      	ldr	r0, [pc, #816]	; (23ec424 <_Z6OBS_Dov+0x1cf4>)
    float vwc = tsm.getVWC();
 23ec0f2:	eef0 8a40 	vmov.f32	s17, s0
    float t = tsm.getTemp();
 23ec0f6:	f008 fb6d 	bl	23f47d4 <_ZN5SVCS37getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec0fa:	eeb4 0a40 	vcmp.f32	s0, s0
 23ec0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec102:	f180 829f 	bvs.w	23ec644 <_Z6OBS_Dov+0x1f14>
 23ec106:	eddf 7ac8 	vldr	s15, [pc, #800]	; 23ec428 <_Z6OBS_Dov+0x1cf8>
 23ec10a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ec10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec112:	f100 8297 	bmi.w	23ec644 <_Z6OBS_Dov+0x1f14>
 23ec116:	eddf 7ac5 	vldr	s15, [pc, #788]	; 23ec42c <_Z6OBS_Dov+0x1cfc>
 23ec11a:	eeb4 0a67 	vcmp.f32	s0, s15
 23ec11e:	eddf 7ad8 	vldr	s15, [pc, #864]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec126:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ec12a:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec12e:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec132:	fb0a f908 	mul.w	r9, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ec136:	eb05 0009 	add.w	r0, r5, r9
 23ec13a:	49bd      	ldr	r1, [pc, #756]	; (23ec430 <_Z6OBS_Dov+0x1d00>)
 23ec13c:	4420      	add	r0, r4
 23ec13e:	f010 fd27 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec142:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec144:	2701      	movs	r7, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec146:	435e      	muls	r6, r3
 23ec148:	2300      	movs	r3, #0
 23ec14a:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ec14e:	eb09 000a 	add.w	r0, r9, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec152:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ec154:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec156:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) e25;
 23ec158:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ec15c:	49b5      	ldr	r1, [pc, #724]	; (23ec434 <_Z6OBS_Dov+0x1d04>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec15e:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ec162:	4420      	add	r0, r4
 23ec164:	f010 fd14 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec168:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec16a:	f108 0b01 	add.w	fp, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec16e:	fb0a 620b 	mla	r2, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ec172:	f109 0038 	add.w	r0, r9, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec176:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ec178:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec17a:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) ec;
 23ec17c:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ec180:	49ad      	ldr	r1, [pc, #692]	; (23ec438 <_Z6OBS_Dov+0x1d08>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec182:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ec186:	4420      	add	r0, r4
 23ec188:	f010 fd02 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec18c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec18e:	f108 0b02 	add.w	fp, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec192:	fb0a 620b 	mla	r2, sl, fp, r6
    obs[oidx].sensor[sidx++].inuse = true; 
 23ec196:	f108 0b03 	add.w	fp, r8, #3
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec19a:	fb0a 660b 	mla	r6, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ec19e:	f109 0054 	add.w	r0, r9, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec1a2:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ec1a4:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec1a6:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) vwc;
 23ec1a8:	edc2 8a09 	vstr	s17, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ec1ac:	49a3      	ldr	r1, [pc, #652]	; (23ec43c <_Z6OBS_Dov+0x1d0c>)
    obs[oidx].sensor[sidx++].inuse = true; 
 23ec1ae:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ec1b2:	4420      	add	r0, r4
 23ec1b4:	f010 fcec 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec1b8:	4426      	add	r6, r4
 23ec1ba:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec1bc:	ed86 8a09 	vstr	s16, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec1c0:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec1c2:	f108 0804 	add.w	r8, r8, #4
 23ec1c6:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (TMSM_exists) {
 23ec1ca:	4b9d      	ldr	r3, [pc, #628]	; (23ec440 <_Z6OBS_Dov+0x1d10>)
 23ec1cc:	4f9d      	ldr	r7, [pc, #628]	; (23ec444 <_Z6OBS_Dov+0x1d14>)
 23ec1ce:	781b      	ldrb	r3, [r3, #0]
 23ec1d0:	2b00      	cmp	r3, #0
 23ec1d2:	f000 80c6 	beq.w	23ec362 <_Z6OBS_Dov+0x1c32>
    tmsm.newReading();
 23ec1d6:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec1da:	f640 2998 	movw	r9, #2712	; 0xa98
 23ec1de:	fb0a f608 	mul.w	r6, sl, r8
    tmsm.newReading();
 23ec1e2:	4899      	ldr	r0, [pc, #612]	; (23ec448 <_Z6OBS_Dov+0x1d18>)
 23ec1e4:	f008 fb55 	bl	23f4892 <_ZN7SVMULTI10newReadingEv>
    delay(100);
 23ec1e8:	2064      	movs	r0, #100	; 0x64
 23ec1ea:	f00b fd4b 	bl	23f7c84 <delay>
    tmsm.getData(&multi);
 23ec1ee:	4896      	ldr	r0, [pc, #600]	; (23ec448 <_Z6OBS_Dov+0x1d18>)
 23ec1f0:	a90c      	add	r1, sp, #48	; 0x30
 23ec1f2:	f008 fb89 	bl	23f4908 <_ZN7SVMULTI7getDataEP10soil_ret_t>
    strcpy (obs[oidx].sensor[sidx].id, "tmsms1");
 23ec1f6:	19a8      	adds	r0, r5, r6
 23ec1f8:	4994      	ldr	r1, [pc, #592]	; (23ec44c <_Z6OBS_Dov+0x1d1c>)
 23ec1fa:	4420      	add	r0, r4
 23ec1fc:	f010 fcc8 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec200:	2200      	movs	r2, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec202:	f04f 0b01 	mov.w	fp, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec206:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ec208:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec20c:	fb09 f903 	mul.w	r9, r9, r3
 23ec210:	eb06 0309 	add.w	r3, r6, r9
 23ec214:	4423      	add	r3, r4
 23ec216:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ec218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ec21a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ec21c:	625a      	str	r2, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ec21e:	498c      	ldr	r1, [pc, #560]	; (23ec450 <_Z6OBS_Dov+0x1d20>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec220:	f108 0201 	add.w	r2, r8, #1
 23ec224:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ec228:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ec22a:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ec22c:	f010 fcb0 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec230:	2300      	movs	r3, #0
 23ec232:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ec234:	f106 0038 	add.w	r0, r6, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec238:	fb0a 9202 	mla	r2, sl, r2, r9
 23ec23c:	4422      	add	r2, r4
 23ec23e:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ec240:	9b14      	ldr	r3, [sp, #80]	; 0x50
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ec242:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ec244:	6253      	str	r3, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ec246:	4983      	ldr	r1, [pc, #524]	; (23ec454 <_Z6OBS_Dov+0x1d24>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec248:	f108 0302 	add.w	r3, r8, #2
 23ec24c:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ec250:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ec252:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ec254:	f010 fc9c 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec258:	2200      	movs	r2, #0
 23ec25a:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ec25c:	f106 0054 	add.w	r0, r6, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec260:	fb0a 9303 	mla	r3, sl, r3, r9
 23ec264:	4423      	add	r3, r4
 23ec266:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23ec268:	9a15      	ldr	r2, [sp, #84]	; 0x54
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ec26a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23ec26c:	625a      	str	r2, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec26e:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
 23ec272:	f108 0203 	add.w	r2, r8, #3
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ec276:	4420      	add	r0, r4
 23ec278:	4977      	ldr	r1, [pc, #476]	; (23ec458 <_Z6OBS_Dov+0x1d28>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec27a:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ec27c:	f010 fc88 	bl	23fcb90 <strcpy>
    t = multi.temp[0];
 23ec280:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec284:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec288:	2300      	movs	r3, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec28e:	9a01      	ldr	r2, [sp, #4]
 23ec290:	fb0a 9902 	mla	r9, sl, r2, r9
 23ec294:	444c      	add	r4, r9
 23ec296:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23ec298:	9b16      	ldr	r3, [sp, #88]	; 0x58
    obs[oidx].sensor[sidx++].inuse = true;
 23ec29a:	f108 0904 	add.w	r9, r8, #4
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23ec29e:	6263      	str	r3, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec2a0:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec2a4:	f180 81d1 	bvs.w	23ec64a <_Z6OBS_Dov+0x1f1a>
 23ec2a8:	eddf 7a5f 	vldr	s15, [pc, #380]	; 23ec428 <_Z6OBS_Dov+0x1cf8>
 23ec2ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ec2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec2b4:	f100 81c9 	bmi.w	23ec64a <_Z6OBS_Dov+0x1f1a>
 23ec2b8:	eddf 7a5c 	vldr	s15, [pc, #368]	; 23ec42c <_Z6OBS_Dov+0x1cfc>
 23ec2bc:	eeb4 8a67 	vcmp.f32	s16, s15
 23ec2c0:	eddf 7a6f 	vldr	s15, [pc, #444]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec2c8:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt1");
 23ec2cc:	f106 0070 	add.w	r0, r6, #112	; 0x70
 23ec2d0:	4428      	add	r0, r5
 23ec2d2:	4962      	ldr	r1, [pc, #392]	; (23ec45c <_Z6OBS_Dov+0x1d2c>)
 23ec2d4:	4438      	add	r0, r7
 23ec2d6:	f010 fc5b 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec2da:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec2de:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec2e0:	f108 0405 	add.w	r4, r8, #5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec2e4:	4353      	muls	r3, r2
 23ec2e6:	221c      	movs	r2, #28
 23ec2e8:	fb02 3309 	mla	r3, r2, r9, r3
 23ec2ec:	443b      	add	r3, r7
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec2ee:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    t = multi.temp[1];
 23ec2f2:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec2f6:	2200      	movs	r2, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec2f8:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec2fc:	621a      	str	r2, [r3, #32]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx++].inuse = true;
 23ec302:	f04f 0201 	mov.w	r2, #1
 23ec306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec30a:	f180 81a1 	bvs.w	23ec650 <_Z6OBS_Dov+0x1f20>
 23ec30e:	eddf 7a46 	vldr	s15, [pc, #280]	; 23ec428 <_Z6OBS_Dov+0x1cf8>
 23ec312:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ec316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec31a:	f100 8199 	bmi.w	23ec650 <_Z6OBS_Dov+0x1f20>
 23ec31e:	eddf 7a43 	vldr	s15, [pc, #268]	; 23ec42c <_Z6OBS_Dov+0x1cfc>
 23ec322:	eeb4 8a67 	vcmp.f32	s16, s15
 23ec326:	eddf 7a56 	vldr	s15, [pc, #344]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec32e:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt2");
 23ec332:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 23ec336:	4428      	add	r0, r5
 23ec338:	4949      	ldr	r1, [pc, #292]	; (23ec460 <_Z6OBS_Dov+0x1d30>)
 23ec33a:	4438      	add	r0, r7
 23ec33c:	f010 fc28 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec340:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec344:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec346:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec34a:	4353      	muls	r3, r2
 23ec34c:	221c      	movs	r2, #28
 23ec34e:	fb02 3304 	mla	r3, r2, r4, r3
 23ec352:	2200      	movs	r2, #0
 23ec354:	443b      	add	r3, r7
 23ec356:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec358:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec35a:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec35e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (PMTS_exists) {
 23ec362:	4b40      	ldr	r3, [pc, #256]	; (23ec464 <_Z6OBS_Dov+0x1d34>)
 23ec364:	781b      	ldrb	r3, [r3, #0]
 23ec366:	b1d3      	cbz	r3, 23ec39e <_Z6OBS_Dov+0x1c6e>
    float t = ptms_readtempc();
 23ec368:	f7fb fdae 	bl	23e7ec8 <_Z14ptms_readtempcv>
    strcpy (obs[oidx].sensor[sidx].id, "pmts");
 23ec36c:	231c      	movs	r3, #28
 23ec36e:	fb03 f808 	mul.w	r8, r3, r8
 23ec372:	eb08 0005 	add.w	r0, r8, r5
 23ec376:	493c      	ldr	r1, [pc, #240]	; (23ec468 <_Z6OBS_Dov+0x1d38>)
 23ec378:	4438      	add	r0, r7
    float t = ptms_readtempc();
 23ec37a:	eeb0 8a40 	vmov.f32	s16, s0
    strcpy (obs[oidx].sensor[sidx].id, "pmts");
 23ec37e:	f010 fc07 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec382:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec386:	9a00      	ldr	r2, [sp, #0]
 23ec388:	fb03 8802 	mla	r8, r3, r2, r8
 23ec38c:	2300      	movs	r3, #0
 23ec38e:	44b8      	add	r8, r7
 23ec390:	f8c8 3020 	str.w	r3, [r8, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec394:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec396:	ed88 8a09 	vstr	s16, [r8, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec39a:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
  obs[oidx].hth = SystemStatusBits;
 23ec39e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec3a2:	9a00      	ldr	r2, [sp, #0]
 23ec3a4:	fb03 7702 	mla	r7, r3, r2, r7
 23ec3a8:	4b30      	ldr	r3, [pc, #192]	; (23ec46c <_Z6OBS_Dov+0x1d3c>)
  OBS_Log(oidx);
 23ec3aa:	4610      	mov	r0, r2
  obs[oidx].hth = SystemStatusBits;
 23ec3ac:	681b      	ldr	r3, [r3, #0]
 23ec3ae:	617b      	str	r3, [r7, #20]
  OBS_Log(oidx);
 23ec3b0:	f7fd fbc4 	bl	23e9b3c <_Z7OBS_Logi>
  lastOBS = System.millis();
 23ec3b4:	f7f9 fd16 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ec3b8:	4b2d      	ldr	r3, [pc, #180]	; (23ec470 <_Z6OBS_Dov+0x1d40>)
 23ec3ba:	e9c3 0100 	strd	r0, r1, [r3]
}
 23ec3be:	b019      	add	sp, #100	; 0x64
 23ec3c0:	ecbd 8b06 	vpop	{d8-d10}
 23ec3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float h = 0.0;
 23ec3c8:	eddf 8a2c 	vldr	s17, [pc, #176]	; 23ec47c <_Z6OBS_Dov+0x1d4c>
    float t = 0.0;
 23ec3cc:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23ec3d0:	eef0 9a68 	vmov.f32	s19, s17
 23ec3d4:	f7fe bcf1 	b.w	23eadba <_Z6OBS_Dov+0x68a>
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23ec3d8:	4826      	ldr	r0, [pc, #152]	; (23ec474 <_Z6OBS_Dov+0x1d44>)
 23ec3da:	f003 fc2a 	bl	23efc32 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ec3de:	eddf 7a26 	vldr	s15, [pc, #152]	; 23ec478 <_Z6OBS_Dov+0x1d48>
      t = bm32.readTemperature();           // bt2
 23ec3e2:	4824      	ldr	r0, [pc, #144]	; (23ec474 <_Z6OBS_Dov+0x1d44>)
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23ec3e4:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm32.readTemperature();           // bt2
 23ec3e8:	f003 fc18 	bl	23efc1c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ec3ec:	f7fe bc84 	b.w	23eacf8 <_Z6OBS_Dov+0x5c8>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ec3f0:	eddf 9a23 	vldr	s19, [pc, #140]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec3f4:	f7fe bd08 	b.w	23eae08 <_Z6OBS_Dov+0x6d8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec3f8:	ed9f 8a21 	vldr	s16, [pc, #132]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec3fc:	f7fe bd1c 	b.w	23eae38 <_Z6OBS_Dov+0x708>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec400:	eddf 8a1f 	vldr	s17, [pc, #124]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec404:	f7fe bd2e 	b.w	23eae64 <_Z6OBS_Dov+0x734>
    obs[oidx].sensor[sidx++].inuse = true;
 23ec408:	46b8      	mov	r8, r7
 23ec40a:	f7fe bd6f 	b.w	23eaeec <_Z6OBS_Dov+0x7bc>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec40e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec412:	f7fe bd98 	b.w	23eaf46 <_Z6OBS_Dov+0x816>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec416:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec41a:	f7fe bdcd 	b.w	23eafb8 <_Z6OBS_Dov+0x888>
 23ec41e:	bf00      	nop
 23ec420:	1006a7e2 	.word	0x1006a7e2
 23ec424:	1007ac10 	.word	0x1007ac10
 23ec428:	c2200000 	.word	0xc2200000
 23ec42c:	42700000 	.word	0x42700000
 23ec430:	023fe2c2 	.word	0x023fe2c2
 23ec434:	023fe2c9 	.word	0x023fe2c9
 23ec438:	023fe2cf 	.word	0x023fe2cf
 23ec43c:	023fe2d6 	.word	0x023fe2d6
 23ec440:	1006a7e1 	.word	0x1006a7e1
 23ec444:	1006f550 	.word	0x1006f550
 23ec448:	1007ac08 	.word	0x1007ac08
 23ec44c:	023fe2db 	.word	0x023fe2db
 23ec450:	023fe2e2 	.word	0x023fe2e2
 23ec454:	023fe2e9 	.word	0x023fe2e9
 23ec458:	023fe2f0 	.word	0x023fe2f0
 23ec45c:	023fe2f7 	.word	0x023fe2f7
 23ec460:	023fe2fe 	.word	0x023fe2fe
 23ec464:	1006a2cd 	.word	0x1006a2cd
 23ec468:	023fe305 	.word	0x023fe305
 23ec46c:	1006a178 	.word	0x1006a178
 23ec470:	1006aeb0 	.word	0x1006aeb0
 23ec474:	1006aa48 	.word	0x1006aa48
 23ec478:	42c80000 	.word	0x42c80000
 23ec47c:	00000000 	.word	0x00000000
 23ec480:	c479f99a 	.word	0xc479f99a
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec484:	ed1f 8a02 	vldr	s16, [pc, #-8]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec488:	f7fe bdd5 	b.w	23eb036 <_Z6OBS_Dov+0x906>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec48c:	ed5f 9a04 	vldr	s19, [pc, #-16]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec490:	f7fe be08 	b.w	23eb0a4 <_Z6OBS_Dov+0x974>
  float sht1_temp = 0.0;
 23ec494:	ed1f 8a07 	vldr	s16, [pc, #-28]	; 23ec47c <_Z6OBS_Dov+0x1d4c>
  float sht1_humid = 0.0;
 23ec498:	eef0 9a48 	vmov.f32	s19, s16
 23ec49c:	f7fe be11 	b.w	23eb0c2 <_Z6OBS_Dov+0x992>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec4a0:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec4a4:	f7fe be6c 	b.w	23eb180 <_Z6OBS_Dov+0xa50>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec4a8:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 23ec480 <_Z6OBS_Dov+0x1d50>
 23ec4ac:	f7fe be9f 	b.w	23eb1ee <_Z6OBS_Dov+0xabe>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec4b0:	464e      	mov	r6, r9
 23ec4b2:	4657      	mov	r7, sl
 23ec4b4:	f7fe bee0 	b.w	23eb278 <_Z6OBS_Dov+0xb48>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec4b8:	a767      	add	r7, pc, #412	; (adr r7, 23ec658 <_Z6OBS_Dov+0x1f28>)
 23ec4ba:	e9d7 6700 	ldrd	r6, r7, [r7]
 23ec4be:	f7fe befa 	b.w	23eb2b6 <_Z6OBS_Dov+0xb86>
      Output ("ERR:HDC1 Read");
 23ec4c2:	4867      	ldr	r0, [pc, #412]	; (23ec660 <_Z6OBS_Dov+0x1f30>)
 23ec4c4:	f7f9 ffd2 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ec4c8:	f8db 3000 	ldr.w	r3, [fp]
 23ec4cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ec4d0:	f7fe bef7 	b.w	23eb2c2 <_Z6OBS_Dov+0xb92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec4d4:	464e      	mov	r6, r9
 23ec4d6:	4657      	mov	r7, sl
 23ec4d8:	f7fe bf60 	b.w	23eb39c <_Z6OBS_Dov+0xc6c>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec4dc:	a75e      	add	r7, pc, #376	; (adr r7, 23ec658 <_Z6OBS_Dov+0x1f28>)
 23ec4de:	e9d7 6700 	ldrd	r6, r7, [r7]
 23ec4e2:	f7fe bf7a 	b.w	23eb3da <_Z6OBS_Dov+0xcaa>
      Output ("ERR:HDC1 Read");
 23ec4e6:	485e      	ldr	r0, [pc, #376]	; (23ec660 <_Z6OBS_Dov+0x1f30>)
 23ec4e8:	f7f9 ffc0 	bl	23e646c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ec4ec:	f8db 3000 	ldr.w	r3, [fp]
 23ec4f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23ec4f4:	f7fe bf77 	b.w	23eb3e6 <_Z6OBS_Dov+0xcb6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec4f8:	ed9f aa5a 	vldr	s20, [pc, #360]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec4fc:	f7fe bfd3 	b.w	23eb4a6 <_Z6OBS_Dov+0xd76>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ec500:	eddf 8a58 	vldr	s17, [pc, #352]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec504:	f7ff b818 	b.w	23eb538 <_Z6OBS_Dov+0xe08>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec508:	ed9f aa56 	vldr	s20, [pc, #344]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec50c:	f7ff b869 	b.w	23eb5e2 <_Z6OBS_Dov+0xeb2>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ec510:	eddf 8a54 	vldr	s17, [pc, #336]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec514:	f7ff b87d 	b.w	23eb612 <_Z6OBS_Dov+0xee2>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec518:	ed9f aa52 	vldr	s20, [pc, #328]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec51c:	f7ff b8d1 	b.w	23eb6c2 <_Z6OBS_Dov+0xf92>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec520:	eddf 8a50 	vldr	s17, [pc, #320]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec524:	f7ff b8e5 	b.w	23eb6f2 <_Z6OBS_Dov+0xfc2>
        SI1145_exists = false;
 23ec528:	7030      	strb	r0, [r6, #0]
        Output ("SI OFFLINE");
 23ec52a:	484f      	ldr	r0, [pc, #316]	; (23ec668 <_Z6OBS_Dov+0x1f38>)
 23ec52c:	f7f9 ff9e 	bl	23e646c <_Z6OutputPKc>
        SystemStatusBits |= SSB_SI1145;  // Turn On Bit    
 23ec530:	f8db 3000 	ldr.w	r3, [fp]
 23ec534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23ec538:	f8cb 3000 	str.w	r3, [fp]
 23ec53c:	f7ff b978 	b.w	23eb830 <_Z6OBS_Dov+0x1100>
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23ec540:	eddf aa48 	vldr	s21, [pc, #288]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec544:	f7ff b98a 	b.w	23eb85c <_Z6OBS_Dov+0x112c>
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23ec548:	ed9f aa46 	vldr	s20, [pc, #280]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec54c:	f7ff b996 	b.w	23eb87c <_Z6OBS_Dov+0x114c>
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23ec550:	eddf 8a44 	vldr	s17, [pc, #272]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec554:	f7ff b9e0 	b.w	23eb918 <_Z6OBS_Dov+0x11e8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec558:	ed9f 0a42 	vldr	s0, [pc, #264]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec55c:	f7ff ba48 	b.w	23eb9f0 <_Z6OBS_Dov+0x12c0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec560:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec564:	f7ff ba80 	b.w	23eba68 <_Z6OBS_Dov+0x1338>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec568:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec56c:	f7ff baba 	b.w	23ebae4 <_Z6OBS_Dov+0x13b4>
  float mcp3_temp = 0.0;  // globe temperature
 23ec570:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23ec66c <_Z6OBS_Dov+0x1f3c>
 23ec574:	f7ff bac4 	b.w	23ebb00 <_Z6OBS_Dov+0x13d0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec578:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec57c:	f7ff baee 	b.w	23ebb5c <_Z6OBS_Dov+0x142c>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23ec580:	ed9f aa3b 	vldr	s20, [pc, #236]	; 23ec670 <_Z6OBS_Dov+0x1f40>
 23ec584:	f7ff bb15 	b.w	23ebbb2 <_Z6OBS_Dov+0x1482>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23ec588:	ed9f aa36 	vldr	s20, [pc, #216]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec58c:	f7ff bb42 	b.w	23ebc14 <_Z6OBS_Dov+0x14e4>
  else if (A4_State == A4_STATE_RAIN) {
 23ec590:	2b02      	cmp	r3, #2
 23ec592:	f47f abc9 	bne.w	23ebd28 <_Z6OBS_Dov+0x15f8>
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23ec596:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec59a:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec59e:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5a2:	f04f 0901 	mov.w	r9, #1
 23ec5a6:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23ec5aa:	19e8      	adds	r0, r5, r7
 23ec5ac:	4931      	ldr	r1, [pc, #196]	; (23ec674 <_Z6OBS_Dov+0x1f44>)
 23ec5ae:	4420      	add	r0, r4
 23ec5b0:	f010 faee 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5b4:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ec5b6:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5ba:	435e      	muls	r6, r3
 23ec5bc:	19ba      	adds	r2, r7, r6
 23ec5be:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ec5c0:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5c2:	f108 0301 	add.w	r3, r8, #1
    obs[oidx].sensor[sidx].f_obs = rain2;
 23ec5c6:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ec5ca:	492b      	ldr	r1, [pc, #172]	; (23ec678 <_Z6OBS_Dov+0x1f48>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5cc:	f8c2 a020 	str.w	sl, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5d0:	f882 9030 	strb.w	r9, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ec5d4:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5d6:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ec5d8:	f010 fada 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5dc:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ec5de:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5e2:	fb0b 6303 	mla	r3, fp, r3, r6
 23ec5e6:	18e1      	adds	r1, r4, r3
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ec5e8:	4b24      	ldr	r3, [pc, #144]	; (23ec67c <_Z6OBS_Dov+0x1f4c>)
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ec5ea:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ec5ec:	689a      	ldr	r2, [r3, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5ee:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ec5f2:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5f4:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
 23ec5f8:	f108 0202 	add.w	r2, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ec5fc:	4920      	ldr	r1, [pc, #128]	; (23ec680 <_Z6OBS_Dov+0x1f50>)
 23ec5fe:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ec600:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ec602:	f010 fac5 	bl	23fcb90 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec606:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ec608:	4b1c      	ldr	r3, [pc, #112]	; (23ec67c <_Z6OBS_Dov+0x1f4c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec60a:	fb0b 6602 	mla	r6, fp, r2, r6
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ec60e:	68db      	ldr	r3, [r3, #12]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec610:	4426      	add	r6, r4
 23ec612:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ec616:	6273      	str	r3, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec618:	f108 0803 	add.w	r8, r8, #3
 23ec61c:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
 23ec620:	f7ff bb82 	b.w	23ebd28 <_Z6OBS_Dov+0x15f8>
  float heat_index = 0.0;
 23ec624:	2700      	movs	r7, #0
 23ec626:	e44a      	b.n	23ebebe <_Z6OBS_Dov+0x178e>
  float wetbulb_temp = 0.0;
 23ec628:	f04f 0900 	mov.w	r9, #0
 23ec62c:	e479      	b.n	23ebf22 <_Z6OBS_Dov+0x17f2>
      wbgt = wbgt_using_hi(heat_index);
 23ec62e:	4638      	mov	r0, r7
 23ec630:	f7f7 ff2e 	bl	23e4490 <__aeabi_f2d>
 23ec634:	ec41 0b10 	vmov	d0, r0, r1
 23ec638:	f7fb f812 	bl	23e7660 <_Z13wbgt_using_hid>
 23ec63c:	e496      	b.n	23ebf6c <_Z6OBS_Dov+0x183c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec63e:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec642:	e4d8      	b.n	23ebff6 <_Z6OBS_Dov+0x18c6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec644:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec648:	e56f      	b.n	23ec12a <_Z6OBS_Dov+0x19fa>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec64a:	ed9f 8a06 	vldr	s16, [pc, #24]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec64e:	e63d      	b.n	23ec2cc <_Z6OBS_Dov+0x1b9c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec650:	ed9f 8a04 	vldr	s16, [pc, #16]	; 23ec664 <_Z6OBS_Dov+0x1f34>
 23ec654:	e66d      	b.n	23ec332 <_Z6OBS_Dov+0x1c02>
 23ec656:	bf00      	nop
 23ec658:	33333333 	.word	0x33333333
 23ec65c:	c08f3f33 	.word	0xc08f3f33
 23ec660:	023fe20c 	.word	0x023fe20c
 23ec664:	c479f99a 	.word	0xc479f99a
 23ec668:	023fd7e6 	.word	0x023fd7e6
 23ec66c:	00000000 	.word	0x00000000
 23ec670:	c479c000 	.word	0xc479c000
 23ec674:	023fe26e 	.word	0x023fe26e
 23ec678:	023fe272 	.word	0x023fe272
 23ec67c:	1006ae5c 	.word	0x1006ae5c
 23ec680:	023fe277 	.word	0x023fe277

023ec684 <_Z22Output_CellBatteryInfov>:
void Output_CellBatteryInfo() {
 23ec684:	b530      	push	{r4, r5, lr}
 23ec686:	ed2d 8b02 	vpush	{d8}
 23ec68a:	b08d      	sub	sp, #52	; 0x34
  CellularSignal sig = Cellular.RSSI();
 23ec68c:	491f      	ldr	r1, [pc, #124]	; (23ec70c <_Z22Output_CellBatteryInfov+0x88>)
 23ec68e:	a804      	add	r0, sp, #16
 23ec690:	f00b fb68 	bl	23f7d64 <_ZN5spark13CellularClass4RSSIEv>
  float SignalStrength = sig.getStrength();
 23ec694:	a804      	add	r0, sp, #16
 23ec696:	f00b fbc3 	bl	23f7e20 <_ZNK14CellularSignal11getStrengthEv>
 23ec69a:	eeb0 8a40 	vmov.f32	s16, s0
  int BatteryState = System.batteryState();
 23ec69e:	f7fe f83b 	bl	23ea718 <_ZNK11SystemClass12batteryStateEv.isra.0>
  if (BatteryState>0 && BatteryState<6) {
 23ec6a2:	1e43      	subs	r3, r0, #1
 23ec6a4:	2b04      	cmp	r3, #4
  int BatteryState = System.batteryState();
 23ec6a6:	4604      	mov	r4, r0
  if (BatteryState>0 && BatteryState<6) {
 23ec6a8:	d82d      	bhi.n	23ec706 <_Z22Output_CellBatteryInfov+0x82>
    BatteryPoC = System.batteryCharge();
 23ec6aa:	f7fe f823 	bl	23ea6f4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ec6ae:	eddf 7a18 	vldr	s15, [pc, #96]	; 23ec710 <_Z22Output_CellBatteryInfov+0x8c>
 23ec6b2:	ee28 7a27 	vmul.f32	s14, s16, s15
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23ec6b6:	ee60 7a27 	vmul.f32	s15, s0, s15
 23ec6ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ec6be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23ec6c2:	2164      	movs	r1, #100	; 0x64
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23ec6c4:	ee17 2a90 	vmov	r2, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ec6c8:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23ec6cc:	fb92 f5f1 	sdiv	r5, r2, r1
 23ec6d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 23ec6d4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23ec6d8:	fb93 f0f1 	sdiv	r0, r3, r1
 23ec6dc:	fb01 2215 	mls	r2, r1, r5, r2
 23ec6e0:	fb01 3310 	mls	r3, r1, r0, r3
 23ec6e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 23ec6e8:	490a      	ldr	r1, [pc, #40]	; (23ec714 <_Z22Output_CellBatteryInfov+0x90>)
 23ec6ea:	9202      	str	r2, [sp, #8]
 23ec6ec:	9400      	str	r4, [sp, #0]
 23ec6ee:	ee17 2a90 	vmov	r2, s15
 23ec6f2:	4809      	ldr	r0, [pc, #36]	; (23ec718 <_Z22Output_CellBatteryInfov+0x94>)
 23ec6f4:	f00b f9e6 	bl	23f7ac4 <sprintf>
  Output(Buffer32Bytes);
 23ec6f8:	4807      	ldr	r0, [pc, #28]	; (23ec718 <_Z22Output_CellBatteryInfov+0x94>)
 23ec6fa:	f7f9 feb7 	bl	23e646c <_Z6OutputPKc>
}
 23ec6fe:	b00d      	add	sp, #52	; 0x34
 23ec700:	ecbd 8b02 	vpop	{d8}
 23ec704:	bd30      	pop	{r4, r5, pc}
  float BatteryPoC = 0.0;                 // Battery Percent of Charge
 23ec706:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23ec71c <_Z22Output_CellBatteryInfov+0x98>
 23ec70a:	e7d0      	b.n	23ec6ae <_Z22Output_CellBatteryInfov+0x2a>
 23ec70c:	1007aeb8 	.word	0x1007aeb8
 23ec710:	42c80000 	.word	0x42c80000
 23ec714:	023fe30a 	.word	0x023fe30a
 23ec718:	1006a287 	.word	0x1006a287
 23ec71c:	00000000 	.word	0x00000000

023ec720 <_ZNK11SystemClass11powerSourceEv.isra.0>:
    int powerSource() const {
 23ec720:	b507      	push	{r0, r1, r2, lr}
 23ec722:	2018      	movs	r0, #24
 23ec724:	a901      	add	r1, sp, #4
 23ec726:	f7fd ffb7 	bl	23ea698 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23ec72a:	2800      	cmp	r0, #0
        return val;
 23ec72c:	bfa8      	it	ge
 23ec72e:	9801      	ldrge	r0, [sp, #4]
    }
 23ec730:	b003      	add	sp, #12
 23ec732:	f85d fb04 	ldr.w	pc, [sp], #4

023ec736 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
 23ec736:	b570      	push	{r4, r5, r6, lr}
 23ec738:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 23ec73a:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
 23ec73c:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
 23ec73e:	f00a ffbb 	bl	23f76b8 <application_thread_current>
 23ec742:	1c66      	adds	r6, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23ec744:	b128      	cbz	r0, 23ec752 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 23ec746:	7833      	ldrb	r3, [r6, #0]
 23ec748:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23ec74a:	b913      	cbnz	r3, 23ec752 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
        spark_process();
 23ec74c:	f00b f840 	bl	23f77d0 <spark_process>
    }
 23ec750:	e7f9      	b.n	23ec746 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x10>
 23ec752:	e8d6 3f8f 	ldab	r3, [r6]
 23ec756:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23ec758:	b90b      	cbnz	r3, 23ec75e <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x28>
        return std::move(defaultValue);
 23ec75a:	4628      	mov	r0, r5
    }
 23ec75c:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
 23ec75e:	2000      	movs	r0, #0
 23ec760:	f00a ffaa 	bl	23f76b8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23ec764:	b128      	cbz	r0, 23ec772 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
 23ec766:	7833      	ldrb	r3, [r6, #0]
 23ec768:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23ec76a:	b913      	cbnz	r3, 23ec772 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
        spark_process();
 23ec76c:	f00b f830 	bl	23f77d0 <spark_process>
    }
 23ec770:	e7f9      	b.n	23ec766 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x30>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23ec772:	7823      	ldrb	r3, [r4, #0]
 23ec774:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23ec776:	2b01      	cmp	r3, #1
 23ec778:	d1ef      	bne.n	23ec75a <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
            return result_;
 23ec77a:	7b20      	ldrb	r0, [r4, #12]
 23ec77c:	e7ee      	b.n	23ec75c <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>
	...

023ec780 <_GLOBAL__sub_I___appProductVersion>:
      // We need to reinitialize our wind readings before we can move on.
      Wind_Distance_Air_Initialize();
    }
#endif
  }
}
 23ec780:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ec784:	2208      	movs	r2, #8
 23ec786:	4b62      	ldr	r3, [pc, #392]	; (23ec910 <_GLOBAL__sub_I___appProductVersion+0x190>)
  FsVolume() = default;  // cppcheck-suppress uninitMemberVar
 23ec788:	2400      	movs	r4, #0
 23ec78a:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 23ec78c:	f00d fac2 	bl	23f9d14 <spark_protocol_instance>
 23ec790:	2300      	movs	r3, #0
 23ec792:	2101      	movs	r1, #1
 23ec794:	461a      	mov	r2, r3
 23ec796:	f00d fad9 	bl	23f9d4c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 23ec79a:	f00d fabb 	bl	23f9d14 <spark_protocol_instance>
 23ec79e:	2300      	movs	r3, #0
 23ec7a0:	2123      	movs	r1, #35	; 0x23
 23ec7a2:	461a      	mov	r2, r3
 23ec7a4:	f00d fac4 	bl	23f9d30 <spark_protocol_set_product_id>
 23ec7a8:	4b5a      	ldr	r3, [pc, #360]	; (23ec914 <_GLOBAL__sub_I___appProductVersion+0x194>)
  {
 23ec7aa:	4a5b      	ldr	r2, [pc, #364]	; (23ec918 <_GLOBAL__sub_I___appProductVersion+0x198>)
 23ec7ac:	2501      	movs	r5, #1
 23ec7ae:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() { initSharedSpiCard(); }
 23ec7b2:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 23ec7b6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    Stream() {_timeout=1000;}
 23ec7ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ec7be:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
 23ec7c2:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
 23ec7c6:	f8c3 4488 	str.w	r4, [r3, #1160]	; 0x488
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
 23ec7ca:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
 23ec7ce:	f883 5494 	strb.w	r5, [r3, #1172]	; 0x494
 23ec7d2:	f8c3 4498 	str.w	r4, [r3, #1176]	; 0x498
 23ec7d6:	f8a3 449c 	strh.w	r4, [r3, #1180]	; 0x49c
 23ec7da:	f8c3 44a0 	str.w	r4, [r3, #1184]	; 0x4a0
#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    m_spiActive = false;
 23ec7de:	f8c3 44a8 	str.w	r4, [r3, #1192]	; 0x4a8
    Print() : write_error(0) {}
 23ec7e2:	4b4e      	ldr	r3, [pc, #312]	; (23ec91c <_GLOBAL__sub_I___appProductVersion+0x19c>)
PMIC pmic;
 23ec7e4:	4621      	mov	r1, r4
 23ec7e6:	609a      	str	r2, [r3, #8]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ec7e8:	4a4d      	ldr	r2, [pc, #308]	; (23ec920 <_GLOBAL__sub_I___appProductVersion+0x1a0>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ec7ea:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 23ec7ee:	605c      	str	r4, [r3, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ec7f0:	601a      	str	r2, [r3, #0]
 23ec7f2:	484c      	ldr	r0, [pc, #304]	; (23ec924 <_GLOBAL__sub_I___appProductVersion+0x1a4>)
 23ec7f4:	f00c fb83 	bl	23f8efe <_ZN4PMICC1Eb>
Adafruit_SSD1306 display32(SCREEN_WIDTH, 32, &Wire, OLED_RESET);
 23ec7f8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23ec7fc:	f00d fb76 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23ec800:	4f49      	ldr	r7, [pc, #292]	; (23ec928 <_GLOBAL__sub_I___appProductVersion+0x1a8>)
 23ec802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 23ec9a8 <_GLOBAL__sub_I___appProductVersion+0x228>
 23ec806:	4603      	mov	r3, r0
 23ec808:	2220      	movs	r2, #32
 23ec80a:	2180      	movs	r1, #128	; 0x80
 23ec80c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23ec810:	9600      	str	r6, [sp, #0]
 23ec812:	4846      	ldr	r0, [pc, #280]	; (23ec92c <_GLOBAL__sub_I___appProductVersion+0x1ac>)
 23ec814:	f004 ff90 	bl	23f1738 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
Adafruit_SSD1306 display64(SCREEN_WIDTH, 64, &Wire, OLED_RESET);
 23ec818:	f00d fb68 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23ec81c:	2240      	movs	r2, #64	; 0x40
 23ec81e:	4603      	mov	r3, r0
 23ec820:	2180      	movs	r1, #128	; 0x80
 23ec822:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23ec826:	9600      	str	r6, [sp, #0]
 23ec828:	4841      	ldr	r0, [pc, #260]	; (23ec930 <_GLOBAL__sub_I___appProductVersion+0x1b0>)
 23ec82a:	f004 ff85 	bl	23f1738 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
AB1805 ab1805(Wire);
 23ec82e:	f00d fb5d 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23ec832:	2269      	movs	r2, #105	; 0x69
 23ec834:	4601      	mov	r1, r0
 23ec836:	483f      	ldr	r0, [pc, #252]	; (23ec934 <_GLOBAL__sub_I___appProductVersion+0x1b4>)
 23ec838:	f009 fde0 	bl	23f63fc <_ZN6AB1805C1ER7TwoWireh>
RH_RF95 rf95(LORA_SS, LORA_IRQ_PIN, hardware_spi); // SPI1
 23ec83c:	2214      	movs	r2, #20
 23ec83e:	4b3e      	ldr	r3, [pc, #248]	; (23ec938 <_GLOBAL__sub_I___appProductVersion+0x1b8>)
 23ec840:	2103      	movs	r1, #3
 23ec842:	483e      	ldr	r0, [pc, #248]	; (23ec93c <_GLOBAL__sub_I___appProductVersion+0x1bc>)
 23ec844:	f006 f99a 	bl	23f2b7c <_ZN7RH_RF95C1EhhR12RHGenericSPI>
AES aes;
 23ec848:	483d      	ldr	r0, [pc, #244]	; (23ec940 <_GLOBAL__sub_I___appProductVersion+0x1c0>)
 23ec84a:	f001 fd9d 	bl	23ee388 <_ZN3AESC1Ev>
Adafruit_BMP280 bmp1;
 23ec84e:	f00d fb4d 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23ec852:	4601      	mov	r1, r0
 23ec854:	483b      	ldr	r0, [pc, #236]	; (23ec944 <_GLOBAL__sub_I___appProductVersion+0x1c4>)
 23ec856:	f002 fd0b 	bl	23ef270 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BMP280 bmp2;
 23ec85a:	f00d fb47 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23ec85e:	4601      	mov	r1, r0
 23ec860:	4839      	ldr	r0, [pc, #228]	; (23ec948 <_GLOBAL__sub_I___appProductVersion+0x1c8>)
 23ec862:	f002 fd05 	bl	23ef270 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BME280 bme1;
 23ec866:	4839      	ldr	r0, [pc, #228]	; (23ec94c <_GLOBAL__sub_I___appProductVersion+0x1cc>)
 23ec868:	f002 f878 	bl	23ee95c <_ZN15Adafruit_BME280C1Ev>
Adafruit_BME280 bme2;
 23ec86c:	4838      	ldr	r0, [pc, #224]	; (23ec950 <_GLOBAL__sub_I___appProductVersion+0x1d0>)
 23ec86e:	f002 f875 	bl	23ee95c <_ZN15Adafruit_BME280C1Ev>
Adafruit_BMP3XX bm31;
 23ec872:	4838      	ldr	r0, [pc, #224]	; (23ec954 <_GLOBAL__sub_I___appProductVersion+0x1d4>)
 23ec874:	f003 f8e4 	bl	23efa40 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_BMP3XX bm32;
 23ec878:	4837      	ldr	r0, [pc, #220]	; (23ec958 <_GLOBAL__sub_I___appProductVersion+0x1d8>)
 23ec87a:	f003 f8e1 	bl	23efa40 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_HTU21DF htu = Adafruit_HTU21DF();
 23ec87e:	4837      	ldr	r0, [pc, #220]	; (23ec95c <_GLOBAL__sub_I___appProductVersion+0x1dc>)
 23ec880:	f004 f99a 	bl	23f0bb8 <_ZN16Adafruit_HTU21DFC1Ev>
Adafruit_MCP9808 mcp1;
 23ec884:	4836      	ldr	r0, [pc, #216]	; (23ec960 <_GLOBAL__sub_I___appProductVersion+0x1e0>)
 23ec886:	f004 fb8f 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp2;
 23ec88a:	4836      	ldr	r0, [pc, #216]	; (23ec964 <_GLOBAL__sub_I___appProductVersion+0x1e4>)
 23ec88c:	f004 fb8c 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp3;
 23ec890:	4835      	ldr	r0, [pc, #212]	; (23ec968 <_GLOBAL__sub_I___appProductVersion+0x1e8>)
 23ec892:	f004 fb89 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp4;
 23ec896:	4835      	ldr	r0, [pc, #212]	; (23ec96c <_GLOBAL__sub_I___appProductVersion+0x1ec>)
 23ec898:	f004 fb86 	bl	23f0fa8 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_SHT31 sht1;
 23ec89c:	f00d fb26 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23ec8a0:	4601      	mov	r1, r0
 23ec8a2:	4833      	ldr	r0, [pc, #204]	; (23ec970 <_GLOBAL__sub_I___appProductVersion+0x1f0>)
 23ec8a4:	f004 fcd4 	bl	23f1250 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SHT31 sht2;
 23ec8a8:	f00d fb20 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23ec8ac:	4601      	mov	r1, r0
 23ec8ae:	4831      	ldr	r0, [pc, #196]	; (23ec974 <_GLOBAL__sub_I___appProductVersion+0x1f4>)
 23ec8b0:	f004 fcce 	bl	23f1250 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SI1145 uv = Adafruit_SI1145();
 23ec8b4:	4830      	ldr	r0, [pc, #192]	; (23ec978 <_GLOBAL__sub_I___appProductVersion+0x1f8>)
 23ec8b6:	f004 fd95 	bl	23f13e4 <_ZN15Adafruit_SI1145C1Ev>
Adafruit_VEML7700 veml = Adafruit_VEML7700();
 23ec8ba:	4830      	ldr	r0, [pc, #192]	; (23ec97c <_GLOBAL__sub_I___appProductVersion+0x1fc>)
 23ec8bc:	f005 fbca 	bl	23f2054 <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_PM25AQI pmaq = Adafruit_PM25AQI();
 23ec8c0:	482f      	ldr	r0, [pc, #188]	; (23ec980 <_GLOBAL__sub_I___appProductVersion+0x200>)
 23ec8c2:	f004 fc18 	bl	23f10f6 <_ZN16Adafruit_PM25AQIC1Ev>
Adafruit_HDC302x hdc1;
 23ec8c6:	482f      	ldr	r0, [pc, #188]	; (23ec984 <_GLOBAL__sub_I___appProductVersion+0x204>)
 23ec8c8:	f004 f869 	bl	23f099e <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_HDC302x hdc2;
 23ec8cc:	482e      	ldr	r0, [pc, #184]	; (23ec988 <_GLOBAL__sub_I___appProductVersion+0x208>)
 23ec8ce:	f004 f866 	bl	23f099e <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_LPS35HW lps1;
 23ec8d2:	482e      	ldr	r0, [pc, #184]	; (23ec98c <_GLOBAL__sub_I___appProductVersion+0x20c>)
 23ec8d4:	f004 fa34 	bl	23f0d40 <_ZN16Adafruit_LPS35HWC1Ev>
Adafruit_LPS35HW lps2;
 23ec8d8:	482d      	ldr	r0, [pc, #180]	; (23ec990 <_GLOBAL__sub_I___appProductVersion+0x210>)
 23ec8da:	f004 fa31 	bl	23f0d40 <_ZN16Adafruit_LPS35HWC1Ev>
LeafSens tlw;
 23ec8de:	482d      	ldr	r0, [pc, #180]	; (23ec994 <_GLOBAL__sub_I___appProductVersion+0x214>)
 23ec8e0:	f005 fe3b 	bl	23f255a <_ZN8LeafSensC1Ev>
SVCS3 tsm;
 23ec8e4:	482c      	ldr	r0, [pc, #176]	; (23ec998 <_GLOBAL__sub_I___appProductVersion+0x218>)
 23ec8e6:	f007 fed3 	bl	23f4690 <_ZN5SVCS3C1Ev>
SVMULTI tmsm;
 23ec8ea:	482c      	ldr	r0, [pc, #176]	; (23ec99c <_GLOBAL__sub_I___appProductVersion+0x21c>)
 23ec8ec:	f007 ff96 	bl	23f481c <_ZN7SVMULTIC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 23ec8f0:	4b2b      	ldr	r3, [pc, #172]	; (23ec9a0 <_GLOBAL__sub_I___appProductVersion+0x220>)
    SleepResult() {}
 23ec8f2:	4a2c      	ldr	r2, [pc, #176]	; (23ec9a4 <_GLOBAL__sub_I___appProductVersion+0x224>)
        set_system_mode(mode);
 23ec8f4:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23ec8f6:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23ec8fa:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23ec8fc:	f00a fe96 	bl	23f762c <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23ec900:	4621      	mov	r1, r4
 23ec902:	4628      	mov	r0, r5
}
 23ec904:	b004      	add	sp, #16
 23ec906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SYSTEM_THREAD(ENABLED);
 23ec90a:	f00a beb9 	b.w	23f7680 <system_thread_set_state>
 23ec90e:	bf00      	nop
 23ec910:	1006a7e7 	.word	0x1006a7e7
 23ec914:	1006a2d0 	.word	0x1006a2d0
 23ec918:	023fe7a0 	.word	0x023fe7a0
 23ec91c:	1006a780 	.word	0x1006a780
 23ec920:	023fe7b4 	.word	0x023fe7b4
 23ec924:	1007aa58 	.word	0x1007aa58
 23ec928:	00061a80 	.word	0x00061a80
 23ec92c:	1006ad74 	.word	0x1006ad74
 23ec930:	1006ade8 	.word	0x1006ade8
 23ec934:	1006a7ec 	.word	0x1006a7ec
 23ec938:	1007ae70 	.word	0x1007ae70
 23ec93c:	1007aa88 	.word	0x1007aa88
 23ec940:	1006a810 	.word	0x1006a810
 23ec944:	1006abf8 	.word	0x1006abf8
 23ec948:	1006ac38 	.word	0x1006ac38
 23ec94c:	1006ab48 	.word	0x1006ab48
 23ec950:	1006aba0 	.word	0x1006aba0
 23ec954:	1006a948 	.word	0x1006a948
 23ec958:	1006aa48 	.word	0x1006aa48
 23ec95c:	1006ae90 	.word	0x1006ae90
 23ec960:	1006f0f8 	.word	0x1006f0f8
 23ec964:	1006f104 	.word	0x1006f104
 23ec968:	1006f110 	.word	0x1006f110
 23ec96c:	1006f11c 	.word	0x1006f11c
 23ec970:	1007abb4 	.word	0x1007abb4
 23ec974:	1007abc4 	.word	0x1007abc4
 23ec978:	1007ac18 	.word	0x1007ac18
 23ec97c:	1007ac20 	.word	0x1007ac20
 23ec980:	1007aa30 	.word	0x1007aa30
 23ec984:	1006ae80 	.word	0x1006ae80
 23ec988:	1006ae88 	.word	0x1006ae88
 23ec98c:	1006f0c0 	.word	0x1006f0c0
 23ec990:	1006f0dc 	.word	0x1006f0dc
 23ec994:	1007ac00 	.word	0x1007ac00
 23ec998:	1007ac10 	.word	0x1007ac10
 23ec99c:	1007ac08 	.word	0x1007ac08
 23ec9a0:	1006a7d4 	.word	0x1006a7d4
 23ec9a4:	ffff0000 	.word	0xffff0000
 23ec9a8:	000186a0 	.word	0x000186a0

023ec9ac <_Z15lora_initializev>:
void lora_initialize() {
 23ec9ac:	b510      	push	{r4, lr}
  if (lora_cf_validate()) {
 23ec9ae:	f7f9 ff31 	bl	23e6814 <_Z16lora_cf_validatev>
 23ec9b2:	2800      	cmp	r0, #0
 23ec9b4:	d04b      	beq.n	23eca4e <_Z15lora_initializev+0xa2>
    pinMode(LORA_RESET, OUTPUT);
 23ec9b6:	2101      	movs	r1, #1
 23ec9b8:	2015      	movs	r0, #21
 23ec9ba:	f00d fa13 	bl	23f9de4 <pinMode>
    digitalWrite(LORA_RESET, LOW);
 23ec9be:	2100      	movs	r1, #0
 23ec9c0:	2015      	movs	r0, #21
 23ec9c2:	f00d fa20 	bl	23f9e06 <digitalWrite>
    delay(100);
 23ec9c6:	2064      	movs	r0, #100	; 0x64
 23ec9c8:	f00b f95c 	bl	23f7c84 <delay>
    digitalWrite(LORA_RESET, HIGH);
 23ec9cc:	2101      	movs	r1, #1
 23ec9ce:	2015      	movs	r0, #21
 23ec9d0:	f00d fa19 	bl	23f9e06 <digitalWrite>
    delay(100);
 23ec9d4:	2064      	movs	r0, #100	; 0x64
 23ec9d6:	f00b f955 	bl	23f7c84 <delay>
    if (rf95.init()) {
 23ec9da:	481e      	ldr	r0, [pc, #120]	; (23eca54 <_Z15lora_initializev+0xa8>)
 23ec9dc:	f006 fab0 	bl	23f2f40 <_ZN7RH_RF954initEv>
 23ec9e0:	b370      	cbz	r0, 23eca40 <_Z15lora_initializev+0x94>
      rf95.setTxPower(cf_lora_txpower, false);
 23ec9e2:	4b1d      	ldr	r3, [pc, #116]	; (23eca58 <_Z15lora_initializev+0xac>)
 23ec9e4:	2200      	movs	r2, #0
 23ec9e6:	f993 1000 	ldrsb.w	r1, [r3]
 23ec9ea:	481a      	ldr	r0, [pc, #104]	; (23eca54 <_Z15lora_initializev+0xa8>)
 23ec9ec:	f006 fa60 	bl	23f2eb0 <_ZN7RH_RF9510setTxPowerEab>
      rf95.setFrequency(cf_lora_freq);
 23ec9f0:	4b1a      	ldr	r3, [pc, #104]	; (23eca5c <_Z15lora_initializev+0xb0>)
      rf95.setThisAddress(cf_lora_unitid);
 23ec9f2:	4c1b      	ldr	r4, [pc, #108]	; (23eca60 <_Z15lora_initializev+0xb4>)
      rf95.setFrequency(cf_lora_freq);
 23ec9f4:	ed93 0a00 	vldr	s0, [r3]
 23ec9f8:	4816      	ldr	r0, [pc, #88]	; (23eca54 <_Z15lora_initializev+0xa8>)
 23ec9fa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23ec9fe:	f006 f8f3 	bl	23f2be8 <_ZN7RH_RF9512setFrequencyEf>
      rf95.setThisAddress(cf_lora_unitid);
 23eca02:	7821      	ldrb	r1, [r4, #0]
 23eca04:	4813      	ldr	r0, [pc, #76]	; (23eca54 <_Z15lora_initializev+0xa8>)
 23eca06:	f005 fe63 	bl	23f26d0 <_ZN15RHGenericDriver14setThisAddressEh>
      rf95.setHeaderFrom(cf_lora_unitid);
 23eca0a:	7821      	ldrb	r1, [r4, #0]
 23eca0c:	4811      	ldr	r0, [pc, #68]	; (23eca54 <_Z15lora_initializev+0xa8>)
 23eca0e:	f005 fe63 	bl	23f26d8 <_ZN15RHGenericDriver13setHeaderFromEh>
      rf95.setPromiscuous(true);
 23eca12:	2101      	movs	r1, #1
 23eca14:	480f      	ldr	r0, [pc, #60]	; (23eca54 <_Z15lora_initializev+0xa8>)
 23eca16:	f005 fe59 	bl	23f26cc <_ZN15RHGenericDriver14setPromiscuousEb>
      rf95.setModeRx();
 23eca1a:	480e      	ldr	r0, [pc, #56]	; (23eca54 <_Z15lora_initializev+0xa8>)
 23eca1c:	f006 f9da 	bl	23f2dd4 <_ZN7RH_RF959setModeRxEv>
      LORA_exists=true;
 23eca20:	2201      	movs	r2, #1
 23eca22:	4b10      	ldr	r3, [pc, #64]	; (23eca64 <_Z15lora_initializev+0xb8>)
      Output ("LORA OK");
 23eca24:	4810      	ldr	r0, [pc, #64]	; (23eca68 <_Z15lora_initializev+0xbc>)
      LORA_exists=true;
 23eca26:	701a      	strb	r2, [r3, #0]
    Output ("LORA INIT ERR");
 23eca28:	f7f9 fd20 	bl	23e646c <_Z6OutputPKc>
  lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);  // Minutes * 60 seconds
 23eca2c:	f7f9 f9da 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23eca30:	4a0e      	ldr	r2, [pc, #56]	; (23eca6c <_Z15lora_initializev+0xc0>)
 23eca32:	4b0f      	ldr	r3, [pc, #60]	; (23eca70 <_Z15lora_initializev+0xc4>)
 23eca34:	1880      	adds	r0, r0, r2
 23eca36:	f141 0100 	adc.w	r1, r1, #0
 23eca3a:	e9c3 0100 	strd	r0, r1, [r3]
}
 23eca3e:	bd10      	pop	{r4, pc}
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23eca40:	4a0c      	ldr	r2, [pc, #48]	; (23eca74 <_Z15lora_initializev+0xc8>)
      Output ("LORA NF");
 23eca42:	480d      	ldr	r0, [pc, #52]	; (23eca78 <_Z15lora_initializev+0xcc>)
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23eca44:	6813      	ldr	r3, [r2, #0]
 23eca46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 23eca4a:	6013      	str	r3, [r2, #0]
      Output ("LORA NF");
 23eca4c:	e7ec      	b.n	23eca28 <_Z15lora_initializev+0x7c>
    Output ("LORA INIT ERR");
 23eca4e:	480b      	ldr	r0, [pc, #44]	; (23eca7c <_Z15lora_initializev+0xd0>)
 23eca50:	e7ea      	b.n	23eca28 <_Z15lora_initializev+0x7c>
 23eca52:	bf00      	nop
 23eca54:	1007aa88 	.word	0x1007aa88
 23eca58:	1006a194 	.word	0x1006a194
 23eca5c:	1006a190 	.word	0x1006a190
 23eca60:	1006a198 	.word	0x1006a198
 23eca64:	1006a2b1 	.word	0x1006a2b1
 23eca68:	023fe322 	.word	0x023fe322
 23eca6c:	001b7740 	.word	0x001b7740
 23eca70:	1006aeb8 	.word	0x1006aeb8
 23eca74:	1006a178 	.word	0x1006a178
 23eca78:	023fe32a 	.word	0x023fe32a
 23eca7c:	023fe332 	.word	0x023fe332

023eca80 <_Z14lora_msg_checkv.part.0>:
/* 
 *=======================================================================================================================
 * lora_msg_check()
 *=======================================================================================================================
 */
void lora_msg_check() {
 23eca80:	b570      	push	{r4, r5, r6, lr}
    if (rf95.available()) {
      byte iv [N_BLOCK];
    
      // Should be a message for us now
      uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; // 251 Bytes
      uint8_t len  = sizeof(buf);
 23eca82:	24fb      	movs	r4, #251	; 0xfb
void lora_msg_check() {
 23eca84:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
      uint8_t from = rf95.headerFrom();
 23eca88:	483b      	ldr	r0, [pc, #236]	; (23ecb78 <_Z14lora_msg_checkv.part.0+0xf8>)
      uint8_t len  = sizeof(buf);
 23eca8a:	f88d 4013 	strb.w	r4, [sp, #19]
      uint8_t from = rf95.headerFrom();
 23eca8e:	f005 fe2f 	bl	23f26f0 <_ZN15RHGenericDriver10headerFromEv>
      uint8_t to   = rf95.headerTo();
 23eca92:	4839      	ldr	r0, [pc, #228]	; (23ecb78 <_Z14lora_msg_checkv.part.0+0xf8>)
 23eca94:	f005 fe2a 	bl	23f26ec <_ZN15RHGenericDriver8headerToEv>
      uint8_t id   = rf95.headerId();
 23eca98:	4837      	ldr	r0, [pc, #220]	; (23ecb78 <_Z14lora_msg_checkv.part.0+0xf8>)
 23eca9a:	f005 fe2b 	bl	23f26f4 <_ZN15RHGenericDriver8headerIdEv>
      uint8_t flags= rf95.headerFlags();
 23eca9e:	4836      	ldr	r0, [pc, #216]	; (23ecb78 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ecaa0:	f005 fe2a 	bl	23f26f8 <_ZN15RHGenericDriver11headerFlagsEv>
      int8_t  rssi = rf95.lastRssi(); 
 23ecaa4:	4834      	ldr	r0, [pc, #208]	; (23ecb78 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ecaa6:	f005 fe29 	bl	23f26fc <_ZN15RHGenericDriver8lastRssiEv>
      uint8_t byte2;
      uint8_t i;
      uint8_t msglen = 0;
      char msg[256];             // Used to hold decrypted lora messages

      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ecaaa:	4622      	mov	r2, r4
 23ecaac:	2100      	movs	r1, #0
 23ecaae:	a809      	add	r0, sp, #36	; 0x24
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ecab0:	ac48      	add	r4, sp, #288	; 0x120
      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ecab2:	f00f fff8 	bl	23fcaa6 <memset>
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ecab6:	22fc      	movs	r2, #252	; 0xfc
 23ecab8:	2100      	movs	r1, #0
 23ecaba:	4620      	mov	r0, r4
 23ecabc:	f00f fff3 	bl	23fcaa6 <memset>
    
      if (rf95.recv(buf, &len)) {
 23ecac0:	482d      	ldr	r0, [pc, #180]	; (23ecb78 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ecac2:	f10d 0213 	add.w	r2, sp, #19
 23ecac6:	a909      	add	r1, sp, #36	; 0x24
 23ecac8:	f006 f812 	bl	23f2af0 <_ZN7RH_RF954recvEPhS0_>
 23ecacc:	2800      	cmp	r0, #0
 23ecace:	d043      	beq.n	23ecb58 <_Z14lora_msg_checkv.part.0+0xd8>
        // memcpy (msg, &buf[3], buf[0]);
        // Output (msg);
        // Serial_write ("LoRa Msg");
     
        aes.iv_inc();
 23ecad0:	482a      	ldr	r0, [pc, #168]	; (23ecb7c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ecad2:	f001 ff02 	bl	23ee8da <_ZN3AES6iv_incEv>
        aes.set_IV(AES_MYIV);
 23ecad6:	4b2a      	ldr	r3, [pc, #168]	; (23ecb80 <_Z14lora_msg_checkv.part.0+0x100>)
 23ecad8:	4828      	ldr	r0, [pc, #160]	; (23ecb7c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ecada:	e9d3 2300 	ldrd	r2, r3, [r3]
        aes.get_IV(iv);
 23ecade:	ad05      	add	r5, sp, #20
        aes.set_IV(AES_MYIV);
 23ecae0:	f001 fee7 	bl	23ee8b2 <_ZN3AES6set_IVEy>
        aes.get_IV(iv);
 23ecae4:	4629      	mov	r1, r5
 23ecae6:	4825      	ldr	r0, [pc, #148]	; (23ecb7c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ecae8:	f001 ff0f 	bl	23ee90a <_ZN3AES6get_IVEPh>
        aes.do_aes_decrypt(buf, len, (byte *) msg, AES_KEY, 128, iv);
 23ecaec:	2380      	movs	r3, #128	; 0x80
 23ecaee:	9301      	str	r3, [sp, #4]
 23ecaf0:	4b24      	ldr	r3, [pc, #144]	; (23ecb84 <_Z14lora_msg_checkv.part.0+0x104>)
 23ecaf2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23ecaf6:	9300      	str	r3, [sp, #0]
 23ecaf8:	4820      	ldr	r0, [pc, #128]	; (23ecb7c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ecafa:	4623      	mov	r3, r4
 23ecafc:	9502      	str	r5, [sp, #8]
 23ecafe:	a909      	add	r1, sp, #36	; 0x24
 23ecb00:	f001 ff10 	bl	23ee924 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>
      
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23ecb04:	78e3      	ldrb	r3, [r4, #3]
 23ecb06:	2b49      	cmp	r3, #73	; 0x49
 23ecb08:	d111      	bne.n	23ecb2e <_Z14lora_msg_checkv.part.0+0xae>
 23ecb0a:	7923      	ldrb	r3, [r4, #4]
 23ecb0c:	2b46      	cmp	r3, #70	; 0x46
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23ecb0e:	d123      	bne.n	23ecb58 <_Z14lora_msg_checkv.part.0+0xd8>

          // Get length of what follows
          msglen = msg[0];
 23ecb10:	f20d 1123 	addw	r1, sp, #291	; 0x123

          // Compute Checksum
          checksum=0;
          for (i=3; i<msglen; i++) {
 23ecb14:	2203      	movs	r2, #3
          checksum=0;
 23ecb16:	2300      	movs	r3, #0
 23ecb18:	4608      	mov	r0, r1
          msglen = msg[0];
 23ecb1a:	7825      	ldrb	r5, [r4, #0]
          for (i=3; i<msglen; i++) {
 23ecb1c:	4295      	cmp	r5, r2
 23ecb1e:	d90b      	bls.n	23ecb38 <_Z14lora_msg_checkv.part.0+0xb8>
            checksum += msg[i];
 23ecb20:	f811 6b01 	ldrb.w	r6, [r1], #1
          for (i=3; i<msglen; i++) {
 23ecb24:	3201      	adds	r2, #1
            checksum += msg[i];
 23ecb26:	4433      	add	r3, r6
 23ecb28:	b29b      	uxth	r3, r3
          for (i=3; i<msglen; i++) {
 23ecb2a:	b2d2      	uxtb	r2, r2
 23ecb2c:	e7f6      	b.n	23ecb1c <_Z14lora_msg_checkv.part.0+0x9c>
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23ecb2e:	2b4c      	cmp	r3, #76	; 0x4c
 23ecb30:	d112      	bne.n	23ecb58 <_Z14lora_msg_checkv.part.0+0xd8>
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23ecb32:	7923      	ldrb	r3, [r4, #4]
 23ecb34:	2b52      	cmp	r3, #82	; 0x52
 23ecb36:	e7ea      	b.n	23ecb0e <_Z14lora_msg_checkv.part.0+0x8e>
          }
          byte1 = checksum>>8;
          byte2 = checksum%256;

          // Validate Checksum against sent checksum
          if ((byte1 == msg[1]) && (byte2 == msg[2])) {
 23ecb38:	7862      	ldrb	r2, [r4, #1]
 23ecb3a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 23ecb3e:	d117      	bne.n	23ecb70 <_Z14lora_msg_checkv.part.0+0xf0>
 23ecb40:	78a2      	ldrb	r2, [r4, #2]
 23ecb42:	b2db      	uxtb	r3, r3
 23ecb44:	429a      	cmp	r2, r3
 23ecb46:	d113      	bne.n	23ecb70 <_Z14lora_msg_checkv.part.0+0xf0>
            // Make what follows a string
            msg[msglen]=0;
 23ecb48:	2300      	movs	r3, #0
 23ecb4a:	5563      	strb	r3, [r4, r5]

            char *payload = (char*)(msg+3); // After length and 2 checksum bytes

            // Display LoRa Message on Serial Console           
            Serial_write (payload);
 23ecb4c:	f7f9 fc64 	bl	23e6418 <_Z12Serial_writePKc>

            lora_relay_msg (payload);
 23ecb50:	f20d 1023 	addw	r0, sp, #291	; 0x123
 23ecb54:	f7fc fcae 	bl	23e94b4 <_Z14lora_relay_msgPc>
            Output ("LORA CS-ERR");
          }
        }
      }
      // Received LoRa Signal, Reset alarm
      lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);
 23ecb58:	f7f9 f944 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ecb5c:	4a0a      	ldr	r2, [pc, #40]	; (23ecb88 <_Z14lora_msg_checkv.part.0+0x108>)
 23ecb5e:	4b0b      	ldr	r3, [pc, #44]	; (23ecb8c <_Z14lora_msg_checkv.part.0+0x10c>)
 23ecb60:	1880      	adds	r0, r0, r2
 23ecb62:	f141 0100 	adc.w	r1, r1, #0
 23ecb66:	e9c3 0100 	strd	r0, r1, [r3]
        // Need to set some system status bit here too
        lora_initialize();
      }
    }
  }
}
 23ecb6a:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 23ecb6e:	bd70      	pop	{r4, r5, r6, pc}
            Output ("LORA CS-ERR");
 23ecb70:	4807      	ldr	r0, [pc, #28]	; (23ecb90 <_Z14lora_msg_checkv.part.0+0x110>)
 23ecb72:	f7f9 fc7b 	bl	23e646c <_Z6OutputPKc>
 23ecb76:	e7ef      	b.n	23ecb58 <_Z14lora_msg_checkv.part.0+0xd8>
 23ecb78:	1007aa88 	.word	0x1007aa88
 23ecb7c:	1006a810 	.word	0x1006a810
 23ecb80:	1006a278 	.word	0x1006a278
 23ecb84:	1006a264 	.word	0x1006a264
 23ecb88:	001b7740 	.word	0x001b7740
 23ecb8c:	1006aeb8 	.word	0x1006aeb8
 23ecb90:	023fe340 	.word	0x023fe340

023ecb94 <_Z14lora_msg_checkv>:
void lora_msg_check() {
 23ecb94:	b508      	push	{r3, lr}
  if (LORA_exists) {
 23ecb96:	4b0e      	ldr	r3, [pc, #56]	; (23ecbd0 <_Z14lora_msg_checkv+0x3c>)
 23ecb98:	781b      	ldrb	r3, [r3, #0]
 23ecb9a:	b1bb      	cbz	r3, 23ecbcc <_Z14lora_msg_checkv+0x38>
    if (rf95.available()) {
 23ecb9c:	480d      	ldr	r0, [pc, #52]	; (23ecbd4 <_Z14lora_msg_checkv+0x40>)
 23ecb9e:	f006 f92a 	bl	23f2df6 <_ZN7RH_RF959availableEv>
 23ecba2:	b118      	cbz	r0, 23ecbac <_Z14lora_msg_checkv+0x18>
}
 23ecba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23ecba8:	f7ff bf6a 	b.w	23eca80 <_Z14lora_msg_checkv.part.0>
      if (System.millis() >= lora_alarm_timer) {
 23ecbac:	f7f9 f91a 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ecbb0:	4b09      	ldr	r3, [pc, #36]	; (23ecbd8 <_Z14lora_msg_checkv+0x44>)
 23ecbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ecbb6:	4290      	cmp	r0, r2
 23ecbb8:	eb71 0303 	sbcs.w	r3, r1, r3
 23ecbbc:	d306      	bcc.n	23ecbcc <_Z14lora_msg_checkv+0x38>
        Output ("LORA Init");
 23ecbbe:	4807      	ldr	r0, [pc, #28]	; (23ecbdc <_Z14lora_msg_checkv+0x48>)
 23ecbc0:	f7f9 fc54 	bl	23e646c <_Z6OutputPKc>
}
 23ecbc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lora_initialize();
 23ecbc8:	f7ff bef0 	b.w	23ec9ac <_Z15lora_initializev>
}
 23ecbcc:	bd08      	pop	{r3, pc}
 23ecbce:	bf00      	nop
 23ecbd0:	1006a2b1 	.word	0x1006a2b1
 23ecbd4:	1007aa88 	.word	0x1007aa88
 23ecbd8:	1006aeb8 	.word	0x1006aeb8
 23ecbdc:	023fe34c 	.word	0x023fe34c

023ecbe0 <_Z13lora_msg_pollv>:
/* 
 *=======================================================================================================================
 * lora_msg_poll() -- Spend 750ms looking for LoRa Messages
 *=======================================================================================================================
 */
void lora_msg_poll() {
 23ecbe0:	b508      	push	{r3, lr}
  for (int i=0; i<3; i++) {
    lora_msg_check();
 23ecbe2:	f7ff ffd7 	bl	23ecb94 <_Z14lora_msg_checkv>
    delay (250);
 23ecbe6:	20fa      	movs	r0, #250	; 0xfa
 23ecbe8:	f00b f84c 	bl	23f7c84 <delay>
    lora_msg_check();
 23ecbec:	f7ff ffd2 	bl	23ecb94 <_Z14lora_msg_checkv>
    delay (250);
 23ecbf0:	20fa      	movs	r0, #250	; 0xfa
 23ecbf2:	f00b f847 	bl	23f7c84 <delay>
    lora_msg_check();
 23ecbf6:	f7ff ffcd 	bl	23ecb94 <_Z14lora_msg_checkv>
  }
 23ecbfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay (250);
 23ecbfe:	20fa      	movs	r0, #250	; 0xfa
 23ecc00:	f00b b840 	b.w	23f7c84 <delay>

023ecc04 <_Z28Wind_Distance_Air_Initializev>:
void Wind_Distance_Air_Initialize() {
 23ecc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  anemometer_interrupt_count = 0;
 23ecc06:	2400      	movs	r4, #0
  Output ("WindDist Init()");
 23ecc08:	4821      	ldr	r0, [pc, #132]	; (23ecc90 <_Z28Wind_Distance_Air_Initializev+0x8c>)
 23ecc0a:	f7f9 fc2f 	bl	23e646c <_Z6OutputPKc>
  anemometer_interrupt_count = 0;
 23ecc0e:	4b21      	ldr	r3, [pc, #132]	; (23ecc94 <_Z28Wind_Distance_Air_Initializev+0x90>)
    if (A4_State == A4_STATE_DISTANCE) {
 23ecc10:	4e21      	ldr	r6, [pc, #132]	; (23ecc98 <_Z28Wind_Distance_Air_Initializev+0x94>)
  anemometer_interrupt_count = 0;
 23ecc12:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23ecc14:	f7f9 f8e6 	bl	23e5de4 <_ZN11SystemClass6millisEv>
  wind.gust = 0.0;
 23ecc18:	2200      	movs	r2, #0
  anemometer_interrupt_stime = System.millis();
 23ecc1a:	4b20      	ldr	r3, [pc, #128]	; (23ecc9c <_Z28Wind_Distance_Air_Initializev+0x98>)
    if (PM25AQI_exists) {
 23ecc1c:	4f20      	ldr	r7, [pc, #128]	; (23ecca0 <_Z28Wind_Distance_Air_Initializev+0x9c>)
  anemometer_interrupt_stime = System.millis();
 23ecc1e:	e9c3 0100 	strd	r0, r1, [r3]
  wind.gust = 0.0;
 23ecc22:	4b20      	ldr	r3, [pc, #128]	; (23ecca4 <_Z28Wind_Distance_Air_Initializev+0xa0>)
 23ecc24:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  wind.gust_direction = -1;
 23ecc28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  wind.bucket_idx = 0;
 23ecc2c:	f8c3 41e0 	str.w	r4, [r3, #480]	; 0x1e0
 23ecc30:	243c      	movs	r4, #60	; 0x3c
  wind.gust_direction = -1;
 23ecc32:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    lora_msg_poll(); // 750ms Second Delay
 23ecc36:	f7ff ffd3 	bl	23ecbe0 <_Z13lora_msg_pollv>
    HeartBeat();     // Provides a 250ms delay
 23ecc3a:	f7fd fcbf 	bl	23ea5bc <_Z9HeartBeatv>
    Wind_TakeReading();
 23ecc3e:	f7fb fd67 	bl	23e8710 <_Z16Wind_TakeReadingv>
    if (A4_State == A4_STATE_DISTANCE) {
 23ecc42:	6833      	ldr	r3, [r6, #0]
 23ecc44:	2b01      	cmp	r3, #1
 23ecc46:	d101      	bne.n	23ecc4c <_Z28Wind_Distance_Air_Initializev+0x48>
      DistanceGauge_TakeReading();
 23ecc48:	f7fb fac6 	bl	23e81d8 <_Z25DistanceGauge_TakeReadingv>
    if (PM25AQI_exists) {
 23ecc4c:	783b      	ldrb	r3, [r7, #0]
 23ecc4e:	b10b      	cbz	r3, 23ecc54 <_Z28Wind_Distance_Air_Initializev+0x50>
      pm25aqi_TakeReading();
 23ecc50:	f7fa ff80 	bl	23e7b54 <_Z19pm25aqi_TakeReadingv>
    if (SerialConsoleEnabled) Serial.print(".");  // Provide Serial Console some feedback as we loop and wait til next observation
 23ecc54:	4d14      	ldr	r5, [pc, #80]	; (23ecca8 <_Z28Wind_Distance_Air_Initializev+0xa4>)
 23ecc56:	782b      	ldrb	r3, [r5, #0]
 23ecc58:	b123      	cbz	r3, 23ecc64 <_Z28Wind_Distance_Air_Initializev+0x60>
 23ecc5a:	f00c ff49 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23ecc5e:	4913      	ldr	r1, [pc, #76]	; (23eccac <_Z28Wind_Distance_Air_Initializev+0xa8>)
 23ecc60:	f00c fa0f 	bl	23f9082 <_ZN5Print5printEPKc>
    OLED_spin();
 23ecc64:	f7f9 fa7c 	bl	23e6160 <_Z9OLED_spinv>
  for (int i=0; i< WIND_READINGS; i++) {
 23ecc68:	3c01      	subs	r4, #1
 23ecc6a:	d1e4      	bne.n	23ecc36 <_Z28Wind_Distance_Air_Initializev+0x32>
  Wind_TakeReading();
 23ecc6c:	f7fb fd50 	bl	23e8710 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23ecc70:	6833      	ldr	r3, [r6, #0]
 23ecc72:	2b01      	cmp	r3, #1
 23ecc74:	d101      	bne.n	23ecc7a <_Z28Wind_Distance_Air_Initializev+0x76>
    DistanceGauge_TakeReading();
 23ecc76:	f7fb faaf 	bl	23e81d8 <_Z25DistanceGauge_TakeReadingv>
  if (SerialConsoleEnabled) Serial.println();  // Send a newline out to cleanup after all the periods we have been logging
 23ecc7a:	782b      	ldrb	r3, [r5, #0]
 23ecc7c:	b11b      	cbz	r3, 23ecc86 <_Z28Wind_Distance_Air_Initializev+0x82>
 23ecc7e:	f00c ff37 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23ecc82:	f00c fa09 	bl	23f9098 <_ZN5Print7printlnEv>
  ws_refresh = false; // Set to false since we have just initialized wind speed data.
 23ecc86:	2200      	movs	r2, #0
 23ecc88:	4b09      	ldr	r3, [pc, #36]	; (23eccb0 <_Z28Wind_Distance_Air_Initializev+0xac>)
 23ecc8a:	701a      	strb	r2, [r3, #0]
}
 23ecc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ecc8e:	bf00      	nop
 23ecc90:	023fe356 	.word	0x023fe356
 23ecc94:	1006a938 	.word	0x1006a938
 23ecc98:	1006a25c 	.word	0x1006a25c
 23ecc9c:	1006a940 	.word	0x1006a940
 23ecca0:	1006a2cc 	.word	0x1006a2cc
 23ecca4:	1007ac6c 	.word	0x1007ac6c
 23ecca8:	1006a7d3 	.word	0x1006a7d3
 23eccac:	023fe366 	.word	0x023fe366
 23eccb0:	1007ae58 	.word	0x1007ae58

023eccb4 <_Z14BackGroundWorkv>:
void BackGroundWork() {
 23eccb4:	b538      	push	{r3, r4, r5, lr}
  uint64_t OneSecondFromNow = System.millis() + 1000;
 23eccb6:	f7f9 f895 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23eccba:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
 23eccbe:	f141 0500 	adc.w	r5, r1, #0
  Wind_TakeReading();
 23eccc2:	f7fb fd25 	bl	23e8710 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23eccc6:	4b16      	ldr	r3, [pc, #88]	; (23ecd20 <_Z14BackGroundWorkv+0x6c>)
 23eccc8:	681b      	ldr	r3, [r3, #0]
 23eccca:	2b01      	cmp	r3, #1
 23ecccc:	d101      	bne.n	23eccd2 <_Z14BackGroundWorkv+0x1e>
    DistanceGauge_TakeReading();
 23eccce:	f7fb fa83 	bl	23e81d8 <_Z25DistanceGauge_TakeReadingv>
  if (PM25AQI_exists) {
 23eccd2:	4b14      	ldr	r3, [pc, #80]	; (23ecd24 <_Z14BackGroundWorkv+0x70>)
 23eccd4:	781b      	ldrb	r3, [r3, #0]
 23eccd6:	b10b      	cbz	r3, 23eccdc <_Z14BackGroundWorkv+0x28>
    pm25aqi_TakeReading();
 23eccd8:	f7fa ff3c 	bl	23e7b54 <_Z19pm25aqi_TakeReadingv>
  HeartBeat();  // Provides a 250ms delay
 23eccdc:	f7fd fc6e 	bl	23ea5bc <_Z9HeartBeatv>
  if (LORA_exists) {
 23ecce0:	4b11      	ldr	r3, [pc, #68]	; (23ecd28 <_Z14BackGroundWorkv+0x74>)
 23ecce2:	781b      	ldrb	r3, [r3, #0]
 23ecce4:	b10b      	cbz	r3, 23eccea <_Z14BackGroundWorkv+0x36>
    lora_msg_poll(); // Provides a 750ms delay
 23ecce6:	f7ff ff7b 	bl	23ecbe0 <_Z13lora_msg_pollv>
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23eccea:	f7f9 f87b 	bl	23e5de4 <_ZN11SystemClass6millisEv>
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23eccee:	f240 33e7 	movw	r3, #999	; 0x3e7
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23eccf2:	1a20      	subs	r0, r4, r0
 23eccf4:	eb65 0101 	sbc.w	r1, r5, r1
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23eccf8:	1e42      	subs	r2, r0, #1
 23eccfa:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 23eccfe:	429a      	cmp	r2, r3
 23ecd00:	f171 0300 	sbcs.w	r3, r1, #0
 23ecd04:	d201      	bcs.n	23ecd0a <_Z14BackGroundWorkv+0x56>
    delay (TimeRemaining);
 23ecd06:	f00a ffbd 	bl	23f7c84 <delay>
  if (TurnLedOff) {   // Turned on by rain gauge interrupt handler
 23ecd0a:	4c08      	ldr	r4, [pc, #32]	; (23ecd2c <_Z14BackGroundWorkv+0x78>)
 23ecd0c:	7823      	ldrb	r3, [r4, #0]
 23ecd0e:	b133      	cbz	r3, 23ecd1e <_Z14BackGroundWorkv+0x6a>
    digitalWrite(LED_PIN, LOW);  
 23ecd10:	4b07      	ldr	r3, [pc, #28]	; (23ecd30 <_Z14BackGroundWorkv+0x7c>)
 23ecd12:	2100      	movs	r1, #0
 23ecd14:	8818      	ldrh	r0, [r3, #0]
 23ecd16:	f00d f876 	bl	23f9e06 <digitalWrite>
    TurnLedOff = false;
 23ecd1a:	2300      	movs	r3, #0
 23ecd1c:	7023      	strb	r3, [r4, #0]
}
 23ecd1e:	bd38      	pop	{r3, r4, r5, pc}
 23ecd20:	1006a25c 	.word	0x1006a25c
 23ecd24:	1006a2cc 	.word	0x1006a2cc
 23ecd28:	1006a2b1 	.word	0x1006a2b1
 23ecd2c:	1006a7e3 	.word	0x1006a7e3
 23ecd30:	1006a104 	.word	0x1006a104

023ecd34 <_Z16Particle_PublishPc>:
/*
 * ======================================================================================================================
 * Particle_Publish() - Publish to Particle what is in msgbuf
 * ======================================================================================================================
 */
bool Particle_Publish(char *EventName) {
 23ecd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ecd36:	b087      	sub	sp, #28
 23ecd38:	4604      	mov	r4, r0
 23ecd3a:	f00a fd65 	bl	23f7808 <spark_cloud_flag_connected>
  // Calling Particle.publish() when the cloud connection has been turned off will not publish an event. 
  // This is indicated by the return success code of false. If the cloud connection is turned on and 
  // trying to connect to the cloud unsuccessfully, Particle.publish() may block for up to 20 seconds 
  // (normal conditions) to 10 minutes (unusual conditions). Checking Particle.connected() 
  // before calling Particle.publish() can help prevent this.
  if (Particle.connected()) {
 23ecd3e:	4605      	mov	r5, r0
 23ecd40:	2800      	cmp	r0, #0
 23ecd42:	d03e      	beq.n	23ecdc2 <_Z16Particle_PublishPc+0x8e>
    uint64_t start_ts = System.millis();
 23ecd44:	f7f9 f84e 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ecd48:	4606      	mov	r6, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23ecd4a:	4820      	ldr	r0, [pc, #128]	; (23ecdcc <_Z16Particle_PublishPc+0x98>)
 23ecd4c:	460f      	mov	r7, r1
 23ecd4e:	f7f8 fa37 	bl	23e51c0 <strlen>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23ecd52:	4a1f      	ldr	r2, [pc, #124]	; (23ecdd0 <_Z16Particle_PublishPc+0x9c>)
 23ecd54:	2500      	movs	r5, #0
 23ecd56:	7812      	ldrb	r2, [r2, #0]
 23ecd58:	4603      	mov	r3, r0
 23ecd5a:	f88d 2008 	strb.w	r2, [sp, #8]
 23ecd5e:	223c      	movs	r2, #60	; 0x3c
 23ecd60:	4621      	mov	r1, r4
 23ecd62:	e9cd 5200 	strd	r5, r2, [sp]
 23ecd66:	a804      	add	r0, sp, #16
 23ecd68:	4a18      	ldr	r2, [pc, #96]	; (23ecdcc <_Z16Particle_PublishPc+0x98>)
 23ecd6a:	f00b fb5d 	bl	23f8428 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
 23ecd6e:	4629      	mov	r1, r5
 23ecd70:	9804      	ldr	r0, [sp, #16]
 23ecd72:	f7ff fce0 	bl	23ec736 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23ecd76:	9c05      	ldr	r4, [sp, #20]
 23ecd78:	4605      	mov	r5, r0
 23ecd7a:	b17c      	cbz	r4, 23ecd9c <_Z16Particle_PublishPc+0x68>
      if (--_M_use_count == 0)
 23ecd7c:	6863      	ldr	r3, [r4, #4]
 23ecd7e:	3b01      	subs	r3, #1
 23ecd80:	6063      	str	r3, [r4, #4]
 23ecd82:	b95b      	cbnz	r3, 23ecd9c <_Z16Particle_PublishPc+0x68>
          _M_dispose();
 23ecd84:	6823      	ldr	r3, [r4, #0]
 23ecd86:	4620      	mov	r0, r4
 23ecd88:	689b      	ldr	r3, [r3, #8]
 23ecd8a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23ecd8c:	68a3      	ldr	r3, [r4, #8]
 23ecd8e:	3b01      	subs	r3, #1
 23ecd90:	60a3      	str	r3, [r4, #8]
 23ecd92:	b91b      	cbnz	r3, 23ecd9c <_Z16Particle_PublishPc+0x68>
            _M_destroy();
 23ecd94:	6823      	ldr	r3, [r4, #0]
 23ecd96:	4620      	mov	r0, r4
 23ecd98:	68db      	ldr	r3, [r3, #12]
 23ecd9a:	4798      	blx	r3
    if (Particle.publish(EventName, msgbuf, WITH_ACK)) {  // PRIVATE flag is always used even when not specified
 23ecd9c:	b175      	cbz	r5, 23ecdbc <_Z16Particle_PublishPc+0x88>

      // A safty check, If we got hung up for N seconds or more sending, 
      // let's invalidate our wind data and force a reinit in the main loop()
      if ((System.millis() - start_ts) >= 2000) {
 23ecd9e:	f7f9 f821 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ecda2:	1b80      	subs	r0, r0, r6
 23ecda4:	eb61 0107 	sbc.w	r1, r1, r7
 23ecda8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 23ecdac:	f171 0300 	sbcs.w	r3, r1, #0
        ws_refresh = true;
 23ecdb0:	bf22      	ittt	cs
 23ecdb2:	2201      	movcs	r2, #1
 23ecdb4:	4b07      	ldrcs	r3, [pc, #28]	; (23ecdd4 <_Z16Particle_PublishPc+0xa0>)
 23ecdb6:	701a      	strbcs	r2, [r3, #0]
      }
      // Currently, a device can publish at rate of about 1 event/sec, with bursts of up to 4 allowed in 1 second. 
      // Back to back burst of 4 messages will take 4 seconds to recover.
      // Our BackGroundWork() provides a delay between observations of 1 second 
      BackGroundWork();
 23ecdb8:	f7ff ff7c 	bl	23eccb4 <_Z14BackGroundWorkv>
  }
  else {
    Output ("Particle:NotReady");
  }
  return(false);
}
 23ecdbc:	4628      	mov	r0, r5
 23ecdbe:	b007      	add	sp, #28
 23ecdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Output ("Particle:NotReady");
 23ecdc2:	4805      	ldr	r0, [pc, #20]	; (23ecdd8 <_Z16Particle_PublishPc+0xa4>)
 23ecdc4:	f7f9 fb52 	bl	23e646c <_Z6OutputPKc>
 23ecdc8:	e7f8      	b.n	23ecdbc <_Z16Particle_PublishPc+0x88>
 23ecdca:	bf00      	nop
 23ecdcc:	1006f128 	.word	0x1006f128
 23ecdd0:	1006a7e7 	.word	0x1006a7e7
 23ecdd4:	1007ae58 	.word	0x1007ae58
 23ecdd8:	023fe368 	.word	0x023fe368

023ecddc <_Z14OBS_FS_Publishi>:
/*
 * ======================================================================================================================
 * OBS_FS_Publish() - obs[i].inuse for this observation must be true prior to calling
 * ======================================================================================================================
 */
bool OBS_FS_Publish(int i) {
 23ecddc:	b513      	push	{r0, r1, r4, lr}
 23ecdde:	9001      	str	r0, [sp, #4]
  OBS_FS_Build_JSON(i);  
 23ecde0:	f7fc fdda 	bl	23e9998 <_Z17OBS_FS_Build_JSONi>
  if (Particle_Publish((char *) "FS")) {
 23ecde4:	480e      	ldr	r0, [pc, #56]	; (23ece20 <_Z14OBS_FS_Publishi+0x44>)
 23ecde6:	f7ff ffa5 	bl	23ecd34 <_Z16Particle_PublishPc>
 23ecdea:	9a01      	ldr	r2, [sp, #4]
 23ecdec:	4604      	mov	r4, r0
 23ecdee:	b188      	cbz	r0, 23ece14 <_Z14OBS_FS_Publishi+0x38>
    Serial_write (msgbuf);
 23ecdf0:	480c      	ldr	r0, [pc, #48]	; (23ece24 <_Z14OBS_FS_Publishi+0x48>)
 23ecdf2:	f7f9 fb11 	bl	23e6418 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "FS[%d]->PUB OK[%d]", i, strlen(msgbuf)+1);
 23ecdf6:	480b      	ldr	r0, [pc, #44]	; (23ece24 <_Z14OBS_FS_Publishi+0x48>)
 23ecdf8:	f7f8 f9e2 	bl	23e51c0 <strlen>
 23ecdfc:	9a01      	ldr	r2, [sp, #4]
 23ecdfe:	1c43      	adds	r3, r0, #1
 23ece00:	4909      	ldr	r1, [pc, #36]	; (23ece28 <_Z14OBS_FS_Publishi+0x4c>)
 23ece02:	480a      	ldr	r0, [pc, #40]	; (23ece2c <_Z14OBS_FS_Publishi+0x50>)
 23ece04:	f00a fe5e 	bl	23f7ac4 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
    Output(Buffer32Bytes);
 23ece08:	4808      	ldr	r0, [pc, #32]	; (23ece2c <_Z14OBS_FS_Publishi+0x50>)
 23ece0a:	f7f9 fb2f 	bl	23e646c <_Z6OutputPKc>
    return(false);
  }
}
 23ece0e:	4620      	mov	r0, r4
 23ece10:	b002      	add	sp, #8
 23ece12:	bd10      	pop	{r4, pc}
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
 23ece14:	4906      	ldr	r1, [pc, #24]	; (23ece30 <_Z14OBS_FS_Publishi+0x54>)
 23ece16:	4805      	ldr	r0, [pc, #20]	; (23ece2c <_Z14OBS_FS_Publishi+0x50>)
 23ece18:	f00a fe54 	bl	23f7ac4 <sprintf>
 23ece1c:	e7f4      	b.n	23ece08 <_Z14OBS_FS_Publishi+0x2c>
 23ece1e:	bf00      	nop
 23ece20:	023fdb76 	.word	0x023fdb76
 23ece24:	1006f128 	.word	0x1006f128
 23ece28:	023fe37a 	.word	0x023fe37a
 23ece2c:	1006a287 	.word	0x1006a287
 23ece30:	023fe38d 	.word	0x023fe38d

023ece34 <_Z17OBS_Relay_Publishi>:
/*
 * ======================================================================================================================
 * OBS_Relay_Publish()
 * ======================================================================================================================
 */
bool OBS_Relay_Publish(int relay_type) {
 23ece34:	b570      	push	{r4, r5, r6, lr}
  if (relay_type > 0) {  // little safty check. Should not be 0
 23ece36:	1e04      	subs	r4, r0, #0
 23ece38:	dd16      	ble.n	23ece68 <_Z17OBS_Relay_Publishi+0x34>
    Serial_write (msgbuf);
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ece3a:	4e10      	ldr	r6, [pc, #64]	; (23ece7c <_Z17OBS_Relay_Publishi+0x48>)
    Serial_write (msgbuf);
 23ece3c:	4810      	ldr	r0, [pc, #64]	; (23ece80 <_Z17OBS_Relay_Publishi+0x4c>)
 23ece3e:	f7f9 faeb 	bl	23e6418 <_Z12Serial_writePKc>
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ece42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 23ece46:	f7ff ff75 	bl	23ecd34 <_Z16Particle_PublishPc>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ece4a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ece4e:	4605      	mov	r5, r0
 23ece50:	b140      	cbz	r0, 23ece64 <_Z17OBS_Relay_Publishi+0x30>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ece52:	490c      	ldr	r1, [pc, #48]	; (23ece84 <_Z17OBS_Relay_Publishi+0x50>)
      Output(Buffer32Bytes);
      return(true);
    }
    else {
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ece54:	480c      	ldr	r0, [pc, #48]	; (23ece88 <_Z17OBS_Relay_Publishi+0x54>)
 23ece56:	f00a fe35 	bl	23f7ac4 <sprintf>
      Output(Buffer32Bytes);       
 23ece5a:	480b      	ldr	r0, [pc, #44]	; (23ece88 <_Z17OBS_Relay_Publishi+0x54>)
 23ece5c:	f7f9 fb06 	bl	23e646c <_Z6OutputPKc>
  else {
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
    Output(Buffer32Bytes);
    return(false);
  }
}
 23ece60:	4628      	mov	r0, r5
 23ece62:	bd70      	pop	{r4, r5, r6, pc}
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ece64:	4909      	ldr	r1, [pc, #36]	; (23ece8c <_Z17OBS_Relay_Publishi+0x58>)
 23ece66:	e7f5      	b.n	23ece54 <_Z17OBS_Relay_Publishi+0x20>
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23ece68:	4622      	mov	r2, r4
 23ece6a:	4909      	ldr	r1, [pc, #36]	; (23ece90 <_Z17OBS_Relay_Publishi+0x5c>)
 23ece6c:	4806      	ldr	r0, [pc, #24]	; (23ece88 <_Z17OBS_Relay_Publishi+0x54>)
 23ece6e:	f00a fe29 	bl	23f7ac4 <sprintf>
    Output(Buffer32Bytes);
 23ece72:	4805      	ldr	r0, [pc, #20]	; (23ece88 <_Z17OBS_Relay_Publishi+0x54>)
 23ece74:	f7f9 fafa 	bl	23e646c <_Z6OutputPKc>
    return(false);
 23ece78:	2500      	movs	r5, #0
 23ece7a:	e7f1      	b.n	23ece60 <_Z17OBS_Relay_Publishi+0x2c>
 23ece7c:	1006a1b0 	.word	0x1006a1b0
 23ece80:	1006f128 	.word	0x1006f128
 23ece84:	023fe39d 	.word	0x023fe39d
 23ece88:	1006a287 	.word	0x1006a287
 23ece8c:	023fe3af 	.word	0x023fe3af
 23ece90:	023fe3c2 	.word	0x023fe3c2

023ece94 <_Z7INFO_Dov>:
/*
 * ======================================================================================================================
 * INFO_Do() - Get and Send System Information to Particle Cloud
 * ======================================================================================================================
 */
bool INFO_Do() {
 23ece94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ece98:	b0f5      	sub	sp, #468	; 0x1d4
  char buf[256];
  const char *comma = "";
  time_t ts = Time.now();
 23ece9a:	f00c fd12 	bl	23f98c2 <_ZN9TimeClass3nowEv>

  Output("INFO_DO()");

  SendSystemInformation = false;
 23ece9e:	2400      	movs	r4, #0
  time_t ts = Time.now();
 23ecea0:	4605      	mov	r5, r0
 23ecea2:	17c6      	asrs	r6, r0, #31
  Output("INFO_DO()");
 23ecea4:	48c4      	ldr	r0, [pc, #784]	; (23ed1b8 <_Z7INFO_Dov+0x324>)
 23ecea6:	f7f9 fae1 	bl	23e646c <_Z6OutputPKc>
  SendSystemInformation = false;
 23eceaa:	4bc4      	ldr	r3, [pc, #784]	; (23ed1bc <_Z7INFO_Dov+0x328>)

  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23eceac:	4621      	mov	r1, r4
 23eceae:	f44f 7280 	mov.w	r2, #256	; 0x100
 23eceb2:	a834      	add	r0, sp, #208	; 0xd0
  SendSystemInformation = false;
 23eceb4:	701c      	strb	r4, [r3, #0]
  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23eceb6:	f00f fdf6 	bl	23fcaa6 <memset>
  memset(msgbuf, 0, sizeof(msgbuf));  // hold the json formatted message we are building for sending.
 23eceba:	4bc1      	ldr	r3, [pc, #772]	; (23ed1c0 <_Z7INFO_Dov+0x32c>)
 23ecebc:	4621      	mov	r1, r4
 23ecebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ecec2:	4618      	mov	r0, r3
 23ecec4:	f00f fdef 	bl	23fcaa6 <memset>
        n_(0) {
 23ecec8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23ececc:	4abd      	ldr	r2, [pc, #756]	; (23ed1c4 <_Z7INFO_Dov+0x330>)
 23ecece:	9008      	str	r0, [sp, #32]

  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
  writer.beginObject();
 23eced0:	a806      	add	r0, sp, #24
 23eced2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 23eced6:	9206      	str	r2, [sp, #24]
        state_(BEGIN) {
 23eced8:	f88d 401c 	strb.w	r4, [sp, #28]
 23ecedc:	f00b fe09 	bl	23f8af2 <_ZN5spark10JSONWriter11beginObjectEv>

  writer.name("devid").value(System.deviceID());
 23ecee0:	49b9      	ldr	r1, [pc, #740]	; (23ed1c8 <_Z7INFO_Dov+0x334>)
 23ecee2:	a806      	add	r0, sp, #24
 23ecee4:	f7f8 ffee 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecee8:	4607      	mov	r7, r0
        return spark_deviceID();
 23eceea:	a820      	add	r0, sp, #128	; 0x80
 23eceec:	f00a fc9a 	bl	23f7824 <spark_deviceID>
    return value(val.c_str(), val.length());
 23ecef0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 23ecef2:	9920      	ldr	r1, [sp, #128]	; 0x80
 23ecef4:	4638      	mov	r0, r7
 23ecef6:	f00b ff05 	bl	23f8d04 <_ZN5spark10JSONWriter5valueEPKcj>
 23ecefa:	a820      	add	r0, sp, #128	; 0x80
 23ecefc:	f00c fa7b 	bl	23f93f6 <_ZN6StringD1Ev>
  writer.name("devos").value(System.version());
 23ecf00:	49b2      	ldr	r1, [pc, #712]	; (23ed1cc <_Z7INFO_Dov+0x338>)
 23ecf02:	a806      	add	r0, sp, #24
 23ecf04:	f7f8 ffde 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
        SystemVersionInfo info = {};
 23ecf08:	f04f 081c 	mov.w	r8, #28
 23ecf0c:	4607      	mov	r7, r0
 23ecf0e:	4642      	mov	r2, r8
 23ecf10:	4621      	mov	r1, r4
 23ecf12:	a820      	add	r0, sp, #128	; 0x80
 23ecf14:	f00f fdc7 	bl	23fcaa6 <memset>
        system_version_info(&info, nullptr);
 23ecf18:	4621      	mov	r1, r4
 23ecf1a:	a820      	add	r0, sp, #128	; 0x80
        info.size = sizeof(SystemVersionInfo);
 23ecf1c:	f8ad 8080 	strh.w	r8, [sp, #128]	; 0x80
        system_version_info(&info, nullptr);
 23ecf20:	f00a fbbc 	bl	23f769c <system_version_info>
        return String(info.versionString);
 23ecf24:	a922      	add	r1, sp, #136	; 0x88
 23ecf26:	a818      	add	r0, sp, #96	; 0x60
 23ecf28:	f00c fab0 	bl	23f948c <_ZN6StringC1EPK19__FlashStringHelper>
 23ecf2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23ecf2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 23ecf30:	4638      	mov	r0, r7
 23ecf32:	f00b fee7 	bl	23f8d04 <_ZN5spark10JSONWriter5valueEPKcj>
 23ecf36:	a818      	add	r0, sp, #96	; 0x60
 23ecf38:	f00c fa5d 	bl	23f93f6 <_ZN6StringD1Ev>
  writer.name("freemem").value(System.freeMemory());
 23ecf3c:	49a4      	ldr	r1, [pc, #656]	; (23ed1d0 <_Z7INFO_Dov+0x33c>)
 23ecf3e:	a806      	add	r0, sp, #24
 23ecf40:	f7f8 ffc0 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecf44:	4607      	mov	r7, r0
 23ecf46:	f00c fb0a 	bl	23f955e <_ZN11SystemClass10freeMemoryEv>
 23ecf4a:	4601      	mov	r1, r0
 23ecf4c:	4638      	mov	r0, r7
 23ecf4e:	f00b fe01 	bl	23f8b54 <_ZN5spark10JSONWriter5valueEm>
  writer.name("uptime").value(System.uptime());
 23ecf52:	49a0      	ldr	r1, [pc, #640]	; (23ed1d4 <_Z7INFO_Dov+0x340>)
 23ecf54:	a806      	add	r0, sp, #24
 23ecf56:	f7f8 ffb5 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecf5a:	4607      	mov	r7, r0
        return (hal_timer_millis(nullptr) / 1000);
 23ecf5c:	4620      	mov	r0, r4
 23ecf5e:	f009 ffd7 	bl	23f6f10 <hal_timer_millis>
 23ecf62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ecf66:	2300      	movs	r3, #0
 23ecf68:	f7f7 ff90 	bl	23e4e8c <__aeabi_uldivmod>
 23ecf6c:	4601      	mov	r1, r0
 23ecf6e:	4638      	mov	r0, r7
 23ecf70:	f00b fdde 	bl	23f8b30 <_ZN5spark10JSONWriter5valueEj>
#endif
#if PLATFORM_ID == PLATFORM_BORON
  writer.name("board").value("boron");
#endif

  sprintf (Buffer32Bytes, "%d-%02d-%02dT%02d:%02d:%02d",
 23ecf74:	4628      	mov	r0, r5
 23ecf76:	4631      	mov	r1, r6
 23ecf78:	f00c fb82 	bl	23f9680 <_ZN9TimeClass4yearEx>
 23ecf7c:	4631      	mov	r1, r6
 23ecf7e:	9005      	str	r0, [sp, #20]
 23ecf80:	4628      	mov	r0, r5
 23ecf82:	f00c fb73 	bl	23f966c <_ZN9TimeClass5monthEx>
 23ecf86:	4631      	mov	r1, r6
 23ecf88:	9004      	str	r0, [sp, #16]
 23ecf8a:	4628      	mov	r0, r5
 23ecf8c:	f00c fb66 	bl	23f965c <_ZN9TimeClass3dayEx>
 23ecf90:	4631      	mov	r1, r6
 23ecf92:	4607      	mov	r7, r0
 23ecf94:	4628      	mov	r0, r5
 23ecf96:	f00c fb49 	bl	23f962c <_ZN9TimeClass4hourEx>
 23ecf9a:	4631      	mov	r1, r6
 23ecf9c:	4680      	mov	r8, r0
 23ecf9e:	4628      	mov	r0, r5
 23ecfa0:	f00c fb4c 	bl	23f963c <_ZN9TimeClass6minuteEx>
 23ecfa4:	4631      	mov	r1, r6
 23ecfa6:	4681      	mov	r9, r0
 23ecfa8:	4628      	mov	r0, r5
 23ecfaa:	f00c fb4f 	bl	23f964c <_ZN9TimeClass6secondEx>
 23ecfae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23ecfb2:	e9cd 9002 	strd	r9, r0, [sp, #8]
 23ecfb6:	4988      	ldr	r1, [pc, #544]	; (23ed1d8 <_Z7INFO_Dov+0x344>)
 23ecfb8:	e9cd 7800 	strd	r7, r8, [sp]
 23ecfbc:	4887      	ldr	r0, [pc, #540]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ecfbe:	f00a fd81 	bl	23f7ac4 <sprintf>
    Time.year(ts), Time.month(ts), Time.day(ts),
    Time.hour(ts), Time.minute(ts), Time.second(ts));
  writer.name("at").value(Buffer32Bytes);
 23ecfc2:	4987      	ldr	r1, [pc, #540]	; (23ed1e0 <_Z7INFO_Dov+0x34c>)
 23ecfc4:	a806      	add	r0, sp, #24
 23ecfc6:	f7f8 ff7d 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecfca:	4984      	ldr	r1, [pc, #528]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ecfcc:	f7f8 feb4 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.name("ver").value(VERSION_INFO);
 23ecfd0:	4984      	ldr	r1, [pc, #528]	; (23ed1e4 <_Z7INFO_Dov+0x350>)
 23ecfd2:	a806      	add	r0, sp, #24
 23ecfd4:	f7f8 ff76 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecfd8:	4983      	ldr	r1, [pc, #524]	; (23ed1e8 <_Z7INFO_Dov+0x354>)
 23ecfda:	f7f8 fead 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("hth").value((int) SystemStatusBits);
 23ecfde:	4983      	ldr	r1, [pc, #524]	; (23ed1ec <_Z7INFO_Dov+0x358>)
 23ecfe0:	a806      	add	r0, sp, #24
 23ecfe2:	f7f8 ff6f 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecfe6:	4b82      	ldr	r3, [pc, #520]	; (23ed1f0 <_Z7INFO_Dov+0x35c>)
 23ecfe8:	6819      	ldr	r1, [r3, #0]
 23ecfea:	f00b fd8f 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23ecfee:	4622      	mov	r2, r4
 23ecff0:	4621      	mov	r1, r4
 23ecff2:	a820      	add	r0, sp, #128	; 0x80
        int reason = RESET_REASON_NONE;
 23ecff4:	9420      	str	r4, [sp, #128]	; 0x80
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23ecff6:	f009 ff0d 	bl	23f6e14 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 23ecffa:	9d20      	ldr	r5, [sp, #128]	; 0x80
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23ecffc:	4622      	mov	r2, r4
 23ecffe:	4620      	mov	r0, r4
 23ed000:	a920      	add	r1, sp, #128	; 0x80
        uint32_t data = 0;
 23ed002:	9420      	str	r4, [sp, #128]	; 0x80
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23ed004:	f009 ff06 	bl	23f6e14 <HAL_Core_Get_Last_Reset_Info>

  // Reboot/Reset Reason and data
  sprintf (Buffer32Bytes,"%d-%d", System.resetReason(), System.resetReasonData());
 23ed008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23ed00a:	462a      	mov	r2, r5
 23ed00c:	4979      	ldr	r1, [pc, #484]	; (23ed1f4 <_Z7INFO_Dov+0x360>)
 23ed00e:	4873      	ldr	r0, [pc, #460]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed010:	f00a fd58 	bl	23f7ac4 <sprintf>
  writer.name("rr").value(Buffer32Bytes);;
 23ed014:	4978      	ldr	r1, [pc, #480]	; (23ed1f8 <_Z7INFO_Dov+0x364>)
 23ed016:	a806      	add	r0, sp, #24
 23ed018:	f7f8 ff54 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed01c:	496f      	ldr	r1, [pc, #444]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed01e:	f7f8 fe8b 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
 23ed022:	223c      	movs	r2, #60	; 0x3c
 23ed024:	4975      	ldr	r1, [pc, #468]	; (23ed1fc <_Z7INFO_Dov+0x368>)
 23ed026:	486d      	ldr	r0, [pc, #436]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed028:	f00a fd4c 	bl	23f7ac4 <sprintf>
  writer.name("obsi").value(Buffer32Bytes);
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23ed02c:	4c74      	ldr	r4, [pc, #464]	; (23ed200 <_Z7INFO_Dov+0x36c>)
  writer.name("obsi").value(Buffer32Bytes);
 23ed02e:	4975      	ldr	r1, [pc, #468]	; (23ed204 <_Z7INFO_Dov+0x370>)
 23ed030:	a806      	add	r0, sp, #24
 23ed032:	f7f8 ff47 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed036:	4969      	ldr	r1, [pc, #420]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed038:	f7f8 fe7e 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23ed03c:	6822      	ldr	r2, [r4, #0]
 23ed03e:	4972      	ldr	r1, [pc, #456]	; (23ed208 <_Z7INFO_Dov+0x374>)
 23ed040:	4866      	ldr	r0, [pc, #408]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed042:	f00a fd3f 	bl	23f7ac4 <sprintf>
  writer.name("obsti").value(Buffer32Bytes);
 23ed046:	4971      	ldr	r1, [pc, #452]	; (23ed20c <_Z7INFO_Dov+0x378>)
 23ed048:	a806      	add	r0, sp, #24
 23ed04a:	f7f8 ff3b 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed04e:	4963      	ldr	r1, [pc, #396]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed050:	f7f8 fe72 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Time 2 Next Transmit in Seconds
  sprintf (Buffer32Bytes, "%ds", (int) ((obs_tx_interval * 60) - ((System.millis() - LastTransmitTime)/1000)));
 23ed054:	233c      	movs	r3, #60	; 0x3c
 23ed056:	6824      	ldr	r4, [r4, #0]
 23ed058:	435c      	muls	r4, r3
 23ed05a:	f7f8 fec3 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ed05e:	4a6c      	ldr	r2, [pc, #432]	; (23ed210 <_Z7INFO_Dov+0x37c>)
 23ed060:	e9d2 3500 	ldrd	r3, r5, [r2]
 23ed064:	1ac0      	subs	r0, r0, r3
 23ed066:	eb61 0105 	sbc.w	r1, r1, r5
 23ed06a:	2300      	movs	r3, #0
 23ed06c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ed070:	f7f7 ff0c 	bl	23e4e8c <__aeabi_uldivmod>
 23ed074:	4961      	ldr	r1, [pc, #388]	; (23ed1fc <_Z7INFO_Dov+0x368>)
 23ed076:	1a22      	subs	r2, r4, r0
 23ed078:	4858      	ldr	r0, [pc, #352]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed07a:	f00a fd23 	bl	23f7ac4 <sprintf>
  writer.name("t2nt").value(Buffer32Bytes);
 23ed07e:	4965      	ldr	r1, [pc, #404]	; (23ed214 <_Z7INFO_Dov+0x380>)
 23ed080:	a806      	add	r0, sp, #24
 23ed082:	f7f8 ff1f 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed086:	4955      	ldr	r1, [pc, #340]	; (23ed1dc <_Z7INFO_Dov+0x348>)
 23ed088:	f7f8 fe56 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Daily Reboot Countdown Timer
  writer.name("drct").value(DailyRebootCountDownTimer);
 23ed08c:	4962      	ldr	r1, [pc, #392]	; (23ed218 <_Z7INFO_Dov+0x384>)
 23ed08e:	a806      	add	r0, sp, #24
 23ed090:	f7f8 ff18 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed094:	4b61      	ldr	r3, [pc, #388]	; (23ed21c <_Z7INFO_Dov+0x388>)
 23ed096:	6819      	ldr	r1, [r3, #0]
 23ed098:	f00b fd38 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>

  // Need 2 Send File
  if (SD.exists(SD_n2s_file)) {
 23ed09c:	4960      	ldr	r1, [pc, #384]	; (23ed220 <_Z7INFO_Dov+0x38c>)
 23ed09e:	4861      	ldr	r0, [pc, #388]	; (23ed224 <_Z7INFO_Dov+0x390>)
 23ed0a0:	f7f8 ff1e 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ed0a4:	2800      	cmp	r0, #0
 23ed0a6:	f000 8368 	beq.w	23ed77a <_Z7INFO_Dov+0x8e6>
    File fp = SD.open(SD_n2s_file, FILE_WRITE);
 23ed0aa:	495e      	ldr	r1, [pc, #376]	; (23ed224 <_Z7INFO_Dov+0x390>)
 23ed0ac:	f244 2302 	movw	r3, #16898	; 0x4202
 23ed0b0:	4a5b      	ldr	r2, [pc, #364]	; (23ed220 <_Z7INFO_Dov+0x38c>)
 23ed0b2:	a820      	add	r0, sp, #128	; 0x80
 23ed0b4:	f009 f8ae 	bl	23f6214 <_ZN8FsVolume4openEPKci>
  operator bool() const { return isOpen(); }
 23ed0b8:	a824      	add	r0, sp, #144	; 0x90
 23ed0ba:	f7f8 ff8a 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
      writer.name("n2s").value(fp.size());
 23ed0be:	495a      	ldr	r1, [pc, #360]	; (23ed228 <_Z7INFO_Dov+0x394>)
    if (fp) {
 23ed0c0:	2800      	cmp	r0, #0
 23ed0c2:	f000 8352 	beq.w	23ed76a <_Z7INFO_Dov+0x8d6>
      writer.name("n2s").value(fp.size());
 23ed0c6:	a806      	add	r0, sp, #24
 23ed0c8:	f7f8 fefc 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed0cc:	4604      	mov	r4, r0
  PosType size() { return BaseFile::fileSize(); }
 23ed0ce:	a824      	add	r0, sp, #144	; 0x90
 23ed0d0:	f7f8 ff73 	bl	23e5fba <_ZNK10FsBaseFile8fileSizeEv>
 23ed0d4:	4602      	mov	r2, r0
 23ed0d6:	460b      	mov	r3, r1
 23ed0d8:	4620      	mov	r0, r4
 23ed0da:	f00b fd4d 	bl	23f8b78 <_ZN5spark10JSONWriter5valueEy>
      fp.close();
 23ed0de:	a824      	add	r0, sp, #144	; 0x90
 23ed0e0:	f008 ffbf 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
  writer.name("bcs").value((digitalRead(PWR) && !digitalRead(CHG)) ? "CHARGING" : "!CHARGING"); // Battery Charger State
#endif

#if (PLATFORM_ID == PLATFORM_BORON) || (PLATFORM_ID == PLATFORM_MSOM)
  // Power Source
  const char *ps[] = {"UNKN", "VIN", "USB_HOST", "USB_ADAPTER", "USB_OTG", "BATTERY"};
 23ed0e4:	ae0b      	add	r6, sp, #44	; 0x2c
 23ed0e6:	4634      	mov	r4, r6
 23ed0e8:	4d50      	ldr	r5, [pc, #320]	; (23ed22c <_Z7INFO_Dov+0x398>)
 23ed0ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ed0ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ed0ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 23ed0f2:	e884 0003 	stmia.w	r4, {r0, r1}
  int sps = System.powerSource();
 23ed0f6:	f7ff fb13 	bl	23ec720 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23ed0fa:	4604      	mov	r4, r0
  if ((sps>=0) && (sps<=5)) {
 23ed0fc:	2c05      	cmp	r4, #5
    writer.name("ps").value(ps[sps]);
 23ed0fe:	494c      	ldr	r1, [pc, #304]	; (23ed230 <_Z7INFO_Dov+0x39c>)
 23ed100:	a806      	add	r0, sp, #24
  if ((sps>=0) && (sps<=5)) {
 23ed102:	f200 8342 	bhi.w	23ed78a <_Z7INFO_Dov+0x8f6>
    writer.name("ps").value(ps[sps]);
 23ed106:	f7f8 fedd 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed10a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 23ed10e:	f7f8 fe13 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  else {
    writer.name("ps").value(sps);
  }

  // Battery Charge State
  const char *bs[] = {"UNKN", "!CHARGING", "CHARGING", "CHARGED", "DISCHARGING", "FAULT", "MISSING"};
 23ed112:	ae11      	add	r6, sp, #68	; 0x44
 23ed114:	4634      	mov	r4, r6
 23ed116:	4d47      	ldr	r5, [pc, #284]	; (23ed234 <_Z7INFO_Dov+0x3a0>)
 23ed118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ed11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ed11c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23ed120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  int sbs = System.batteryState();
 23ed124:	f7fd faf8 	bl	23ea718 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23ed128:	4604      	mov	r4, r0
  if ((sbs>=0) && (sbs<=6)) {
 23ed12a:	2c06      	cmp	r4, #6
    writer.name("bcs").value(bs[sbs]);     
 23ed12c:	4942      	ldr	r1, [pc, #264]	; (23ed238 <_Z7INFO_Dov+0x3a4>)
 23ed12e:	a806      	add	r0, sp, #24
  if ((sbs>=0) && (sbs<=6)) {
 23ed130:	f200 8331 	bhi.w	23ed796 <_Z7INFO_Dov+0x902>
    writer.name("bcs").value(bs[sbs]);     
 23ed134:	f7f8 fec6 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed138:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 23ed13c:	f7f8 fdfc 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
  else {
    writer.name("bcs").value(sbs);
  }
  writer.name("bpc").value(System.batteryCharge(), 1);   // Battery Percent Charge
 23ed140:	493e      	ldr	r1, [pc, #248]	; (23ed23c <_Z7INFO_Dov+0x3a8>)
 23ed142:	a806      	add	r0, sp, #24
 23ed144:	f7f8 febe 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed148:	4604      	mov	r4, r0
 23ed14a:	f7fd fad3 	bl	23ea6f4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23ed14e:	ee10 0a10 	vmov	r0, s0
 23ed152:	f7f7 f99d 	bl	23e4490 <__aeabi_f2d>
 23ed156:	ec41 0b10 	vmov	d0, r0, r1
 23ed15a:	2101      	movs	r1, #1
 23ed15c:	4620      	mov	r0, r4
 23ed15e:	f00b fd1f 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>
  sprintf (Buffer32Bytes, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  writer.name("bssid").value(Buffer32Bytes);
#endif

#if (PLATFORM_ID == PLATFORM_BORON) || (PLATFORM_ID == PLATFORM_MSOM)
  CellularSignal sig = Cellular.RSSI();
 23ed162:	4937      	ldr	r1, [pc, #220]	; (23ed240 <_Z7INFO_Dov+0x3ac>)
 23ed164:	a818      	add	r0, sp, #96	; 0x60
 23ed166:	f00a fdfd 	bl	23f7d64 <_ZN5spark13CellularClass4RSSIEv>
  writer.name("css").value(sig.getStrength(), 4);
 23ed16a:	4936      	ldr	r1, [pc, #216]	; (23ed244 <_Z7INFO_Dov+0x3b0>)
 23ed16c:	a806      	add	r0, sp, #24
 23ed16e:	f7f8 fea9 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed172:	4604      	mov	r4, r0
 23ed174:	a818      	add	r0, sp, #96	; 0x60
 23ed176:	f00a fe53 	bl	23f7e20 <_ZNK14CellularSignal11getStrengthEv>
 23ed17a:	ee10 0a10 	vmov	r0, s0
 23ed17e:	f7f7 f987 	bl	23e4490 <__aeabi_f2d>
 23ed182:	ec41 0b10 	vmov	d0, r0, r1
 23ed186:	2104      	movs	r1, #4
 23ed188:	4620      	mov	r0, r4
 23ed18a:	f00b fd09 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>
  writer.name("csq").value(sig.getQuality(), 4);
 23ed18e:	492e      	ldr	r1, [pc, #184]	; (23ed248 <_Z7INFO_Dov+0x3b4>)
 23ed190:	a806      	add	r0, sp, #24
 23ed192:	f7f8 fe97 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed196:	4604      	mov	r4, r0
 23ed198:	a818      	add	r0, sp, #96	; 0x60
 23ed19a:	f00a fe71 	bl	23f7e80 <_ZNK14CellularSignal10getQualityEv>
 23ed19e:	ee10 0a10 	vmov	r0, s0
 23ed1a2:	f7f7 f975 	bl	23e4490 <__aeabi_f2d>
 23ed1a6:	ec41 0b10 	vmov	d0, r0, r1
 23ed1aa:	2104      	movs	r1, #4
 23ed1ac:	4620      	mov	r0, r4
 23ed1ae:	f00b fcf7 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>
  writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
 23ed1b2:	4926      	ldr	r1, [pc, #152]	; (23ed24c <_Z7INFO_Dov+0x3b8>)
 23ed1b4:	a806      	add	r0, sp, #24
 23ed1b6:	e04b      	b.n	23ed250 <_Z7INFO_Dov+0x3bc>
 23ed1b8:	023fe3fb 	.word	0x023fe3fb
 23ed1bc:	1006a175 	.word	0x1006a175
 23ed1c0:	1006f128 	.word	0x1006f128
 23ed1c4:	023ff9e8 	.word	0x023ff9e8
 23ed1c8:	023fe405 	.word	0x023fe405
 23ed1cc:	023fe40b 	.word	0x023fe40b
 23ed1d0:	023fe411 	.word	0x023fe411
 23ed1d4:	023fe419 	.word	0x023fe419
 23ed1d8:	023fd213 	.word	0x023fd213
 23ed1dc:	1006a287 	.word	0x1006a287
 23ed1e0:	023fdb5e 	.word	0x023fdb5e
 23ed1e4:	023fe420 	.word	0x023fe420
 23ed1e8:	023fe424 	.word	0x023fe424
 23ed1ec:	023fdb65 	.word	0x023fdb65
 23ed1f0:	1006a178 	.word	0x1006a178
 23ed1f4:	023fe430 	.word	0x023fe430
 23ed1f8:	023fe436 	.word	0x023fe436
 23ed1fc:	023fe439 	.word	0x023fe439
 23ed200:	1006a1a8 	.word	0x1006a1a8
 23ed204:	023fe43d 	.word	0x023fe43d
 23ed208:	023fe442 	.word	0x023fe442
 23ed20c:	023fe446 	.word	0x023fe446
 23ed210:	1006a2c0 	.word	0x1006a2c0
 23ed214:	023fe44c 	.word	0x023fe44c
 23ed218:	023fe451 	.word	0x023fe451
 23ed21c:	1006a2a8 	.word	0x1006a2a8
 23ed220:	1006a15f 	.word	0x1006a15f
 23ed224:	1006a2d0 	.word	0x1006a2d0
 23ed228:	023fe456 	.word	0x023fe456
 23ed22c:	023fcf1c 	.word	0x023fcf1c
 23ed230:	023fe45a 	.word	0x023fe45a
 23ed234:	023fcf34 	.word	0x023fcf34
 23ed238:	023fe1b8 	.word	0x023fe1b8
 23ed23c:	023fe1bc 	.word	0x023fe1bc
 23ed240:	1007aeb8 	.word	0x1007aeb8
 23ed244:	023fdb61 	.word	0x023fdb61
 23ed248:	023fe45d 	.word	0x023fe45d
 23ed24c:	023fe461 	.word	0x023fe461
 23ed250:	f7f8 fe38 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed254:	499b      	ldr	r1, [pc, #620]	; (23ed4c4 <_Z7INFO_Dov+0x630>)
 23ed256:	f7f8 fd6f 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
#endif

#if PLATFORM_ID == PLATFORM_MSOM
  // Particle Muon on board temperature sensor 
  if (PMTS_exists) {
 23ed25a:	4b9b      	ldr	r3, [pc, #620]	; (23ed4c8 <_Z7INFO_Dov+0x634>)
    writer.name("pmts").value(ptms_readtempc(), 2);
 23ed25c:	499b      	ldr	r1, [pc, #620]	; (23ed4cc <_Z7INFO_Dov+0x638>)
  if (PMTS_exists) {
 23ed25e:	781b      	ldrb	r3, [r3, #0]
    writer.name("pmts").value(ptms_readtempc(), 2);
 23ed260:	a806      	add	r0, sp, #24
  if (PMTS_exists) {
 23ed262:	2b00      	cmp	r3, #0
 23ed264:	f000 829d 	beq.w	23ed7a2 <_Z7INFO_Dov+0x90e>
    writer.name("pmts").value(ptms_readtempc(), 2);
 23ed268:	f7f8 fe2c 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed26c:	4604      	mov	r4, r0
 23ed26e:	f7fa fe2b 	bl	23e7ec8 <_Z14ptms_readtempcv>
 23ed272:	ee10 0a10 	vmov	r0, s0
 23ed276:	f7f7 f90b 	bl	23e4490 <__aeabi_f2d>
 23ed27a:	ec41 0b10 	vmov	d0, r0, r1
 23ed27e:	2102      	movs	r1, #2
 23ed280:	4620      	mov	r0, r4
 23ed282:	f00b fc8d 	bl	23f8ba0 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("pmts").value("NF");
  }
#endif

  // How Pin A4 is Configured
  if (A4_State == A4_STATE_DISTANCE) {
 23ed286:	4b92      	ldr	r3, [pc, #584]	; (23ed4d0 <_Z7INFO_Dov+0x63c>)
 23ed288:	681b      	ldr	r3, [r3, #0]
 23ed28a:	2b01      	cmp	r3, #1
 23ed28c:	f040 8293 	bne.w	23ed7b6 <_Z7INFO_Dov+0x922>
    if (dg_adjustment == 1.25) {
 23ed290:	4b90      	ldr	r3, [pc, #576]	; (23ed4d4 <_Z7INFO_Dov+0x640>)
 23ed292:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
 23ed296:	ed93 7a00 	vldr	s14, [r3]
 23ed29a:	eeb4 7a67 	vcmp.f32	s14, s15
 23ed29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      writer.name("a4").value("DIST 5M");
 23ed2a2:	498d      	ldr	r1, [pc, #564]	; (23ed4d8 <_Z7INFO_Dov+0x644>)
 23ed2a4:	a806      	add	r0, sp, #24
    if (dg_adjustment == 1.25) {
 23ed2a6:	f040 8282 	bne.w	23ed7ae <_Z7INFO_Dov+0x91a>
      writer.name("a4").value("DIST 5M");
 23ed2aa:	f7f8 fe0b 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed2ae:	498b      	ldr	r1, [pc, #556]	; (23ed4dc <_Z7INFO_Dov+0x648>)
  }
  else if (A4_State == A4_STATE_RAW){
    writer.name("a4").value("RAW");
  }
  else {
    writer.name("a4").value("NS"); // Not Set
 23ed2b0:	f7f8 fd42 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  if (A5_State == A5_STATE_RAW){
 23ed2b4:	4b8a      	ldr	r3, [pc, #552]	; (23ed4e0 <_Z7INFO_Dov+0x64c>)
    writer.name("a5").value("RAW");
 23ed2b6:	498b      	ldr	r1, [pc, #556]	; (23ed4e4 <_Z7INFO_Dov+0x650>)
  if (A5_State == A5_STATE_RAW){
 23ed2b8:	681b      	ldr	r3, [r3, #0]
    writer.name("a5").value("RAW");
 23ed2ba:	a806      	add	r0, sp, #24
  if (A5_State == A5_STATE_RAW){
 23ed2bc:	2b01      	cmp	r3, #1
 23ed2be:	f040 828c 	bne.w	23ed7da <_Z7INFO_Dov+0x946>
    writer.name("a5").value("RAW");
 23ed2c2:	f7f8 fdff 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed2c6:	4988      	ldr	r1, [pc, #544]	; (23ed4e8 <_Z7INFO_Dov+0x654>)
  }
  else {
    writer.name("a5").value("NS"); // Not Set
 23ed2c8:	f7f8 fd36 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  // Sensors
  if (BMX_1_exists) {
 23ed2cc:	4b87      	ldr	r3, [pc, #540]	; (23ed4ec <_Z7INFO_Dov+0x658>)
 23ed2ce:	781b      	ldrb	r3, [r3, #0]
 23ed2d0:	2b00      	cmp	r3, #0
 23ed2d2:	f000 8286 	beq.w	23ed7e2 <_Z7INFO_Dov+0x94e>
    sprintf (buf+strlen(buf), "%sBMX1(%s)", comma, bmxtype[BMX_1_type]);
 23ed2d6:	a834      	add	r0, sp, #208	; 0xd0
 23ed2d8:	f7f7 ff72 	bl	23e51c0 <strlen>
 23ed2dc:	4b84      	ldr	r3, [pc, #528]	; (23ed4f0 <_Z7INFO_Dov+0x65c>)
 23ed2de:	ac34      	add	r4, sp, #208	; 0xd0
 23ed2e0:	781a      	ldrb	r2, [r3, #0]
 23ed2e2:	4b84      	ldr	r3, [pc, #528]	; (23ed4f4 <_Z7INFO_Dov+0x660>)
 23ed2e4:	4420      	add	r0, r4
 23ed2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ed2ea:	4983      	ldr	r1, [pc, #524]	; (23ed4f8 <_Z7INFO_Dov+0x664>)
 23ed2ec:	4a83      	ldr	r2, [pc, #524]	; (23ed4fc <_Z7INFO_Dov+0x668>)
 23ed2ee:	f00a fbe9 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed2f2:	4c83      	ldr	r4, [pc, #524]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (BMX_2_exists) {
 23ed2f4:	4b83      	ldr	r3, [pc, #524]	; (23ed504 <_Z7INFO_Dov+0x670>)
 23ed2f6:	781b      	ldrb	r3, [r3, #0]
 23ed2f8:	b173      	cbz	r3, 23ed318 <_Z7INFO_Dov+0x484>
    sprintf (buf+strlen(buf), "%sBMX2(%s)", comma, bmxtype[BMX_2_type]);
 23ed2fa:	a834      	add	r0, sp, #208	; 0xd0
 23ed2fc:	f7f7 ff60 	bl	23e51c0 <strlen>
 23ed300:	4b81      	ldr	r3, [pc, #516]	; (23ed508 <_Z7INFO_Dov+0x674>)
 23ed302:	4982      	ldr	r1, [pc, #520]	; (23ed50c <_Z7INFO_Dov+0x678>)
 23ed304:	781a      	ldrb	r2, [r3, #0]
 23ed306:	4b7b      	ldr	r3, [pc, #492]	; (23ed4f4 <_Z7INFO_Dov+0x660>)
 23ed308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ed30c:	4622      	mov	r2, r4
 23ed30e:	ac34      	add	r4, sp, #208	; 0xd0
 23ed310:	4420      	add	r0, r4
 23ed312:	f00a fbd7 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed316:	4c7a      	ldr	r4, [pc, #488]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (MCP_1_exists) {
 23ed318:	4b7d      	ldr	r3, [pc, #500]	; (23ed510 <_Z7INFO_Dov+0x67c>)
 23ed31a:	781b      	ldrb	r3, [r3, #0]
 23ed31c:	b14b      	cbz	r3, 23ed332 <_Z7INFO_Dov+0x49e>
    sprintf (buf+strlen(buf), "%sMCP1", comma);
 23ed31e:	a834      	add	r0, sp, #208	; 0xd0
 23ed320:	f7f7 ff4e 	bl	23e51c0 <strlen>
 23ed324:	ab34      	add	r3, sp, #208	; 0xd0
 23ed326:	4622      	mov	r2, r4
 23ed328:	497a      	ldr	r1, [pc, #488]	; (23ed514 <_Z7INFO_Dov+0x680>)
 23ed32a:	4418      	add	r0, r3
 23ed32c:	f00a fbca 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed330:	4c73      	ldr	r4, [pc, #460]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (MCP_2_exists) {
 23ed332:	4b79      	ldr	r3, [pc, #484]	; (23ed518 <_Z7INFO_Dov+0x684>)
 23ed334:	781b      	ldrb	r3, [r3, #0]
 23ed336:	b14b      	cbz	r3, 23ed34c <_Z7INFO_Dov+0x4b8>
    sprintf (buf+strlen(buf), "%sMCP2", comma);
 23ed338:	a834      	add	r0, sp, #208	; 0xd0
 23ed33a:	f7f7 ff41 	bl	23e51c0 <strlen>
 23ed33e:	ab34      	add	r3, sp, #208	; 0xd0
 23ed340:	4622      	mov	r2, r4
 23ed342:	4976      	ldr	r1, [pc, #472]	; (23ed51c <_Z7INFO_Dov+0x688>)
 23ed344:	4418      	add	r0, r3
 23ed346:	f00a fbbd 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed34a:	4c6d      	ldr	r4, [pc, #436]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (MCP_3_exists) {
 23ed34c:	4d74      	ldr	r5, [pc, #464]	; (23ed520 <_Z7INFO_Dov+0x68c>)
 23ed34e:	782b      	ldrb	r3, [r5, #0]
 23ed350:	b14b      	cbz	r3, 23ed366 <_Z7INFO_Dov+0x4d2>
    sprintf (buf+strlen(buf), "%sMCP3/gt1", comma);
 23ed352:	a834      	add	r0, sp, #208	; 0xd0
 23ed354:	f7f7 ff34 	bl	23e51c0 <strlen>
 23ed358:	ab34      	add	r3, sp, #208	; 0xd0
 23ed35a:	4622      	mov	r2, r4
 23ed35c:	4971      	ldr	r1, [pc, #452]	; (23ed524 <_Z7INFO_Dov+0x690>)
 23ed35e:	4418      	add	r0, r3
 23ed360:	f00a fbb0 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed364:	4c66      	ldr	r4, [pc, #408]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (MCP_4_exists) {
 23ed366:	4b70      	ldr	r3, [pc, #448]	; (23ed528 <_Z7INFO_Dov+0x694>)
 23ed368:	781b      	ldrb	r3, [r3, #0]
 23ed36a:	b14b      	cbz	r3, 23ed380 <_Z7INFO_Dov+0x4ec>
    sprintf (buf+strlen(buf), "%sMCP4/gt2", comma);
 23ed36c:	a834      	add	r0, sp, #208	; 0xd0
 23ed36e:	f7f7 ff27 	bl	23e51c0 <strlen>
 23ed372:	ab34      	add	r3, sp, #208	; 0xd0
 23ed374:	4622      	mov	r2, r4
 23ed376:	496d      	ldr	r1, [pc, #436]	; (23ed52c <_Z7INFO_Dov+0x698>)
 23ed378:	4418      	add	r0, r3
 23ed37a:	f00a fba3 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed37e:	4c60      	ldr	r4, [pc, #384]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (SHT_1_exists) {
 23ed380:	4b6b      	ldr	r3, [pc, #428]	; (23ed530 <_Z7INFO_Dov+0x69c>)
 23ed382:	781b      	ldrb	r3, [r3, #0]
 23ed384:	b14b      	cbz	r3, 23ed39a <_Z7INFO_Dov+0x506>
    sprintf (buf+strlen(buf), "%sSHT1", comma);
 23ed386:	a834      	add	r0, sp, #208	; 0xd0
 23ed388:	f7f7 ff1a 	bl	23e51c0 <strlen>
 23ed38c:	ab34      	add	r3, sp, #208	; 0xd0
 23ed38e:	4622      	mov	r2, r4
 23ed390:	4968      	ldr	r1, [pc, #416]	; (23ed534 <_Z7INFO_Dov+0x6a0>)
 23ed392:	4418      	add	r0, r3
 23ed394:	f00a fb96 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed398:	4c59      	ldr	r4, [pc, #356]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (SHT_2_exists) {
 23ed39a:	4b67      	ldr	r3, [pc, #412]	; (23ed538 <_Z7INFO_Dov+0x6a4>)
 23ed39c:	781b      	ldrb	r3, [r3, #0]
 23ed39e:	b14b      	cbz	r3, 23ed3b4 <_Z7INFO_Dov+0x520>
    sprintf (buf+strlen(buf), "%sSHT2", comma);
 23ed3a0:	a834      	add	r0, sp, #208	; 0xd0
 23ed3a2:	f7f7 ff0d 	bl	23e51c0 <strlen>
 23ed3a6:	ab34      	add	r3, sp, #208	; 0xd0
 23ed3a8:	4622      	mov	r2, r4
 23ed3aa:	4964      	ldr	r1, [pc, #400]	; (23ed53c <_Z7INFO_Dov+0x6a8>)
 23ed3ac:	4418      	add	r0, r3
 23ed3ae:	f00a fb89 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed3b2:	4c53      	ldr	r4, [pc, #332]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (HDC_1_exists) {
 23ed3b4:	4b62      	ldr	r3, [pc, #392]	; (23ed540 <_Z7INFO_Dov+0x6ac>)
 23ed3b6:	781b      	ldrb	r3, [r3, #0]
 23ed3b8:	b14b      	cbz	r3, 23ed3ce <_Z7INFO_Dov+0x53a>
    sprintf (buf+strlen(buf), "%sHDC1", comma);
 23ed3ba:	a834      	add	r0, sp, #208	; 0xd0
 23ed3bc:	f7f7 ff00 	bl	23e51c0 <strlen>
 23ed3c0:	ab34      	add	r3, sp, #208	; 0xd0
 23ed3c2:	4622      	mov	r2, r4
 23ed3c4:	495f      	ldr	r1, [pc, #380]	; (23ed544 <_Z7INFO_Dov+0x6b0>)
 23ed3c6:	4418      	add	r0, r3
 23ed3c8:	f00a fb7c 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed3cc:	4c4c      	ldr	r4, [pc, #304]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (HDC_2_exists) {
 23ed3ce:	4b5e      	ldr	r3, [pc, #376]	; (23ed548 <_Z7INFO_Dov+0x6b4>)
 23ed3d0:	781b      	ldrb	r3, [r3, #0]
 23ed3d2:	b14b      	cbz	r3, 23ed3e8 <_Z7INFO_Dov+0x554>
    sprintf (buf+strlen(buf), "%sHDC2", comma);
 23ed3d4:	a834      	add	r0, sp, #208	; 0xd0
 23ed3d6:	f7f7 fef3 	bl	23e51c0 <strlen>
 23ed3da:	ab34      	add	r3, sp, #208	; 0xd0
 23ed3dc:	4622      	mov	r2, r4
 23ed3de:	495b      	ldr	r1, [pc, #364]	; (23ed54c <_Z7INFO_Dov+0x6b8>)
 23ed3e0:	4418      	add	r0, r3
 23ed3e2:	f00a fb6f 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed3e6:	4c46      	ldr	r4, [pc, #280]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (LPS_1_exists) {
 23ed3e8:	4b59      	ldr	r3, [pc, #356]	; (23ed550 <_Z7INFO_Dov+0x6bc>)
 23ed3ea:	781b      	ldrb	r3, [r3, #0]
 23ed3ec:	b14b      	cbz	r3, 23ed402 <_Z7INFO_Dov+0x56e>
    sprintf (buf+strlen(buf), "%sLPS1", comma);
 23ed3ee:	a834      	add	r0, sp, #208	; 0xd0
 23ed3f0:	f7f7 fee6 	bl	23e51c0 <strlen>
 23ed3f4:	ab34      	add	r3, sp, #208	; 0xd0
 23ed3f6:	4622      	mov	r2, r4
 23ed3f8:	4956      	ldr	r1, [pc, #344]	; (23ed554 <_Z7INFO_Dov+0x6c0>)
 23ed3fa:	4418      	add	r0, r3
 23ed3fc:	f00a fb62 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed400:	4c3f      	ldr	r4, [pc, #252]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (LPS_2_exists) {
 23ed402:	4b55      	ldr	r3, [pc, #340]	; (23ed558 <_Z7INFO_Dov+0x6c4>)
 23ed404:	781b      	ldrb	r3, [r3, #0]
 23ed406:	b14b      	cbz	r3, 23ed41c <_Z7INFO_Dov+0x588>
    sprintf (buf+strlen(buf), "%sLPS2", comma);
 23ed408:	a834      	add	r0, sp, #208	; 0xd0
 23ed40a:	f7f7 fed9 	bl	23e51c0 <strlen>
 23ed40e:	ab34      	add	r3, sp, #208	; 0xd0
 23ed410:	4622      	mov	r2, r4
 23ed412:	4952      	ldr	r1, [pc, #328]	; (23ed55c <_Z7INFO_Dov+0x6c8>)
 23ed414:	4418      	add	r0, r3
 23ed416:	f00a fb55 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed41a:	4c39      	ldr	r4, [pc, #228]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (HIH8_exists) {
 23ed41c:	4b50      	ldr	r3, [pc, #320]	; (23ed560 <_Z7INFO_Dov+0x6cc>)
 23ed41e:	781b      	ldrb	r3, [r3, #0]
 23ed420:	b14b      	cbz	r3, 23ed436 <_Z7INFO_Dov+0x5a2>
    sprintf (buf+strlen(buf), "%sHIH8", comma);
 23ed422:	a834      	add	r0, sp, #208	; 0xd0
 23ed424:	f7f7 fecc 	bl	23e51c0 <strlen>
 23ed428:	ab34      	add	r3, sp, #208	; 0xd0
 23ed42a:	4622      	mov	r2, r4
 23ed42c:	494d      	ldr	r1, [pc, #308]	; (23ed564 <_Z7INFO_Dov+0x6d0>)
 23ed42e:	4418      	add	r0, r3
 23ed430:	f00a fb48 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed434:	4c32      	ldr	r4, [pc, #200]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (SI1145_exists) {
 23ed436:	4b4c      	ldr	r3, [pc, #304]	; (23ed568 <_Z7INFO_Dov+0x6d4>)
 23ed438:	781b      	ldrb	r3, [r3, #0]
 23ed43a:	b14b      	cbz	r3, 23ed450 <_Z7INFO_Dov+0x5bc>
    sprintf (buf+strlen(buf), "%sSI", comma);
 23ed43c:	a834      	add	r0, sp, #208	; 0xd0
 23ed43e:	f7f7 febf 	bl	23e51c0 <strlen>
 23ed442:	ab34      	add	r3, sp, #208	; 0xd0
 23ed444:	4622      	mov	r2, r4
 23ed446:	4949      	ldr	r1, [pc, #292]	; (23ed56c <_Z7INFO_Dov+0x6d8>)
 23ed448:	4418      	add	r0, r3
 23ed44a:	f00a fb3b 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed44e:	4c2c      	ldr	r4, [pc, #176]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (VEML7700_exists) {
 23ed450:	4b47      	ldr	r3, [pc, #284]	; (23ed570 <_Z7INFO_Dov+0x6dc>)
 23ed452:	781b      	ldrb	r3, [r3, #0]
 23ed454:	b14b      	cbz	r3, 23ed46a <_Z7INFO_Dov+0x5d6>
    sprintf (buf+strlen(buf), "%sVEML", comma);
 23ed456:	a834      	add	r0, sp, #208	; 0xd0
 23ed458:	f7f7 feb2 	bl	23e51c0 <strlen>
 23ed45c:	ab34      	add	r3, sp, #208	; 0xd0
 23ed45e:	4622      	mov	r2, r4
 23ed460:	4944      	ldr	r1, [pc, #272]	; (23ed574 <_Z7INFO_Dov+0x6e0>)
 23ed462:	4418      	add	r0, r3
 23ed464:	f00a fb2e 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed468:	4c25      	ldr	r4, [pc, #148]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (BLX_exists) {
 23ed46a:	4b43      	ldr	r3, [pc, #268]	; (23ed578 <_Z7INFO_Dov+0x6e4>)
 23ed46c:	781b      	ldrb	r3, [r3, #0]
 23ed46e:	b14b      	cbz	r3, 23ed484 <_Z7INFO_Dov+0x5f0>
    sprintf (buf+strlen(buf), "%sBLX", comma);
 23ed470:	a834      	add	r0, sp, #208	; 0xd0
 23ed472:	f7f7 fea5 	bl	23e51c0 <strlen>
 23ed476:	ab34      	add	r3, sp, #208	; 0xd0
 23ed478:	4622      	mov	r2, r4
 23ed47a:	4940      	ldr	r1, [pc, #256]	; (23ed57c <_Z7INFO_Dov+0x6e8>)
 23ed47c:	4418      	add	r0, r3
 23ed47e:	f00a fb21 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed482:	4c1f      	ldr	r4, [pc, #124]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (AS5600_exists) {
 23ed484:	4b3e      	ldr	r3, [pc, #248]	; (23ed580 <_Z7INFO_Dov+0x6ec>)
 23ed486:	781b      	ldrb	r3, [r3, #0]
 23ed488:	b14b      	cbz	r3, 23ed49e <_Z7INFO_Dov+0x60a>
    sprintf (buf+strlen(buf), "%sAS5600", comma);
 23ed48a:	a834      	add	r0, sp, #208	; 0xd0
 23ed48c:	f7f7 fe98 	bl	23e51c0 <strlen>
 23ed490:	ab34      	add	r3, sp, #208	; 0xd0
 23ed492:	4622      	mov	r2, r4
 23ed494:	493b      	ldr	r1, [pc, #236]	; (23ed584 <_Z7INFO_Dov+0x6f0>)
 23ed496:	4418      	add	r0, r3
 23ed498:	f00a fb14 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed49c:	4c18      	ldr	r4, [pc, #96]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (TLW_exists) {
 23ed49e:	4b3a      	ldr	r3, [pc, #232]	; (23ed588 <_Z7INFO_Dov+0x6f4>)
 23ed4a0:	781b      	ldrb	r3, [r3, #0]
 23ed4a2:	b14b      	cbz	r3, 23ed4b8 <_Z7INFO_Dov+0x624>
    sprintf (buf+strlen(buf), "%sTLW", comma);
 23ed4a4:	a834      	add	r0, sp, #208	; 0xd0
 23ed4a6:	f7f7 fe8b 	bl	23e51c0 <strlen>
 23ed4aa:	ab34      	add	r3, sp, #208	; 0xd0
 23ed4ac:	4622      	mov	r2, r4
 23ed4ae:	4937      	ldr	r1, [pc, #220]	; (23ed58c <_Z7INFO_Dov+0x6f8>)
 23ed4b0:	4418      	add	r0, r3
 23ed4b2:	f00a fb07 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed4b6:	4c12      	ldr	r4, [pc, #72]	; (23ed500 <_Z7INFO_Dov+0x66c>)
  }
  if (TSM_exists) {
 23ed4b8:	4b35      	ldr	r3, [pc, #212]	; (23ed590 <_Z7INFO_Dov+0x6fc>)
 23ed4ba:	781b      	ldrb	r3, [r3, #0]
 23ed4bc:	2b00      	cmp	r3, #0
 23ed4be:	d073      	beq.n	23ed5a8 <_Z7INFO_Dov+0x714>
 23ed4c0:	e068      	b.n	23ed594 <_Z7INFO_Dov+0x700>
 23ed4c2:	bf00      	nop
 23ed4c4:	1006ae9c 	.word	0x1006ae9c
 23ed4c8:	1006a2cd 	.word	0x1006a2cd
 23ed4cc:	023fe305 	.word	0x023fe305
 23ed4d0:	1006a25c 	.word	0x1006a25c
 23ed4d4:	1006a1a0 	.word	0x1006a1a0
 23ed4d8:	023fe466 	.word	0x023fe466
 23ed4dc:	023fe469 	.word	0x023fe469
 23ed4e0:	1006a260 	.word	0x1006a260
 23ed4e4:	023fe481 	.word	0x023fe481
 23ed4e8:	023fddb9 	.word	0x023fddb9
 23ed4ec:	1006a282 	.word	0x1006a282
 23ed4f0:	1006a283 	.word	0x1006a283
 23ed4f4:	1006a17c 	.word	0x1006a17c
 23ed4f8:	023fe484 	.word	0x023fe484
 23ed4fc:	023fe708 	.word	0x023fe708
 23ed500:	023fda47 	.word	0x023fda47
 23ed504:	1006a285 	.word	0x1006a285
 23ed508:	1006a286 	.word	0x1006a286
 23ed50c:	023fe48f 	.word	0x023fe48f
 23ed510:	1006a2c8 	.word	0x1006a2c8
 23ed514:	023fe49a 	.word	0x023fe49a
 23ed518:	1006a2c9 	.word	0x1006a2c9
 23ed51c:	023fe4a1 	.word	0x023fe4a1
 23ed520:	1006a2ca 	.word	0x1006a2ca
 23ed524:	023fe4a8 	.word	0x023fe4a8
 23ed528:	1006a2cb 	.word	0x1006a2cb
 23ed52c:	023fe4b3 	.word	0x023fe4b3
 23ed530:	1006a7d0 	.word	0x1006a7d0
 23ed534:	023fe4be 	.word	0x023fe4be
 23ed538:	1006a7d1 	.word	0x1006a7d1
 23ed53c:	023fe4c5 	.word	0x023fe4c5
 23ed540:	1006a2ac 	.word	0x1006a2ac
 23ed544:	023fe4cc 	.word	0x023fe4cc
 23ed548:	1006a2ad 	.word	0x1006a2ad
 23ed54c:	023fe4d3 	.word	0x023fe4d3
 23ed550:	1006a2b2 	.word	0x1006a2b2
 23ed554:	023fe4da 	.word	0x023fe4da
 23ed558:	1006a2b3 	.word	0x1006a2b3
 23ed55c:	023fe4e1 	.word	0x023fe4e1
 23ed560:	1006a2ae 	.word	0x1006a2ae
 23ed564:	023fe4e8 	.word	0x023fe4e8
 23ed568:	1006a7d2 	.word	0x1006a7d2
 23ed56c:	023fe4ef 	.word	0x023fe4ef
 23ed570:	1006a7e4 	.word	0x1006a7e4
 23ed574:	023fe4f4 	.word	0x023fe4f4
 23ed578:	1006a280 	.word	0x1006a280
 23ed57c:	023fe4fb 	.word	0x023fe4fb
 23ed580:	1006a100 	.word	0x1006a100
 23ed584:	023fe501 	.word	0x023fe501
 23ed588:	1006a7e0 	.word	0x1006a7e0
 23ed58c:	023fe50a 	.word	0x023fe50a
 23ed590:	1006a7e2 	.word	0x1006a7e2
    sprintf (buf+strlen(buf), "%sTSM", comma);
 23ed594:	a834      	add	r0, sp, #208	; 0xd0
 23ed596:	f7f7 fe13 	bl	23e51c0 <strlen>
 23ed59a:	ab34      	add	r3, sp, #208	; 0xd0
 23ed59c:	4622      	mov	r2, r4
 23ed59e:	499e      	ldr	r1, [pc, #632]	; (23ed818 <_Z7INFO_Dov+0x984>)
 23ed5a0:	4418      	add	r0, r3
 23ed5a2:	f00a fa8f 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed5a6:	4c9d      	ldr	r4, [pc, #628]	; (23ed81c <_Z7INFO_Dov+0x988>)
  }
  if (TMSM_exists) {
 23ed5a8:	4b9d      	ldr	r3, [pc, #628]	; (23ed820 <_Z7INFO_Dov+0x98c>)
 23ed5aa:	781b      	ldrb	r3, [r3, #0]
 23ed5ac:	b14b      	cbz	r3, 23ed5c2 <_Z7INFO_Dov+0x72e>
    sprintf (buf+strlen(buf), "%sTMSM", comma);
 23ed5ae:	a834      	add	r0, sp, #208	; 0xd0
 23ed5b0:	f7f7 fe06 	bl	23e51c0 <strlen>
 23ed5b4:	ab34      	add	r3, sp, #208	; 0xd0
 23ed5b6:	4622      	mov	r2, r4
 23ed5b8:	499a      	ldr	r1, [pc, #616]	; (23ed824 <_Z7INFO_Dov+0x990>)
 23ed5ba:	4418      	add	r0, r3
 23ed5bc:	f00a fa82 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed5c0:	4c96      	ldr	r4, [pc, #600]	; (23ed81c <_Z7INFO_Dov+0x988>)
  }
  if (HI_exists) {
 23ed5c2:	4b99      	ldr	r3, [pc, #612]	; (23ed828 <_Z7INFO_Dov+0x994>)
 23ed5c4:	781b      	ldrb	r3, [r3, #0]
 23ed5c6:	b14b      	cbz	r3, 23ed5dc <_Z7INFO_Dov+0x748>
    sprintf (buf+strlen(buf), "%sHI", comma);
 23ed5c8:	a834      	add	r0, sp, #208	; 0xd0
 23ed5ca:	f7f7 fdf9 	bl	23e51c0 <strlen>
 23ed5ce:	ab34      	add	r3, sp, #208	; 0xd0
 23ed5d0:	4622      	mov	r2, r4
 23ed5d2:	4996      	ldr	r1, [pc, #600]	; (23ed82c <_Z7INFO_Dov+0x998>)
 23ed5d4:	4418      	add	r0, r3
 23ed5d6:	f00a fa75 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed5da:	4c90      	ldr	r4, [pc, #576]	; (23ed81c <_Z7INFO_Dov+0x988>)
  }
  if (WBT_exists) {
 23ed5dc:	4b94      	ldr	r3, [pc, #592]	; (23ed830 <_Z7INFO_Dov+0x99c>)
 23ed5de:	781b      	ldrb	r3, [r3, #0]
 23ed5e0:	b14b      	cbz	r3, 23ed5f6 <_Z7INFO_Dov+0x762>
    sprintf (buf+strlen(buf), "%sWBT", comma);
 23ed5e2:	a834      	add	r0, sp, #208	; 0xd0
 23ed5e4:	f7f7 fdec 	bl	23e51c0 <strlen>
 23ed5e8:	ab34      	add	r3, sp, #208	; 0xd0
 23ed5ea:	4622      	mov	r2, r4
 23ed5ec:	4991      	ldr	r1, [pc, #580]	; (23ed834 <_Z7INFO_Dov+0x9a0>)
 23ed5ee:	4418      	add	r0, r3
 23ed5f0:	f00a fa68 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed5f4:	4c89      	ldr	r4, [pc, #548]	; (23ed81c <_Z7INFO_Dov+0x988>)
  }
  if (WBGT_exists) {
 23ed5f6:	4b90      	ldr	r3, [pc, #576]	; (23ed838 <_Z7INFO_Dov+0x9a4>)
 23ed5f8:	781b      	ldrb	r3, [r3, #0]
 23ed5fa:	b16b      	cbz	r3, 23ed618 <_Z7INFO_Dov+0x784>
    if (MCP_3_exists) {
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ed5fc:	a834      	add	r0, sp, #208	; 0xd0
 23ed5fe:	f7f7 fddf 	bl	23e51c0 <strlen>
 23ed602:	ab34      	add	r3, sp, #208	; 0xd0
 23ed604:	4418      	add	r0, r3
    if (MCP_3_exists) {
 23ed606:	782b      	ldrb	r3, [r5, #0]
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ed608:	4622      	mov	r2, r4
    if (MCP_3_exists) {
 23ed60a:	2b00      	cmp	r3, #0
 23ed60c:	f000 80eb 	beq.w	23ed7e6 <_Z7INFO_Dov+0x952>
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ed610:	498a      	ldr	r1, [pc, #552]	; (23ed83c <_Z7INFO_Dov+0x9a8>)
    }
    else {
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23ed612:	f00a fa57 	bl	23f7ac4 <sprintf>
    }
    comma=",";
 23ed616:	4c81      	ldr	r4, [pc, #516]	; (23ed81c <_Z7INFO_Dov+0x988>)
  }
  if (PM25AQI_exists) {
 23ed618:	4b89      	ldr	r3, [pc, #548]	; (23ed840 <_Z7INFO_Dov+0x9ac>)
 23ed61a:	781b      	ldrb	r3, [r3, #0]
 23ed61c:	b14b      	cbz	r3, 23ed632 <_Z7INFO_Dov+0x79e>
    sprintf (buf+strlen(buf), "%sPM25AQ", comma);
 23ed61e:	a834      	add	r0, sp, #208	; 0xd0
 23ed620:	f7f7 fdce 	bl	23e51c0 <strlen>
 23ed624:	ab34      	add	r3, sp, #208	; 0xd0
 23ed626:	4622      	mov	r2, r4
 23ed628:	4986      	ldr	r1, [pc, #536]	; (23ed844 <_Z7INFO_Dov+0x9b0>)
 23ed62a:	4418      	add	r0, r3
 23ed62c:	f00a fa4a 	bl	23f7ac4 <sprintf>
    comma=",";
 23ed630:	4c7a      	ldr	r4, [pc, #488]	; (23ed81c <_Z7INFO_Dov+0x988>)
  }

  GetPinName(RAINGAUGE1_IRQ_PIN, Buffer32Bytes);
 23ed632:	4985      	ldr	r1, [pc, #532]	; (23ed848 <_Z7INFO_Dov+0x9b4>)
 23ed634:	2010      	movs	r0, #16
 23ed636:	f7fc fb09 	bl	23e9c4c <_Z10GetPinNametPc>
  sprintf (buf+strlen(buf), "%sRG(%s)", comma, Buffer32Bytes);
 23ed63a:	a834      	add	r0, sp, #208	; 0xd0
 23ed63c:	f7f7 fdc0 	bl	23e51c0 <strlen>
 23ed640:	4622      	mov	r2, r4
 23ed642:	ac34      	add	r4, sp, #208	; 0xd0
 23ed644:	4b80      	ldr	r3, [pc, #512]	; (23ed848 <_Z7INFO_Dov+0x9b4>)
 23ed646:	4981      	ldr	r1, [pc, #516]	; (23ed84c <_Z7INFO_Dov+0x9b8>)
 23ed648:	4420      	add	r0, r4
 23ed64a:	f00a fa3b 	bl	23f7ac4 <sprintf>

  writer.name("sensors").value(buf);
 23ed64e:	4980      	ldr	r1, [pc, #512]	; (23ed850 <_Z7INFO_Dov+0x9bc>)
 23ed650:	a806      	add	r0, sp, #24
 23ed652:	f7f8 fc37 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed656:	4621      	mov	r1, r4
 23ed658:	f7f8 fb6e 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // LoRa
  if (LORA_exists) {
 23ed65c:	4b7d      	ldr	r3, [pc, #500]	; (23ed854 <_Z7INFO_Dov+0x9c0>)
 23ed65e:	781b      	ldrb	r3, [r3, #0]
 23ed660:	2b00      	cmp	r3, #0
 23ed662:	f000 80c2 	beq.w	23ed7ea <_Z7INFO_Dov+0x956>
    sprintf (buf, "%d,%d,%dMHz", cf_lora_unitid, cf_lora_txpower, cf_lora_freq);  
 23ed666:	4b7c      	ldr	r3, [pc, #496]	; (23ed858 <_Z7INFO_Dov+0x9c4>)
 23ed668:	4a7c      	ldr	r2, [pc, #496]	; (23ed85c <_Z7INFO_Dov+0x9c8>)
 23ed66a:	681b      	ldr	r3, [r3, #0]
 23ed66c:	4620      	mov	r0, r4
 23ed66e:	9300      	str	r3, [sp, #0]
 23ed670:	4b7b      	ldr	r3, [pc, #492]	; (23ed860 <_Z7INFO_Dov+0x9cc>)
 23ed672:	6812      	ldr	r2, [r2, #0]
 23ed674:	681b      	ldr	r3, [r3, #0]
 23ed676:	497b      	ldr	r1, [pc, #492]	; (23ed864 <_Z7INFO_Dov+0x9d0>)
 23ed678:	f00a fa24 	bl	23f7ac4 <sprintf>
  }
  else {
    sprintf (buf, "NF");
  }
  writer.name("lora").value(buf);
 23ed67c:	497a      	ldr	r1, [pc, #488]	; (23ed868 <_Z7INFO_Dov+0x9d4>)

  // Oled Display
  if (oled_type) {
 23ed67e:	4c7b      	ldr	r4, [pc, #492]	; (23ed86c <_Z7INFO_Dov+0x9d8>)
  writer.name("lora").value(buf);
 23ed680:	a806      	add	r0, sp, #24
 23ed682:	f7f8 fc1f 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed686:	a934      	add	r1, sp, #208	; 0xd0
 23ed688:	f7f8 fb56 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  if (oled_type) {
 23ed68c:	6823      	ldr	r3, [r4, #0]
    writer.name("oled").value(OLED32 ? "32" : "64");
 23ed68e:	4978      	ldr	r1, [pc, #480]	; (23ed870 <_Z7INFO_Dov+0x9dc>)
 23ed690:	a806      	add	r0, sp, #24
  if (oled_type) {
 23ed692:	2b00      	cmp	r3, #0
 23ed694:	f000 80ae 	beq.w	23ed7f4 <_Z7INFO_Dov+0x960>
    writer.name("oled").value(OLED32 ? "32" : "64");
 23ed698:	f7f8 fc14 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed69c:	6821      	ldr	r1, [r4, #0]
 23ed69e:	4a75      	ldr	r2, [pc, #468]	; (23ed874 <_Z7INFO_Dov+0x9e0>)
 23ed6a0:	4b75      	ldr	r3, [pc, #468]	; (23ed878 <_Z7INFO_Dov+0x9e4>)
 23ed6a2:	293c      	cmp	r1, #60	; 0x3c
 23ed6a4:	bf0c      	ite	eq
 23ed6a6:	4611      	moveq	r1, r2
 23ed6a8:	4619      	movne	r1, r3
  else {
    writer.name("oled").value("NF");
  }

  // Serial Console Enable
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ed6aa:	4d74      	ldr	r5, [pc, #464]	; (23ed87c <_Z7INFO_Dov+0x9e8>)
    writer.name("oled").value("NF");
 23ed6ac:	f7f8 fb44 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ed6b0:	4965      	ldr	r1, [pc, #404]	; (23ed848 <_Z7INFO_Dov+0x9b4>)
 23ed6b2:	8828      	ldrh	r0, [r5, #0]
 23ed6b4:	f7fc faca 	bl	23e9c4c <_Z10GetPinNametPc>
  sprintf (buf, "scepin(%s)", Buffer32Bytes);
 23ed6b8:	4a63      	ldr	r2, [pc, #396]	; (23ed848 <_Z7INFO_Dov+0x9b4>)
 23ed6ba:	4971      	ldr	r1, [pc, #452]	; (23ed880 <_Z7INFO_Dov+0x9ec>)
 23ed6bc:	a834      	add	r0, sp, #208	; 0xd0
 23ed6be:	f00a fa01 	bl	23f7ac4 <sprintf>
  writer.name(buf).value((digitalRead(SCE_PIN)) ? "DISABLED" : "ENABLED");
 23ed6c2:	a934      	add	r1, sp, #208	; 0xd0
 23ed6c4:	a806      	add	r0, sp, #24
 23ed6c6:	f7f8 fbfd 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed6ca:	4604      	mov	r4, r0
 23ed6cc:	8828      	ldrh	r0, [r5, #0]
 23ed6ce:	f00c fbb3 	bl	23f9e38 <digitalRead>
 23ed6d2:	4a6c      	ldr	r2, [pc, #432]	; (23ed884 <_Z7INFO_Dov+0x9f0>)
 23ed6d4:	496c      	ldr	r1, [pc, #432]	; (23ed888 <_Z7INFO_Dov+0x9f4>)
 23ed6d6:	2800      	cmp	r0, #0
 23ed6d8:	bf18      	it	ne
 23ed6da:	4611      	movne	r1, r2
 23ed6dc:	4620      	mov	r0, r4
 23ed6de:	f7f8 fb2b 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("sce").value((SerialConsoleEnabled) ? "TRUE" : "FALSE");
 23ed6e2:	496a      	ldr	r1, [pc, #424]	; (23ed88c <_Z7INFO_Dov+0x9f8>)
 23ed6e4:	a806      	add	r0, sp, #24
 23ed6e6:	f7f8 fbed 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed6ea:	4b69      	ldr	r3, [pc, #420]	; (23ed890 <_Z7INFO_Dov+0x9fc>)
 23ed6ec:	4a69      	ldr	r2, [pc, #420]	; (23ed894 <_Z7INFO_Dov+0xa00>)
 23ed6ee:	7819      	ldrb	r1, [r3, #0]
 23ed6f0:	4b69      	ldr	r3, [pc, #420]	; (23ed898 <_Z7INFO_Dov+0xa04>)
 23ed6f2:	2900      	cmp	r1, #0
 23ed6f4:	bf14      	ite	ne
 23ed6f6:	4611      	movne	r1, r2
 23ed6f8:	4619      	moveq	r1, r3
 23ed6fa:	f7f8 fb1d 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.endObject();
 23ed6fe:	a806      	add	r0, sp, #24
 23ed700:	f00b f9e1 	bl	23f8ac6 <_ZN5spark10JSONWriter9endObjectEv>

  // Done profiling system

  // Update INFO.TXT file
  if (SD_exists) {
 23ed704:	4b65      	ldr	r3, [pc, #404]	; (23ed89c <_Z7INFO_Dov+0xa08>)
 23ed706:	781b      	ldrb	r3, [r3, #0]
 23ed708:	b1bb      	cbz	r3, 23ed73a <_Z7INFO_Dov+0x8a6>
    File fp = SD.open(SD_INFO_FILE, FILE_WRITE | O_TRUNC); 
 23ed70a:	f244 6302 	movw	r3, #17922	; 0x4602
 23ed70e:	4a64      	ldr	r2, [pc, #400]	; (23ed8a0 <_Z7INFO_Dov+0xa0c>)
 23ed710:	4964      	ldr	r1, [pc, #400]	; (23ed8a4 <_Z7INFO_Dov+0xa10>)
 23ed712:	a820      	add	r0, sp, #128	; 0x80
 23ed714:	f008 fd7e 	bl	23f6214 <_ZN8FsVolume4openEPKci>
 23ed718:	a824      	add	r0, sp, #144	; 0x90
 23ed71a:	f7f8 fc5a 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
 23ed71e:	4c62      	ldr	r4, [pc, #392]	; (23ed8a8 <_Z7INFO_Dov+0xa14>)
    if (fp) {
 23ed720:	2800      	cmp	r0, #0
 23ed722:	d06b      	beq.n	23ed7fc <_Z7INFO_Dov+0x968>
      fp.println(msgbuf);
 23ed724:	4961      	ldr	r1, [pc, #388]	; (23ed8ac <_Z7INFO_Dov+0xa18>)
 23ed726:	a820      	add	r0, sp, #128	; 0x80
 23ed728:	f00b fcc2 	bl	23f90b0 <_ZN5Print7printlnEPKc>
      fp.close();
 23ed72c:	a824      	add	r0, sp, #144	; 0x90
 23ed72e:	f008 fc98 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23ed732:	6823      	ldr	r3, [r4, #0]
 23ed734:	f023 0302 	bic.w	r3, r3, #2
 23ed738:	6023      	str	r3, [r4, #0]
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
      Output ("SD:Open(Info)ERR");
    }
  }

  if (Particle_Publish((char *) "INFO")) {
 23ed73a:	485d      	ldr	r0, [pc, #372]	; (23ed8b0 <_Z7INFO_Dov+0xa1c>)
 23ed73c:	f7ff fafa 	bl	23ecd34 <_Z16Particle_PublishPc>
 23ed740:	4604      	mov	r4, r0
 23ed742:	2800      	cmp	r0, #0
 23ed744:	d062      	beq.n	23ed80c <_Z7INFO_Dov+0x978>
    Serial_write (msgbuf);
 23ed746:	4859      	ldr	r0, [pc, #356]	; (23ed8ac <_Z7INFO_Dov+0xa18>)
 23ed748:	f7f8 fe66 	bl	23e6418 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "INFO->PUB OK[%d]", strlen(msgbuf)+1);
 23ed74c:	4857      	ldr	r0, [pc, #348]	; (23ed8ac <_Z7INFO_Dov+0xa18>)
 23ed74e:	f7f7 fd37 	bl	23e51c0 <strlen>
 23ed752:	4958      	ldr	r1, [pc, #352]	; (23ed8b4 <_Z7INFO_Dov+0xa20>)
 23ed754:	1c42      	adds	r2, r0, #1
 23ed756:	483c      	ldr	r0, [pc, #240]	; (23ed848 <_Z7INFO_Dov+0x9b4>)
 23ed758:	f00a f9b4 	bl	23f7ac4 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
    Output(Buffer32Bytes);
 23ed75c:	483a      	ldr	r0, [pc, #232]	; (23ed848 <_Z7INFO_Dov+0x9b4>)
 23ed75e:	f7f8 fe85 	bl	23e646c <_Z6OutputPKc>
    return(false);
  }
 23ed762:	4620      	mov	r0, r4
 23ed764:	b075      	add	sp, #468	; 0x1d4
 23ed766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      writer.name("n2s").value(-1);
 23ed76a:	a806      	add	r0, sp, #24
 23ed76c:	f7f8 fbaa 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ed774:	f00b f9ca 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>
    virtual ~Print() {}
 23ed778:	e4b4      	b.n	23ed0e4 <_Z7INFO_Dov+0x250>
    writer.name("n2s").value("NF");
 23ed77a:	494f      	ldr	r1, [pc, #316]	; (23ed8b8 <_Z7INFO_Dov+0xa24>)
 23ed77c:	a806      	add	r0, sp, #24
 23ed77e:	f7f8 fba1 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed782:	494e      	ldr	r1, [pc, #312]	; (23ed8bc <_Z7INFO_Dov+0xa28>)
 23ed784:	f7f8 fad8 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ed788:	e4ac      	b.n	23ed0e4 <_Z7INFO_Dov+0x250>
    writer.name("ps").value(sps);
 23ed78a:	f7f8 fb9b 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed78e:	4621      	mov	r1, r4
 23ed790:	f00b f9bc 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>
 23ed794:	e4bd      	b.n	23ed112 <_Z7INFO_Dov+0x27e>
    writer.name("bcs").value(sbs);
 23ed796:	f7f8 fb95 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed79a:	4621      	mov	r1, r4
 23ed79c:	f00b f9b6 	bl	23f8b0c <_ZN5spark10JSONWriter5valueEi>
 23ed7a0:	e4ce      	b.n	23ed140 <_Z7INFO_Dov+0x2ac>
    writer.name("pmts").value("NF");
 23ed7a2:	f7f8 fb8f 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed7a6:	4945      	ldr	r1, [pc, #276]	; (23ed8bc <_Z7INFO_Dov+0xa28>)
 23ed7a8:	f7f8 fac6 	bl	23e5d38 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ed7ac:	e56b      	b.n	23ed286 <_Z7INFO_Dov+0x3f2>
      writer.name("a4").value("DIST 10M");
 23ed7ae:	f7f8 fb89 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed7b2:	4943      	ldr	r1, [pc, #268]	; (23ed8c0 <_Z7INFO_Dov+0xa2c>)
 23ed7b4:	e57c      	b.n	23ed2b0 <_Z7INFO_Dov+0x41c>
  else if (A4_State == A4_STATE_RAIN){
 23ed7b6:	2b02      	cmp	r3, #2
    writer.name("a4").value("RG2");
 23ed7b8:	4942      	ldr	r1, [pc, #264]	; (23ed8c4 <_Z7INFO_Dov+0xa30>)
 23ed7ba:	a806      	add	r0, sp, #24
  else if (A4_State == A4_STATE_RAIN){
 23ed7bc:	d103      	bne.n	23ed7c6 <_Z7INFO_Dov+0x932>
    writer.name("a4").value("RG2");
 23ed7be:	f7f8 fb81 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed7c2:	4941      	ldr	r1, [pc, #260]	; (23ed8c8 <_Z7INFO_Dov+0xa34>)
 23ed7c4:	e574      	b.n	23ed2b0 <_Z7INFO_Dov+0x41c>
  else if (A4_State == A4_STATE_RAW){
 23ed7c6:	2b03      	cmp	r3, #3
 23ed7c8:	d103      	bne.n	23ed7d2 <_Z7INFO_Dov+0x93e>
    writer.name("a4").value("RAW");
 23ed7ca:	f7f8 fb7b 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed7ce:	493f      	ldr	r1, [pc, #252]	; (23ed8cc <_Z7INFO_Dov+0xa38>)
 23ed7d0:	e56e      	b.n	23ed2b0 <_Z7INFO_Dov+0x41c>
    writer.name("a4").value("NS"); // Not Set
 23ed7d2:	f7f8 fb77 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed7d6:	493e      	ldr	r1, [pc, #248]	; (23ed8d0 <_Z7INFO_Dov+0xa3c>)
 23ed7d8:	e56a      	b.n	23ed2b0 <_Z7INFO_Dov+0x41c>
    writer.name("a5").value("NS"); // Not Set
 23ed7da:	f7f8 fb73 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed7de:	493c      	ldr	r1, [pc, #240]	; (23ed8d0 <_Z7INFO_Dov+0xa3c>)
 23ed7e0:	e572      	b.n	23ed2c8 <_Z7INFO_Dov+0x434>
  const char *comma = "";
 23ed7e2:	4c3c      	ldr	r4, [pc, #240]	; (23ed8d4 <_Z7INFO_Dov+0xa40>)
 23ed7e4:	e586      	b.n	23ed2f4 <_Z7INFO_Dov+0x460>
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23ed7e6:	493c      	ldr	r1, [pc, #240]	; (23ed8d8 <_Z7INFO_Dov+0xa44>)
 23ed7e8:	e713      	b.n	23ed612 <_Z7INFO_Dov+0x77e>
    sprintf (buf, "NF");
 23ed7ea:	4934      	ldr	r1, [pc, #208]	; (23ed8bc <_Z7INFO_Dov+0xa28>)
 23ed7ec:	a834      	add	r0, sp, #208	; 0xd0
 23ed7ee:	f00f f9cf 	bl	23fcb90 <strcpy>
 23ed7f2:	e743      	b.n	23ed67c <_Z7INFO_Dov+0x7e8>
    writer.name("oled").value("NF");
 23ed7f4:	f7f8 fb66 	bl	23e5ec4 <_ZN5spark10JSONWriter4nameEPKc>
 23ed7f8:	4930      	ldr	r1, [pc, #192]	; (23ed8bc <_Z7INFO_Dov+0xa28>)
 23ed7fa:	e756      	b.n	23ed6aa <_Z7INFO_Dov+0x816>
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ed7fc:	6823      	ldr	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ed7fe:	4837      	ldr	r0, [pc, #220]	; (23ed8dc <_Z7INFO_Dov+0xa48>)
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ed800:	f043 0302 	orr.w	r3, r3, #2
 23ed804:	6023      	str	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ed806:	f7f8 fe31 	bl	23e646c <_Z6OutputPKc>
 23ed80a:	e796      	b.n	23ed73a <_Z7INFO_Dov+0x8a6>
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
 23ed80c:	4934      	ldr	r1, [pc, #208]	; (23ed8e0 <_Z7INFO_Dov+0xa4c>)
 23ed80e:	480e      	ldr	r0, [pc, #56]	; (23ed848 <_Z7INFO_Dov+0x9b4>)
 23ed810:	f00f f9be 	bl	23fcb90 <strcpy>
 23ed814:	e7a2      	b.n	23ed75c <_Z7INFO_Dov+0x8c8>
 23ed816:	bf00      	nop
 23ed818:	023fe510 	.word	0x023fe510
 23ed81c:	023fda47 	.word	0x023fda47
 23ed820:	1006a7e1 	.word	0x1006a7e1
 23ed824:	023fe516 	.word	0x023fe516
 23ed828:	1006a2af 	.word	0x1006a2af
 23ed82c:	023fe51d 	.word	0x023fe51d
 23ed830:	1006a7e6 	.word	0x1006a7e6
 23ed834:	023fe522 	.word	0x023fe522
 23ed838:	1006a7e5 	.word	0x1006a7e5
 23ed83c:	023fe528 	.word	0x023fe528
 23ed840:	1006a2cc 	.word	0x1006a2cc
 23ed844:	023fe547 	.word	0x023fe547
 23ed848:	1006a287 	.word	0x1006a287
 23ed84c:	023fe550 	.word	0x023fe550
 23ed850:	023fe559 	.word	0x023fe559
 23ed854:	1006a2b1 	.word	0x1006a2b1
 23ed858:	1006a190 	.word	0x1006a190
 23ed85c:	1006a198 	.word	0x1006a198
 23ed860:	1006a194 	.word	0x1006a194
 23ed864:	023fe561 	.word	0x023fe561
 23ed868:	023fe56d 	.word	0x023fe56d
 23ed86c:	1007aa20 	.word	0x1007aa20
 23ed870:	023fe572 	.word	0x023fe572
 23ed874:	023fe3d9 	.word	0x023fe3d9
 23ed878:	023fe3dc 	.word	0x023fe3dc
 23ed87c:	1006a108 	.word	0x1006a108
 23ed880:	023fe577 	.word	0x023fe577
 23ed884:	023fe3df 	.word	0x023fe3df
 23ed888:	023fe3e8 	.word	0x023fe3e8
 23ed88c:	023fe582 	.word	0x023fe582
 23ed890:	1006a7d3 	.word	0x1006a7d3
 23ed894:	023fe3f0 	.word	0x023fe3f0
 23ed898:	023fe3f5 	.word	0x023fe3f5
 23ed89c:	1006a77c 	.word	0x1006a77c
 23ed8a0:	1006a141 	.word	0x1006a141
 23ed8a4:	1006a2d0 	.word	0x1006a2d0
 23ed8a8:	1006a178 	.word	0x1006a178
 23ed8ac:	1006f128 	.word	0x1006f128
 23ed8b0:	023fdbd8 	.word	0x023fdbd8
 23ed8b4:	023fe597 	.word	0x023fe597
 23ed8b8:	023fe456 	.word	0x023fe456
 23ed8bc:	023fd5fc 	.word	0x023fd5fc
 23ed8c0:	023fe471 	.word	0x023fe471
 23ed8c4:	023fe466 	.word	0x023fe466
 23ed8c8:	023fe47a 	.word	0x023fe47a
 23ed8cc:	023fddb9 	.word	0x023fddb9
 23ed8d0:	023fe47e 	.word	0x023fe47e
 23ed8d4:	023fe708 	.word	0x023fe708
 23ed8d8:	023fe537 	.word	0x023fe537
 23ed8dc:	023fe586 	.word	0x023fe586
 23ed8e0:	023fe5a8 	.word	0x023fe5a8

023ed8e4 <_Z14SD_N2S_Publishv>:
void SD_N2S_Publish() {
 23ed8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ed8e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ed8ec:	2400      	movs	r4, #0
 23ed8ee:	b0a8      	sub	sp, #160	; 0xa0
 23ed8f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ed8f4:	4b7b      	ldr	r3, [pc, #492]	; (23edae4 <_Z14SD_N2S_Publishv+0x200>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ed8f6:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ed8fa:	9300      	str	r3, [sp, #0]
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ed8fc:	4b7a      	ldr	r3, [pc, #488]	; (23edae8 <_Z14SD_N2S_Publishv+0x204>)
 23ed8fe:	781b      	ldrb	r3, [r3, #0]
 23ed900:	b363      	cbz	r3, 23ed95c <_Z14SD_N2S_Publishv+0x78>
 23ed902:	497a      	ldr	r1, [pc, #488]	; (23edaec <_Z14SD_N2S_Publishv+0x208>)
 23ed904:	487a      	ldr	r0, [pc, #488]	; (23edaf0 <_Z14SD_N2S_Publishv+0x20c>)
 23ed906:	f7f8 faeb 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23ed90a:	b338      	cbz	r0, 23ed95c <_Z14SD_N2S_Publishv+0x78>
    Output ("N2S:Publish");
 23ed90c:	4879      	ldr	r0, [pc, #484]	; (23edaf4 <_Z14SD_N2S_Publishv+0x210>)
 23ed90e:	f7f8 fdad 	bl	23e646c <_Z6OutputPKc>
    fp = SD.open(SD_n2s_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.
 23ed912:	4623      	mov	r3, r4
 23ed914:	4a75      	ldr	r2, [pc, #468]	; (23edaec <_Z14SD_N2S_Publishv+0x208>)
 23ed916:	4976      	ldr	r1, [pc, #472]	; (23edaf0 <_Z14SD_N2S_Publishv+0x20c>)
 23ed918:	a814      	add	r0, sp, #80	; 0x50
 23ed91a:	f008 fc7b 	bl	23f6214 <_ZN8FsVolume4openEPKci>
class Print
 23ed91e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23ed920:	a804      	add	r0, sp, #16
 23ed922:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23ed924:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ed926:	a918      	add	r1, sp, #96	; 0x60
 23ed928:	9302      	str	r3, [sp, #8]
 23ed92a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ed92c:	9303      	str	r3, [sp, #12]
 23ed92e:	f008 fb8e 	bl	23f604e <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23ed932:	a804      	add	r0, sp, #16
 23ed934:	f7f8 fb4d 	bl	23e5fd2 <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
 23ed938:	2800      	cmp	r0, #0
 23ed93a:	f000 80cf 	beq.w	23edadc <_Z14SD_N2S_Publishv+0x1f8>
 23ed93e:	a804      	add	r0, sp, #16
 23ed940:	f7f8 fb3b 	bl	23e5fba <_ZNK10FsBaseFile8fileSizeEv>
      if (fp.size()<=20) {
 23ed944:	2815      	cmp	r0, #21
 23ed946:	f171 0300 	sbcs.w	r3, r1, #0
 23ed94a:	d20a      	bcs.n	23ed962 <_Z14SD_N2S_Publishv+0x7e>
        fp.close();
 23ed94c:	a804      	add	r0, sp, #16
 23ed94e:	f008 fb88 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
        Output ("N2S:Empty");
 23ed952:	4869      	ldr	r0, [pc, #420]	; (23edaf8 <_Z14SD_N2S_Publishv+0x214>)
 23ed954:	f7f8 fd8a 	bl	23e646c <_Z6OutputPKc>
            SD_N2S_Delete(); // Bad data in the file so delete the file           
 23ed958:	f7fb fccc 	bl	23e92f4 <_Z13SD_N2S_Deletev>
}
 23ed95c:	b028      	add	sp, #160	; 0xa0
 23ed95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (eeprom.n2sfp) {
 23ed962:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 23edb1c <_Z14SD_N2S_Publishv+0x238>
 23ed966:	f8d8 2014 	ldr.w	r2, [r8, #20]
 23ed96a:	b12a      	cbz	r2, 23ed978 <_Z14SD_N2S_Publishv+0x94>
          if (fp.size()<=eeprom.n2sfp) {
 23ed96c:	4282      	cmp	r2, r0
 23ed96e:	eb74 0301 	sbcs.w	r3, r4, r1
 23ed972:	d310      	bcc.n	23ed996 <_Z14SD_N2S_Publishv+0xb2>
            eeprom.n2sfp = 0; 
 23ed974:	f8c8 4014 	str.w	r4, [r8, #20]
 23ed978:	2400      	movs	r4, #0
 23ed97a:	4625      	mov	r5, r4
 23ed97c:	4f5f      	ldr	r7, [pc, #380]	; (23edafc <_Z14SD_N2S_Publishv+0x218>)
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ed97e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 23edb20 <_Z14SD_N2S_Publishv+0x23c>
              Output ("N2S:OBS Needed");
 23ed982:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 23edb24 <_Z14SD_N2S_Publishv+0x240>
  int available() override { return BaseFile::available(); }
 23ed986:	a804      	add	r0, sp, #16
 23ed988:	f7f8 faea 	bl	23e5f60 <_ZNK10FsBaseFile9availableEv>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ed98c:	b980      	cbnz	r0, 23ed9b0 <_Z14SD_N2S_Publishv+0xcc>
            fp.close();
 23ed98e:	a804      	add	r0, sp, #16
 23ed990:	f008 fb67 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
 23ed994:	e7e0      	b.n	23ed958 <_Z14SD_N2S_Publishv+0x74>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet((uint32_t)pos)
 23ed996:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ed998:	b123      	cbz	r3, 23ed9a4 <_Z14SD_N2S_Publishv+0xc0>
 23ed99a:	4611      	mov	r1, r2
 23ed99c:	4618      	mov	r0, r3
 23ed99e:	f005 fcf2 	bl	23f3386 <_ZN7FatFile7seekSetEm>
 23ed9a2:	e7e9      	b.n	23ed978 <_Z14SD_N2S_Publishv+0x94>
           : m_xFile ? m_xFile->seekSet(pos)
 23ed9a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23ed9a6:	2800      	cmp	r0, #0
 23ed9a8:	d0e6      	beq.n	23ed978 <_Z14SD_N2S_Publishv+0x94>
 23ed9aa:	f007 f992 	bl	23f4cd2 <_ZN9ExFatFile7seekSetEy>
 23ed9ae:	e7e3      	b.n	23ed978 <_Z14SD_N2S_Publishv+0x94>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ed9b0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23ed9b4:	da66      	bge.n	23eda84 <_Z14SD_N2S_Publishv+0x1a0>
  int read() override { return BaseFile::read(); }
 23ed9b6:	a804      	add	r0, sp, #16
 23ed9b8:	f7f8 fb14 	bl	23e5fe4 <_ZN10FsBaseFile4readEv>
          ch = fp.read();
 23ed9bc:	b2c3      	uxtb	r3, r0
          if (ch == 0x0A) {  // newline
 23ed9be:	2b0a      	cmp	r3, #10
 23ed9c0:	d173      	bne.n	23edaaa <_Z14SD_N2S_Publishv+0x1c6>
            if (Particle_Publish(EventType)) {
 23ed9c2:	4630      	mov	r0, r6
 23ed9c4:	f7ff f9b6 	bl	23ecd34 <_Z16Particle_PublishPc>
 23ed9c8:	b348      	cbz	r0, 23eda1e <_Z14SD_N2S_Publishv+0x13a>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ed9ca:	4633      	mov	r3, r6
 23ed9cc:	4622      	mov	r2, r4
 23ed9ce:	494c      	ldr	r1, [pc, #304]	; (23edb00 <_Z14SD_N2S_Publishv+0x21c>)
 23ed9d0:	484c      	ldr	r0, [pc, #304]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23ed9d2:	f00a f877 	bl	23f7ac4 <sprintf>
              Output (Buffer32Bytes);
 23ed9d6:	484b      	ldr	r0, [pc, #300]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23ed9d8:	f7f8 fd48 	bl	23e646c <_Z6OutputPKc>
              Serial_write (msgbuf);
 23ed9dc:	4638      	mov	r0, r7
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ed9de:	1c65      	adds	r5, r4, #1
              Serial_write (msgbuf);
 23ed9e0:	f7f8 fd1a 	bl	23e6418 <_Z12Serial_writePKc>
    return m_fFile   ? m_fFile->curPosition()
 23ed9e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ed9e6:	2b00      	cmp	r3, #0
 23ed9e8:	d03e      	beq.n	23eda68 <_Z14SD_N2S_Publishv+0x184>
 23ed9ea:	695b      	ldr	r3, [r3, #20]
                eeprom.n2sfp = fp.position();
 23ed9ec:	f8c8 3014 	str.w	r3, [r8, #20]
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ed9f0:	f7f8 f9f8 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ed9f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 23ed9f8:	1a80      	subs	r0, r0, r2
 23ed9fa:	eb61 0103 	sbc.w	r1, r1, r3
 23ed9fe:	f64e 2361 	movw	r3, #60001	; 0xea61
 23eda02:	4298      	cmp	r0, r3
 23eda04:	f171 0300 	sbcs.w	r3, r1, #0
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23eda08:	462c      	mov	r4, r5
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23eda0a:	d34b      	bcc.n	23edaa4 <_Z14SD_N2S_Publishv+0x1c0>
              Output ("N2S:OBS Needed");
 23eda0c:	4650      	mov	r0, sl
 23eda0e:	f7f8 fd2d 	bl	23e646c <_Z6OutputPKc>
              if (OBS_Full()) {
 23eda12:	f7fc f8f5 	bl	23e9c00 <_Z8OBS_Fullv>
 23eda16:	2800      	cmp	r0, #0
 23eda18:	d040      	beq.n	23eda9c <_Z14SD_N2S_Publishv+0x1b8>
                Output ("N2S:OBS FULL");
 23eda1a:	483b      	ldr	r0, [pc, #236]	; (23edb08 <_Z14SD_N2S_Publishv+0x224>)
 23eda1c:	e030      	b.n	23eda80 <_Z14SD_N2S_Publishv+0x19c>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:RETRY", sent, EventType);
 23eda1e:	4633      	mov	r3, r6
 23eda20:	4622      	mov	r2, r4
 23eda22:	493a      	ldr	r1, [pc, #232]	; (23edb0c <_Z14SD_N2S_Publishv+0x228>)
 23eda24:	4837      	ldr	r0, [pc, #220]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23eda26:	f00a f84d 	bl	23f7ac4 <sprintf>
              Output (Buffer32Bytes);
 23eda2a:	4836      	ldr	r0, [pc, #216]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23eda2c:	f7f8 fd1e 	bl	23e646c <_Z6OutputPKc>
              Serial_write (msgbuf);
 23eda30:	4638      	mov	r0, r7
 23eda32:	f7f8 fcf1 	bl	23e6418 <_Z12Serial_writePKc>
                BackGroundWork(); 
 23eda36:	f7ff f93d 	bl	23eccb4 <_Z14BackGroundWorkv>
 23eda3a:	f7ff f93b 	bl	23eccb4 <_Z14BackGroundWorkv>
 23eda3e:	f7ff f939 	bl	23eccb4 <_Z14BackGroundWorkv>
 23eda42:	f7ff f937 	bl	23eccb4 <_Z14BackGroundWorkv>
 23eda46:	f7ff f935 	bl	23eccb4 <_Z14BackGroundWorkv>
              if (Particle_Publish(EventType)) {
 23eda4a:	4630      	mov	r0, r6
 23eda4c:	f7ff f972 	bl	23ecd34 <_Z16Particle_PublishPc>
 23eda50:	b178      	cbz	r0, 23eda72 <_Z14SD_N2S_Publishv+0x18e>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23eda52:	4633      	mov	r3, r6
 23eda54:	4622      	mov	r2, r4
 23eda56:	492a      	ldr	r1, [pc, #168]	; (23edb00 <_Z14SD_N2S_Publishv+0x21c>)
 23eda58:	482a      	ldr	r0, [pc, #168]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23eda5a:	f00a f833 	bl	23f7ac4 <sprintf>
                Output (Buffer32Bytes);
 23eda5e:	4829      	ldr	r0, [pc, #164]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23eda60:	1c65      	adds	r5, r4, #1
                Output (Buffer32Bytes);
 23eda62:	f7f8 fd03 	bl	23e646c <_Z6OutputPKc>
 23eda66:	e7bd      	b.n	23ed9e4 <_Z14SD_N2S_Publishv+0x100>
 23eda68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
 23eda6a:	2b00      	cmp	r3, #0
 23eda6c:	d0be      	beq.n	23ed9ec <_Z14SD_N2S_Publishv+0x108>
  uint64_t curPosition() const { return m_curPosition; }
 23eda6e:	681b      	ldr	r3, [r3, #0]
 23eda70:	e7bc      	b.n	23ed9ec <_Z14SD_N2S_Publishv+0x108>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:ERR", sent, EventType);
 23eda72:	4633      	mov	r3, r6
 23eda74:	4622      	mov	r2, r4
 23eda76:	4926      	ldr	r1, [pc, #152]	; (23edb10 <_Z14SD_N2S_Publishv+0x22c>)
 23eda78:	4822      	ldr	r0, [pc, #136]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23eda7a:	f00a f823 	bl	23f7ac4 <sprintf>
                Output (Buffer32Bytes);
 23eda7e:	4821      	ldr	r0, [pc, #132]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
                Output ("N2S:OBS FULL");
 23eda80:	f7f8 fcf4 	bl	23e646c <_Z6OutputPKc>
  int available() override { return BaseFile::available(); }
 23eda84:	a804      	add	r0, sp, #16
 23eda86:	f7f8 fa6b 	bl	23e5f60 <_ZNK10FsBaseFile9availableEv>
        if (fp.available() <= 20) {
 23eda8a:	2814      	cmp	r0, #20
 23eda8c:	f77f af7f 	ble.w	23ed98e <_Z14SD_N2S_Publishv+0xaa>
          fp.close();
 23eda90:	a804      	add	r0, sp, #16
 23eda92:	f008 fae6 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
          EEPROM_Update(); // Update file postion in the eeprom.
 23eda96:	f7fb fa4b 	bl	23e8f30 <_Z13EEPROM_Updatev>
 23eda9a:	e75f      	b.n	23ed95c <_Z14SD_N2S_Publishv+0x78>
                I2C_Check_Sensors(); // Make sure Sensors are online
 23eda9c:	f7fa fe56 	bl	23e874c <_Z17I2C_Check_Sensorsv>
                OBS_Do();                  
 23edaa0:	f7fc fe46 	bl	23ea730 <_Z6OBS_Dov>
 23edaa4:	2000      	movs	r0, #0
 23edaa6:	4605      	mov	r5, r0
 23edaa8:	e76d      	b.n	23ed986 <_Z14SD_N2S_Publishv+0xa2>
          else if (ch == 0x0D) { // CR, LF follows and will trigger the line to be processed       
 23edaaa:	2b0d      	cmp	r3, #13
 23edaac:	d108      	bne.n	23edac0 <_Z14SD_N2S_Publishv+0x1dc>
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23edaae:	2300      	movs	r3, #0
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23edab0:	197a      	adds	r2, r7, r5
            EventType = &msgbuf[i-2];      
 23edab2:	1eae      	subs	r6, r5, #2
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23edab4:	557b      	strb	r3, [r7, r5]
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23edab6:	4628      	mov	r0, r5
 23edab8:	f802 3c03 	strb.w	r3, [r2, #-3]
            EventType = &msgbuf[i-2];      
 23edabc:	443e      	add	r6, r7
 23edabe:	e7f2      	b.n	23edaa6 <_Z14SD_N2S_Publishv+0x1c2>
            msgbuf[i++] = ch;
 23edac0:	1c68      	adds	r0, r5, #1
          if (i >= MAX_MSGBUF_SIZE) {
 23edac2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
            msgbuf[i++] = ch;
 23edac6:	557b      	strb	r3, [r7, r5]
          if (i >= MAX_MSGBUF_SIZE) {
 23edac8:	d1ed      	bne.n	23edaa6 <_Z14SD_N2S_Publishv+0x1c2>
            sprintf (Buffer32Bytes, "N2S[%d]->BOR:ERR", sent);
 23edaca:	4622      	mov	r2, r4
 23edacc:	4911      	ldr	r1, [pc, #68]	; (23edb14 <_Z14SD_N2S_Publishv+0x230>)
 23edace:	480d      	ldr	r0, [pc, #52]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23edad0:	f009 fff8 	bl	23f7ac4 <sprintf>
            Output (Buffer32Bytes);
 23edad4:	480b      	ldr	r0, [pc, #44]	; (23edb04 <_Z14SD_N2S_Publishv+0x220>)
 23edad6:	f7f8 fcc9 	bl	23e646c <_Z6OutputPKc>
 23edada:	e758      	b.n	23ed98e <_Z14SD_N2S_Publishv+0xaa>
        Output ("N2S->OPEN:ERR");
 23edadc:	480e      	ldr	r0, [pc, #56]	; (23edb18 <_Z14SD_N2S_Publishv+0x234>)
 23edade:	f7f8 fcc5 	bl	23e646c <_Z6OutputPKc>
    virtual ~Print() {}
 23edae2:	e73b      	b.n	23ed95c <_Z14SD_N2S_Publishv+0x78>
 23edae4:	023fe7b4 	.word	0x023fe7b4
 23edae8:	1006a77c 	.word	0x1006a77c
 23edaec:	1006a15f 	.word	0x1006a15f
 23edaf0:	1006a2d0 	.word	0x1006a2d0
 23edaf4:	023fe5b6 	.word	0x023fe5b6
 23edaf8:	023fe5c2 	.word	0x023fe5c2
 23edafc:	1006f128 	.word	0x1006f128
 23edb00:	023fe5cc 	.word	0x023fe5cc
 23edb04:	1006a287 	.word	0x1006a287
 23edb08:	023fe615 	.word	0x023fe615
 23edb0c:	023fe5de 	.word	0x023fe5de
 23edb10:	023fe5f3 	.word	0x023fe5f3
 23edb14:	023fe622 	.word	0x023fe622
 23edb18:	023fe633 	.word	0x023fe633
 23edb1c:	1006ae5c 	.word	0x1006ae5c
 23edb20:	1006aeb0 	.word	0x1006aeb0
 23edb24:	023fe606 	.word	0x023fe606

023edb28 <_Z14OBS_PublishAllv>:
 * 
 * If sending an observation takes 2 or more seconds ws_refresh is set and 
 *   the main program loop calls Wind_Distance_Air_Initialize() 
 * ======================================================================================================================
 */
void OBS_PublishAll() {
 23edb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23edb2c:	b088      	sub	sp, #32
  bool OK2Send=true;
  int relay_type;

  // Update Cell Signal Strength On Last (Most Current) OBS Since Cell is turned to get reading
  int last = OBS_Last();
 23edb2e:	f7fc f855 	bl	23e9bdc <_Z8OBS_Lastv>
  if (last >= 0) {
 23edb32:	1e04      	subs	r4, r0, #0
 23edb34:	4f30      	ldr	r7, [pc, #192]	; (23edbf8 <_Z14OBS_PublishAllv+0xd0>)
 23edb36:	db0c      	blt.n	23edb52 <_Z14OBS_PublishAllv+0x2a>
#if PLATFORM_ID == PLATFORM_ARGON
    WiFiSignal sig = WiFi.RSSI();
#else
    CellularSignal sig = Cellular.RSSI();
 23edb38:	4668      	mov	r0, sp
 23edb3a:	4930      	ldr	r1, [pc, #192]	; (23edbfc <_Z14OBS_PublishAllv+0xd4>)
 23edb3c:	f00a f912 	bl	23f7d64 <_ZN5spark13CellularClass4RSSIEv>
#endif
    obs[last].css = sig.getStrength();
 23edb40:	4668      	mov	r0, sp
 23edb42:	f00a f96d 	bl	23f7e20 <_ZNK14CellularSignal11getStrengthEv>
 23edb46:	f640 2098 	movw	r0, #2712	; 0xa98
 23edb4a:	fb00 7004 	mla	r0, r0, r4, r7
 23edb4e:	ed80 0a04 	vstr	s0, [r0, #16]
void OBS_PublishAll() {
 23edb52:	2500      	movs	r5, #0
 23edb54:	2401      	movs	r4, #1
  }

  // Go through the saved 1 minute observers and send them
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
    if (obs[i].inuse) {
 23edb56:	f640 2898 	movw	r8, #2712	; 0xa98
 23edb5a:	fb08 f305 	mul.w	r3, r8, r5
 23edb5e:	5cfb      	ldrb	r3, [r7, r3]
 23edb60:	b15b      	cbz	r3, 23edb7a <_Z14OBS_PublishAllv+0x52>
      if (OBS_FS_Publish(i) == false) {
 23edb62:	4628      	mov	r0, r5
 23edb64:	f7ff f93a 	bl	23ecddc <_Z14OBS_FS_Publishi>
 23edb68:	4606      	mov	r6, r0
 23edb6a:	b918      	cbnz	r0, 23edb74 <_Z14OBS_PublishAllv+0x4c>
        OBS_N2S_Add (i);
 23edb6c:	4628      	mov	r0, r5
 23edb6e:	f7fb fe3d 	bl	23e97ec <_Z11OBS_N2S_Addi>
        // Don't try to send any N2S because we just added to the file
        OK2Send = false;
 23edb72:	4634      	mov	r4, r6
      }
      OBS_Clear(i);
 23edb74:	4628      	mov	r0, r5
 23edb76:	f7fb fe27 	bl	23e97c8 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23edb7a:	3501      	adds	r5, #1
 23edb7c:	2d11      	cmp	r5, #17
 23edb7e:	d1ec      	bne.n	23edb5a <_Z14OBS_PublishAllv+0x32>
    }
  }

  // Publish LoRa Relay Observations   
  if (LORA_exists) {
 23edb80:	4b1f      	ldr	r3, [pc, #124]	; (23edc00 <_Z14OBS_PublishAllv+0xd8>)
 23edb82:	781b      	ldrb	r3, [r3, #0]
 23edb84:	b373      	cbz	r3, 23edbe4 <_Z14OBS_PublishAllv+0xbc>
      else {
        if (OK2Send && (relay_type>0)) {
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
        }
        if (!OK2Send) {
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23edb86:	4e1f      	ldr	r6, [pc, #124]	; (23edc04 <_Z14OBS_PublishAllv+0xdc>)
 23edb88:	4f1f      	ldr	r7, [pc, #124]	; (23edc08 <_Z14OBS_PublishAllv+0xe0>)
 23edb8a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 23edc18 <_Z14OBS_PublishAllv+0xf0>
    while (lora_relay_need2log()) {
 23edb8e:	f7f8 fdff 	bl	23e6790 <_Z19lora_relay_need2logv>
 23edb92:	b338      	cbz	r0, 23edbe4 <_Z14OBS_PublishAllv+0xbc>
      relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23edb94:	f7fb ffb0 	bl	23e9af8 <_Z20OBS_Relay_Build_JSONv>
      if (relay_type<=0) {
 23edb98:	1e05      	subs	r5, r0, #0
 23edb9a:	dc08      	bgt.n	23edbae <_Z14OBS_PublishAllv+0x86>
        sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23edb9c:	462a      	mov	r2, r5
 23edb9e:	491b      	ldr	r1, [pc, #108]	; (23edc0c <_Z14OBS_PublishAllv+0xe4>)
 23edba0:	481b      	ldr	r0, [pc, #108]	; (23edc10 <_Z14OBS_PublishAllv+0xe8>)
 23edba2:	f009 ff8f 	bl	23f7ac4 <sprintf>
        Output(Buffer32Bytes);
 23edba6:	481a      	ldr	r0, [pc, #104]	; (23edc10 <_Z14OBS_PublishAllv+0xe8>)
 23edba8:	f7f8 fc60 	bl	23e646c <_Z6OutputPKc>
 23edbac:	e7ef      	b.n	23edb8e <_Z14OBS_PublishAllv+0x66>
        if (OK2Send && (relay_type>0)) {
 23edbae:	b99c      	cbnz	r4, 23edbd8 <_Z14OBS_PublishAllv+0xb0>
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23edbb0:	4814      	ldr	r0, [pc, #80]	; (23edc04 <_Z14OBS_PublishAllv+0xdc>)
 23edbb2:	f7f7 fb05 	bl	23e51c0 <strlen>
 23edbb6:	4641      	mov	r1, r8
 23edbb8:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 23edbbc:	4430      	add	r0, r6
 23edbbe:	f009 ff81 	bl	23f7ac4 <sprintf>
          SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23edbc2:	4810      	ldr	r0, [pc, #64]	; (23edc04 <_Z14OBS_PublishAllv+0xdc>)
 23edbc4:	f7fb fbd6 	bl	23e9374 <_Z17SD_NeedToSend_AddPc>
          Output("RELAY->N2S");
 23edbc8:	4812      	ldr	r0, [pc, #72]	; (23edc14 <_Z14OBS_PublishAllv+0xec>)
 23edbca:	f7f8 fc4f 	bl	23e646c <_Z6OutputPKc>
          Serial_write (msgbuf); 
 23edbce:	480d      	ldr	r0, [pc, #52]	; (23edc04 <_Z14OBS_PublishAllv+0xdc>)
 23edbd0:	f7f8 fc22 	bl	23e6418 <_Z12Serial_writePKc>
 23edbd4:	2400      	movs	r4, #0
 23edbd6:	e7da      	b.n	23edb8e <_Z14OBS_PublishAllv+0x66>
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
 23edbd8:	f7ff f92c 	bl	23ece34 <_Z17OBS_Relay_Publishi>
        if (!OK2Send) {
 23edbdc:	4604      	mov	r4, r0
 23edbde:	2800      	cmp	r0, #0
 23edbe0:	d1d5      	bne.n	23edb8e <_Z14OBS_PublishAllv+0x66>
 23edbe2:	e7e5      	b.n	23edbb0 <_Z14OBS_PublishAllv+0x88>
      }
    }
  }

  // Check if we have any N2S only if we have not added to the file while trying to send OBS
  if (OK2Send) {
 23edbe4:	b124      	cbz	r4, 23edbf0 <_Z14OBS_PublishAllv+0xc8>
    SD_N2S_Publish(); 
  }
}
 23edbe6:	b008      	add	sp, #32
 23edbe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SD_N2S_Publish(); 
 23edbec:	f7ff be7a 	b.w	23ed8e4 <_Z14SD_N2S_Publishv>
}
 23edbf0:	b008      	add	sp, #32
 23edbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23edbf6:	bf00      	nop
 23edbf8:	1006f550 	.word	0x1006f550
 23edbfc:	1007aeb8 	.word	0x1007aeb8
 23edc00:	1006a2b1 	.word	0x1006a2b1
 23edc04:	1006f128 	.word	0x1006f128
 23edc08:	1006a1b0 	.word	0x1006a1b0
 23edc0c:	023fe3c2 	.word	0x023fe3c2
 23edc10:	1006a287 	.word	0x1006a287
 23edc14:	023fe641 	.word	0x023fe641
 23edc18:	023fda1d 	.word	0x023fda1d

023edc1c <setup>:
void setup() {
 23edc1c:	b530      	push	{r4, r5, lr}
        hal_power_config config = {};
 23edc1e:	2420      	movs	r4, #32
 23edc20:	b093      	sub	sp, #76	; 0x4c
 23edc22:	4622      	mov	r2, r4
 23edc24:	2100      	movs	r1, #0
 23edc26:	a80a      	add	r0, sp, #40	; 0x28
 23edc28:	f00e ff3d 	bl	23fcaa6 <memset>
        conf_.aux_pwr_ctrl_pin = PIN_INVALID;
        conf_.int_pin = PIN_INVALID;
    }

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
 23edc2c:	ad0a      	add	r5, sp, #40	; 0x28
        system_power_management_get_config(&config, nullptr);
 23edc2e:	2100      	movs	r1, #0
        config.size = sizeof(config);
 23edc30:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
        system_power_management_get_config(&config, nullptr);
 23edc34:	a80a      	add	r0, sp, #40	; 0x28
 23edc36:	ac02      	add	r4, sp, #8
 23edc38:	f009 fdae 	bl	23f7798 <system_power_management_get_config>
 23edc3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23edc3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23edc40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23edc44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 23edc48:	9b02      	ldr	r3, [sp, #8]
        return conf_.soc_bits;
    }

    SystemPowerConfiguration& auxiliaryPowerControlPin(uint8_t pin, bool activeLevel = 1) {
        conf_.aux_pwr_ctrl_pin = pin;
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23edc4a:	2401      	movs	r4, #1
        conf_.flags |= f.value();
 23edc4c:	f043 0301 	orr.w	r3, r3, #1
        conf_.aux_pwr_ctrl_pin = pin;
 23edc50:	2507      	movs	r5, #7
        conf_.flags |= f.value();
 23edc52:	9302      	str	r3, [sp, #8]
    uint8_t auxiliaryPowerControlActiveLevel() const {
        return conf_.aux_pwr_ctrl_pin_level;
    }
    
    SystemPowerConfiguration& interruptPin(uint8_t pin) {
        conf_.int_pin = pin;
 23edc54:	231c      	movs	r3, #28
        return system_power_management_set_config(conf.config(), nullptr);
 23edc56:	2100      	movs	r1, #0
 23edc58:	a802      	add	r0, sp, #8
 23edc5a:	f88d 3019 	strb.w	r3, [sp, #25]
        conf_.aux_pwr_ctrl_pin = pin;
 23edc5e:	f88d 5017 	strb.w	r5, [sp, #23]
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23edc62:	f88d 4018 	strb.w	r4, [sp, #24]
 23edc66:	f009 fd7b 	bl	23f7760 <system_power_management_set_config>
  pinMode(D7, OUTPUT);
 23edc6a:	4621      	mov	r1, r4
 23edc6c:	4628      	mov	r0, r5
 23edc6e:	f00c f8b9 	bl	23f9de4 <pinMode>
  digitalWrite(D7, 1);
 23edc72:	4621      	mov	r1, r4
 23edc74:	4628      	mov	r0, r5
 23edc76:	f00c f8c6 	bl	23f9e06 <digitalWrite>
	pmic.enableBATFET();
 23edc7a:	48ad      	ldr	r0, [pc, #692]	; (23edf30 <setup+0x314>)
 23edc7c:	f00b f9ae 	bl	23f8fdc <_ZN4PMIC12enableBATFETEv>
  Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 23edc80:	4bac      	ldr	r3, [pc, #688]	; (23edf34 <setup+0x318>)
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23edc82:	4dad      	ldr	r5, [pc, #692]	; (23edf38 <setup+0x31c>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 23edc84:	681a      	ldr	r2, [r3, #0]
 23edc86:	4bad      	ldr	r3, [pc, #692]	; (23edf3c <setup+0x320>)
 23edc88:	601a      	str	r2, [r3, #0]
  Watchdog.init(WatchdogConfiguration().timeout(120s));
 23edc8a:	f7f8 f8ff 	bl	23e5e8c <_ZN8particle13WatchdogClass11getInstanceEv>
        config_.timeout_ms = ms;
 23edc8e:	49ac      	ldr	r1, [pc, #688]	; (23edf40 <setup+0x324>)
 23edc90:	4bac      	ldr	r3, [pc, #688]	; (23edf44 <setup+0x328>)
 23edc92:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
        config_.enable_caps = HAL_WATCHDOG_CAPS_RESET | HAL_WATCHDOG_CAPS_SLEEP_RUNNING;
 23edc96:	2321      	movs	r3, #33	; 0x21
 23edc98:	a90a      	add	r1, sp, #40	; 0x28
 23edc9a:	930c      	str	r3, [sp, #48]	; 0x30
 23edc9c:	f00b ff4c 	bl	23f9b38 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>
  Watchdog.start();
 23edca0:	f7f8 f8f4 	bl	23e5e8c <_ZN8particle13WatchdogClass11getInstanceEv>
 23edca4:	f00b ff4d 	bl	23f9b42 <_ZN8particle13WatchdogClass5startEv>
  pinMode (REBOOT_PIN, OUTPUT);
 23edca8:	4621      	mov	r1, r4
 23edcaa:	2013      	movs	r0, #19
 23edcac:	f00c f89a 	bl	23f9de4 <pinMode>
  pinMode (LED_PIN, OUTPUT);
 23edcb0:	4ba5      	ldr	r3, [pc, #660]	; (23edf48 <setup+0x32c>)
 23edcb2:	4621      	mov	r1, r4
 23edcb4:	8818      	ldrh	r0, [r3, #0]
 23edcb6:	f00c f895 	bl	23f9de4 <pinMode>
  Output_Initialize(); // Waits for Serial if Jumper in place for 60s
 23edcba:	f7fc fcdb 	bl	23ea674 <_Z17Output_Initializev>
  delay(2000); // Prevents usb driver crash on startup, Arduino needed this so keeping for Particle
 23edcbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23edcc2:	f009 ffdf 	bl	23f7c84 <delay>
  Serial_write(COPYRIGHT);
 23edcc6:	48a1      	ldr	r0, [pc, #644]	; (23edf4c <setup+0x330>)
 23edcc8:	f7f8 fba6 	bl	23e6418 <_Z12Serial_writePKc>
  Output (VERSION_INFO);
 23edccc:	48a0      	ldr	r0, [pc, #640]	; (23edf50 <setup+0x334>)
 23edcce:	f7f8 fbcd 	bl	23e646c <_Z6OutputPKc>
        return HAL_Feature_Set(feature, true);
 23edcd2:	4621      	mov	r1, r4
 23edcd4:	2004      	movs	r0, #4
 23edcd6:	f009 f88f 	bl	23f6df8 <HAL_Feature_Set>
  OutputResetReason();
 23edcda:	f7fb ffd9 	bl	23e9c90 <_Z17OutputResetReasonv>
  delay(4000); // Give some time to see this
 23edcde:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 23edce2:	f009 ffcf 	bl	23f7c84 <delay>
  HeartBeat(); // Lets refresh Watchdog - just because we can
 23edce6:	f7fc fc69 	bl	23ea5bc <_Z9HeartBeatv>
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
 23edcea:	4b9a      	ldr	r3, [pc, #616]	; (23edf54 <setup+0x338>)
 23edcec:	4c9a      	ldr	r4, [pc, #616]	; (23edf58 <setup+0x33c>)
 23edcee:	681a      	ldr	r2, [r3, #0]
 23edcf0:	4b9a      	ldr	r3, [pc, #616]	; (23edf5c <setup+0x340>)
 23edcf2:	601a      	str	r2, [r3, #0]
  SD_initialize();
 23edcf4:	f7fb fa02 	bl	23e90fc <_Z13SD_initializev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23edcf8:	782b      	ldrb	r3, [r5, #0]
 23edcfa:	2b00      	cmp	r3, #0
 23edcfc:	f000 80fd 	beq.w	23edefa <setup+0x2de>
 23edd00:	4997      	ldr	r1, [pc, #604]	; (23edf60 <setup+0x344>)
 23edd02:	4898      	ldr	r0, [pc, #608]	; (23edf64 <setup+0x348>)
 23edd04:	f7f8 f8ec 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23edd08:	2800      	cmp	r0, #0
 23edd0a:	f000 80f6 	beq.w	23edefa <setup+0x2de>
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23edd0e:	6823      	ldr	r3, [r4, #0]
    Output("N2S:Exists");
 23edd10:	4895      	ldr	r0, [pc, #596]	; (23edf68 <setup+0x34c>)
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23edd12:	f043 0310 	orr.w	r3, r3, #16
 23edd16:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23edd18:	f7f8 fba8 	bl	23e646c <_Z6OutputPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23edd1c:	782b      	ldrb	r3, [r5, #0]
 23edd1e:	2b00      	cmp	r3, #0
 23edd20:	f040 80f1 	bne.w	23edf06 <setup+0x2ea>
    sprintf(msgbuf, "CF:NO %s", CF_NAME); Output (msgbuf);
 23edd24:	4a91      	ldr	r2, [pc, #580]	; (23edf6c <setup+0x350>)
 23edd26:	4992      	ldr	r1, [pc, #584]	; (23edf70 <setup+0x354>)
 23edd28:	4892      	ldr	r0, [pc, #584]	; (23edf74 <setup+0x358>)
 23edd2a:	f009 fecb 	bl	23f7ac4 <sprintf>
 23edd2e:	4891      	ldr	r0, [pc, #580]	; (23edf74 <setup+0x358>)
 23edd30:	f7f8 fb9c 	bl	23e646c <_Z6OutputPKc>
    Output(msgbuf);
 23edd34:	488f      	ldr	r0, [pc, #572]	; (23edf74 <setup+0x358>)
 23edd36:	f7f8 fb99 	bl	23e646c <_Z6OutputPKc>
  EEPROM_Dump();
 23edd3a:	f7fb f91d 	bl	23e8f78 <_Z11EEPROM_Dumpv>
  stc_timestamp();
 23edd3e:	f7f8 fc11 	bl	23e6564 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23edd42:	4a8d      	ldr	r2, [pc, #564]	; (23edf78 <setup+0x35c>)
 23edd44:	498d      	ldr	r1, [pc, #564]	; (23edf7c <setup+0x360>)
 23edd46:	488b      	ldr	r0, [pc, #556]	; (23edf74 <setup+0x358>)
 23edd48:	f009 febc 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23edd4c:	4889      	ldr	r0, [pc, #548]	; (23edf74 <setup+0x358>)
 23edd4e:	f7f8 fb8d 	bl	23e646c <_Z6OutputPKc>
  rtc_initialize();
 23edd52:	f7f8 fc59 	bl	23e6608 <_Z14rtc_initializev>
  stc_timestamp();
 23edd56:	f7f8 fc05 	bl	23e6564 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23edd5a:	4a87      	ldr	r2, [pc, #540]	; (23edf78 <setup+0x35c>)
 23edd5c:	4987      	ldr	r1, [pc, #540]	; (23edf7c <setup+0x360>)
 23edd5e:	4885      	ldr	r0, [pc, #532]	; (23edf74 <setup+0x358>)
 23edd60:	f009 feb0 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23edd64:	4883      	ldr	r0, [pc, #524]	; (23edf74 <setup+0x358>)
 23edd66:	f7f8 fb81 	bl	23e646c <_Z6OutputPKc>
  if (Time.isValid()) {
 23edd6a:	f00b fd8d 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23edd6e:	2800      	cmp	r0, #0
 23edd70:	f000 80d3 	beq.w	23edf1a <setup+0x2fe>
    Output("STC:VALID");
 23edd74:	4882      	ldr	r0, [pc, #520]	; (23edf80 <setup+0x364>)
    Output("STC:!VALID");
 23edd76:	f7f8 fb79 	bl	23e646c <_Z6OutputPKc>
  stc_timestamp();
 23edd7a:	f7f8 fbf3 	bl	23e6564 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23edd7e:	4a7e      	ldr	r2, [pc, #504]	; (23edf78 <setup+0x35c>)
 23edd80:	497e      	ldr	r1, [pc, #504]	; (23edf7c <setup+0x360>)
 23edd82:	487c      	ldr	r0, [pc, #496]	; (23edf74 <setup+0x358>)
 23edd84:	f009 fe9e 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23edd88:	487a      	ldr	r0, [pc, #488]	; (23edf74 <setup+0x358>)
 23edd8a:	f7f8 fb6f 	bl	23e646c <_Z6OutputPKc>
  sprintf (msgbuf, "PS:%d", System.powerSource());
 23edd8e:	f7fe fcc7 	bl	23ec720 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23edd92:	497c      	ldr	r1, [pc, #496]	; (23edf84 <setup+0x368>)
 23edd94:	4602      	mov	r2, r0
 23edd96:	4877      	ldr	r0, [pc, #476]	; (23edf74 <setup+0x358>)
 23edd98:	f009 fe94 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23edd9c:	4875      	ldr	r0, [pc, #468]	; (23edf74 <setup+0x358>)
 23edd9e:	f7f8 fb65 	bl	23e646c <_Z6OutputPKc>
  sprintf (msgbuf, "BS:%d", System.batteryState());
 23edda2:	f7fc fcb9 	bl	23ea718 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23edda6:	4978      	ldr	r1, [pc, #480]	; (23edf88 <setup+0x36c>)
 23edda8:	4602      	mov	r2, r0
 23eddaa:	4872      	ldr	r0, [pc, #456]	; (23edf74 <setup+0x358>)
 23eddac:	f009 fe8a 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23eddb0:	4870      	ldr	r0, [pc, #448]	; (23edf74 <setup+0x358>)
 23eddb2:	f7f8 fb5b 	bl	23e646c <_Z6OutputPKc>
  float bpc = System.batteryCharge();
 23eddb6:	f7fc fc9d 	bl	23ea6f4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  sprintf (msgbuf, "BPC:%d.%02d", (int)bpc, (int)(bpc*100)%100);
 23eddba:	eddf 7a74 	vldr	s15, [pc, #464]	; 23edf8c <setup+0x370>
 23eddbe:	ee60 7a27 	vmul.f32	s15, s0, s15
 23eddc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23eddc6:	2264      	movs	r2, #100	; 0x64
 23eddc8:	ee17 3a90 	vmov	r3, s15
 23eddcc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23eddd0:	fb93 f1f2 	sdiv	r1, r3, r2
  anemometer_interrupt_count = 0;
 23eddd4:	2400      	movs	r4, #0
  sprintf (msgbuf, "BPC:%d.%02d", (int)bpc, (int)(bpc*100)%100);
 23eddd6:	fb02 3311 	mls	r3, r2, r1, r3
 23eddda:	4866      	ldr	r0, [pc, #408]	; (23edf74 <setup+0x358>)
 23edddc:	ee17 2a90 	vmov	r2, s15
 23edde0:	496b      	ldr	r1, [pc, #428]	; (23edf90 <setup+0x374>)
 23edde2:	f009 fe6f 	bl	23f7ac4 <sprintf>
  Output(msgbuf);
 23edde6:	4863      	ldr	r0, [pc, #396]	; (23edf74 <setup+0x358>)
 23edde8:	f7f8 fb40 	bl	23e646c <_Z6OutputPKc>
  anemometer_interrupt_count = 0;
 23eddec:	4b69      	ldr	r3, [pc, #420]	; (23edf94 <setup+0x378>)
 23eddee:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23eddf0:	f7f7 fff8 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23eddf4:	4b68      	ldr	r3, [pc, #416]	; (23edf98 <setup+0x37c>)
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23eddf6:	2202      	movs	r2, #2
  anemometer_interrupt_stime = System.millis();
 23eddf8:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23eddfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23ede00:	4966      	ldr	r1, [pc, #408]	; (23edf9c <setup+0x380>)
 23ede02:	2011      	movs	r0, #17
 23ede04:	9400      	str	r4, [sp, #0]
 23ede06:	f00a fd7d 	bl	23f8904 <_Z15attachInterrupttPFvvE13InterruptModeah>
  raingauge1_interrupt_count = 0;
 23ede0a:	4b65      	ldr	r3, [pc, #404]	; (23edfa0 <setup+0x384>)
 23ede0c:	601c      	str	r4, [r3, #0]
  raingauge1_interrupt_stime = System.millis();
 23ede0e:	f7f7 ffe9 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ede12:	4b64      	ldr	r3, [pc, #400]	; (23edfa4 <setup+0x388>)
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23ede14:	2202      	movs	r2, #2
  raingauge1_interrupt_stime = System.millis();
 23ede16:	e9c3 0100 	strd	r0, r1, [r3]
  raingauge1_interrupt_ltime = 0;  // used to debounce the tip
 23ede1a:	2000      	movs	r0, #0
 23ede1c:	2100      	movs	r1, #0
 23ede1e:	4b62      	ldr	r3, [pc, #392]	; (23edfa8 <setup+0x38c>)
 23ede20:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23ede24:	4961      	ldr	r1, [pc, #388]	; (23edfac <setup+0x390>)
 23ede26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23ede2a:	2010      	movs	r0, #16
 23ede2c:	9400      	str	r4, [sp, #0]
 23ede2e:	f00a fd69 	bl	23f8904 <_Z15attachInterrupttPFvvE13InterruptModeah>
  TXI_Initialize();
 23ede32:	f7fc fb65 	bl	23ea500 <_Z14TXI_Initializev>
  A4_Initialize();
 23ede36:	f7fa f90b 	bl	23e8050 <_Z13A4_Initializev>
  A5_Initialize();
 23ede3a:	f7fa f98d 	bl	23e8158 <_Z13A5_Initializev>
  pmts_initialize();  // Particle Muon on board temperature sensor (TMP112A)
 23ede3e:	f7fa f88b 	bl	23e7f58 <_Z15pmts_initializev>
  bmx_initialize();
 23ede42:	f7f8 fe05 	bl	23e6a50 <_Z14bmx_initializev>
  htu21d_initialize();
 23ede46:	f7f8 ff1f 	bl	23e6c88 <_Z17htu21d_initializev>
  mcp9808_initialize();
 23ede4a:	f7f8 ff4b 	bl	23e6ce4 <_Z18mcp9808_initializev>
  sht_initialize();
 23ede4e:	f7f8 fff9 	bl	23e6e44 <_Z14sht_initializev>
  hih8_initialize();
 23ede52:	f7f9 f85f 	bl	23e6f14 <_Z15hih8_initializev>
  si1145_initialize();
 23ede56:	f7f9 fccf 	bl	23e77f8 <_Z17si1145_initializev>
  vlx_initialize();
 23ede5a:	f7f9 fd81 	bl	23e7960 <_Z14vlx_initializev>
  blx_initialize();
 23ede5e:	f7f9 fdad 	bl	23e79bc <_Z14blx_initializev>
  as5600_initialize();
 23ede62:	f7fa f8c5 	bl	23e7ff0 <_Z17as5600_initializev>
  pm25aqi_initialize();
 23ede66:	f7f9 fe35 	bl	23e7ad4 <_Z18pm25aqi_initializev>
  hdc_initialize();
 23ede6a:	f7f9 feb9 	bl	23e7be0 <_Z14hdc_initializev>
  lps_initialize();
 23ede6e:	f7f9 ff27 	bl	23e7cc0 <_Z14lps_initializev>
  tlw_initialize();
 23ede72:	f7f9 ff9f 	bl	23e7db4 <_Z14tlw_initializev>
  tsm_initialize();
 23ede76:	f7f9 ffcb 	bl	23e7e10 <_Z14tsm_initializev>
  tmsm_initialize();
 23ede7a:	f7f9 fff7 	bl	23e7e6c <_Z15tmsm_initializev>
  wbt_initialize();
 23ede7e:	f7f9 f92b 	bl	23e70d8 <_Z14wbt_initializev>
  hi_initialize();
 23ede82:	f7f9 fa15 	bl	23e72b0 <_Z13hi_initializev>
  wbgt_initialize();
 23ede86:	f7f9 fbc1 	bl	23e760c <_Z15wbgt_initializev>
  lora_initialize();
 23ede8a:	f7fe fd8f 	bl	23ec9ac <_Z15lora_initializev>
  lora_device_initialize();
 23ede8e:	f7f8 fcad 	bl	23e67ec <_Z22lora_device_initializev>
  lora_msg_check();
 23ede92:	f7fe fe7f 	bl	23ecb94 <_Z14lora_msg_checkv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
 23ede96:	2203      	movs	r2, #3
 23ede98:	f241 3388 	movw	r3, #5000	; 0x1388
 23ede9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        bool clearSession, bool reconnect) :
 23edea0:	2301      	movs	r3, #1
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
 23edea2:	a80a      	add	r0, sp, #40	; 0x28
 23edea4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        reconnect_(reconnect) {
 23edea8:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
 23edeac:	f00a f9a4 	bl	23f81f8 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
        spark_cloud_flag_connect();
 23edeb0:	f009 fc9c 	bl	23f77ec <spark_cloud_flag_connect>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23edeb4:	4a3e      	ldr	r2, [pc, #248]	; (23edfb0 <setup+0x394>)
 23edeb6:	493f      	ldr	r1, [pc, #252]	; (23edfb4 <setup+0x398>)
 23edeb8:	483f      	ldr	r0, [pc, #252]	; (23edfb8 <setup+0x39c>)
 23edeba:	f00a f981 	bl	23f81c0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (Particle.function("DoAction", Function_DoAction)) {
 23edebe:	b370      	cbz	r0, 23edf1e <setup+0x302>
    Output ("DoAction:OK");
 23edec0:	483e      	ldr	r0, [pc, #248]	; (23edfbc <setup+0x3a0>)

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 23edec2:	4c3f      	ldr	r4, [pc, #252]	; (23edfc0 <setup+0x3a4>)
    Output ("DoAction:ERR");
 23edec4:	f7f8 fad2 	bl	23e646c <_Z6OutputPKc>
  Wind_Distance_Air_Initialize(); // Will call HeartBeat()
 23edec8:	f7fe fe9c 	bl	23ecc04 <_Z28Wind_Distance_Air_Initializev>
 23edecc:	f242 7210 	movw	r2, #10000	; 0x2710
 23eded0:	4621      	mov	r1, r4
 23eded2:	4b3c      	ldr	r3, [pc, #240]	; (23edfc4 <setup+0x3a8>)
 23eded4:	483c      	ldr	r0, [pc, #240]	; (23edfc8 <setup+0x3ac>)
 23eded6:	f008 ff65 	bl	23f6da4 <cellular_command>
  if ((RESP_OK == Cellular.command(callback_imsi, imsi, 10000, "AT+CIMI\r\n")) && (strcmp(imsi,"") != 0)) {
 23ededa:	3002      	adds	r0, #2
 23ededc:	d101      	bne.n	23edee2 <setup+0x2c6>
 23edede:	7823      	ldrb	r3, [r4, #0]
 23edee0:	b9fb      	cbnz	r3, 23edf22 <setup+0x306>
    Output("IMSI:NF");
 23edee2:	483a      	ldr	r0, [pc, #232]	; (23edfcc <setup+0x3b0>)
    Output (msgbuf);
 23edee4:	f7f8 fac2 	bl	23e646c <_Z6OutputPKc>
  if (Time.isValid()) {
 23edee8:	f00b fcce 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23edeec:	b118      	cbz	r0, 23edef6 <setup+0x2da>
    EEPROM_Initialize();
 23edeee:	f7fa fe7f 	bl	23e8bf0 <_Z17EEPROM_Initializev>
    OBS_Do();   
 23edef2:	f7fc fc1d 	bl	23ea730 <_Z6OBS_Dov>
}
 23edef6:	b013      	add	sp, #76	; 0x4c
 23edef8:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23edefa:	6823      	ldr	r3, [r4, #0]
    Output("N2S:None");
 23edefc:	4834      	ldr	r0, [pc, #208]	; (23edfd0 <setup+0x3b4>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23edefe:	f023 0310 	bic.w	r3, r3, #16
 23edf02:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23edf04:	e708      	b.n	23edd18 <setup+0xfc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23edf06:	4919      	ldr	r1, [pc, #100]	; (23edf6c <setup+0x350>)
 23edf08:	4816      	ldr	r0, [pc, #88]	; (23edf64 <setup+0x348>)
 23edf0a:	f7f7 ffe9 	bl	23e5ee0 <_ZN8FsVolume6existsEPKc>
 23edf0e:	2800      	cmp	r0, #0
 23edf10:	f43f af08 	beq.w	23edd24 <setup+0x108>
    SD_ReadConfigFile();
 23edf14:	f7fb fbf2 	bl	23e96fc <_Z17SD_ReadConfigFilev>
 23edf18:	e70f      	b.n	23edd3a <setup+0x11e>
    Output("STC:!VALID");
 23edf1a:	482e      	ldr	r0, [pc, #184]	; (23edfd4 <setup+0x3b8>)
 23edf1c:	e72b      	b.n	23edd76 <setup+0x15a>
    Output ("DoAction:ERR");
 23edf1e:	482e      	ldr	r0, [pc, #184]	; (23edfd8 <setup+0x3bc>)
 23edf20:	e7cf      	b.n	23edec2 <setup+0x2a6>
    sprintf (msgbuf, "IMSI:%s", imsi);
 23edf22:	4622      	mov	r2, r4
 23edf24:	492d      	ldr	r1, [pc, #180]	; (23edfdc <setup+0x3c0>)
 23edf26:	4813      	ldr	r0, [pc, #76]	; (23edf74 <setup+0x358>)
 23edf28:	f009 fdcc 	bl	23f7ac4 <sprintf>
    Output (msgbuf);
 23edf2c:	4811      	ldr	r0, [pc, #68]	; (23edf74 <setup+0x358>)
 23edf2e:	e7d9      	b.n	23edee4 <setup+0x2c8>
 23edf30:	1007aa58 	.word	0x1007aa58
 23edf34:	1006a1c8 	.word	0x1006a1c8
 23edf38:	1006a77c 	.word	0x1006a77c
 23edf3c:	1007af40 	.word	0x1007af40
 23edf40:	0001000c 	.word	0x0001000c
 23edf44:	0001d4c0 	.word	0x0001d4c0
 23edf48:	1006a104 	.word	0x1006a104
 23edf4c:	023fe64c 	.word	0x023fe64c
 23edf50:	023fe424 	.word	0x023fe424
 23edf54:	1006a19c 	.word	0x1006a19c
 23edf58:	1006a178 	.word	0x1006a178
 23edf5c:	1006a2a8 	.word	0x1006a2a8
 23edf60:	1006a15f 	.word	0x1006a15f
 23edf64:	1006a2d0 	.word	0x1006a2d0
 23edf68:	023fe68f 	.word	0x023fe68f
 23edf6c:	023fdaa0 	.word	0x023fdaa0
 23edf70:	023fe6a3 	.word	0x023fe6a3
 23edf74:	1006f128 	.word	0x1006f128
 23edf78:	1007abe0 	.word	0x1007abe0
 23edf7c:	023fe6ac 	.word	0x023fe6ac
 23edf80:	023fe6b0 	.word	0x023fe6b0
 23edf84:	023fe6c5 	.word	0x023fe6c5
 23edf88:	023fe6cb 	.word	0x023fe6cb
 23edf8c:	42c80000 	.word	0x42c80000
 23edf90:	023fe6d1 	.word	0x023fe6d1
 23edf94:	1006a938 	.word	0x1006a938
 23edf98:	1006a940 	.word	0x1006a940
 23edf9c:	023e5cb1 	.word	0x023e5cb1
 23edfa0:	1007aa5c 	.word	0x1007aa5c
 23edfa4:	1007aa68 	.word	0x1007aa68
 23edfa8:	1007aa60 	.word	0x1007aa60
 23edfac:	023e5ded 	.word	0x023e5ded
 23edfb0:	023fe6dd 	.word	0x023fe6dd
 23edfb4:	023e9d31 	.word	0x023e9d31
 23edfb8:	023f8195 	.word	0x023f8195
 23edfbc:	023fe6e6 	.word	0x023fe6e6
 23edfc0:	1006ae9c 	.word	0x1006ae9c
 23edfc4:	023fe6ff 	.word	0x023fe6ff
 23edfc8:	023e5cf5 	.word	0x023e5cf5
 23edfcc:	023fe709 	.word	0x023fe709
 23edfd0:	023fe69a 	.word	0x023fe69a
 23edfd4:	023fe6ba 	.word	0x023fe6ba
 23edfd8:	023fe6f2 	.word	0x023fe6f2
 23edfdc:	023fe711 	.word	0x023fe711

023edfe0 <loop>:
void loop() {
 23edfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23edfe2:	b085      	sub	sp, #20
    if (Time.isValid()) {  
 23edfe4:	f00b fc50 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23edfe8:	2800      	cmp	r0, #0
 23edfea:	f000 80a8 	beq.w	23ee13e <loop+0x15e>
      RTC_UpdateCheck();
 23edfee:	f7f8 fb69 	bl	23e66c4 <_Z15RTC_UpdateCheckv>
      if (!eeprom_valid) {
 23edff2:	4ba6      	ldr	r3, [pc, #664]	; (23ee28c <loop+0x2ac>)
 23edff4:	781b      	ldrb	r3, [r3, #0]
 23edff6:	b90b      	cbnz	r3, 23edffc <loop+0x1c>
        EEPROM_Initialize();
 23edff8:	f7fa fdfa 	bl	23e8bf0 <_Z17EEPROM_Initializev>
      if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {  // 1 minute
 23edffc:	f7f7 fef2 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee000:	4aa3      	ldr	r2, [pc, #652]	; (23ee290 <loop+0x2b0>)
 23ee002:	e9d2 3200 	ldrd	r3, r2, [r2]
 23ee006:	1ac0      	subs	r0, r0, r3
 23ee008:	f64e 2361 	movw	r3, #60001	; 0xea61
 23ee00c:	eb61 0102 	sbc.w	r1, r1, r2
 23ee010:	4298      	cmp	r0, r3
 23ee012:	f171 0300 	sbcs.w	r3, r1, #0
 23ee016:	d303      	bcc.n	23ee020 <loop+0x40>
        I2C_Check_Sensors(); // Make sure Sensors are online
 23ee018:	f7fa fb98 	bl	23e874c <_Z17I2C_Check_Sensorsv>
        OBS_Do(); 
 23ee01c:	f7fc fb88 	bl	23ea730 <_Z6OBS_Dov>
      if (SendSystemInformation && Particle.connected()) {
 23ee020:	4b9c      	ldr	r3, [pc, #624]	; (23ee294 <loop+0x2b4>)
 23ee022:	781b      	ldrb	r3, [r3, #0]
 23ee024:	b123      	cbz	r3, 23ee030 <loop+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ee026:	f009 fbef 	bl	23f7808 <spark_cloud_flag_connected>
 23ee02a:	b108      	cbz	r0, 23ee030 <loop+0x50>
        INFO_Do(); // Function sets SendSystemInformation back to false.
 23ee02c:	f7fe ff32 	bl	23ece94 <_Z7INFO_Dov>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23ee030:	4c99      	ldr	r4, [pc, #612]	; (23ee298 <loop+0x2b8>)
 23ee032:	e9d4 2300 	ldrd	r2, r3, [r4]
 23ee036:	4313      	orrs	r3, r2
 23ee038:	d136      	bne.n	23ee0a8 <loop+0xc8>
 23ee03a:	f009 fbe5 	bl	23f7808 <spark_cloud_flag_connected>
        if (Particle.connected()) {
 23ee03e:	2800      	cmp	r0, #0
 23ee040:	d046      	beq.n	23ee0d0 <loop+0xf0>
          Output ("Connected");
 23ee042:	4896      	ldr	r0, [pc, #600]	; (23ee29c <loop+0x2bc>)
 23ee044:	f7f8 fa12 	bl	23e646c <_Z6OutputPKc>
          LastTransmitTime = System.millis();
 23ee048:	f7f7 fecc 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee04c:	e9c4 0100 	strd	r0, r1, [r4]
          if ((System.millis() - LastTimeUpdate) > (4*3600*1000)) {
 23ee050:	f7f7 fec8 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee054:	2500      	movs	r5, #0
 23ee056:	4c92      	ldr	r4, [pc, #584]	; (23ee2a0 <loop+0x2c0>)
 23ee058:	e9d4 3200 	ldrd	r3, r2, [r4]
 23ee05c:	1ac0      	subs	r0, r0, r3
 23ee05e:	4b91      	ldr	r3, [pc, #580]	; (23ee2a4 <loop+0x2c4>)
 23ee060:	eb61 0102 	sbc.w	r1, r1, r2
 23ee064:	4283      	cmp	r3, r0
 23ee066:	eb75 0301 	sbcs.w	r3, r5, r1
 23ee06a:	d209      	bcs.n	23ee080 <loop+0xa0>
 23ee06c:	f009 fbcc 	bl	23f7808 <spark_cloud_flag_connected>
        if (!connected()) {
 23ee070:	b110      	cbz	r0, 23ee078 <loop+0x98>
        return spark_sync_time(NULL);
 23ee072:	4628      	mov	r0, r5
 23ee074:	f009 fbf2 	bl	23f785c <spark_sync_time>
            LastTimeUpdate = System.millis();
 23ee078:	f7f7 feb4 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee07c:	e9c4 0100 	strd	r0, r1, [r4]
          OBS_PublishAll();
 23ee080:	f7ff fd52 	bl	23edb28 <_Z14OBS_PublishAllv>
          if (ws_refresh) {
 23ee084:	4b88      	ldr	r3, [pc, #544]	; (23ee2a8 <loop+0x2c8>)
 23ee086:	781b      	ldrb	r3, [r3, #0]
 23ee088:	b123      	cbz	r3, 23ee094 <loop+0xb4>
            Output ("WS Refresh Required");
 23ee08a:	4888      	ldr	r0, [pc, #544]	; (23ee2ac <loop+0x2cc>)
 23ee08c:	f7f8 f9ee 	bl	23e646c <_Z6OutputPKc>
            Wind_Distance_Air_Initialize();
 23ee090:	f7fe fdb8 	bl	23ecc04 <_Z28Wind_Distance_Air_Initializev>
          stc_timestamp();
 23ee094:	f7f8 fa66 	bl	23e6564 <_Z13stc_timestampv>
          Output(timestamp);
 23ee098:	4885      	ldr	r0, [pc, #532]	; (23ee2b0 <loop+0x2d0>)
 23ee09a:	f7f8 f9e7 	bl	23e646c <_Z6OutputPKc>
          Output_CellBatteryInfo();
 23ee09e:	f7fe faf1 	bl	23ec684 <_Z22Output_CellBatteryInfov>
          JPO_ClearBits();
 23ee0a2:	f7f8 f81b 	bl	23e60dc <_Z13JPO_ClearBitsv>
 23ee0a6:	e013      	b.n	23ee0d0 <loop+0xf0>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23ee0a8:	f7f7 fe9c 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee0ac:	e9d4 3200 	ldrd	r3, r2, [r4]
 23ee0b0:	f64e 2560 	movw	r5, #60000	; 0xea60
 23ee0b4:	4e7f      	ldr	r6, [pc, #508]	; (23ee2b4 <loop+0x2d4>)
 23ee0b6:	1ac0      	subs	r0, r0, r3
 23ee0b8:	6833      	ldr	r3, [r6, #0]
 23ee0ba:	eb61 0102 	sbc.w	r1, r1, r2
 23ee0be:	fba3 3205 	umull	r3, r2, r3, r5
 23ee0c2:	6877      	ldr	r7, [r6, #4]
 23ee0c4:	4283      	cmp	r3, r0
 23ee0c6:	fb05 2207 	mla	r2, r5, r7, r2
 23ee0ca:	eb72 0301 	sbcs.w	r3, r2, r1
 23ee0ce:	d3b4      	bcc.n	23ee03a <loop+0x5a>
      BackGroundWork();
 23ee0d0:	f7fe fdf0 	bl	23eccb4 <_Z14BackGroundWorkv>
    if ((cf_reboot_countdown_timer>0) && (--DailyRebootCountDownTimer<=0)) {
 23ee0d4:	4e78      	ldr	r6, [pc, #480]	; (23ee2b8 <loop+0x2d8>)
 23ee0d6:	6833      	ldr	r3, [r6, #0]
 23ee0d8:	2b00      	cmp	r3, #0
 23ee0da:	dd65      	ble.n	23ee1a8 <loop+0x1c8>
 23ee0dc:	4d77      	ldr	r5, [pc, #476]	; (23ee2bc <loop+0x2dc>)
 23ee0de:	682b      	ldr	r3, [r5, #0]
 23ee0e0:	3b01      	subs	r3, #1
 23ee0e2:	2b00      	cmp	r3, #0
 23ee0e4:	602b      	str	r3, [r5, #0]
 23ee0e6:	dc5f      	bgt.n	23ee1a8 <loop+0x1c8>
      Output ("Daily Reboot");
 23ee0e8:	4875      	ldr	r0, [pc, #468]	; (23ee2c0 <loop+0x2e0>)
 23ee0ea:	f7f8 f9bf 	bl	23e646c <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ee0ee:	f009 fb8b 	bl	23f7808 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23ee0f2:	b108      	cbz	r0, 23ee0f8 <loop+0x118>
        OBS_PublishAll();
 23ee0f4:	f7ff fd18 	bl	23edb28 <_Z14OBS_PublishAllv>
      EEPROM_SaveUnreportedRain();
 23ee0f8:	f7fa fe6a 	bl	23e8dd0 <_Z25EEPROM_SaveUnreportedRainv>
      delay(1000);
 23ee0fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ee100:	f009 fdc0 	bl	23f7c84 <delay>
        reconnect_(reconnect) {
 23ee104:	2300      	movs	r3, #0
      Particle.disconnect();
 23ee106:	a801      	add	r0, sp, #4
 23ee108:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23ee10c:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23ee110:	f88d 300e 	strb.w	r3, [sp, #14]
 23ee114:	f00a f865 	bl	23f81e2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23ee118:	f7f7 fe64 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee11c:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23ee11e:	f7f7 fe61 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee122:	1b00      	subs	r0, r0, r4
 23ee124:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23ee128:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23ee12c:	f171 0300 	sbcs.w	r3, r1, #0
 23ee130:	d212      	bcs.n	23ee158 <loop+0x178>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ee132:	f009 fb69 	bl	23f7808 <spark_cloud_flag_connected>
 23ee136:	b178      	cbz	r0, 23ee158 <loop+0x178>
            spark_process();
 23ee138:	f009 fb4a 	bl	23f77d0 <spark_process>
        while (_while() && !_condition()) {
 23ee13c:	e7ef      	b.n	23ee11e <loop+0x13e>
      stc_timestamp();
 23ee13e:	f7f8 fa11 	bl	23e6564 <_Z13stc_timestampv>
      Output(timestamp);
 23ee142:	485b      	ldr	r0, [pc, #364]	; (23ee2b0 <loop+0x2d0>)
 23ee144:	f7f8 f992 	bl	23e646c <_Z6OutputPKc>
      Output("ERR: No Clock");
 23ee148:	485e      	ldr	r0, [pc, #376]	; (23ee2c4 <loop+0x2e4>)
 23ee14a:	f7f8 f98f 	bl	23e646c <_Z6OutputPKc>
      delay (DELAY_NO_RTC);
 23ee14e:	f64e 2060 	movw	r0, #60000	; 0xea60
 23ee152:	f009 fd97 	bl	23f7c84 <delay>
 23ee156:	e7bd      	b.n	23ee0d4 <loop+0xf4>
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
 23ee158:	4c5b      	ldr	r4, [pc, #364]	; (23ee2c8 <loop+0x2e8>)
 23ee15a:	f009 fb55 	bl	23f7808 <spark_cloud_flag_connected>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ee15e:	2200      	movs	r2, #0
 23ee160:	2102      	movs	r1, #2
 23ee162:	6860      	ldr	r0, [r4, #4]
 23ee164:	f009 fbdc 	bl	23f7920 <network_disconnect>
      delay(1000);
 23ee168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ee16c:	f009 fd8a 	bl	23f7c84 <delay>
      Cellular.off();
 23ee170:	4620      	mov	r0, r4
 23ee172:	f7f7 fe31 	bl	23e5dd8 <_ZN5spark13CellularClass3offEv>
      Output("Rebooting");  
 23ee176:	4855      	ldr	r0, [pc, #340]	; (23ee2cc <loop+0x2ec>)
 23ee178:	f7f8 f978 	bl	23e646c <_Z6OutputPKc>
      delay(1000);
 23ee17c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ee180:	f009 fd80 	bl	23f7c84 <delay>
      DeviceReset();
 23ee184:	f7fb fdbe 	bl	23e9d04 <_Z11DeviceResetv>
      Output("I'm Alive! Why?");  
 23ee188:	4851      	ldr	r0, [pc, #324]	; (23ee2d0 <loop+0x2f0>)
 23ee18a:	f7f8 f96f 	bl	23e646c <_Z6OutputPKc>
		  Cellular.on();
 23ee18e:	4620      	mov	r0, r4
 23ee190:	f7f7 fe1c 	bl	23e5dcc <_ZN5spark13CellularClass2onEv>
      delay(1000);
 23ee194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ee198:	f009 fd74 	bl	23f7c84 <delay>
        spark_cloud_flag_connect();
 23ee19c:	f009 fb26 	bl	23f77ec <spark_cloud_flag_connect>
      DailyRebootCountDownTimer = cf_reboot_countdown_timer; // Reset count incase reboot fails
 23ee1a0:	6833      	ldr	r3, [r6, #0]
 23ee1a2:	602b      	str	r3, [r5, #0]
      Wind_Distance_Air_Initialize();
 23ee1a4:	f7fe fd2e 	bl	23ecc04 <_Z28Wind_Distance_Air_Initializev>
    if ((System.powerSource() == POWER_SOURCE_BATTERY) && (System.batteryCharge() <= 15.0)) {
 23ee1a8:	f7fe faba 	bl	23ec720 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23ee1ac:	2805      	cmp	r0, #5
 23ee1ae:	d16a      	bne.n	23ee286 <loop+0x2a6>
 23ee1b0:	f7fc faa0 	bl	23ea6f4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23ee1b4:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 23ee1b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ee1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee1c0:	d861      	bhi.n	23ee286 <loop+0x2a6>
      Output("Low Power!");
 23ee1c2:	4844      	ldr	r0, [pc, #272]	; (23ee2d4 <loop+0x2f4>)
 23ee1c4:	f7f8 f952 	bl	23e646c <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ee1c8:	f009 fb1e 	bl	23f7808 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23ee1cc:	b118      	cbz	r0, 23ee1d6 <loop+0x1f6>
        OBS_PublishAll(); 
 23ee1ce:	f7ff fcab 	bl	23edb28 <_Z14OBS_PublishAllv>
        INFO_Do();
 23ee1d2:	f7fe fe5f 	bl	23ece94 <_Z7INFO_Dov>
        reconnect_(reconnect) {
 23ee1d6:	2300      	movs	r3, #0
      Particle.disconnect();
 23ee1d8:	a801      	add	r0, sp, #4
 23ee1da:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23ee1de:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23ee1e2:	f88d 300e 	strb.w	r3, [sp, #14]
 23ee1e6:	f009 fffc 	bl	23f81e2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23ee1ea:	f7f7 fdfb 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee1ee:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23ee1f0:	f7f7 fdf8 	bl	23e5de4 <_ZN11SystemClass6millisEv>
 23ee1f4:	1b00      	subs	r0, r0, r4
 23ee1f6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23ee1fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23ee1fe:	f171 0300 	sbcs.w	r3, r1, #0
 23ee202:	d205      	bcs.n	23ee210 <loop+0x230>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ee204:	f009 fb00 	bl	23f7808 <spark_cloud_flag_connected>
 23ee208:	b110      	cbz	r0, 23ee210 <loop+0x230>
            spark_process();
 23ee20a:	f009 fae1 	bl	23f77d0 <spark_process>
        while (_while() && !_condition()) {
 23ee20e:	e7ef      	b.n	23ee1f0 <loop+0x210>
 23ee210:	4c2d      	ldr	r4, [pc, #180]	; (23ee2c8 <loop+0x2e8>)
 23ee212:	f009 faf9 	bl	23f7808 <spark_cloud_flag_connected>
 23ee216:	2200      	movs	r2, #0
 23ee218:	2102      	movs	r1, #2
 23ee21a:	6860      	ldr	r0, [r4, #4]
 23ee21c:	f009 fb80 	bl	23f7920 <network_disconnect>
      delay(1000);
 23ee220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ee224:	f009 fd2e 	bl	23f7c84 <delay>
      Cellular.off();
 23ee228:	4620      	mov	r0, r4
 23ee22a:	f7f7 fdd5 	bl	23e5dd8 <_ZN5spark13CellularClass3offEv>
      if (LORA_exists) {
 23ee22e:	4b2a      	ldr	r3, [pc, #168]	; (23ee2d8 <loop+0x2f8>)
 23ee230:	781b      	ldrb	r3, [r3, #0]
 23ee232:	b113      	cbz	r3, 23ee23a <loop+0x25a>
        rf95.sleep(); // Power Down LoRa. Note: it turn on when accessed
 23ee234:	4829      	ldr	r0, [pc, #164]	; (23ee2dc <loop+0x2fc>)
 23ee236:	f004 fc4e 	bl	23f2ad6 <_ZN7RH_RF955sleepEv>
      Output("Powering Down");
 23ee23a:	4829      	ldr	r0, [pc, #164]	; (23ee2e0 <loop+0x300>)
 23ee23c:	f7f8 f916 	bl	23e646c <_Z6OutputPKc>
      OLED_sleepDisplay();
 23ee240:	f7f7 ff62 	bl	23e6108 <_Z17OLED_sleepDisplayv>
      delay(5000);
 23ee244:	f241 3088 	movw	r0, #5000	; 0x1388
 23ee248:	f009 fd1c 	bl	23f7c84 <delay>
		  pmic.disableBATFET();
 23ee24c:	4825      	ldr	r0, [pc, #148]	; (23ee2e4 <loop+0x304>)
 23ee24e:	f00a feda 	bl	23f9006 <_ZN4PMIC13disableBATFETEv>
		  delay(2000);
 23ee252:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ee256:	f009 fd15 	bl	23f7c84 <delay>
      OLED_wakeDisplay();   // May need to toggle the Display reset pin.
 23ee25a:	f7f7 ff6b 	bl	23e6134 <_Z16OLED_wakeDisplayv>
		  delay(2000);
 23ee25e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ee262:	f009 fd0f 	bl	23f7c84 <delay>
		  Output("Power Re-applied");
 23ee266:	4820      	ldr	r0, [pc, #128]	; (23ee2e8 <loop+0x308>)
 23ee268:	f7f8 f900 	bl	23e646c <_Z6OutputPKc>
		  pmic.enableBATFET();
 23ee26c:	481d      	ldr	r0, [pc, #116]	; (23ee2e4 <loop+0x304>)
 23ee26e:	f00a feb5 	bl	23f8fdc <_ZN4PMIC12enableBATFETEv>
		  Cellular.on();
 23ee272:	4815      	ldr	r0, [pc, #84]	; (23ee2c8 <loop+0x2e8>)
 23ee274:	f7f7 fdaa 	bl	23e5dcc <_ZN5spark13CellularClass2onEv>
        spark_cloud_flag_connect();
 23ee278:	f009 fab8 	bl	23f77ec <spark_cloud_flag_connect>
}
 23ee27c:	b005      	add	sp, #20
 23ee27e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Wind_Distance_Air_Initialize();
 23ee282:	f7fe bcbf 	b.w	23ecc04 <_Z28Wind_Distance_Air_Initializev>
}
 23ee286:	b005      	add	sp, #20
 23ee288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ee28a:	bf00      	nop
 23ee28c:	1006ae7c 	.word	0x1006ae7c
 23ee290:	1006aeb0 	.word	0x1006aeb0
 23ee294:	1006a175 	.word	0x1006a175
 23ee298:	1006a2c0 	.word	0x1006a2c0
 23ee29c:	023fe719 	.word	0x023fe719
 23ee2a0:	1006a2b8 	.word	0x1006a2b8
 23ee2a4:	00dbba00 	.word	0x00dbba00
 23ee2a8:	1007ae58 	.word	0x1007ae58
 23ee2ac:	023fe723 	.word	0x023fe723
 23ee2b0:	1007abe0 	.word	0x1007abe0
 23ee2b4:	1006a1a8 	.word	0x1006a1a8
 23ee2b8:	1006a19c 	.word	0x1006a19c
 23ee2bc:	1006a2a8 	.word	0x1006a2a8
 23ee2c0:	023fe745 	.word	0x023fe745
 23ee2c4:	023fe737 	.word	0x023fe737
 23ee2c8:	1007aeb8 	.word	0x1007aeb8
 23ee2cc:	023fe752 	.word	0x023fe752
 23ee2d0:	023fe75c 	.word	0x023fe75c
 23ee2d4:	023fe76c 	.word	0x023fe76c
 23ee2d8:	1006a2b1 	.word	0x1006a2b1
 23ee2dc:	1007aa88 	.word	0x1007aa88
 23ee2e0:	023fe777 	.word	0x023fe777
 23ee2e4:	1007aa58 	.word	0x1007aa58
 23ee2e8:	023fe785 	.word	0x023fe785

023ee2ec <_ZL9xor_blockPhS_>:
  return pgm_read_byte (& s_inv [x]) ;
}


static void xor_block (byte * d, byte * s)
{
 23ee2ec:	b510      	push	{r4, lr}
 23ee2ee:	1d0b      	adds	r3, r1, #4
 23ee2f0:	3004      	adds	r0, #4
 23ee2f2:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ ^= *s++ ;  // some unrolling
 23ee2f4:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23ee2f8:	f810 2c04 	ldrb.w	r2, [r0, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee2fc:	3304      	adds	r3, #4
      *d++ ^= *s++ ;  // some unrolling
 23ee2fe:	4062      	eors	r2, r4
 23ee300:	f800 2c04 	strb.w	r2, [r0, #-4]
      *d++ ^= *s++ ;
 23ee304:	f813 4c07 	ldrb.w	r4, [r3, #-7]
 23ee308:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee30c:	3004      	adds	r0, #4
      *d++ ^= *s++ ;
 23ee30e:	4062      	eors	r2, r4
 23ee310:	f800 2c07 	strb.w	r2, [r0, #-7]
      *d++ ^= *s++ ;
 23ee314:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23ee318:	f810 2c06 	ldrb.w	r2, [r0, #-6]
 23ee31c:	4062      	eors	r2, r4
 23ee31e:	f800 2c06 	strb.w	r2, [r0, #-6]
      *d++ ^= *s++ ;
 23ee322:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23ee326:	f810 2c05 	ldrb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee32a:	428b      	cmp	r3, r1
      *d++ ^= *s++ ;
 23ee32c:	ea82 0204 	eor.w	r2, r2, r4
 23ee330:	f800 2c05 	strb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee334:	d1de      	bne.n	23ee2f4 <_ZL9xor_blockPhS_+0x8>
    }
}
 23ee336:	bd10      	pop	{r4, pc}

023ee338 <_ZL12copy_and_keyPhS_S_>:

static void copy_and_key (byte * d, byte * s, byte * k)
{
 23ee338:	b530      	push	{r4, r5, lr}
 23ee33a:	1d0b      	adds	r3, r1, #4
 23ee33c:	3204      	adds	r2, #4
 23ee33e:	3004      	adds	r0, #4
 23ee340:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23ee342:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23ee346:	f812 5c04 	ldrb.w	r5, [r2, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee34a:	3304      	adds	r3, #4
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23ee34c:	406c      	eors	r4, r5
 23ee34e:	f800 4c04 	strb.w	r4, [r0, #-4]
      *d++ = *s++ ^ *k++ ;
 23ee352:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 23ee356:	f813 4c07 	ldrb.w	r4, [r3, #-7]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee35a:	3204      	adds	r2, #4
      *d++ = *s++ ^ *k++ ;
 23ee35c:	406c      	eors	r4, r5
 23ee35e:	f800 4c03 	strb.w	r4, [r0, #-3]
      *d++ = *s++ ^ *k++ ;
 23ee362:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23ee366:	f812 5c06 	ldrb.w	r5, [r2, #-6]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee36a:	3004      	adds	r0, #4
      *d++ = *s++ ^ *k++ ;
 23ee36c:	406c      	eors	r4, r5
 23ee36e:	f800 4c06 	strb.w	r4, [r0, #-6]
      *d++ = *s++ ^ *k++ ;
 23ee372:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23ee376:	f812 5c05 	ldrb.w	r5, [r2, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee37a:	428b      	cmp	r3, r1
      *d++ = *s++ ^ *k++ ;
 23ee37c:	ea84 0405 	eor.w	r4, r4, r5
 23ee380:	f800 4c05 	strb.w	r4, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ee384:	d1dd      	bne.n	23ee342 <_ZL12copy_and_keyPhS_S_+0xa>
    }
}
 23ee386:	bd30      	pop	{r4, r5, pc}

023ee388 <_ZN3AESC1Ev>:
    }
}

/******************************************************************************/

AES::AES(){
 23ee388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ee38a:	4a11      	ldr	r2, [pc, #68]	; (23ee3d0 <_ZN3AESC1Ev+0x48>)
 23ee38c:	4603      	mov	r3, r0
 23ee38e:	4617      	mov	r7, r2
 23ee390:	f500 758c 	add.w	r5, r0, #280	; 0x118
 23ee394:	f102 0610 	add.w	r6, r2, #16
 23ee398:	462c      	mov	r4, r5
 23ee39a:	6810      	ldr	r0, [r2, #0]
 23ee39c:	6851      	ldr	r1, [r2, #4]
 23ee39e:	3208      	adds	r2, #8
 23ee3a0:	c403      	stmia	r4!, {r0, r1}
 23ee3a2:	42b2      	cmp	r2, r6
 23ee3a4:	4625      	mov	r5, r4
 23ee3a6:	d1f7      	bne.n	23ee398 <_ZN3AESC1Ev+0x10>
	byte ar_iv[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
 23ee3a8:	466a      	mov	r2, sp
 23ee3aa:	6938      	ldr	r0, [r7, #16]
 23ee3ac:	6871      	ldr	r1, [r6, #4]
 23ee3ae:	c203      	stmia	r2!, {r0, r1}
	memcpy(iv,ar_iv,8);
 23ee3b0:	466a      	mov	r2, sp
 23ee3b2:	ca03      	ldmia	r2!, {r0, r1}
	memcpy(iv+8,ar_iv,8);
 23ee3b4:	466a      	mov	r2, sp
	memcpy(iv,ar_iv,8);
 23ee3b6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 23ee3ba:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	memcpy(iv+8,ar_iv,8);
 23ee3be:	ca03      	ldmia	r2!, {r0, r1}
 23ee3c0:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	arr_pad[11] = 0x0c;
	arr_pad[12] = 0x0d;
	arr_pad[13] = 0x0e;
	arr_pad[14] = 0x0f;
	arr_pad[15] = 0x10;
}
 23ee3c4:	4618      	mov	r0, r3
	memcpy(iv+8,ar_iv,8);
 23ee3c6:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
}
 23ee3ca:	b003      	add	sp, #12
 23ee3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ee3ce:	bf00      	nop
 23ee3d0:	023fcf50 	.word	0x023fcf50

023ee3d4 <_ZN3AES12copy_n_bytesEPhS0_h>:
}

/******************************************************************************/

void AES::copy_n_bytes (byte * d, byte * s, byte nn)
{
 23ee3d4:	b570      	push	{r4, r5, r6, lr}
 23ee3d6:	4618      	mov	r0, r3
 23ee3d8:	460c      	mov	r4, r1
 23ee3da:	4615      	mov	r5, r2
  while (nn >= 4)
 23ee3dc:	2803      	cmp	r0, #3
 23ee3de:	f101 0104 	add.w	r1, r1, #4
 23ee3e2:	f105 0504 	add.w	r5, r5, #4
 23ee3e6:	d811      	bhi.n	23ee40c <_ZN3AES12copy_n_bytesEPhS0_h+0x38>
 23ee3e8:	0898      	lsrs	r0, r3, #2
 23ee3ea:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 23ee3ee:	440c      	add	r4, r1
 23ee3f0:	4411      	add	r1, r2
 23ee3f2:	ebc0 1280 	rsb	r2, r0, r0, lsl #6
 23ee3f6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 23ee3fa:	fa51 f080 	uxtab	r0, r1, r0
      *d++ = *s++ ;
      *d++ = *s++ ;
      *d++ = *s++ ;
      nn -= 4 ;
    }
  while (nn--)
 23ee3fe:	4281      	cmp	r1, r0
 23ee400:	d017      	beq.n	23ee432 <_ZN3AES12copy_n_bytesEPhS0_h+0x5e>
    *d++ = *s++ ;
 23ee402:	f811 3b01 	ldrb.w	r3, [r1], #1
 23ee406:	f804 3b01 	strb.w	r3, [r4], #1
  while (nn--)
 23ee40a:	e7f8      	b.n	23ee3fe <_ZN3AES12copy_n_bytesEPhS0_h+0x2a>
      *d++ = *s++ ;  // some unrolling
 23ee40c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
      nn -= 4 ;
 23ee410:	3804      	subs	r0, #4
      *d++ = *s++ ;  // some unrolling
 23ee412:	f801 6c04 	strb.w	r6, [r1, #-4]
      *d++ = *s++ ;
 23ee416:	f815 6c03 	ldrb.w	r6, [r5, #-3]
      nn -= 4 ;
 23ee41a:	b2c0      	uxtb	r0, r0
      *d++ = *s++ ;
 23ee41c:	f801 6c03 	strb.w	r6, [r1, #-3]
      *d++ = *s++ ;
 23ee420:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 23ee424:	f801 6c02 	strb.w	r6, [r1, #-2]
      *d++ = *s++ ;
 23ee428:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 23ee42c:	f801 6c01 	strb.w	r6, [r1, #-1]
  while (nn >= 4)
 23ee430:	e7d4      	b.n	23ee3dc <_ZN3AES12copy_n_bytesEPhS0_h+0x8>
}
 23ee432:	bd70      	pop	{r4, r5, r6, pc}

023ee434 <_ZN3AES7set_keyEPhi>:
  switch (keylen)
 23ee434:	2a80      	cmp	r2, #128	; 0x80
{
 23ee436:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee43a:	4604      	mov	r4, r0
 23ee43c:	4608      	mov	r0, r1
  switch (keylen)
 23ee43e:	d015      	beq.n	23ee46c <_ZN3AES7set_keyEPhi+0x38>
 23ee440:	dc0b      	bgt.n	23ee45a <_ZN3AES7set_keyEPhi+0x26>
 23ee442:	2a18      	cmp	r2, #24
 23ee444:	d068      	beq.n	23ee518 <_ZN3AES7set_keyEPhi+0xe4>
 23ee446:	2a20      	cmp	r2, #32
 23ee448:	d00c      	beq.n	23ee464 <_ZN3AES7set_keyEPhi+0x30>
 23ee44a:	2a10      	cmp	r2, #16
 23ee44c:	d00e      	beq.n	23ee46c <_ZN3AES7set_keyEPhi+0x38>
      round = 0;
 23ee44e:	2300      	movs	r3, #0
      return FAILURE;
 23ee450:	20ff      	movs	r0, #255	; 0xff
      round = 0;
 23ee452:	6023      	str	r3, [r4, #0]
}
 23ee454:	b003      	add	sp, #12
 23ee456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (keylen)
 23ee45a:	2ac0      	cmp	r2, #192	; 0xc0
 23ee45c:	d05c      	beq.n	23ee518 <_ZN3AES7set_keyEPhi+0xe4>
 23ee45e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23ee462:	d1f4      	bne.n	23ee44e <_ZN3AES7set_keyEPhi+0x1a>
      round = 14 ;
 23ee464:	230e      	movs	r3, #14
      keylen = 32; // 14 rounds
 23ee466:	2620      	movs	r6, #32
      round = 14 ;
 23ee468:	6023      	str	r3, [r4, #0]
      break;
 23ee46a:	e002      	b.n	23ee472 <_ZN3AES7set_keyEPhi+0x3e>
      round = 10 ;
 23ee46c:	230a      	movs	r3, #10
      keylen = 16; // 10 rounds
 23ee46e:	2610      	movs	r6, #16
      round = 10 ;
 23ee470:	6023      	str	r3, [r4, #0]
  hi = (round + 1) << 4 ;
 23ee472:	4621      	mov	r1, r4
  copy_n_bytes (key_sched, key, keylen) ;
 23ee474:	b2f7      	uxtb	r7, r6
 23ee476:	4602      	mov	r2, r0
  hi = (round + 1) << 4 ;
 23ee478:	f851 5b04 	ldr.w	r5, [r1], #4
  copy_n_bytes (key_sched, key, keylen) ;
 23ee47c:	463b      	mov	r3, r7
 23ee47e:	4620      	mov	r0, r4
 23ee480:	f7ff ffa8 	bl	23ee3d4 <_ZN3AES12copy_n_bytesEPhS0_h>
 23ee484:	463a      	mov	r2, r7
 23ee486:	46bc      	mov	ip, r7
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ee488:	2101      	movs	r1, #1
  hi = (round + 1) << 4 ;
 23ee48a:	3501      	adds	r5, #1
 23ee48c:	012d      	lsls	r5, r5, #4
  return pgm_read_byte (& s_fwd [x]) ;
 23ee48e:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 23ee54c <_ZN3AES7set_keyEPhi+0x118>
  hi = (round + 1) << 4 ;
 23ee492:	b2ed      	uxtb	r5, r5
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ee494:	42aa      	cmp	r2, r5
 23ee496:	d256      	bcs.n	23ee546 <_ZN3AES7set_keyEPhi+0x112>
 23ee498:	58a0      	ldr	r0, [r4, r2]
      if (cc == next)
 23ee49a:	4594      	cmp	ip, r2
        t[i] = key_sched [cc-4+i] ;
 23ee49c:	9001      	str	r0, [sp, #4]
      if (cc == next)
 23ee49e:	d13f      	bne.n	23ee520 <_ZN3AES7set_keyEPhi+0xec>
  return pgm_read_byte (& s_fwd [x]) ;
 23ee4a0:	f3c0 2307 	ubfx	r3, r0, #8, #8
          t[0] = s_box (t[1]) ^ rc ;
 23ee4a4:	f81e 3003 	ldrb.w	r3, [lr, r3]
          rc = f2 (rc) ;
 23ee4a8:	f011 0f80 	tst.w	r1, #128	; 0x80
          t[0] = s_box (t[1]) ^ rc ;
 23ee4ac:	ea83 0301 	eor.w	r3, r3, r1
 23ee4b0:	f88d 3004 	strb.w	r3, [sp, #4]
  return pgm_read_byte (& s_fwd [x]) ;
 23ee4b4:	f3c0 4307 	ubfx	r3, r0, #16, #8
          t[1] = s_box (t[2]) ;
 23ee4b8:	f81e 3003 	ldrb.w	r3, [lr, r3]
 23ee4bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 23ee4c0:	f88d 3005 	strb.w	r3, [sp, #5]
  return pgm_read_byte (& s_fwd [x]) ;
 23ee4c4:	ea4f 6310 	mov.w	r3, r0, lsr #24
          t[2] = s_box (t[3]) ;
 23ee4c8:	f81e 3003 	ldrb.w	r3, [lr, r3]
  return pgm_read_byte (& s_fwd [x]) ;
 23ee4cc:	b2c0      	uxtb	r0, r0
          t[2] = s_box (t[3]) ;
 23ee4ce:	f88d 3006 	strb.w	r3, [sp, #6]
          t[3] = s_box (ttt) ;
 23ee4d2:	f81e 3000 	ldrb.w	r3, [lr, r0]
          next += keylen ;
 23ee4d6:	44bc      	add	ip, r7
          rc = f2 (rc) ;
 23ee4d8:	bf18      	it	ne
 23ee4da:	f081 011b 	eorne.w	r1, r1, #27
          next += keylen ;
 23ee4de:	fa5f fc8c 	uxtb.w	ip, ip
          t[3] = s_box (ttt) ;
 23ee4e2:	f88d 3007 	strb.w	r3, [sp, #7]
          rc = f2 (rc) ;
 23ee4e6:	b2c9      	uxtb	r1, r1
      else if (keylen == 32 && (cc & 31) == 16)
 23ee4e8:	2304      	movs	r3, #4
 23ee4ea:	1bd0      	subs	r0, r2, r7
 23ee4ec:	b2c0      	uxtb	r0, r0
 23ee4ee:	3004      	adds	r0, #4
 23ee4f0:	3204      	adds	r2, #4
 23ee4f2:	4420      	add	r0, r4
 23ee4f4:	f10d 0904 	add.w	r9, sp, #4
 23ee4f8:	eb04 0a02 	add.w	sl, r4, r2
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ee4fc:	f810 8b01 	ldrb.w	r8, [r0], #1
 23ee500:	f819 bb01 	ldrb.w	fp, [r9], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ee504:	3b01      	subs	r3, #1
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ee506:	ea88 080b 	eor.w	r8, r8, fp
      for (byte i = 0 ; i < N_COL ; i++)
 23ee50a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ee50e:	f80a 8b01 	strb.w	r8, [sl], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ee512:	d1f3      	bne.n	23ee4fc <_ZN3AES7set_keyEPhi+0xc8>
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ee514:	b2d2      	uxtb	r2, r2
 23ee516:	e7bd      	b.n	23ee494 <_ZN3AES7set_keyEPhi+0x60>
      round = 12 ;
 23ee518:	230c      	movs	r3, #12
      keylen = 24; // 12 rounds
 23ee51a:	2618      	movs	r6, #24
      round = 12 ;
 23ee51c:	6023      	str	r3, [r4, #0]
      break;
 23ee51e:	e7a8      	b.n	23ee472 <_ZN3AES7set_keyEPhi+0x3e>
      else if (keylen == 32 && (cc & 31) == 16)
 23ee520:	2e20      	cmp	r6, #32
 23ee522:	d1e1      	bne.n	23ee4e8 <_ZN3AES7set_keyEPhi+0xb4>
 23ee524:	f002 031f 	and.w	r3, r2, #31
 23ee528:	2b10      	cmp	r3, #16
 23ee52a:	d1dd      	bne.n	23ee4e8 <_ZN3AES7set_keyEPhi+0xb4>
 23ee52c:	2304      	movs	r3, #4
 23ee52e:	a801      	add	r0, sp, #4
            t[i] = s_box (t[i]) ;
 23ee530:	f890 8000 	ldrb.w	r8, [r0]
          for (byte i = 0 ; i < 4 ; i++)
 23ee534:	3b01      	subs	r3, #1
            t[i] = s_box (t[i]) ;
 23ee536:	f81e 8008 	ldrb.w	r8, [lr, r8]
          for (byte i = 0 ; i < 4 ; i++)
 23ee53a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            t[i] = s_box (t[i]) ;
 23ee53e:	f800 8b01 	strb.w	r8, [r0], #1
          for (byte i = 0 ; i < 4 ; i++)
 23ee542:	d1f5      	bne.n	23ee530 <_ZN3AES7set_keyEPhi+0xfc>
 23ee544:	e7d0      	b.n	23ee4e8 <_ZN3AES7set_keyEPhi+0xb4>
  return SUCCESS ;
 23ee546:	2000      	movs	r0, #0
 23ee548:	e784      	b.n	23ee454 <_ZN3AES7set_keyEPhi+0x20>
 23ee54a:	bf00      	nop
 23ee54c:	023fe7d8 	.word	0x023fe7d8

023ee550 <_ZN3AES7decryptEPhS0_>:
}

/******************************************************************************/

byte AES::decrypt (byte plain [N_BLOCK], byte cipher [N_BLOCK])
{
 23ee550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee554:	ee07 2a10 	vmov	s14, r2
  if (round)
 23ee558:	6802      	ldr	r2, [r0, #0]
{
 23ee55a:	4605      	mov	r5, r0
 23ee55c:	b095      	sub	sp, #84	; 0x54
  if (round)
 23ee55e:	2a00      	cmp	r2, #0
 23ee560:	f000 8179 	beq.w	23ee856 <_ZN3AES7decryptEPhS0_+0x306>
    {
      byte s1 [N_BLOCK] ;
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ee564:	1d03      	adds	r3, r0, #4
 23ee566:	ae0c      	add	r6, sp, #48	; 0x30
 23ee568:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23ee56c:	4630      	mov	r0, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ee56e:	4cbb      	ldr	r4, [pc, #748]	; (23ee85c <_ZN3AES7decryptEPhS0_+0x30c>)
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ee570:	9307      	str	r3, [sp, #28]
 23ee572:	f7ff fee1 	bl	23ee338 <_ZL12copy_and_keyPhS_S_>
  return pgm_read_byte (& s_inv [x]) ;
 23ee576:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 23ee57a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ee57e:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ee580:	5ca2      	ldrb	r2, [r4, r2]
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ee582:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  return pgm_read_byte (& s_inv [x]) ;
 23ee586:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23ee58a:	ee07 6a90 	vmov	s15, r6
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ee58e:	5ce3      	ldrb	r3, [r4, r3]
 23ee590:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  return pgm_read_byte (& s_inv [x]) ;
 23ee594:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23ee598:	5ce3      	ldrb	r3, [r4, r3]
 23ee59a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  return pgm_read_byte (& s_inv [x]) ;
 23ee59e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23ee5a2:	5ce3      	ldrb	r3, [r4, r3]
 23ee5a4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  byte tt = st[13] ;
 23ee5a8:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ee5ac:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
  return pgm_read_byte (& s_inv [x]) ;
 23ee5b0:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ee5b4:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ee5b6:	5ca2      	ldrb	r2, [r4, r2]
 23ee5b8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  return pgm_read_byte (& s_inv [x]) ;
 23ee5bc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ee5c0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 23ee5c4:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23ee5c6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ee5ca:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  return pgm_read_byte (& s_inv [x]) ;
 23ee5ce:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23ee5d2:	5ce3      	ldrb	r3, [r4, r3]
 23ee5d4:	5ca2      	ldrb	r2, [r4, r2]
 23ee5d6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 23ee5da:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  return pgm_read_byte (& s_inv [x]) ;
 23ee5de:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23ee5e2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 23ee5e6:	5ca2      	ldrb	r2, [r4, r2]
 23ee5e8:	5ce3      	ldrb	r3, [r4, r3]
 23ee5ea:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  return pgm_read_byte (& s_inv [x]) ;
 23ee5ee:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23ee5f2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ee5f6:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [3] ;
 23ee5f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ee5fc:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  return pgm_read_byte (& s_inv [x]) ;
 23ee600:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ee604:	5ce3      	ldrb	r3, [r4, r3]
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ee606:	5ca2      	ldrb	r2, [r4, r2]
 23ee608:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  return pgm_read_byte (& s_inv [x]) ;
 23ee60c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ee610:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
      inv_shift_sub_rows (s1) ;

      for (byte r = round ; --r ; )
 23ee614:	682b      	ldr	r3, [r5, #0]
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ee616:	5ca2      	ldrb	r2, [r4, r2]
 23ee618:	3b01      	subs	r3, #1
 23ee61a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
      for (byte r = round ; --r ; )
 23ee61e:	b2da      	uxtb	r2, r3
 23ee620:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 23ee624:	1d2b      	adds	r3, r5, #4
 23ee626:	9305      	str	r3, [sp, #20]
 23ee628:	9b07      	ldr	r3, [sp, #28]
 23ee62a:	9a05      	ldr	r2, [sp, #20]
 23ee62c:	4293      	cmp	r3, r2
 23ee62e:	f000 8107 	beq.w	23ee840 <_ZN3AES7decryptEPhS0_+0x2f0>
       {
         byte s2 [N_BLOCK] ;
         copy_and_key (s2, s1, (byte*) (key_sched + r * N_BLOCK)) ;
 23ee632:	ee17 1a90 	vmov	r1, s15
 23ee636:	a810      	add	r0, sp, #64	; 0x40
 23ee638:	f7ff fe7e 	bl	23ee338 <_ZL12copy_and_keyPhS_S_>
 23ee63c:	ab0c      	add	r3, sp, #48	; 0x30
 23ee63e:	f04f 0b00 	mov.w	fp, #0
 23ee642:	ee07 3a90 	vmov	s15, r3
 23ee646:	f10d 0940 	add.w	r9, sp, #64	; 0x40
      byte a1 = st [i] ;
 23ee64a:	f899 3000 	ldrb.w	r3, [r9]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ee64e:	f109 0904 	add.w	r9, r9, #4
      byte a1 = st [i] ;
 23ee652:	9306      	str	r3, [sp, #24]
      byte b1 = st [i+1] ;
 23ee654:	f819 3c03 	ldrb.w	r3, [r9, #-3]
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee658:	9906      	ldr	r1, [sp, #24]
      byte b1 = st [i+1] ;
 23ee65a:	9302      	str	r3, [sp, #8]
      byte c1 = st [i+2] ;
 23ee65c:	f819 3c02 	ldrb.w	r3, [r9, #-2]
 23ee660:	9303      	str	r3, [sp, #12]
      byte d1 = st [i+3] ;
 23ee662:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 23ee666:	9304      	str	r3, [sp, #16]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23ee668:	f919 3c04 	ldrsb.w	r3, [r9, #-4]
 23ee66c:	2b00      	cmp	r3, #0
 23ee66e:	9b06      	ldr	r3, [sp, #24]
 23ee670:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ee674:	bfb8      	it	lt
 23ee676:	f083 031b 	eorlt.w	r3, r3, #27
 23ee67a:	fa5f fa83 	uxtb.w	sl, r3
 23ee67e:	9b02      	ldr	r3, [sp, #8]
 23ee680:	ea4f 024a 	mov.w	r2, sl, lsl #1
 23ee684:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ee688:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ee68c:	bf18      	it	ne
 23ee68e:	f083 031b 	eorne.w	r3, r3, #27
 23ee692:	b2db      	uxtb	r3, r3
 23ee694:	9300      	str	r3, [sp, #0]
 23ee696:	9b03      	ldr	r3, [sp, #12]
 23ee698:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ee69c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ee6a0:	bf18      	it	ne
 23ee6a2:	f083 031b 	eorne.w	r3, r3, #27
 23ee6a6:	b2db      	uxtb	r3, r3
 23ee6a8:	9301      	str	r3, [sp, #4]
 23ee6aa:	9b04      	ldr	r3, [sp, #16]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee6ac:	9d01      	ldr	r5, [sp, #4]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23ee6ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ee6b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ee6b6:	bf18      	it	ne
 23ee6b8:	f083 031b 	eorne.w	r3, r3, #27
 23ee6bc:	b2d8      	uxtb	r0, r3
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee6be:	9b00      	ldr	r3, [sp, #0]
 23ee6c0:	f01a 0f80 	tst.w	sl, #128	; 0x80
 23ee6c4:	bf18      	it	ne
 23ee6c6:	f082 021b 	eorne.w	r2, r2, #27
 23ee6ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ee6ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ee6d2:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 23ee6d6:	bf18      	it	ne
 23ee6d8:	f083 031b 	eorne.w	r3, r3, #27
 23ee6dc:	f015 0f80 	tst.w	r5, #128	; 0x80
 23ee6e0:	b2d2      	uxtb	r2, r2
 23ee6e2:	ea4f 0740 	mov.w	r7, r0, lsl #1
 23ee6e6:	bf18      	it	ne
 23ee6e8:	f08c 0c1b 	eorne.w	ip, ip, #27
 23ee6ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 23ee6f0:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23ee6f4:	bf18      	it	ne
 23ee6f6:	f087 071b 	eorne.w	r7, r7, #27
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee6fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 23ee6fe:	bf18      	it	ne
 23ee700:	f088 081b 	eorne.w	r8, r8, #27
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee704:	b2db      	uxtb	r3, r3
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee706:	fa5f f888 	uxtb.w	r8, r8
 23ee70a:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ee70e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee712:	ea81 0108 	eor.w	r1, r1, r8
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee716:	bf18      	it	ne
 23ee718:	f08e 0e1b 	eorne.w	lr, lr, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee71c:	9108      	str	r1, [sp, #32]
 23ee71e:	9902      	ldr	r1, [sp, #8]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee720:	fa5f fc8c 	uxtb.w	ip, ip
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee724:	fa5f fe8e 	uxtb.w	lr, lr
 23ee728:	f01c 0f80 	tst.w	ip, #128	; 0x80
 23ee72c:	ea4f 064c 	mov.w	r6, ip, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee730:	ea81 010e 	eor.w	r1, r1, lr
 23ee734:	9109      	str	r1, [sp, #36]	; 0x24
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee736:	bf18      	it	ne
 23ee738:	f086 061b 	eorne.w	r6, r6, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee73c:	9903      	ldr	r1, [sp, #12]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee73e:	b2ff      	uxtb	r7, r7
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee740:	b2f6      	uxtb	r6, r6
 23ee742:	f017 0f80 	tst.w	r7, #128	; 0x80
 23ee746:	ea4f 0547 	mov.w	r5, r7, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee74a:	ea81 0106 	eor.w	r1, r1, r6
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee74e:	bf18      	it	ne
 23ee750:	f085 051b 	eorne.w	r5, r5, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee754:	910a      	str	r1, [sp, #40]	; 0x28
 23ee756:	9904      	ldr	r1, [sp, #16]
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee758:	b2ed      	uxtb	r5, r5
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee75a:	4069      	eors	r1, r5
 23ee75c:	910b      	str	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee75e:	9903      	ldr	r1, [sp, #12]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee760:	407d      	eors	r5, r7
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee762:	ea81 070a 	eor.w	r7, r1, sl
 23ee766:	9900      	ldr	r1, [sp, #0]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee768:	ea82 0208 	eor.w	r2, r2, r8
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee76c:	404f      	eors	r7, r1
 23ee76e:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ee770:	4057      	eors	r7, r2
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee772:	ea8c 0606 	eor.w	r6, ip, r6
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee776:	404f      	eors	r7, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ee778:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee77a:	4077      	eors	r7, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ee77c:	404f      	eors	r7, r1
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee77e:	ee17 1a90 	vmov	r1, s15
 23ee782:	5de7      	ldrb	r7, [r4, r7]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee784:	ea83 030e 	eor.w	r3, r3, lr
  return pgm_read_byte (& s_inv [x]) ;
 23ee788:	fa5f fe8b 	uxtb.w	lr, fp
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee78c:	f80b 7001 	strb.w	r7, [fp, r1]
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee790:	f10e 0705 	add.w	r7, lr, #5
 23ee794:	a914      	add	r1, sp, #80	; 0x50
 23ee796:	f007 070f 	and.w	r7, r7, #15
 23ee79a:	440f      	add	r7, r1
 23ee79c:	9904      	ldr	r1, [sp, #16]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ee79e:	f10b 0b04 	add.w	fp, fp, #4
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee7a2:	468c      	mov	ip, r1
 23ee7a4:	9900      	ldr	r1, [sp, #0]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ee7a6:	f1bb 0f10 	cmp.w	fp, #16
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee7aa:	ea8c 0c01 	eor.w	ip, ip, r1
 23ee7ae:	9901      	ldr	r1, [sp, #4]
 23ee7b0:	ea81 0c0c 	eor.w	ip, r1, ip
 23ee7b4:	9908      	ldr	r1, [sp, #32]
 23ee7b6:	ea81 0c0c 	eor.w	ip, r1, ip
 23ee7ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ee7bc:	ea83 0c0c 	eor.w	ip, r3, ip
 23ee7c0:	ea81 0c0c 	eor.w	ip, r1, ip
  return pgm_read_byte (& s_inv [x]) ;
 23ee7c4:	ea85 0c0c 	eor.w	ip, r5, ip
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee7c8:	f814 c00c 	ldrb.w	ip, [r4, ip]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee7cc:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee7ce:	f807 cc20 	strb.w	ip, [r7, #-32]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee7d2:	f10e 070a 	add.w	r7, lr, #10
 23ee7d6:	f007 070f 	and.w	r7, r7, #15
 23ee7da:	440f      	add	r7, r1
 23ee7dc:	9906      	ldr	r1, [sp, #24]
 23ee7de:	468c      	mov	ip, r1
 23ee7e0:	9901      	ldr	r1, [sp, #4]
 23ee7e2:	ea8c 0801 	eor.w	r8, ip, r1
 23ee7e6:	ea80 0808 	eor.w	r8, r0, r8
 23ee7ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ee7ec:	ea82 0208 	eor.w	r2, r2, r8
 23ee7f0:	ea82 0201 	eor.w	r2, r2, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ee7f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee7f6:	ea82 0206 	eor.w	r2, r2, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ee7fa:	ea82 0201 	eor.w	r2, r2, r1
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee7fe:	5ca2      	ldrb	r2, [r4, r2]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ee800:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee802:	f807 2c20 	strb.w	r2, [r7, #-32]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ee806:	f10e 020f 	add.w	r2, lr, #15
 23ee80a:	f002 020f 	and.w	r2, r2, #15
 23ee80e:	440a      	add	r2, r1
 23ee810:	9902      	ldr	r1, [sp, #8]
 23ee812:	ea81 0e0a 	eor.w	lr, r1, sl
 23ee816:	9908      	ldr	r1, [sp, #32]
 23ee818:	ea80 0e0e 	eor.w	lr, r0, lr
 23ee81c:	ea81 0e0e 	eor.w	lr, r1, lr
 23ee820:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ee822:	ea83 030e 	eor.w	r3, r3, lr
 23ee826:	ea81 0003 	eor.w	r0, r1, r3
  return pgm_read_byte (& s_inv [x]) ;
 23ee82a:	ea85 0500 	eor.w	r5, r5, r0
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ee82e:	5d63      	ldrb	r3, [r4, r5]
 23ee830:	f802 3c20 	strb.w	r3, [r2, #-32]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ee834:	f47f af09 	bne.w	23ee64a <_ZN3AES7decryptEPhS0_+0xfa>
 23ee838:	9b05      	ldr	r3, [sp, #20]
 23ee83a:	3b10      	subs	r3, #16
 23ee83c:	9305      	str	r3, [sp, #20]
      for (byte r = round ; --r ; )
 23ee83e:	e6f3      	b.n	23ee628 <_ZN3AES7decryptEPhS0_+0xd8>
         inv_mix_sub_columns (s1, s2) ;
       }
      copy_and_key (cipher, s1, (byte*) (key_sched)) ;
 23ee840:	ee17 0a10 	vmov	r0, s14
 23ee844:	ee17 1a90 	vmov	r1, s15
 23ee848:	9a07      	ldr	r2, [sp, #28]
 23ee84a:	f7ff fd75 	bl	23ee338 <_ZL12copy_and_keyPhS_S_>
    }
  else
    return FAILURE ;
  return SUCCESS ;
 23ee84e:	2000      	movs	r0, #0
}
 23ee850:	b015      	add	sp, #84	; 0x54
 23ee852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FAILURE ;
 23ee856:	20ff      	movs	r0, #255	; 0xff
 23ee858:	e7fa      	b.n	23ee850 <_ZN3AES7decryptEPhS0_+0x300>
 23ee85a:	bf00      	nop
 23ee85c:	023fe8d8 	.word	0x023fe8d8

023ee860 <_ZN3AES11cbc_decryptEPhS0_iS0_>:

/******************************************************************************/

byte AES::cbc_decrypt (byte * cipher, byte * plain, int n_block, byte iv [N_BLOCK])
{
 23ee860:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23ee864:	4607      	mov	r7, r0
 23ee866:	460d      	mov	r5, r1
 23ee868:	4616      	mov	r6, r2
 23ee86a:	461c      	mov	r4, r3
 23ee86c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  while (n_block--)
 23ee870:	b1ec      	cbz	r4, 23ee8ae <_ZN3AES11cbc_decryptEPhS0_iS0_+0x4e>
    {
      byte tmp [N_BLOCK] ;
      copy_n_bytes (tmp, cipher, N_BLOCK) ;
 23ee872:	2310      	movs	r3, #16
 23ee874:	462a      	mov	r2, r5
 23ee876:	4669      	mov	r1, sp
 23ee878:	4638      	mov	r0, r7
 23ee87a:	f7ff fdab 	bl	23ee3d4 <_ZN3AES12copy_n_bytesEPhS0_h>
      if (decrypt (cipher, plain) != SUCCESS)
 23ee87e:	4632      	mov	r2, r6
 23ee880:	4629      	mov	r1, r5
 23ee882:	4638      	mov	r0, r7
 23ee884:	f7ff fe64 	bl	23ee550 <_ZN3AES7decryptEPhS0_>
 23ee888:	3c01      	subs	r4, #1
 23ee88a:	b118      	cbz	r0, 23ee894 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x34>
        return FAILURE ;
 23ee88c:	20ff      	movs	r0, #255	; 0xff
      copy_n_bytes (iv, tmp, N_BLOCK) ;
      plain  += N_BLOCK ;
      cipher += N_BLOCK;
    }
  return SUCCESS ;
}
 23ee88e:	b004      	add	sp, #16
 23ee890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      xor_block (plain, iv) ;
 23ee894:	4630      	mov	r0, r6
 23ee896:	4641      	mov	r1, r8
 23ee898:	f7ff fd28 	bl	23ee2ec <_ZL9xor_blockPhS_>
      copy_n_bytes (iv, tmp, N_BLOCK) ;
 23ee89c:	2310      	movs	r3, #16
 23ee89e:	466a      	mov	r2, sp
 23ee8a0:	4641      	mov	r1, r8
 23ee8a2:	4638      	mov	r0, r7
 23ee8a4:	f7ff fd96 	bl	23ee3d4 <_ZN3AES12copy_n_bytesEPhS0_h>
      plain  += N_BLOCK ;
 23ee8a8:	3610      	adds	r6, #16
      cipher += N_BLOCK;
 23ee8aa:	3510      	adds	r5, #16
  while (n_block--)
 23ee8ac:	e7e0      	b.n	23ee870 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x10>
  return SUCCESS ;
 23ee8ae:	4620      	mov	r0, r4
 23ee8b0:	e7ed      	b.n	23ee88e <_ZN3AES11cbc_decryptEPhS0_iS0_+0x2e>

023ee8b2 <_ZN3AES6set_IVEy>:
  return SUCCESS ;
}

/*****************************************************************************/

void AES::set_IV(unsigned long long int IVCl){
 23ee8b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	memcpy(iv,&IVCl,8);
 23ee8b4:	466d      	mov	r5, sp
void AES::set_IV(unsigned long long int IVCl){
 23ee8b6:	e9cd 2300 	strd	r2, r3, [sp]
 23ee8ba:	4604      	mov	r4, r0
	memcpy(iv,&IVCl,8);
 23ee8bc:	cd03      	ldmia	r5!, {r0, r1}
	memcpy(iv+8,&IVCl,8);
 23ee8be:	466d      	mov	r5, sp
	memcpy(iv,&IVCl,8);
 23ee8c0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 23ee8c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	IVC = IVCl;
 23ee8c8:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
	memcpy(iv+8,&IVCl,8);
 23ee8cc:	cd03      	ldmia	r5!, {r0, r1}
 23ee8ce:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 23ee8d2:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
}
 23ee8d6:	b003      	add	sp, #12
 23ee8d8:	bd30      	pop	{r4, r5, pc}

023ee8da <_ZN3AES6iv_incEv>:

/******************************************************************************/

void AES::iv_inc(){
	IVC += 1;
 23ee8da:	e9d0 323e 	ldrd	r3, r2, [r0, #248]	; 0xf8
 23ee8de:	3301      	adds	r3, #1
 23ee8e0:	f142 0200 	adc.w	r2, r2, #0
 23ee8e4:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
	memcpy(iv,&IVC,8);
 23ee8e8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee8ec:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ee8f0:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee8f4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	memcpy(iv+8,&IVC,8);
 23ee8f8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee8fc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 23ee900:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee904:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
}
 23ee908:	4770      	bx	lr

023ee90a <_ZN3AES6get_IVEPh>:


/******************************************************************************/

void AES::get_IV(byte *out){
	memcpy(out,&IVC,8);
 23ee90a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee90e:	600b      	str	r3, [r1, #0]
 23ee910:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee914:	604b      	str	r3, [r1, #4]
	memcpy(out+8,&IVC,8);
 23ee916:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee91a:	608b      	str	r3, [r1, #8]
 23ee91c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee920:	60cb      	str	r3, [r1, #12]
}
 23ee922:	4770      	bx	lr

023ee924 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>:
	cbc_encrypt (plain_p, cipher, blocks);
}

/******************************************************************************/

void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ee924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ee928:	4614      	mov	r4, r2
 23ee92a:	461f      	mov	r7, r3
 23ee92c:	4605      	mov	r5, r0
 23ee92e:	460e      	mov	r6, r1
	size = sizel;
 23ee930:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
	set_size(size_c);
	int blocks = size_c / N_BLOCK;
	set_key (key, bits);
 23ee934:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ee938:	f8dd 8020 	ldr.w	r8, [sp, #32]
	set_key (key, bits);
 23ee93c:	f7ff fd7a 	bl	23ee434 <_ZN3AES7set_keyEPhi>
	int blocks = size_c / N_BLOCK;
 23ee940:	2c00      	cmp	r4, #0
 23ee942:	bfb8      	it	lt
 23ee944:	340f      	addlt	r4, #15
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ee946:	463a      	mov	r2, r7
 23ee948:	4631      	mov	r1, r6
 23ee94a:	4628      	mov	r0, r5
 23ee94c:	f8cd 8018 	str.w	r8, [sp, #24]
 23ee950:	1123      	asrs	r3, r4, #4
}
 23ee952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ee956:	f7ff bf83 	b.w	23ee860 <_ZN3AES11cbc_decryptEPhS0_iS0_>

023ee95a <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
    (void)enabled; /* suppress unused warning */
  };
 23ee95a:	4770      	bx	lr

023ee95c <_ZN15Adafruit_BME280C1Ev>:
#include <Wire.h>

/*!
 *  @brief  class constructor
 */
Adafruit_BME280::Adafruit_BME280() : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {}
 23ee95c:	2200      	movs	r2, #0
 23ee95e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ee962:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23ee966:	e9c0 1208 	strd	r1, r2, [r0, #32]
 23ee96a:	6102      	str	r2, [r0, #16]
 23ee96c:	4770      	bx	lr

023ee96e <_ZN15Adafruit_BME2807spixferEh>:
 *   @brief  Encapsulate hardware and software SPI transfer into one
 * function
 *   @param x the data byte to transfer
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ee96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // hardware SPI
  if (_sck == -1)
 23ee972:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ee976:	4604      	mov	r4, r0
  if (_sck == -1)
 23ee978:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ee97a:	460f      	mov	r7, r1
  if (_sck == -1)
 23ee97c:	d104      	bne.n	23ee988 <_ZN15Adafruit_BME2807spixferEh+0x1a>
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
 23ee97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23ee982:	6840      	ldr	r0, [r0, #4]
 23ee984:	f00a bcda 	b.w	23f933c <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23ee988:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23ee98a:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23ee98c:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23ee990:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ee994:	2100      	movs	r1, #0
 23ee996:	b280      	uxth	r0, r0
 23ee998:	f00b fa35 	bl	23f9e06 <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23ee99c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23ee9a0:	fa08 f106 	lsl.w	r1, r8, r6
 23ee9a4:	4039      	ands	r1, r7
 23ee9a6:	b280      	uxth	r0, r0
 23ee9a8:	f00b fa2d 	bl	23f9e06 <digitalWrite>
    digitalWrite(_sck, HIGH);
 23ee9ac:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ee9b0:	2101      	movs	r1, #1
 23ee9b2:	b280      	uxth	r0, r0
 23ee9b4:	f00b fa27 	bl	23f9e06 <digitalWrite>
    if (digitalRead(_miso))
 23ee9b8:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
    reply <<= 1;
 23ee9bc:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23ee9be:	b280      	uxth	r0, r0
    reply <<= 1;
 23ee9c0:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23ee9c2:	f00b fa39 	bl	23f9e38 <digitalRead>
 23ee9c6:	b108      	cbz	r0, 23ee9cc <_ZN15Adafruit_BME2807spixferEh+0x5e>
      reply |= 1;
 23ee9c8:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23ee9cc:	3e01      	subs	r6, #1
 23ee9ce:	d2df      	bcs.n	23ee990 <_ZN15Adafruit_BME2807spixferEh+0x22>
}
 23ee9d0:	4628      	mov	r0, r5
 23ee9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023ee9d8 <_ZN15Adafruit_BME2806write8Ehh>:
/*!
 *   @brief  Writes an 8 bit value over I2C or SPI
 *   @param reg the register address to write to
 *   @param value the value to write to the register
 */
void Adafruit_BME280::write8(byte reg, byte value) {
 23ee9d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23ee9da:	f990 3020 	ldrsb.w	r3, [r0, #32]
void Adafruit_BME280::write8(byte reg, byte value) {
 23ee9de:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ee9e0:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 23ee9e2:	460e      	mov	r6, r1
 23ee9e4:	4615      	mov	r5, r2
  if (_cs == -1) {
 23ee9e6:	d113      	bne.n	23eea10 <_ZN15Adafruit_BME2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ee9e8:	7d01      	ldrb	r1, [r0, #20]
 23ee9ea:	6800      	ldr	r0, [r0, #0]
 23ee9ec:	f009 ff38 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ee9f0:	6820      	ldr	r0, [r4, #0]
 23ee9f2:	4631      	mov	r1, r6
 23ee9f4:	6803      	ldr	r3, [r0, #0]
 23ee9f6:	689b      	ldr	r3, [r3, #8]
 23ee9f8:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23ee9fa:	6820      	ldr	r0, [r4, #0]
 23ee9fc:	4629      	mov	r1, r5
 23ee9fe:	6803      	ldr	r3, [r0, #0]
 23eea00:	689b      	ldr	r3, [r3, #8]
 23eea02:	4798      	blx	r3
    _wire->endTransmission();
 23eea04:	6820      	ldr	r0, [r4, #0]
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
}
 23eea06:	b004      	add	sp, #16
 23eea08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23eea0c:	f009 bf33 	b.w	23f8876 <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23eea10:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23eea14:	3301      	adds	r3, #1
 23eea16:	d10d      	bne.n	23eea34 <_ZN15Adafruit_BME2806write8Ehh+0x5c>
      dataMode_{dataMode}
 23eea18:	4b17      	ldr	r3, [pc, #92]	; (23eea78 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eea1a:	4669      	mov	r1, sp
 23eea1c:	9300      	str	r3, [sp, #0]
 23eea1e:	2300      	movs	r3, #0
 23eea20:	f88d 3004 	strb.w	r3, [sp, #4]
 23eea24:	4b15      	ldr	r3, [pc, #84]	; (23eea7c <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
 23eea26:	6840      	ldr	r0, [r0, #4]
 23eea28:	9302      	str	r3, [sp, #8]
 23eea2a:	2301      	movs	r3, #1
 23eea2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eea30:	f00a fc16 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eea34:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eea38:	2100      	movs	r1, #0
 23eea3a:	b280      	uxth	r0, r0
 23eea3c:	f00b f9e3 	bl	23f9e06 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23eea40:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23eea44:	4620      	mov	r0, r4
 23eea46:	f7ff ff92 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
 23eea4a:	4629      	mov	r1, r5
 23eea4c:	4620      	mov	r0, r4
 23eea4e:	f7ff ff8e 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
 23eea52:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eea56:	2101      	movs	r1, #1
 23eea58:	b280      	uxth	r0, r0
 23eea5a:	f00b f9d4 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23eea5e:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23eea62:	3301      	adds	r3, #1
 23eea64:	d105      	bne.n	23eea72 <_ZN15Adafruit_BME2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23eea66:	6860      	ldr	r0, [r4, #4]
}
 23eea68:	b004      	add	sp, #16
 23eea6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23eea6e:	f00a bbdd 	b.w	23f922c <_ZN8SPIClass14endTransactionEv>
}
 23eea72:	b004      	add	sp, #16
 23eea74:	bd70      	pop	{r4, r5, r6, pc}
 23eea76:	bf00      	nop
 23eea78:	023fe7a0 	.word	0x023fe7a0
 23eea7c:	0007a120 	.word	0x0007a120

023eea80 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23eea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23eea82:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23eea84:	00db      	lsls	r3, r3, #3
 23eea86:	f002 0207 	and.w	r2, r2, #7
 23eea8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 23eea8e:	4313      	orrs	r3, r2
 23eea90:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                                  standby_duration duration) {
 23eea94:	f89d 7018 	ldrb.w	r7, [sp, #24]
  _measReg.osrs_t = tempSampling;
 23eea98:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  _humReg.osrs_h = humSampling;
 23eea9c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
                                  standby_duration duration) {
 23eeaa0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 23eeaa4:	f89d 6020 	ldrb.w	r6, [sp, #32]
  _humReg.osrs_h = humSampling;
 23eeaa8:	f367 1347 	bfi	r3, r7, #5, #3
 23eeaac:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  _configReg.t_sb = duration;
 23eeab0:	00ed      	lsls	r5, r5, #3
 23eeab2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23eeab6:	f006 0607 	and.w	r6, r6, #7
 23eeaba:	f005 0538 	and.w	r5, r5, #56	; 0x38
 23eeabe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 23eeac2:	4335      	orrs	r5, r6
 23eeac4:	431d      	orrs	r5, r3
 23eeac6:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  write8(BME280_REGISTER_CONTROL, MODE_SLEEP);
 23eeaca:	2200      	movs	r2, #0
 23eeacc:	21f4      	movs	r1, #244	; 0xf4
 23eeace:	f7ff ff83 	bl	23ee9d8 <_ZN15Adafruit_BME2806write8Ehh>
    // 100 = x8
    // 101 and above = x16
    unsigned int osrs_h : 3; ///< pressure oversampling

    /// @return combined ctrl hum register
    unsigned int get() { return (osrs_h); }
 23eead2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
  write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 23eead6:	4620      	mov	r0, r4
 23eead8:	21f2      	movs	r1, #242	; 0xf2
 23eeada:	0952      	lsrs	r2, r2, #5
 23eeadc:	f7ff ff7c 	bl	23ee9d8 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23eeae0:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
  write8(BME280_REGISTER_CONFIG, _configReg.get());
 23eeae4:	4620      	mov	r0, r4
 23eeae6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23eeaea:	f002 0107 	and.w	r1, r2, #7
 23eeaee:	009b      	lsls	r3, r3, #2
 23eeaf0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23eeaf4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 23eeaf8:	21f5      	movs	r1, #245	; 0xf5
 23eeafa:	f7ff ff6d 	bl	23ee9d8 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23eeafe:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23eeb02:	4620      	mov	r0, r4
 23eeb04:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23eeb08:	f002 0107 	and.w	r1, r2, #7
 23eeb0c:	009b      	lsls	r3, r3, #2
 23eeb0e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23eeb12:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23eeb16:	21f4      	movs	r1, #244	; 0xf4
}
 23eeb18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23eeb1c:	f7ff bf5c 	b.w	23ee9d8 <_ZN15Adafruit_BME2806write8Ehh>

023eeb20 <_ZN15Adafruit_BME2805read8Eh>:
/*!
 *   @brief  Reads an 8 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::read8(byte reg) {
 23eeb20:	b530      	push	{r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 23eeb22:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_BME280::read8(byte reg) {
 23eeb26:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eeb28:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 23eeb2a:	460d      	mov	r5, r1
 23eeb2c:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eeb2e:	d118      	bne.n	23eeb62 <_ZN15Adafruit_BME2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eeb30:	7d01      	ldrb	r1, [r0, #20]
 23eeb32:	6800      	ldr	r0, [r0, #0]
 23eeb34:	f009 fe94 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23eeb38:	6820      	ldr	r0, [r4, #0]
 23eeb3a:	4629      	mov	r1, r5
 23eeb3c:	6803      	ldr	r3, [r0, #0]
 23eeb3e:	689b      	ldr	r3, [r3, #8]
 23eeb40:	4798      	blx	r3
    _wire->endTransmission();
 23eeb42:	6820      	ldr	r0, [r4, #0]
 23eeb44:	f009 fe97 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23eeb48:	2201      	movs	r2, #1
 23eeb4a:	7d21      	ldrb	r1, [r4, #20]
 23eeb4c:	6820      	ldr	r0, [r4, #0]
 23eeb4e:	f009 fe84 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23eeb52:	6820      	ldr	r0, [r4, #0]
 23eeb54:	6803      	ldr	r3, [r0, #0]
 23eeb56:	695b      	ldr	r3, [r3, #20]
 23eeb58:	4798      	blx	r3
 23eeb5a:	b2c5      	uxtb	r5, r0
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
  return value;
}
 23eeb5c:	4628      	mov	r0, r5
 23eeb5e:	b005      	add	sp, #20
 23eeb60:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23eeb62:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23eeb66:	3301      	adds	r3, #1
 23eeb68:	d10d      	bne.n	23eeb86 <_ZN15Adafruit_BME2805read8Eh+0x66>
 23eeb6a:	4b16      	ldr	r3, [pc, #88]	; (23eebc4 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eeb6c:	4669      	mov	r1, sp
 23eeb6e:	9300      	str	r3, [sp, #0]
 23eeb70:	2300      	movs	r3, #0
 23eeb72:	f88d 3004 	strb.w	r3, [sp, #4]
 23eeb76:	4b14      	ldr	r3, [pc, #80]	; (23eebc8 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 23eeb78:	6840      	ldr	r0, [r0, #4]
 23eeb7a:	9302      	str	r3, [sp, #8]
 23eeb7c:	2301      	movs	r3, #1
 23eeb7e:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eeb82:	f00a fb6d 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eeb86:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eeb8a:	2100      	movs	r1, #0
 23eeb8c:	b280      	uxth	r0, r0
 23eeb8e:	f00b f93a 	bl	23f9e06 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23eeb92:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23eeb96:	4620      	mov	r0, r4
 23eeb98:	f7ff fee9 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23eeb9c:	2100      	movs	r1, #0
 23eeb9e:	4620      	mov	r0, r4
 23eeba0:	f7ff fee5 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
 23eeba4:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23eeba6:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eebaa:	2101      	movs	r1, #1
 23eebac:	b280      	uxth	r0, r0
 23eebae:	f00b f92a 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23eebb2:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23eebb6:	3301      	adds	r3, #1
 23eebb8:	d1d0      	bne.n	23eeb5c <_ZN15Adafruit_BME2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23eebba:	6860      	ldr	r0, [r4, #4]
 23eebbc:	f00a fb36 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
 23eebc0:	e7cc      	b.n	23eeb5c <_ZN15Adafruit_BME2805read8Eh+0x3c>
 23eebc2:	bf00      	nop
 23eebc4:	023fe7a0 	.word	0x023fe7a0
 23eebc8:	0007a120 	.word	0x0007a120

023eebcc <_ZN15Adafruit_BME2806read16Eh>:
/*!
 *   @brief  Reads a 16 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16(byte reg) {
 23eebcc:	b530      	push	{r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
 23eebce:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint16_t Adafruit_BME280::read16(byte reg) {
 23eebd2:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eebd4:	3301      	adds	r3, #1
uint16_t Adafruit_BME280::read16(byte reg) {
 23eebd6:	460d      	mov	r5, r1
 23eebd8:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eebda:	d11f      	bne.n	23eec1c <_ZN15Adafruit_BME2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eebdc:	7d01      	ldrb	r1, [r0, #20]
 23eebde:	6800      	ldr	r0, [r0, #0]
 23eebe0:	f009 fe3e 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23eebe4:	6820      	ldr	r0, [r4, #0]
 23eebe6:	4629      	mov	r1, r5
 23eebe8:	6803      	ldr	r3, [r0, #0]
 23eebea:	689b      	ldr	r3, [r3, #8]
 23eebec:	4798      	blx	r3
    _wire->endTransmission();
 23eebee:	6820      	ldr	r0, [r4, #0]
 23eebf0:	f009 fe41 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23eebf4:	2202      	movs	r2, #2
 23eebf6:	7d21      	ldrb	r1, [r4, #20]
 23eebf8:	6820      	ldr	r0, [r4, #0]
 23eebfa:	f009 fe2e 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23eebfe:	6820      	ldr	r0, [r4, #0]
 23eec00:	6803      	ldr	r3, [r0, #0]
 23eec02:	695b      	ldr	r3, [r3, #20]
 23eec04:	4798      	blx	r3
 23eec06:	4605      	mov	r5, r0
 23eec08:	6820      	ldr	r0, [r4, #0]
 23eec0a:	6803      	ldr	r3, [r0, #0]
 23eec0c:	695b      	ldr	r3, [r3, #20]
 23eec0e:	4798      	blx	r3
 23eec10:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23eec14:	b285      	uxth	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23eec16:	4628      	mov	r0, r5
 23eec18:	b005      	add	sp, #20
 23eec1a:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23eec1c:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23eec20:	3301      	adds	r3, #1
 23eec22:	d10d      	bne.n	23eec40 <_ZN15Adafruit_BME2806read16Eh+0x74>
 23eec24:	4b19      	ldr	r3, [pc, #100]	; (23eec8c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eec26:	4669      	mov	r1, sp
 23eec28:	9300      	str	r3, [sp, #0]
 23eec2a:	2300      	movs	r3, #0
 23eec2c:	f88d 3004 	strb.w	r3, [sp, #4]
 23eec30:	4b17      	ldr	r3, [pc, #92]	; (23eec90 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 23eec32:	6840      	ldr	r0, [r0, #4]
 23eec34:	9302      	str	r3, [sp, #8]
 23eec36:	2301      	movs	r3, #1
 23eec38:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eec3c:	f00a fb10 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eec40:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eec44:	2100      	movs	r1, #0
 23eec46:	b280      	uxth	r0, r0
 23eec48:	f00b f8dd 	bl	23f9e06 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23eec4c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23eec50:	4620      	mov	r0, r4
 23eec52:	f7ff fe8c 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23eec56:	2100      	movs	r1, #0
 23eec58:	4620      	mov	r0, r4
 23eec5a:	f7ff fe88 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
 23eec5e:	2100      	movs	r1, #0
 23eec60:	4605      	mov	r5, r0
 23eec62:	4620      	mov	r0, r4
 23eec64:	f7ff fe83 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
 23eec68:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23eec6c:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23eec6e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eec72:	2101      	movs	r1, #1
 23eec74:	b280      	uxth	r0, r0
 23eec76:	f00b f8c6 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23eec7a:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23eec7e:	3301      	adds	r3, #1
 23eec80:	d1c9      	bne.n	23eec16 <_ZN15Adafruit_BME2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23eec82:	6860      	ldr	r0, [r4, #4]
 23eec84:	f00a fad2 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
 23eec88:	e7c5      	b.n	23eec16 <_ZN15Adafruit_BME2806read16Eh+0x4a>
 23eec8a:	bf00      	nop
 23eec8c:	023fe7a0 	.word	0x023fe7a0
 23eec90:	0007a120 	.word	0x0007a120

023eec94 <_ZN15Adafruit_BME2809read16_LEEh>:
/*!
 *   @brief  Reads a signed 16 bit little endian value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 23eec94:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23eec96:	f7ff ff99 	bl	23eebcc <_ZN15Adafruit_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23eec9a:	ba40      	rev16	r0, r0
}
 23eec9c:	b280      	uxth	r0, r0
 23eec9e:	bd08      	pop	{r3, pc}

023eeca0 <_ZN15Adafruit_BME2806read24Eh>:
/*!
 *   @brief  Reads a 24 bit value over I2C
 *   @param reg the register address to read from
 *   @returns the 24 bit data value read from the device
 */
uint32_t Adafruit_BME280::read24(byte reg) {
 23eeca0:	b530      	push	{r4, r5, lr}
  uint32_t value;

  if (_cs == -1) {
 23eeca2:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint32_t Adafruit_BME280::read24(byte reg) {
 23eeca6:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eeca8:	3301      	adds	r3, #1
uint32_t Adafruit_BME280::read24(byte reg) {
 23eecaa:	460d      	mov	r5, r1
 23eecac:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eecae:	d123      	bne.n	23eecf8 <_ZN15Adafruit_BME2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eecb0:	7d01      	ldrb	r1, [r0, #20]
 23eecb2:	6800      	ldr	r0, [r0, #0]
 23eecb4:	f009 fdd4 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23eecb8:	6820      	ldr	r0, [r4, #0]
 23eecba:	4629      	mov	r1, r5
 23eecbc:	6803      	ldr	r3, [r0, #0]
 23eecbe:	689b      	ldr	r3, [r3, #8]
 23eecc0:	4798      	blx	r3
    _wire->endTransmission();
 23eecc2:	6820      	ldr	r0, [r4, #0]
 23eecc4:	f009 fdd7 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23eecc8:	2203      	movs	r2, #3
 23eecca:	7d21      	ldrb	r1, [r4, #20]
 23eeccc:	6820      	ldr	r0, [r4, #0]
 23eecce:	f009 fdc4 	bl	23f885a <_ZN7TwoWire11requestFromEhj>

    value = _wire->read();
 23eecd2:	6820      	ldr	r0, [r4, #0]
 23eecd4:	6803      	ldr	r3, [r0, #0]
 23eecd6:	695b      	ldr	r3, [r3, #20]
 23eecd8:	4798      	blx	r3
    value <<= 8;
 23eecda:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23eecdc:	6820      	ldr	r0, [r4, #0]
 23eecde:	6803      	ldr	r3, [r0, #0]
 23eece0:	695b      	ldr	r3, [r3, #20]
 23eece2:	4798      	blx	r3
 23eece4:	4328      	orrs	r0, r5
    value <<= 8;
 23eece6:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23eece8:	6820      	ldr	r0, [r4, #0]
 23eecea:	6803      	ldr	r3, [r0, #0]
 23eecec:	695b      	ldr	r3, [r3, #20]
 23eecee:	4798      	blx	r3
 23eecf0:	4305      	orrs	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23eecf2:	4628      	mov	r0, r5
 23eecf4:	b005      	add	sp, #20
 23eecf6:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23eecf8:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23eecfc:	3301      	adds	r3, #1
 23eecfe:	d10d      	bne.n	23eed1c <_ZN15Adafruit_BME2806read24Eh+0x7c>
 23eed00:	4b1b      	ldr	r3, [pc, #108]	; (23eed70 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eed02:	4669      	mov	r1, sp
 23eed04:	9300      	str	r3, [sp, #0]
 23eed06:	2300      	movs	r3, #0
 23eed08:	f88d 3004 	strb.w	r3, [sp, #4]
 23eed0c:	4b19      	ldr	r3, [pc, #100]	; (23eed74 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 23eed0e:	6840      	ldr	r0, [r0, #4]
 23eed10:	9302      	str	r3, [sp, #8]
 23eed12:	2301      	movs	r3, #1
 23eed14:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eed18:	f00a faa2 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eed1c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eed20:	2100      	movs	r1, #0
 23eed22:	b280      	uxth	r0, r0
 23eed24:	f00b f86f 	bl	23f9e06 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23eed28:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23eed2c:	4620      	mov	r0, r4
 23eed2e:	f7ff fe1e 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23eed32:	2100      	movs	r1, #0
 23eed34:	4620      	mov	r0, r4
 23eed36:	f7ff fe1a 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
    value |= spixfer(0);
 23eed3a:	2100      	movs	r1, #0
    value <<= 8;
 23eed3c:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23eed3e:	4620      	mov	r0, r4
 23eed40:	f7ff fe15 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
 23eed44:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23eed46:	2100      	movs	r1, #0
    value <<= 8;
 23eed48:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23eed4a:	4620      	mov	r0, r4
 23eed4c:	f7ff fe0f 	bl	23ee96e <_ZN15Adafruit_BME2807spixferEh>
 23eed50:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23eed52:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eed56:	2101      	movs	r1, #1
 23eed58:	b280      	uxth	r0, r0
 23eed5a:	f00b f854 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23eed5e:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23eed62:	3301      	adds	r3, #1
 23eed64:	d1c5      	bne.n	23eecf2 <_ZN15Adafruit_BME2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23eed66:	6860      	ldr	r0, [r4, #4]
 23eed68:	f00a fa60 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
  return value;
 23eed6c:	e7c1      	b.n	23eecf2 <_ZN15Adafruit_BME2806read24Eh+0x52>
 23eed6e:	bf00      	nop
 23eed70:	023fe7a0 	.word	0x023fe7a0
 23eed74:	0007a120 	.word	0x0007a120

023eed78 <_ZN15Adafruit_BME28016readCoefficientsEv>:
}

/*!
 *   @brief  Reads the factory-set coefficients
 */
void Adafruit_BME280::readCoefficients(void) {
 23eed78:	b538      	push	{r3, r4, r5, lr}
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23eed7a:	2188      	movs	r1, #136	; 0x88
void Adafruit_BME280::readCoefficients(void) {
 23eed7c:	4604      	mov	r4, r0
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23eed7e:	f7ff ff89 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23eed82:	218a      	movs	r1, #138	; 0x8a
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23eed84:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23eed86:	4620      	mov	r0, r4
 23eed88:	f7ff ff84 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eed8c:	218c      	movs	r1, #140	; 0x8c
  _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 23eed8e:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23eed90:	4620      	mov	r0, r4
 23eed92:	f7ff ff7f 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23eed96:	218e      	movs	r1, #142	; 0x8e
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 23eed98:	85a0      	strh	r0, [r4, #44]	; 0x2c
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23eed9a:	4620      	mov	r0, r4
 23eed9c:	f7ff ff7a 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23eeda0:	2190      	movs	r1, #144	; 0x90
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23eeda2:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23eeda4:	4620      	mov	r0, r4
 23eeda6:	f7ff ff75 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eedaa:	2192      	movs	r1, #146	; 0x92
  _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 23eedac:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23eedae:	4620      	mov	r0, r4
 23eedb0:	f7ff ff70 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eedb4:	2194      	movs	r1, #148	; 0x94
  _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 23eedb6:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23eedb8:	4620      	mov	r0, r4
 23eedba:	f7ff ff6b 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eedbe:	2196      	movs	r1, #150	; 0x96
  _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 23eedc0:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23eedc2:	4620      	mov	r0, r4
 23eedc4:	f7ff ff66 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eedc8:	2198      	movs	r1, #152	; 0x98
  _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 23eedca:	86e0      	strh	r0, [r4, #54]	; 0x36
  return (int16_t)read16_LE(reg);
 23eedcc:	4620      	mov	r0, r4
 23eedce:	f7ff ff61 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eedd2:	219a      	movs	r1, #154	; 0x9a
  _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 23eedd4:	8720      	strh	r0, [r4, #56]	; 0x38
  return (int16_t)read16_LE(reg);
 23eedd6:	4620      	mov	r0, r4
 23eedd8:	f7ff ff5c 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eeddc:	219c      	movs	r1, #156	; 0x9c
  _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 23eedde:	8760      	strh	r0, [r4, #58]	; 0x3a
  return (int16_t)read16_LE(reg);
 23eede0:	4620      	mov	r0, r4
 23eede2:	f7ff ff57 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
 23eede6:	219e      	movs	r1, #158	; 0x9e
  _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 23eede8:	87a0      	strh	r0, [r4, #60]	; 0x3c
  return (int16_t)read16_LE(reg);
 23eedea:	4620      	mov	r0, r4
 23eedec:	f7ff ff52 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23eedf0:	21a1      	movs	r1, #161	; 0xa1
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 23eedf2:	87e0      	strh	r0, [r4, #62]	; 0x3e
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23eedf4:	4620      	mov	r0, r4
 23eedf6:	f7ff fe93 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
  return (int16_t)read16_LE(reg);
 23eedfa:	21e1      	movs	r1, #225	; 0xe1
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23eedfc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return (int16_t)read16_LE(reg);
 23eee00:	4620      	mov	r0, r4
 23eee02:	f7ff ff47 	bl	23eec94 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23eee06:	21e3      	movs	r1, #227	; 0xe3
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 23eee08:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23eee0c:	4620      	mov	r0, r4
 23eee0e:	f7ff fe87 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23eee12:	21e4      	movs	r1, #228	; 0xe4
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23eee14:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23eee18:	4620      	mov	r0, r4
 23eee1a:	f7ff fe81 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23eee1e:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23eee20:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23eee22:	4620      	mov	r0, r4
 23eee24:	f7ff fe7c 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23eee28:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23eee2a:	f000 000f 	and.w	r0, r0, #15
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23eee2e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23eee32:	21e6      	movs	r1, #230	; 0xe6
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23eee34:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23eee38:	4620      	mov	r0, r4
 23eee3a:	f7ff fe71 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23eee3e:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23eee40:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23eee42:	4620      	mov	r0, r4
 23eee44:	f7ff fe6c 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23eee48:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23eee4a:	f3c0 1007 	ubfx	r0, r0, #4, #8
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23eee4e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 23eee52:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 23eee56:	21e7      	movs	r1, #231	; 0xe7
 23eee58:	4620      	mov	r0, r4
 23eee5a:	f7ff fe61 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
 23eee5e:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
}
 23eee62:	bd38      	pop	{r3, r4, r5, pc}

023eee64 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
 *   @brief return true if chip is busy reading cal data
 *   @returns true if reading calibration, false otherwise
 */
bool Adafruit_BME280::isReadingCalibration(void) {
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23eee64:	21f3      	movs	r1, #243	; 0xf3
bool Adafruit_BME280::isReadingCalibration(void) {
 23eee66:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23eee68:	f7ff fe5a 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 23eee6c:	f000 0001 	and.w	r0, r0, #1
 23eee70:	bd08      	pop	{r3, pc}

023eee72 <_ZN15Adafruit_BME2804initEv>:
bool Adafruit_BME280::init() {
 23eee72:	b530      	push	{r4, r5, lr}
 23eee74:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eee76:	f990 0020 	ldrsb.w	r0, [r0, #32]
bool Adafruit_BME280::init() {
 23eee7a:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eee7c:	1c42      	adds	r2, r0, #1
 23eee7e:	d129      	bne.n	23eeed4 <_ZN15Adafruit_BME2804initEv+0x62>
    _wire->begin();
 23eee80:	6820      	ldr	r0, [r4, #0]
 23eee82:	f009 fcc3 	bl	23f880c <_ZN7TwoWire5beginEv>
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23eee86:	21d0      	movs	r1, #208	; 0xd0
 23eee88:	4620      	mov	r0, r4
 23eee8a:	f7ff fe49 	bl	23eeb20 <_ZN15Adafruit_BME2805read8Eh>
  if (_sensorID != 0x60)
 23eee8e:	2860      	cmp	r0, #96	; 0x60
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23eee90:	61a0      	str	r0, [r4, #24]
  if (_sensorID != 0x60)
 23eee92:	d142      	bne.n	23eef1a <_ZN15Adafruit_BME2804initEv+0xa8>
  write8(BME280_REGISTER_SOFTRESET, 0xB6);
 23eee94:	22b6      	movs	r2, #182	; 0xb6
 23eee96:	21e0      	movs	r1, #224	; 0xe0
 23eee98:	4620      	mov	r0, r4
 23eee9a:	f7ff fd9d 	bl	23ee9d8 <_ZN15Adafruit_BME2806write8Ehh>
  delay(10);
 23eee9e:	200a      	movs	r0, #10
 23eeea0:	f008 fef0 	bl	23f7c84 <delay>
  while (isReadingCalibration())
 23eeea4:	4620      	mov	r0, r4
 23eeea6:	f7ff ffdd 	bl	23eee64 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 23eeeaa:	4605      	mov	r5, r0
 23eeeac:	2800      	cmp	r0, #0
 23eeeae:	d1f6      	bne.n	23eee9e <_ZN15Adafruit_BME2804initEv+0x2c>
  readCoefficients(); // read trimming parameters, see DS 4.2.2
 23eeeb0:	4620      	mov	r0, r4
 23eeeb2:	f7ff ff61 	bl	23eed78 <_ZN15Adafruit_BME28016readCoefficientsEv>
  setSampling(); // use defaults
 23eeeb6:	2305      	movs	r3, #5
 23eeeb8:	2103      	movs	r1, #3
 23eeeba:	461a      	mov	r2, r3
 23eeebc:	4620      	mov	r0, r4
 23eeebe:	9300      	str	r3, [sp, #0]
 23eeec0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23eeec4:	f7ff fddc 	bl	23eea80 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23eeec8:	2064      	movs	r0, #100	; 0x64
 23eeeca:	f008 fedb 	bl	23f7c84 <delay>
  return true;
 23eeece:	2001      	movs	r0, #1
}
 23eeed0:	b005      	add	sp, #20
 23eeed2:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23eeed4:	2101      	movs	r1, #1
 23eeed6:	b280      	uxth	r0, r0
 23eeed8:	f00a ff95 	bl	23f9e06 <digitalWrite>
    pinMode(_cs, OUTPUT);
 23eeedc:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23eeee0:	2101      	movs	r1, #1
 23eeee2:	b280      	uxth	r0, r0
 23eeee4:	f00a ff7e 	bl	23f9de4 <pinMode>
    if (_sck == -1) {
 23eeee8:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23eeeec:	1c43      	adds	r3, r0, #1
 23eeeee:	d103      	bne.n	23eeef8 <_ZN15Adafruit_BME2804initEv+0x86>
      _spi->begin();
 23eeef0:	6860      	ldr	r0, [r4, #4]
 23eeef2:	f00a f961 	bl	23f91b8 <_ZN8SPIClass5beginEv>
 23eeef6:	e7c6      	b.n	23eee86 <_ZN15Adafruit_BME2804initEv+0x14>
      pinMode(_sck, OUTPUT);
 23eeef8:	2101      	movs	r1, #1
 23eeefa:	b280      	uxth	r0, r0
 23eeefc:	f00a ff72 	bl	23f9de4 <pinMode>
      pinMode(_mosi, OUTPUT);
 23eef00:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23eef04:	2101      	movs	r1, #1
 23eef06:	b280      	uxth	r0, r0
 23eef08:	f00a ff6c 	bl	23f9de4 <pinMode>
      pinMode(_miso, INPUT);
 23eef0c:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 23eef10:	2100      	movs	r1, #0
 23eef12:	b280      	uxth	r0, r0
 23eef14:	f00a ff66 	bl	23f9de4 <pinMode>
 23eef18:	e7b5      	b.n	23eee86 <_ZN15Adafruit_BME2804initEv+0x14>
    return false;
 23eef1a:	2000      	movs	r0, #0
 23eef1c:	e7d8      	b.n	23eeed0 <_ZN15Adafruit_BME2804initEv+0x5e>

023eef1e <_ZN15Adafruit_BME2805beginEhP7TwoWire>:
  _i2caddr = addr;
 23eef1e:	7501      	strb	r1, [r0, #20]
  _wire = theWire;
 23eef20:	6002      	str	r2, [r0, #0]
  status = init();
 23eef22:	f7ff bfa6 	b.w	23eee72 <_ZN15Adafruit_BME2804initEv>
	...

023eef28 <_ZN15Adafruit_BME28015readTemperatureEv>:

/*!
 *   @brief  Returns the temperature from the sensor
 *   @returns the temperature read from the device
 */
float Adafruit_BME280::readTemperature(void) {
 23eef28:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23eef2a:	21fa      	movs	r1, #250	; 0xfa
float Adafruit_BME280::readTemperature(void) {
 23eef2c:	4604      	mov	r4, r0
  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23eef2e:	f7ff feb7 	bl	23eeca0 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_T == 0x800000) // value in case temp measurement was disabled
 23eef32:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23eef36:	d021      	beq.n	23eef7c <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    return NAN;
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23eef38:	8d21      	ldrh	r1, [r4, #40]	; 0x28
         14;

  t_fine = var1 + var2 + t_fine_adjust;

  float T = (t_fine * 5 + 128) >> 8;
  return T / 100;
 23eef3a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23eef84 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23eef3e:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23eef42:	004d      	lsls	r5, r1, #1
          ((int32_t)_bme280_calib.dig_T2)) >>
 23eef44:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23eef48:	ebc5 13e0 	rsb	r3, r5, r0, asr #7
 23eef4c:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23eef4e:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bme280_calib.dig_T3)) >>
 23eef52:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
            ((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1))) >>
 23eef56:	131b      	asrs	r3, r3, #12
           12) *
 23eef58:	4353      	muls	r3, r2
  t_fine = var1 + var2 + t_fine_adjust;
 23eef5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23eef5c:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2 + t_fine_adjust;
 23eef5e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23eef62:	4413      	add	r3, r2
 23eef64:	61e3      	str	r3, [r4, #28]
  float T = (t_fine * 5 + 128) >> 8;
 23eef66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23eef6a:	3380      	adds	r3, #128	; 0x80
 23eef6c:	121b      	asrs	r3, r3, #8
 23eef6e:	ee07 3a90 	vmov	s15, r3
 23eef72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return T / 100;
 23eef76:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 23eef7a:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23eef7c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23eef88 <_ZN15Adafruit_BME28015readTemperatureEv+0x60>
 23eef80:	e7fb      	b.n	23eef7a <_ZN15Adafruit_BME28015readTemperatureEv+0x52>
 23eef82:	bf00      	nop
 23eef84:	42c80000 	.word	0x42c80000
 23eef88:	7fc00000 	.word	0x7fc00000

023eef8c <_ZN15Adafruit_BME28012readPressureEv>:

/*!
 *   @brief  Returns the pressure from the sensor
 *   @returns the pressure value (in Pascal) read from the device
 */
float Adafruit_BME280::readPressure(void) {
 23eef8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23eef90:	4605      	mov	r5, r0
  int64_t var1, var2, p;

  readTemperature(); // must be done first to get t_fine
 23eef92:	f7ff ffc9 	bl	23eef28 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 23eef96:	21f7      	movs	r1, #247	; 0xf7
 23eef98:	4628      	mov	r0, r5
 23eef9a:	f7ff fe81 	bl	23eeca0 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_P == 0x800000) // value in case pressure measurement was disabled
 23eef9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23eefa2:	f000 80b6 	beq.w	23ef112 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    return NAN;
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 23eefa6:	69e9      	ldr	r1, [r5, #28]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23eefa8:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  var1 = ((int64_t)t_fine) - 128000;
 23eefac:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 23eefb0:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23eefb4:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23eefb8:	fb03 f20e 	mul.w	r2, r3, lr
 23eefbc:	17dc      	asrs	r4, r3, #31
 23eefbe:	fb01 2204 	mla	r2, r1, r4, r2
 23eefc2:	fba3 3401 	umull	r3, r4, r3, r1
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23eefc6:	fba1 7801 	umull	r7, r8, r1, r1
 23eefca:	fb01 f60e 	mul.w	r6, r1, lr
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23eefce:	4422      	add	r2, r4
 23eefd0:	0312      	lsls	r2, r2, #12
 23eefd2:	031c      	lsls	r4, r3, #12
 23eefd4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23eefd8:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23eefdc:	eb08 0846 	add.w	r8, r8, r6, lsl #1
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23eefe0:	fb03 f608 	mul.w	r6, r3, r8
 23eefe4:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 23eefe8:	fb07 660c 	mla	r6, r7, ip, r6
 23eefec:	fba3 3c07 	umull	r3, ip, r3, r7
 23eeff0:	4466      	add	r6, ip
 23eeff2:	0a1b      	lsrs	r3, r3, #8
 23eeff4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 23eeff8:	191b      	adds	r3, r3, r4
 23eeffa:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23eeffe:	8dee      	ldrh	r6, [r5, #46]	; 0x2e
 23ef000:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23ef004:	fba3 3406 	umull	r3, r4, r3, r6
 23ef008:	fb06 4402 	mla	r4, r6, r2, r4
  var1 =
 23ef00c:	17e3      	asrs	r3, r4, #31
 23ef00e:	1062      	asrs	r2, r4, #1

  if (var1 == 0) {
 23ef010:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23ef014:	f04f 0c00 	mov.w	ip, #0
  if (var1 == 0) {
 23ef018:	d07e      	beq.n	23ef118 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ef01a:	f9b5 4038 	ldrsh.w	r4, [r5, #56]	; 0x38
  adc_P >>= 4;
 23ef01e:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ef020:	fb04 f608 	mul.w	r6, r4, r8
 23ef024:	ea4f 79e4 	mov.w	r9, r4, asr #31
 23ef028:	fb07 6609 	mla	r6, r7, r9, r6
 23ef02c:	fba4 4707 	umull	r4, r7, r4, r7
 23ef030:	443e      	add	r6, r7
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
 23ef032:	f9b5 7036 	ldrsh.w	r7, [r5, #54]	; 0x36
 23ef036:	fb07 fe0e 	mul.w	lr, r7, lr
 23ef03a:	ea4f 78e7 	mov.w	r8, r7, asr #31
 23ef03e:	fb01 ee08 	mla	lr, r1, r8, lr
 23ef042:	fba7 7101 	umull	r7, r1, r7, r1
 23ef046:	4471      	add	r1, lr
 23ef048:	0449      	lsls	r1, r1, #17
 23ef04a:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
 23ef04e:	047f      	lsls	r7, r7, #17
 23ef050:	193f      	adds	r7, r7, r4
 23ef052:	eb46 0601 	adc.w	r6, r6, r1
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ef056:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 23ef05a:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ef05e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23ef062:	f640 4135 	movw	r1, #3125	; 0xc35
 23ef066:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ef06a:	eb1c 0707 	adds.w	r7, ip, r7
  p = (((p << 31) - var2) * 3125) / var1;
 23ef06e:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
 23ef072:	07e4      	lsls	r4, r4, #31
 23ef074:	1be4      	subs	r4, r4, r7
 23ef076:	eb60 0606 	sbc.w	r6, r0, r6
 23ef07a:	fba4 0401 	umull	r0, r4, r4, r1
 23ef07e:	fb01 4106 	mla	r1, r1, r6, r4
 23ef082:	f7f5 feb3 	bl	23e4dec <__aeabi_ldivmod>
 23ef086:	4686      	mov	lr, r0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef088:	f9b5 203e 	ldrsh.w	r2, [r5, #62]	; 0x3e
 23ef08c:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23ef090:	fb02 f70c 	mul.w	r7, r2, ip
 23ef094:	0b43      	lsrs	r3, r0, #13
 23ef096:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23ef09a:	17d4      	asrs	r4, r2, #31
 23ef09c:	fb03 7704 	mla	r7, r3, r4, r7
 23ef0a0:	fba2 2403 	umull	r2, r4, r2, r3
 23ef0a4:	443c      	add	r4, r7
 23ef0a6:	fb02 f70c 	mul.w	r7, r2, ip
 23ef0aa:	fb03 7704 	mla	r7, r3, r4, r7
 23ef0ae:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ef0b2:	f9b5 603c 	ldrsh.w	r6, [r5, #60]	; 0x3c
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef0b6:	441f      	add	r7, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ef0b8:	fb06 f401 	mul.w	r4, r6, r1
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef0bc:	0e53      	lsrs	r3, r2, #25
 23ef0be:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ef0c2:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ef0c4:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ef0c8:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ef0cc:	fb02 4100 	mla	r1, r2, r0, r4
 23ef0d0:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ef0d4:	f9b5 403a 	ldrsh.w	r4, [r5, #58]	; 0x3a
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ef0d8:	4431      	add	r1, r6
 23ef0da:	0cc0      	lsrs	r0, r0, #19
 23ef0dc:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ef0e0:	1818      	adds	r0, r3, r0
 23ef0e2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23ef0e6:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23ef0ea:	0a00      	lsrs	r0, r0, #8
 23ef0ec:	012d      	lsls	r5, r5, #4
 23ef0ee:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23ef0f2:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23ef0f6:	0124      	lsls	r4, r4, #4
 23ef0f8:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23ef0fa:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23ef0fe:	f7f5 fe37 	bl	23e4d70 <__aeabi_l2f>
 23ef102:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23ef120 <_ZN15Adafruit_BME28012readPressureEv+0x194>
 23ef106:	ee07 0a90 	vmov	s15, r0
 23ef10a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23ef10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NAN;
 23ef112:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23ef124 <_ZN15Adafruit_BME28012readPressureEv+0x198>
 23ef116:	e7fa      	b.n	23ef10e <_ZN15Adafruit_BME28012readPressureEv+0x182>
    return 0; // avoid exception caused by division by zero
 23ef118:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23ef128 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
 23ef11c:	e7f7      	b.n	23ef10e <_ZN15Adafruit_BME28012readPressureEv+0x182>
 23ef11e:	bf00      	nop
 23ef120:	3b800000 	.word	0x3b800000
 23ef124:	7fc00000 	.word	0x7fc00000
 23ef128:	00000000 	.word	0x00000000

023ef12c <_ZN15Adafruit_BME28012readHumidityEv>:

/*!
 *  @brief  Returns the humidity from the sensor
 *  @returns the humidity value read from the device
 */
float Adafruit_BME280::readHumidity(void) {
 23ef12c:	b538      	push	{r3, r4, r5, lr}
 23ef12e:	4604      	mov	r4, r0
  readTemperature(); // must be done first to get t_fine
 23ef130:	f7ff fefa 	bl	23eef28 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 23ef134:	21fd      	movs	r1, #253	; 0xfd
 23ef136:	4620      	mov	r0, r4
 23ef138:	f7ff fd48 	bl	23eebcc <_ZN15Adafruit_BME2806read16Eh>
  if (adc_H == 0x8000) // value in case humidity measurement was disabled
 23ef13c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 23ef140:	d038      	beq.n	23ef1b4 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    return NAN;

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 23ef142:	69e1      	ldr	r1, [r4, #28]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23ef144:	f9b4 2048 	ldrsh.w	r2, [r4, #72]	; 0x48
  v_x1_u32r = (t_fine - ((int32_t)76800));
 23ef148:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23ef14c:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 23ef150:	0509      	lsls	r1, r1, #20
 23ef152:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
 23ef156:	fb05 3312 	mls	r3, r5, r2, r3
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23ef15a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
                 ((int32_t)16384)) >>
 23ef15e:	13da      	asrs	r2, r3, #15
                15) *
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23ef160:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23ef164:	f994 104a 	ldrsb.w	r1, [r4, #74]	; 0x4a
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23ef168:	436b      	muls	r3, r5
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23ef16a:	4369      	muls	r1, r5
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23ef16c:	12db      	asrs	r3, r3, #11
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23ef16e:	1289      	asrs	r1, r1, #10
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23ef170:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23ef174:	434b      	muls	r3, r1
                     ((int32_t)32768))) >>
                   10) +
                  ((int32_t)2097152)) *
                     ((int32_t)_bme280_calib.dig_H2) +
 23ef176:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
                     ((int32_t)32768))) >>
 23ef17a:	129b      	asrs	r3, r3, #10
                   10) +
 23ef17c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                  ((int32_t)2097152)) *
 23ef180:	434b      	muls	r3, r1
                     ((int32_t)_bme280_calib.dig_H2) +
 23ef182:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
                 8192) >>
 23ef186:	139b      	asrs	r3, r3, #14
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23ef188:	4353      	muls	r3, r2
                14));

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23ef18a:	13da      	asrs	r2, r3, #15
 23ef18c:	4352      	muls	r2, r2
                             ((int32_t)_bme280_calib.dig_H1)) >>
 23ef18e:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23ef192:	11d2      	asrs	r2, r2, #7
 23ef194:	434a      	muls	r2, r1
 23ef196:	eba3 1322 	sub.w	r3, r3, r2, asr #4
                            4));

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 23ef19a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 23ef19e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 23ef1a2:	bfa8      	it	ge
 23ef1a4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
  float h = (v_x1_u32r >> 12);
 23ef1a8:	131b      	asrs	r3, r3, #12
 23ef1aa:	ee00 3a10 	vmov	s0, r3
  return h / 1024.0;
 23ef1ae:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
 23ef1b2:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23ef1b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23ef1bc <_ZN15Adafruit_BME28012readHumidityEv+0x90>
 23ef1b8:	e7fb      	b.n	23ef1b2 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
 23ef1ba:	bf00      	nop
 23ef1bc:	7fc00000 	.word	0x7fc00000

023ef1c0 <_ZN24Adafruit_BMP280_PressureD1Ev>:
  int _sensorID = 280;
  Adafruit_BMP280 *_theBMP280 = NULL;
};

/** Adafruit Unified Sensor interface for pressure component of BMP280 */
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23ef1c0:	4770      	bx	lr

023ef1c2 <_ZN20Adafruit_BMP280_TempD1Ev>:
class Adafruit_BMP280_Temp : public Adafruit_Sensor {
 23ef1c2:	4770      	bx	lr

023ef1c4 <_ZN20Adafruit_BMP280_TempD0Ev>:
 23ef1c4:	b510      	push	{r4, lr}
 23ef1c6:	4604      	mov	r4, r0
 23ef1c8:	2110      	movs	r1, #16
 23ef1ca:	f7f6 f822 	bl	23e5212 <_ZdlPvj>
 23ef1ce:	4620      	mov	r0, r4
 23ef1d0:	bd10      	pop	{r4, pc}

023ef1d2 <_ZN24Adafruit_BMP280_PressureD0Ev>:
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23ef1d2:	b510      	push	{r4, lr}
 23ef1d4:	4604      	mov	r4, r0
 23ef1d6:	2110      	movs	r1, #16
 23ef1d8:	f7f6 f81b 	bl	23e5212 <_ZdlPvj>
 23ef1dc:	4620      	mov	r0, r4
 23ef1de:	bd10      	pop	{r4, pc}

023ef1e0 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's temperature sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Temp::getSensor(sensor_t *sensor) {
 23ef1e0:	b538      	push	{r3, r4, r5, lr}
 23ef1e2:	460c      	mov	r4, r1
 23ef1e4:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23ef1e6:	2220      	movs	r2, #32
 23ef1e8:	2100      	movs	r1, #0
 23ef1ea:	f104 0008 	add.w	r0, r4, #8
 23ef1ee:	f00d fc5a 	bl	23fcaa6 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23ef1f2:	220b      	movs	r2, #11
 23ef1f4:	4620      	mov	r0, r4
 23ef1f6:	4908      	ldr	r1, [pc, #32]	; (23ef218 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x38>)
 23ef1f8:	f00d fd03 	bl	23fcc02 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23ef1fc:	2301      	movs	r3, #1
 23ef1fe:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23ef200:	68ab      	ldr	r3, [r5, #8]
 23ef202:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23ef204:	230d      	movs	r3, #13
 23ef206:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -40.0; /* Temperature range -40 ~ +85 C  */
 23ef208:	4b04      	ldr	r3, [pc, #16]	; (23ef21c <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x3c>)
 23ef20a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = +85.0;
 23ef20c:	4b04      	ldr	r3, [pc, #16]	; (23ef220 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x40>)
 23ef20e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.01; /*  0.01 C */
 23ef210:	4b04      	ldr	r3, [pc, #16]	; (23ef224 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x44>)
 23ef212:	6223      	str	r3, [r4, #32]
}
 23ef214:	bd38      	pop	{r3, r4, r5, pc}
 23ef216:	bf00      	nop
 23ef218:	023fd355 	.word	0x023fd355
 23ef21c:	c2200000 	.word	0xc2200000
 23ef220:	42aa0000 	.word	0x42aa0000
 23ef224:	3c23d70a 	.word	0x3c23d70a

023ef228 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's pressure sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Pressure::getSensor(sensor_t *sensor) {
 23ef228:	b538      	push	{r3, r4, r5, lr}
 23ef22a:	460c      	mov	r4, r1
 23ef22c:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23ef22e:	2220      	movs	r2, #32
 23ef230:	2100      	movs	r1, #0
 23ef232:	f104 0008 	add.w	r0, r4, #8
 23ef236:	f00d fc36 	bl	23fcaa6 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23ef23a:	220b      	movs	r2, #11
 23ef23c:	4620      	mov	r0, r4
 23ef23e:	4908      	ldr	r1, [pc, #32]	; (23ef260 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x38>)
 23ef240:	f00d fcdf 	bl	23fcc02 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23ef244:	2301      	movs	r3, #1
 23ef246:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23ef248:	68ab      	ldr	r3, [r5, #8]
 23ef24a:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_PRESSURE;
 23ef24c:	2306      	movs	r3, #6
 23ef24e:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = 300.0; /* 300 ~ 1100 hPa  */
 23ef250:	4b04      	ldr	r3, [pc, #16]	; (23ef264 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x3c>)
 23ef252:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1100.0;
 23ef254:	4b04      	ldr	r3, [pc, #16]	; (23ef268 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x40>)
 23ef256:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.012; /* 0.12 hPa relative */
 23ef258:	4b04      	ldr	r3, [pc, #16]	; (23ef26c <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x44>)
 23ef25a:	6223      	str	r3, [r4, #32]
}
 23ef25c:	bd38      	pop	{r3, r4, r5, pc}
 23ef25e:	bf00      	nop
 23ef260:	023fd355 	.word	0x023fd355
 23ef264:	43960000 	.word	0x43960000
 23ef268:	44898000 	.word	0x44898000
 23ef26c:	3c449ba6 	.word	0x3c449ba6

023ef270 <_ZN15Adafruit_BMP280C1EP7TwoWire>:
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23ef270:	2300      	movs	r3, #0
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23ef272:	b510      	push	{r4, lr}
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23ef274:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23ef278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23ef27c:	4604      	mov	r4, r0
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23ef27e:	61c3      	str	r3, [r0, #28]
  _wire = theWire;
 23ef280:	6001      	str	r1, [r0, #0]
  temp_sensor = new Adafruit_BMP280_Temp(this);
 23ef282:	2010      	movs	r0, #16
 23ef284:	f7f5 ffc1 	bl	23e520a <_Znwj>
 23ef288:	b128      	cbz	r0, 23ef296 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x26>
  Adafruit_BMP280_Temp(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23ef28a:	4b09      	ldr	r3, [pc, #36]	; (23ef2b0 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x40>)
 23ef28c:	6003      	str	r3, [r0, #0]
 23ef28e:	f44f 738c 	mov.w	r3, #280	; 0x118
 23ef292:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23ef296:	60a0      	str	r0, [r4, #8]
  pressure_sensor = new Adafruit_BMP280_Pressure(this);
 23ef298:	2010      	movs	r0, #16
 23ef29a:	f7f5 ffb6 	bl	23e520a <_Znwj>
 23ef29e:	b120      	cbz	r0, 23ef2aa <_ZN15Adafruit_BMP280C1EP7TwoWire+0x3a>
public:
  /** @brief Create an Adafruit_Sensor compatible object for the pressure sensor
      @param parent A pointer to the BMP280 class */
  Adafruit_BMP280_Pressure(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23ef2a0:	4b04      	ldr	r3, [pc, #16]	; (23ef2b4 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x44>)
 23ef2a2:	6003      	str	r3, [r0, #0]
 23ef2a4:	2300      	movs	r3, #0
 23ef2a6:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23ef2aa:	60e0      	str	r0, [r4, #12]
}
 23ef2ac:	4620      	mov	r0, r4
 23ef2ae:	bd10      	pop	{r4, pc}
 23ef2b0:	023fe9e0 	.word	0x023fe9e0
 23ef2b4:	023fe9fc 	.word	0x023fe9fc

023ef2b8 <_ZN15Adafruit_BMP2807spixferEh>:
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23ef2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
 23ef2bc:	f990 301f 	ldrsb.w	r3, [r0, #31]
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23ef2c0:	4604      	mov	r4, r0
  if (_sck == -1)
 23ef2c2:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23ef2c4:	460f      	mov	r7, r1
  if (_sck == -1)
 23ef2c6:	d104      	bne.n	23ef2d2 <_ZN15Adafruit_BMP2807spixferEh+0x1a>
}
 23ef2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23ef2cc:	6840      	ldr	r0, [r0, #4]
 23ef2ce:	f00a b835 	b.w	23f933c <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23ef2d2:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23ef2d4:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23ef2d6:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23ef2da:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23ef2de:	2100      	movs	r1, #0
 23ef2e0:	b280      	uxth	r0, r0
 23ef2e2:	f00a fd90 	bl	23f9e06 <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23ef2e6:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23ef2ea:	fa08 f106 	lsl.w	r1, r8, r6
 23ef2ee:	4039      	ands	r1, r7
 23ef2f0:	b280      	uxth	r0, r0
 23ef2f2:	f00a fd88 	bl	23f9e06 <digitalWrite>
    digitalWrite(_sck, HIGH);
 23ef2f6:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23ef2fa:	2101      	movs	r1, #1
 23ef2fc:	b280      	uxth	r0, r0
 23ef2fe:	f00a fd82 	bl	23f9e06 <digitalWrite>
    if (digitalRead(_miso))
 23ef302:	f994 001e 	ldrsb.w	r0, [r4, #30]
    reply <<= 1;
 23ef306:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23ef308:	b280      	uxth	r0, r0
    reply <<= 1;
 23ef30a:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23ef30c:	f00a fd94 	bl	23f9e38 <digitalRead>
 23ef310:	b108      	cbz	r0, 23ef316 <_ZN15Adafruit_BMP2807spixferEh+0x5e>
      reply |= 1;
 23ef312:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23ef316:	3e01      	subs	r6, #1
 23ef318:	d2df      	bcs.n	23ef2da <_ZN15Adafruit_BMP2807spixferEh+0x22>
}
 23ef31a:	4628      	mov	r0, r5
 23ef31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ef320 <_ZN15Adafruit_BMP2806write8Ehh>:
void Adafruit_BMP280::write8(byte reg, byte value) {
 23ef320:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23ef322:	f990 301c 	ldrsb.w	r3, [r0, #28]
void Adafruit_BMP280::write8(byte reg, byte value) {
 23ef326:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef328:	3301      	adds	r3, #1
void Adafruit_BMP280::write8(byte reg, byte value) {
 23ef32a:	460e      	mov	r6, r1
 23ef32c:	4615      	mov	r5, r2
  if (_cs == -1) {
 23ef32e:	d113      	bne.n	23ef358 <_ZN15Adafruit_BMP2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef330:	7c01      	ldrb	r1, [r0, #16]
 23ef332:	6800      	ldr	r0, [r0, #0]
 23ef334:	f009 fa94 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef338:	6820      	ldr	r0, [r4, #0]
 23ef33a:	4631      	mov	r1, r6
 23ef33c:	6803      	ldr	r3, [r0, #0]
 23ef33e:	689b      	ldr	r3, [r3, #8]
 23ef340:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23ef342:	6820      	ldr	r0, [r4, #0]
 23ef344:	4629      	mov	r1, r5
 23ef346:	6803      	ldr	r3, [r0, #0]
 23ef348:	689b      	ldr	r3, [r3, #8]
 23ef34a:	4798      	blx	r3
    _wire->endTransmission();
 23ef34c:	6820      	ldr	r0, [r4, #0]
}
 23ef34e:	b004      	add	sp, #16
 23ef350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23ef354:	f009 ba8f 	b.w	23f8876 <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23ef358:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23ef35c:	3301      	adds	r3, #1
 23ef35e:	d10d      	bne.n	23ef37c <_ZN15Adafruit_BMP2806write8Ehh+0x5c>
 23ef360:	4b17      	ldr	r3, [pc, #92]	; (23ef3c0 <_ZN15Adafruit_BMP2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef362:	4669      	mov	r1, sp
 23ef364:	9300      	str	r3, [sp, #0]
 23ef366:	2300      	movs	r3, #0
 23ef368:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef36c:	4b15      	ldr	r3, [pc, #84]	; (23ef3c4 <_ZN15Adafruit_BMP2806write8Ehh+0xa4>)
 23ef36e:	6840      	ldr	r0, [r0, #4]
 23ef370:	9302      	str	r3, [sp, #8]
 23ef372:	2301      	movs	r3, #1
 23ef374:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef378:	f009 ff72 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef37c:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef380:	2100      	movs	r1, #0
 23ef382:	b280      	uxth	r0, r0
 23ef384:	f00a fd3f 	bl	23f9e06 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23ef388:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23ef38c:	4620      	mov	r0, r4
 23ef38e:	f7ff ff93 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
 23ef392:	4629      	mov	r1, r5
 23ef394:	4620      	mov	r0, r4
 23ef396:	f7ff ff8f 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
 23ef39a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef39e:	2101      	movs	r1, #1
 23ef3a0:	b280      	uxth	r0, r0
 23ef3a2:	f00a fd30 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23ef3a6:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23ef3aa:	3301      	adds	r3, #1
 23ef3ac:	d105      	bne.n	23ef3ba <_ZN15Adafruit_BMP2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23ef3ae:	6860      	ldr	r0, [r4, #4]
}
 23ef3b0:	b004      	add	sp, #16
 23ef3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23ef3b6:	f009 bf39 	b.w	23f922c <_ZN8SPIClass14endTransactionEv>
}
 23ef3ba:	b004      	add	sp, #16
 23ef3bc:	bd70      	pop	{r4, r5, r6, pc}
 23ef3be:	bf00      	nop
 23ef3c0:	023fe7a0 	.word	0x023fe7a0
 23ef3c4:	0007a120 	.word	0x0007a120

023ef3c8 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23ef3c8:	b570      	push	{r4, r5, r6, lr}
 23ef3ca:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23ef3cc:	00db      	lsls	r3, r3, #3
 23ef3ce:	f002 0207 	and.w	r2, r2, #7
 23ef3d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
                                  standby_duration duration) {
 23ef3d6:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _measReg.osrs_t = tempSampling;
 23ef3da:	4313      	orrs	r3, r2
                                  standby_duration duration) {
 23ef3dc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  _configReg.filter = filter;
 23ef3e0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  _measReg.osrs_t = tempSampling;
 23ef3e4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 23ef3e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  _configReg.filter = filter;
 23ef3ec:	f005 0307 	and.w	r3, r5, #7
  _configReg.t_sb = duration;
 23ef3f0:	f006 0107 	and.w	r1, r6, #7
  _configReg.filter = filter;
 23ef3f4:	f363 02c5 	bfi	r2, r3, #3, #3
  _configReg.t_sb = duration;
 23ef3f8:	f361 0202 	bfi	r2, r1, #0, #3
    /** Unused - don't set */
    unsigned int none : 1;
    /** Enables 3-wire SPI */
    unsigned int spi3w_en : 1;
    /** Used to retrieve the assembled config register's byte value. */
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23ef3fc:	009b      	lsls	r3, r3, #2
 23ef3fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23ef402:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 23ef406:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  write8(BMP280_REGISTER_CONFIG, _configReg.get());
 23ef40a:	431a      	orrs	r2, r3
 23ef40c:	21f5      	movs	r1, #245	; 0xf5
 23ef40e:	f7ff ff87 	bl	23ef320 <_ZN15Adafruit_BMP2806write8Ehh>
    /** Pressure oversampling. */
    unsigned int osrs_p : 3;
    /** Device mode */
    unsigned int mode : 2;
    /** Used to retrieve the assembled ctrl_meas register's byte value. */
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23ef412:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23ef416:	4620      	mov	r0, r4
}
 23ef418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ef41c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23ef420:	f002 0107 	and.w	r1, r2, #7
 23ef424:	009b      	lsls	r3, r3, #2
 23ef426:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23ef42a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23ef42e:	21f4      	movs	r1, #244	; 0xf4
 23ef430:	f7ff bf76 	b.w	23ef320 <_ZN15Adafruit_BMP2806write8Ehh>

023ef434 <_ZN15Adafruit_BMP2805read8Eh>:
uint8_t Adafruit_BMP280::read8(byte reg) {
 23ef434:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23ef436:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint8_t Adafruit_BMP280::read8(byte reg) {
 23ef43a:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef43c:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::read8(byte reg) {
 23ef43e:	460d      	mov	r5, r1
 23ef440:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ef442:	d118      	bne.n	23ef476 <_ZN15Adafruit_BMP2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef444:	7c01      	ldrb	r1, [r0, #16]
 23ef446:	6800      	ldr	r0, [r0, #0]
 23ef448:	f009 fa0a 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef44c:	6820      	ldr	r0, [r4, #0]
 23ef44e:	4629      	mov	r1, r5
 23ef450:	6803      	ldr	r3, [r0, #0]
 23ef452:	689b      	ldr	r3, [r3, #8]
 23ef454:	4798      	blx	r3
    _wire->endTransmission();
 23ef456:	6820      	ldr	r0, [r4, #0]
 23ef458:	f009 fa0d 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23ef45c:	2201      	movs	r2, #1
 23ef45e:	7c21      	ldrb	r1, [r4, #16]
 23ef460:	6820      	ldr	r0, [r4, #0]
 23ef462:	f009 f9fa 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23ef466:	6820      	ldr	r0, [r4, #0]
 23ef468:	6803      	ldr	r3, [r0, #0]
 23ef46a:	695b      	ldr	r3, [r3, #20]
 23ef46c:	4798      	blx	r3
 23ef46e:	b2c5      	uxtb	r5, r0
}
 23ef470:	4628      	mov	r0, r5
 23ef472:	b005      	add	sp, #20
 23ef474:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ef476:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23ef47a:	3301      	adds	r3, #1
 23ef47c:	d10d      	bne.n	23ef49a <_ZN15Adafruit_BMP2805read8Eh+0x66>
 23ef47e:	4b16      	ldr	r3, [pc, #88]	; (23ef4d8 <_ZN15Adafruit_BMP2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef480:	4669      	mov	r1, sp
 23ef482:	9300      	str	r3, [sp, #0]
 23ef484:	2300      	movs	r3, #0
 23ef486:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef48a:	4b14      	ldr	r3, [pc, #80]	; (23ef4dc <_ZN15Adafruit_BMP2805read8Eh+0xa8>)
 23ef48c:	6840      	ldr	r0, [r0, #4]
 23ef48e:	9302      	str	r3, [sp, #8]
 23ef490:	2301      	movs	r3, #1
 23ef492:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef496:	f009 fee3 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef49a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef49e:	2100      	movs	r1, #0
 23ef4a0:	b280      	uxth	r0, r0
 23ef4a2:	f00a fcb0 	bl	23f9e06 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ef4a6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ef4aa:	4620      	mov	r0, r4
 23ef4ac:	f7ff ff04 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23ef4b0:	2100      	movs	r1, #0
 23ef4b2:	4620      	mov	r0, r4
 23ef4b4:	f7ff ff00 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
 23ef4b8:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23ef4ba:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef4be:	2101      	movs	r1, #1
 23ef4c0:	b280      	uxth	r0, r0
 23ef4c2:	f00a fca0 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23ef4c6:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23ef4ca:	3301      	adds	r3, #1
 23ef4cc:	d1d0      	bne.n	23ef470 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23ef4ce:	6860      	ldr	r0, [r4, #4]
 23ef4d0:	f009 feac 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
 23ef4d4:	e7cc      	b.n	23ef470 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
 23ef4d6:	bf00      	nop
 23ef4d8:	023fe7a0 	.word	0x023fe7a0
 23ef4dc:	0007a120 	.word	0x0007a120

023ef4e0 <_ZN15Adafruit_BMP2806read16Eh>:
uint16_t Adafruit_BMP280::read16(byte reg) {
 23ef4e0:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23ef4e2:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint16_t Adafruit_BMP280::read16(byte reg) {
 23ef4e6:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef4e8:	3301      	adds	r3, #1
uint16_t Adafruit_BMP280::read16(byte reg) {
 23ef4ea:	460d      	mov	r5, r1
 23ef4ec:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ef4ee:	d11f      	bne.n	23ef530 <_ZN15Adafruit_BMP2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef4f0:	7c01      	ldrb	r1, [r0, #16]
 23ef4f2:	6800      	ldr	r0, [r0, #0]
 23ef4f4:	f009 f9b4 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef4f8:	6820      	ldr	r0, [r4, #0]
 23ef4fa:	4629      	mov	r1, r5
 23ef4fc:	6803      	ldr	r3, [r0, #0]
 23ef4fe:	689b      	ldr	r3, [r3, #8]
 23ef500:	4798      	blx	r3
    _wire->endTransmission();
 23ef502:	6820      	ldr	r0, [r4, #0]
 23ef504:	f009 f9b7 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23ef508:	2202      	movs	r2, #2
 23ef50a:	7c21      	ldrb	r1, [r4, #16]
 23ef50c:	6820      	ldr	r0, [r4, #0]
 23ef50e:	f009 f9a4 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23ef512:	6820      	ldr	r0, [r4, #0]
 23ef514:	6803      	ldr	r3, [r0, #0]
 23ef516:	695b      	ldr	r3, [r3, #20]
 23ef518:	4798      	blx	r3
 23ef51a:	4605      	mov	r5, r0
 23ef51c:	6820      	ldr	r0, [r4, #0]
 23ef51e:	6803      	ldr	r3, [r0, #0]
 23ef520:	695b      	ldr	r3, [r3, #20]
 23ef522:	4798      	blx	r3
 23ef524:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ef528:	b285      	uxth	r5, r0
}
 23ef52a:	4628      	mov	r0, r5
 23ef52c:	b005      	add	sp, #20
 23ef52e:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ef530:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23ef534:	3301      	adds	r3, #1
 23ef536:	d10d      	bne.n	23ef554 <_ZN15Adafruit_BMP2806read16Eh+0x74>
 23ef538:	4b19      	ldr	r3, [pc, #100]	; (23ef5a0 <_ZN15Adafruit_BMP2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef53a:	4669      	mov	r1, sp
 23ef53c:	9300      	str	r3, [sp, #0]
 23ef53e:	2300      	movs	r3, #0
 23ef540:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef544:	4b17      	ldr	r3, [pc, #92]	; (23ef5a4 <_ZN15Adafruit_BMP2806read16Eh+0xc4>)
 23ef546:	6840      	ldr	r0, [r0, #4]
 23ef548:	9302      	str	r3, [sp, #8]
 23ef54a:	2301      	movs	r3, #1
 23ef54c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef550:	f009 fe86 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef554:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef558:	2100      	movs	r1, #0
 23ef55a:	b280      	uxth	r0, r0
 23ef55c:	f00a fc53 	bl	23f9e06 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ef560:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ef564:	4620      	mov	r0, r4
 23ef566:	f7ff fea7 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23ef56a:	2100      	movs	r1, #0
 23ef56c:	4620      	mov	r0, r4
 23ef56e:	f7ff fea3 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
 23ef572:	2100      	movs	r1, #0
 23ef574:	4605      	mov	r5, r0
 23ef576:	4620      	mov	r0, r4
 23ef578:	f7ff fe9e 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
 23ef57c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ef580:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23ef582:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef586:	2101      	movs	r1, #1
 23ef588:	b280      	uxth	r0, r0
 23ef58a:	f00a fc3c 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23ef58e:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23ef592:	3301      	adds	r3, #1
 23ef594:	d1c9      	bne.n	23ef52a <_ZN15Adafruit_BMP2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23ef596:	6860      	ldr	r0, [r4, #4]
 23ef598:	f009 fe48 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
 23ef59c:	e7c5      	b.n	23ef52a <_ZN15Adafruit_BMP2806read16Eh+0x4a>
 23ef59e:	bf00      	nop
 23ef5a0:	023fe7a0 	.word	0x023fe7a0
 23ef5a4:	0007a120 	.word	0x0007a120

023ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>:
uint16_t Adafruit_BMP280::read16_LE(byte reg) {
 23ef5a8:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23ef5aa:	f7ff ff99 	bl	23ef4e0 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23ef5ae:	ba40      	rev16	r0, r0
}
 23ef5b0:	b280      	uxth	r0, r0
 23ef5b2:	bd08      	pop	{r3, pc}

023ef5b4 <_ZN15Adafruit_BMP2806read24Eh>:
uint32_t Adafruit_BMP280::read24(byte reg) {
 23ef5b4:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23ef5b6:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint32_t Adafruit_BMP280::read24(byte reg) {
 23ef5ba:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef5bc:	3301      	adds	r3, #1
uint32_t Adafruit_BMP280::read24(byte reg) {
 23ef5be:	460d      	mov	r5, r1
 23ef5c0:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ef5c2:	d123      	bne.n	23ef60c <_ZN15Adafruit_BMP2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef5c4:	7c01      	ldrb	r1, [r0, #16]
 23ef5c6:	6800      	ldr	r0, [r0, #0]
 23ef5c8:	f009 f94a 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef5cc:	6820      	ldr	r0, [r4, #0]
 23ef5ce:	4629      	mov	r1, r5
 23ef5d0:	6803      	ldr	r3, [r0, #0]
 23ef5d2:	689b      	ldr	r3, [r3, #8]
 23ef5d4:	4798      	blx	r3
    _wire->endTransmission();
 23ef5d6:	6820      	ldr	r0, [r4, #0]
 23ef5d8:	f009 f94d 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23ef5dc:	2203      	movs	r2, #3
 23ef5de:	7c21      	ldrb	r1, [r4, #16]
 23ef5e0:	6820      	ldr	r0, [r4, #0]
 23ef5e2:	f009 f93a 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23ef5e6:	6820      	ldr	r0, [r4, #0]
 23ef5e8:	6803      	ldr	r3, [r0, #0]
 23ef5ea:	695b      	ldr	r3, [r3, #20]
 23ef5ec:	4798      	blx	r3
    value <<= 8;
 23ef5ee:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ef5f0:	6820      	ldr	r0, [r4, #0]
 23ef5f2:	6803      	ldr	r3, [r0, #0]
 23ef5f4:	695b      	ldr	r3, [r3, #20]
 23ef5f6:	4798      	blx	r3
 23ef5f8:	4328      	orrs	r0, r5
    value <<= 8;
 23ef5fa:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ef5fc:	6820      	ldr	r0, [r4, #0]
 23ef5fe:	6803      	ldr	r3, [r0, #0]
 23ef600:	695b      	ldr	r3, [r3, #20]
 23ef602:	4798      	blx	r3
 23ef604:	4305      	orrs	r5, r0
}
 23ef606:	4628      	mov	r0, r5
 23ef608:	b005      	add	sp, #20
 23ef60a:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ef60c:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23ef610:	3301      	adds	r3, #1
 23ef612:	d10d      	bne.n	23ef630 <_ZN15Adafruit_BMP2806read24Eh+0x7c>
 23ef614:	4b1b      	ldr	r3, [pc, #108]	; (23ef684 <_ZN15Adafruit_BMP2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef616:	4669      	mov	r1, sp
 23ef618:	9300      	str	r3, [sp, #0]
 23ef61a:	2300      	movs	r3, #0
 23ef61c:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef620:	4b19      	ldr	r3, [pc, #100]	; (23ef688 <_ZN15Adafruit_BMP2806read24Eh+0xd4>)
 23ef622:	6840      	ldr	r0, [r0, #4]
 23ef624:	9302      	str	r3, [sp, #8]
 23ef626:	2301      	movs	r3, #1
 23ef628:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef62c:	f009 fe18 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef630:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef634:	2100      	movs	r1, #0
 23ef636:	b280      	uxth	r0, r0
 23ef638:	f00a fbe5 	bl	23f9e06 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ef63c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ef640:	4620      	mov	r0, r4
 23ef642:	f7ff fe39 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23ef646:	2100      	movs	r1, #0
 23ef648:	4620      	mov	r0, r4
 23ef64a:	f7ff fe35 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
    value |= spixfer(0);
 23ef64e:	2100      	movs	r1, #0
    value <<= 8;
 23ef650:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23ef652:	4620      	mov	r0, r4
 23ef654:	f7ff fe30 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
 23ef658:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23ef65a:	2100      	movs	r1, #0
    value <<= 8;
 23ef65c:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23ef65e:	4620      	mov	r0, r4
 23ef660:	f7ff fe2a 	bl	23ef2b8 <_ZN15Adafruit_BMP2807spixferEh>
 23ef664:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23ef666:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef66a:	2101      	movs	r1, #1
 23ef66c:	b280      	uxth	r0, r0
 23ef66e:	f00a fbca 	bl	23f9e06 <digitalWrite>
    if (_sck == -1)
 23ef672:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23ef676:	3301      	adds	r3, #1
 23ef678:	d1c5      	bne.n	23ef606 <_ZN15Adafruit_BMP2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23ef67a:	6860      	ldr	r0, [r4, #4]
 23ef67c:	f009 fdd6 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
  return value;
 23ef680:	e7c1      	b.n	23ef606 <_ZN15Adafruit_BMP2806read24Eh+0x52>
 23ef682:	bf00      	nop
 23ef684:	023fe7a0 	.word	0x023fe7a0
 23ef688:	0007a120 	.word	0x0007a120

023ef68c <_ZN15Adafruit_BMP28016readCoefficientsEv>:
void Adafruit_BMP280::readCoefficients() {
 23ef68c:	b510      	push	{r4, lr}
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23ef68e:	2188      	movs	r1, #136	; 0x88
void Adafruit_BMP280::readCoefficients() {
 23ef690:	4604      	mov	r4, r0
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23ef692:	f7ff ff89 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23ef696:	218a      	movs	r1, #138	; 0x8a
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23ef698:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
 23ef69a:	4620      	mov	r0, r4
 23ef69c:	f7ff ff84 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6a0:	218c      	movs	r1, #140	; 0x8c
  _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
 23ef6a2:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
 23ef6a4:	4620      	mov	r0, r4
 23ef6a6:	f7ff ff7f 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23ef6aa:	218e      	movs	r1, #142	; 0x8e
  _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
 23ef6ac:	84a0      	strh	r0, [r4, #36]	; 0x24
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23ef6ae:	4620      	mov	r0, r4
 23ef6b0:	f7ff ff7a 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23ef6b4:	2190      	movs	r1, #144	; 0x90
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23ef6b6:	84e0      	strh	r0, [r4, #38]	; 0x26
  return (int16_t)read16_LE(reg);
 23ef6b8:	4620      	mov	r0, r4
 23ef6ba:	f7ff ff75 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6be:	2192      	movs	r1, #146	; 0x92
  _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
 23ef6c0:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23ef6c2:	4620      	mov	r0, r4
 23ef6c4:	f7ff ff70 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6c8:	2194      	movs	r1, #148	; 0x94
  _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
 23ef6ca:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23ef6cc:	4620      	mov	r0, r4
 23ef6ce:	f7ff ff6b 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6d2:	2196      	movs	r1, #150	; 0x96
  _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
 23ef6d4:	85a0      	strh	r0, [r4, #44]	; 0x2c
  return (int16_t)read16_LE(reg);
 23ef6d6:	4620      	mov	r0, r4
 23ef6d8:	f7ff ff66 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6dc:	2198      	movs	r1, #152	; 0x98
  _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
 23ef6de:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23ef6e0:	4620      	mov	r0, r4
 23ef6e2:	f7ff ff61 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6e6:	219a      	movs	r1, #154	; 0x9a
  _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
 23ef6e8:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23ef6ea:	4620      	mov	r0, r4
 23ef6ec:	f7ff ff5c 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6f0:	219c      	movs	r1, #156	; 0x9c
  _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
 23ef6f2:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23ef6f4:	4620      	mov	r0, r4
 23ef6f6:	f7ff ff57 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef6fa:	219e      	movs	r1, #158	; 0x9e
  _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
 23ef6fc:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23ef6fe:	4620      	mov	r0, r4
 23ef700:	f7ff ff52 	bl	23ef5a8 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
 23ef704:	86e0      	strh	r0, [r4, #54]	; 0x36
}
 23ef706:	bd10      	pop	{r4, pc}

023ef708 <_ZN15Adafruit_BMP2805beginEhh>:
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23ef708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ef70a:	4604      	mov	r4, r0
  _i2caddr = addr;
 23ef70c:	7401      	strb	r1, [r0, #16]
  if (_cs == -1) {
 23ef70e:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23ef712:	4615      	mov	r5, r2
  if (_cs == -1) {
 23ef714:	1c42      	adds	r2, r0, #1
 23ef716:	d11b      	bne.n	23ef750 <_ZN15Adafruit_BMP2805beginEhh+0x48>
    _wire->begin();
 23ef718:	6820      	ldr	r0, [r4, #0]
 23ef71a:	f009 f877 	bl	23f880c <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != chipid)
 23ef71e:	21d0      	movs	r1, #208	; 0xd0
 23ef720:	4620      	mov	r0, r4
 23ef722:	f7ff fe87 	bl	23ef434 <_ZN15Adafruit_BMP2805read8Eh>
 23ef726:	42a8      	cmp	r0, r5
 23ef728:	f04f 0500 	mov.w	r5, #0
 23ef72c:	d133      	bne.n	23ef796 <_ZN15Adafruit_BMP2805beginEhh+0x8e>
  readCoefficients();
 23ef72e:	4620      	mov	r0, r4
 23ef730:	f7ff ffac 	bl	23ef68c <_ZN15Adafruit_BMP28016readCoefficientsEv>
  setSampling();
 23ef734:	2305      	movs	r3, #5
 23ef736:	2103      	movs	r1, #3
 23ef738:	461a      	mov	r2, r3
 23ef73a:	4620      	mov	r0, r4
 23ef73c:	e9cd 5500 	strd	r5, r5, [sp]
 23ef740:	f7ff fe42 	bl	23ef3c8 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23ef744:	2064      	movs	r0, #100	; 0x64
 23ef746:	f008 fa9d 	bl	23f7c84 <delay>
  return true;
 23ef74a:	2001      	movs	r0, #1
}
 23ef74c:	b003      	add	sp, #12
 23ef74e:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23ef750:	2101      	movs	r1, #1
 23ef752:	b280      	uxth	r0, r0
 23ef754:	f00a fb57 	bl	23f9e06 <digitalWrite>
    pinMode(_cs, OUTPUT);
 23ef758:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef75c:	2101      	movs	r1, #1
 23ef75e:	b280      	uxth	r0, r0
 23ef760:	f00a fb40 	bl	23f9de4 <pinMode>
    if (_sck == -1) {
 23ef764:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23ef768:	1c43      	adds	r3, r0, #1
 23ef76a:	d103      	bne.n	23ef774 <_ZN15Adafruit_BMP2805beginEhh+0x6c>
      _spi->begin();
 23ef76c:	6860      	ldr	r0, [r4, #4]
 23ef76e:	f009 fd23 	bl	23f91b8 <_ZN8SPIClass5beginEv>
 23ef772:	e7d4      	b.n	23ef71e <_ZN15Adafruit_BMP2805beginEhh+0x16>
      pinMode(_sck, OUTPUT);
 23ef774:	2101      	movs	r1, #1
 23ef776:	b280      	uxth	r0, r0
 23ef778:	f00a fb34 	bl	23f9de4 <pinMode>
      pinMode(_mosi, OUTPUT);
 23ef77c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23ef780:	2101      	movs	r1, #1
 23ef782:	b280      	uxth	r0, r0
 23ef784:	f00a fb2e 	bl	23f9de4 <pinMode>
      pinMode(_miso, INPUT);
 23ef788:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23ef78c:	2100      	movs	r1, #0
 23ef78e:	b280      	uxth	r0, r0
 23ef790:	f00a fb28 	bl	23f9de4 <pinMode>
 23ef794:	e7c3      	b.n	23ef71e <_ZN15Adafruit_BMP2805beginEhh+0x16>
    return false;
 23ef796:	4628      	mov	r0, r5
 23ef798:	e7d8      	b.n	23ef74c <_ZN15Adafruit_BMP2805beginEhh+0x44>
	...

023ef79c <_ZN15Adafruit_BMP28015readTemperatureEv>:
float Adafruit_BMP280::readTemperature() {
 23ef79c:	b510      	push	{r4, lr}
 23ef79e:	4604      	mov	r4, r0
  int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
 23ef7a0:	21fa      	movs	r1, #250	; 0xfa
 23ef7a2:	f7ff ff07 	bl	23ef5b4 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef7a6:	8c21      	ldrh	r1, [r4, #32]
}
 23ef7a8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 23ef7e8 <_ZN15Adafruit_BMP28015readTemperatureEv+0x4c>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef7ac:	004b      	lsls	r3, r1, #1
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ef7ae:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef7b2:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
          ((int32_t)_bmp280_calib.dig_T2)) >>
 23ef7b6:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef7ba:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ef7bc:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bmp280_calib.dig_T3)) >>
 23ef7c0:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
 23ef7c4:	131b      	asrs	r3, r3, #12
           12) *
 23ef7c6:	4353      	muls	r3, r2
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ef7c8:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 23ef7ca:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23ef7ce:	61a3      	str	r3, [r4, #24]
  float T = (t_fine * 5 + 128) >> 8;
 23ef7d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23ef7d4:	3380      	adds	r3, #128	; 0x80
 23ef7d6:	121b      	asrs	r3, r3, #8
 23ef7d8:	ee07 3a90 	vmov	s15, r3
 23ef7dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 23ef7e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23ef7e4:	bd10      	pop	{r4, pc}
 23ef7e6:	bf00      	nop
 23ef7e8:	42c80000 	.word	0x42c80000

023ef7ec <_ZN20Adafruit_BMP280_Temp8getEventEP15sensors_event_t>:
bool Adafruit_BMP280_Temp::getEvent(sensors_event_t *event) {
 23ef7ec:	b538      	push	{r3, r4, r5, lr}
 23ef7ee:	460c      	mov	r4, r1
 23ef7f0:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 23ef7f2:	2220      	movs	r2, #32
 23ef7f4:	2100      	movs	r1, #0
 23ef7f6:	1d20      	adds	r0, r4, #4
 23ef7f8:	f00d f955 	bl	23fcaa6 <memset>
  event->version = sizeof(sensors_event_t);
 23ef7fc:	2324      	movs	r3, #36	; 0x24
 23ef7fe:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23ef800:	68ab      	ldr	r3, [r5, #8]
 23ef802:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23ef804:	230d      	movs	r3, #13
 23ef806:	60a3      	str	r3, [r4, #8]
 23ef808:	f007 fb2e 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23ef80c:	6120      	str	r0, [r4, #16]
  event->temperature = _theBMP280->readTemperature();
 23ef80e:	68e8      	ldr	r0, [r5, #12]
 23ef810:	f7ff ffc4 	bl	23ef79c <_ZN15Adafruit_BMP28015readTemperatureEv>
}
 23ef814:	2001      	movs	r0, #1
  event->temperature = _theBMP280->readTemperature();
 23ef816:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23ef81a:	bd38      	pop	{r3, r4, r5, pc}

023ef81c <_ZN15Adafruit_BMP28012readPressureEv>:
float Adafruit_BMP280::readPressure() {
 23ef81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ef820:	4604      	mov	r4, r0
  readTemperature();
 23ef822:	f7ff ffbb 	bl	23ef79c <_ZN15Adafruit_BMP28015readTemperatureEv>
  int32_t adc_P = read24(BMP280_REGISTER_PRESSUREDATA);
 23ef826:	21f7      	movs	r1, #247	; 0xf7
 23ef828:	4620      	mov	r0, r4
 23ef82a:	f7ff fec3 	bl	23ef5b4 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((int64_t)t_fine) - 128000;
 23ef82e:	69a1      	ldr	r1, [r4, #24]
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ef830:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
  var1 = ((int64_t)t_fine) - 128000;
 23ef834:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 23ef838:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23ef83c:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef840:	fba1 6801 	umull	r6, r8, r1, r1
 23ef844:	fb01 f50c 	mul.w	r5, r1, ip
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ef848:	fb03 f20c 	mul.w	r2, r3, ip
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef84c:	eb08 0845 	add.w	r8, r8, r5, lsl #1
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ef850:	17dd      	asrs	r5, r3, #31
 23ef852:	fb01 2205 	mla	r2, r1, r5, r2
 23ef856:	fba3 3501 	umull	r3, r5, r3, r1
 23ef85a:	442a      	add	r2, r5
 23ef85c:	0312      	lsls	r2, r2, #12
 23ef85e:	031d      	lsls	r5, r3, #12
 23ef860:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ef864:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 23ef868:	fb03 f708 	mul.w	r7, r3, r8
 23ef86c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 23ef870:	fb06 770e 	mla	r7, r6, lr, r7
 23ef874:	fba3 3e06 	umull	r3, lr, r3, r6
 23ef878:	4477      	add	r7, lr
 23ef87a:	0a1b      	lsrs	r3, r3, #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef87c:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ef880:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 23ef884:	195b      	adds	r3, r3, r5
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef886:	fba3 350e 	umull	r3, r5, r3, lr
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ef88a:	eb42 2227 	adc.w	r2, r2, r7, asr #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef88e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23ef892:	fb0e 5502 	mla	r5, lr, r2, r5
  var1 =
 23ef896:	17eb      	asrs	r3, r5, #31
 23ef898:	106a      	asrs	r2, r5, #1
  if (var1 == 0) {
 23ef89a:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef89e:	f04f 0700 	mov.w	r7, #0
  if (var1 == 0) {
 23ef8a2:	d07b      	beq.n	23ef99c <_ZN15Adafruit_BMP28012readPressureEv+0x180>
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef8a4:	f9b4 e030 	ldrsh.w	lr, [r4, #48]	; 0x30
  adc_P >>= 4;
 23ef8a8:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef8aa:	fb0e f508 	mul.w	r5, lr, r8
 23ef8ae:	ea4f 79ee 	mov.w	r9, lr, asr #31
 23ef8b2:	fb06 5509 	mla	r5, r6, r9, r5
 23ef8b6:	fbae e606 	umull	lr, r6, lr, r6
 23ef8ba:	4435      	add	r5, r6
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23ef8bc:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
  p = 1048576 - adc_P;
 23ef8c0:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23ef8c4:	fb06 fc0c 	mul.w	ip, r6, ip
 23ef8c8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 23ef8cc:	fb01 cc08 	mla	ip, r1, r8, ip
 23ef8d0:	fba6 6101 	umull	r6, r1, r6, r1
 23ef8d4:	4461      	add	r1, ip
 23ef8d6:	0449      	lsls	r1, r1, #17
 23ef8d8:	ea41 31d6 	orr.w	r1, r1, r6, lsr #15
 23ef8dc:	0476      	lsls	r6, r6, #17
 23ef8de:	eb16 060e 	adds.w	r6, r6, lr
 23ef8e2:	eb45 0101 	adc.w	r1, r5, r1
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ef8e6:	f9b4 502c 	ldrsh.w	r5, [r4, #44]	; 0x2c
  p = (((p << 31) - var2) * 3125) / var1;
 23ef8ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ef8ee:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23ef8f2:	f640 4535 	movw	r5, #3125	; 0xc35
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ef8f6:	19be      	adds	r6, r7, r6
  p = (((p << 31) - var2) * 3125) / var1;
 23ef8f8:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 23ef8fc:	07c0      	lsls	r0, r0, #31
 23ef8fe:	1b80      	subs	r0, r0, r6
 23ef900:	eb6c 0c01 	sbc.w	ip, ip, r1
 23ef904:	fba0 0105 	umull	r0, r1, r0, r5
 23ef908:	fb05 110c 	mla	r1, r5, ip, r1
 23ef90c:	f7f5 fa6e 	bl	23e4dec <__aeabi_ldivmod>
 23ef910:	4686      	mov	lr, r0
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef912:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 23ef916:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23ef91a:	fb02 f70c 	mul.w	r7, r2, ip
 23ef91e:	0b43      	lsrs	r3, r0, #13
 23ef920:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23ef924:	17d5      	asrs	r5, r2, #31
 23ef926:	fb03 7705 	mla	r7, r3, r5, r7
 23ef92a:	fba2 2503 	umull	r2, r5, r2, r3
 23ef92e:	443d      	add	r5, r7
 23ef930:	fb02 f70c 	mul.w	r7, r2, ip
 23ef934:	fb03 7705 	mla	r7, r3, r5, r7
 23ef938:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef93c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef940:	441f      	add	r7, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef942:	fb06 f501 	mul.w	r5, r6, r1
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef946:	0e53      	lsrs	r3, r2, #25
 23ef948:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef94c:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef94e:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef952:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef956:	fb02 5100 	mla	r1, r2, r0, r5
 23ef95a:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef95e:	f9b4 4032 	ldrsh.w	r4, [r4, #50]	; 0x32
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef962:	4431      	add	r1, r6
 23ef964:	0cc0      	lsrs	r0, r0, #19
 23ef966:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef96a:	1818      	adds	r0, r3, r0
 23ef96c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23ef970:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23ef974:	0a00      	lsrs	r0, r0, #8
 23ef976:	012d      	lsls	r5, r5, #4
 23ef978:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23ef97c:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23ef980:	0124      	lsls	r4, r4, #4
 23ef982:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23ef984:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23ef988:	f7f5 f9f2 	bl	23e4d70 <__aeabi_l2f>
 23ef98c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23ef9a4 <_ZN15Adafruit_BMP28012readPressureEv+0x188>
 23ef990:	ee07 0a90 	vmov	s15, r0
 23ef994:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23ef998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0; // avoid exception caused by division by zero
 23ef99c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23ef9a8 <_ZN15Adafruit_BMP28012readPressureEv+0x18c>
 23ef9a0:	e7fa      	b.n	23ef998 <_ZN15Adafruit_BMP28012readPressureEv+0x17c>
 23ef9a2:	bf00      	nop
 23ef9a4:	3b800000 	.word	0x3b800000
 23ef9a8:	00000000 	.word	0x00000000

023ef9ac <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t>:
    @brief  Gets the pressure as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_BMP280_Pressure::getEvent(sensors_event_t *event) {
 23ef9ac:	b538      	push	{r3, r4, r5, lr}
 23ef9ae:	460c      	mov	r4, r1
 23ef9b0:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 23ef9b2:	2220      	movs	r2, #32
 23ef9b4:	2100      	movs	r1, #0
 23ef9b6:	1d20      	adds	r0, r4, #4
 23ef9b8:	f00d f875 	bl	23fcaa6 <memset>

  event->version = sizeof(sensors_event_t);
 23ef9bc:	2324      	movs	r3, #36	; 0x24
 23ef9be:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23ef9c0:	68ab      	ldr	r3, [r5, #8]
 23ef9c2:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_PRESSURE;
 23ef9c4:	2306      	movs	r3, #6
 23ef9c6:	60a3      	str	r3, [r4, #8]
 23ef9c8:	f007 fa4e 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23ef9cc:	6120      	str	r0, [r4, #16]
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23ef9ce:	68e8      	ldr	r0, [r5, #12]
 23ef9d0:	f7ff ff24 	bl	23ef81c <_ZN15Adafruit_BMP28012readPressureEv>
 23ef9d4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 23ef9e4 <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t+0x38>
 23ef9d8:	eec0 7a07 	vdiv.f32	s15, s0, s14
  return true;
}
 23ef9dc:	2001      	movs	r0, #1
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23ef9de:	edc4 7a05 	vstr	s15, [r4, #20]
}
 23ef9e2:	bd38      	pop	{r3, r4, r5, pc}
 23ef9e4:	42c80000 	.word	0x42c80000

023ef9e8 <_ZL9i2c_writehPKhmPv>:
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len,
                 void *intf_ptr) {
 23ef9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Serial.print("I2C write address 0x"); Serial.print(reg_addr, HEX);
  // Serial.print(" len "); Serial.println(len, HEX);

  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23ef9ea:	2301      	movs	r3, #1
                 void *intf_ptr) {
 23ef9ec:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23ef9f0:	f10d 000f 	add.w	r0, sp, #15
 23ef9f4:	9000      	str	r0, [sp, #0]
 23ef9f6:	4805      	ldr	r0, [pc, #20]	; (23efa0c <_ZL9i2c_writehPKhmPv+0x24>)
 23ef9f8:	9301      	str	r3, [sp, #4]
 23ef9fa:	6800      	ldr	r0, [r0, #0]
 23ef9fc:	f000 fa64 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23efa00:	f080 0001 	eor.w	r0, r0, #1
    return 1;

  return 0;
}
 23efa04:	b240      	sxtb	r0, r0
 23efa06:	b005      	add	sp, #20
 23efa08:	f85d fb04 	ldr.w	pc, [sp], #4
 23efa0c:	1007ae5c 	.word	0x1007ae5c

023efa10 <_ZL8i2c_readhPhmPv>:
                void *intf_ptr) {
 23efa10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23efa12:	460b      	mov	r3, r1
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23efa14:	2100      	movs	r1, #0
 23efa16:	e9cd 2100 	strd	r2, r1, [sp]
                void *intf_ptr) {
 23efa1a:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23efa1e:	4806      	ldr	r0, [pc, #24]	; (23efa38 <_ZL8i2c_readhPhmPv+0x28>)
 23efa20:	2201      	movs	r2, #1
 23efa22:	f10d 010f 	add.w	r1, sp, #15
 23efa26:	6800      	ldr	r0, [r0, #0]
 23efa28:	f000 faa0 	bl	23eff6c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23efa2c:	f080 0001 	eor.w	r0, r0, #1
}
 23efa30:	b240      	sxtb	r0, r0
 23efa32:	b005      	add	sp, #20
 23efa34:	f85d fb04 	ldr.w	pc, [sp], #4
 23efa38:	1007ae5c 	.word	0x1007ae5c

023efa3c <_ZL10delay_usecmPv>:
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23efa3c:	f007 ba06 	b.w	23f6e4c <HAL_Delay_Microseconds>

023efa40 <_ZN15Adafruit_BMP3XXC1Ev>:
  _meas_end = 0;
 23efa40:	2200      	movs	r2, #0
Adafruit_BMP3XX::Adafruit_BMP3XX(void) {
 23efa42:	e9c0 2204 	strd	r2, r2, [r0, #16]
  _meas_end = 0;
 23efa46:	6282      	str	r2, [r0, #40]	; 0x28
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 23efa48:	8302      	strh	r2, [r0, #24]
 23efa4a:	7682      	strb	r2, [r0, #26]
}
 23efa4c:	4770      	bx	lr
	...

023efa50 <_ZN15Adafruit_BMP3XX5_initEv>:
bool Adafruit_BMP3XX::_init(void) {
 23efa50:	b5f0      	push	{r4, r5, r6, r7, lr}
  g_i2c_dev = i2c_dev;
 23efa52:	4b2b      	ldr	r3, [pc, #172]	; (23efb00 <_ZN15Adafruit_BMP3XX5_initEv+0xb0>)
 23efa54:	6902      	ldr	r2, [r0, #16]
  rslt = bmp3_soft_reset(&the_sensor);
 23efa56:	f100 0730 	add.w	r7, r0, #48	; 0x30
  g_i2c_dev = i2c_dev;
 23efa5a:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23efa5c:	6942      	ldr	r2, [r0, #20]
 23efa5e:	4b29      	ldr	r3, [pc, #164]	; (23efb04 <_ZN15Adafruit_BMP3XX5_initEv+0xb4>)
bool Adafruit_BMP3XX::_init(void) {
 23efa60:	4605      	mov	r5, r0
  g_spi_dev = spi_dev;
 23efa62:	601a      	str	r2, [r3, #0]
  the_sensor.delay_us = delay_usec;
 23efa64:	4b28      	ldr	r3, [pc, #160]	; (23efb08 <_ZN15Adafruit_BMP3XX5_initEv+0xb8>)
bool Adafruit_BMP3XX::_init(void) {
 23efa66:	b089      	sub	sp, #36	; 0x24
  the_sensor.delay_us = delay_usec;
 23efa68:	6443      	str	r3, [r0, #68]	; 0x44
  rslt = bmp3_soft_reset(&the_sensor);
 23efa6a:	4638      	mov	r0, r7
 23efa6c:	f7f5 ff10 	bl	23e5890 <bmp3_soft_reset>
  if (rslt != BMP3_OK)
 23efa70:	b110      	cbz	r0, 23efa78 <_ZN15Adafruit_BMP3XX5_initEv+0x28>
    return false;
 23efa72:	2000      	movs	r0, #0
}
 23efa74:	b009      	add	sp, #36	; 0x24
 23efa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  rslt = bmp3_init(&the_sensor);
 23efa78:	4638      	mov	r0, r7
 23efa7a:	f7f5 ff47 	bl	23e590c <bmp3_init>
  uint8_t crc = 0xFF;
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 23efa7e:	2215      	movs	r2, #21
 23efa80:	463b      	mov	r3, r7
 23efa82:	2031      	movs	r0, #49	; 0x31
 23efa84:	a902      	add	r1, sp, #8
 23efa86:	f7f5 fd29 	bl	23e54dc <bmp3_get_regs>
  if (rslt == BMP3_OK) {
 23efa8a:	4602      	mov	r2, r0
 23efa8c:	2800      	cmp	r0, #0
 23efa8e:	d1f0      	bne.n	23efa72 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  uint8_t crc = 0xFF;
 23efa90:	24ff      	movs	r4, #255	; 0xff
 23efa92:	a902      	add	r1, sp, #8
    for (i = 0; i < 21; i++) {
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 23efa94:	2608      	movs	r6, #8
 23efa96:	f811 3b01 	ldrb.w	r3, [r1], #1
  int8_t poly = 0x1D;
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
    if ((seed & 0x80) ^ (data & 0x80)) {
 23efa9a:	ea84 0003 	eor.w	r0, r4, r3
      var2 = 0;
    }

    seed = (seed & 0x7F) << 1;
    data = (data & 0x7F) << 1;
    seed = seed ^ (uint8_t)(poly * var2);
 23efa9e:	f010 0f80 	tst.w	r0, #128	; 0x80
 23efaa2:	bf14      	ite	ne
 23efaa4:	201d      	movne	r0, #29
 23efaa6:	2000      	moveq	r0, #0
    seed = (seed & 0x7F) << 1;
 23efaa8:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 23efaaa:	3e01      	subs	r6, #1
    seed = (seed & 0x7F) << 1;
 23efaac:	b2e4      	uxtb	r4, r4
    data = (data & 0x7F) << 1;
 23efaae:	005b      	lsls	r3, r3, #1
  for (i = 0; i < 8; i++) {
 23efab0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    data = (data & 0x7F) << 1;
 23efab4:	b2db      	uxtb	r3, r3
    seed = seed ^ (uint8_t)(poly * var2);
 23efab6:	ea84 0400 	eor.w	r4, r4, r0
  for (i = 0; i < 8; i++) {
 23efaba:	d1ee      	bne.n	23efa9a <_ZN15Adafruit_BMP3XX5_initEv+0x4a>
    for (i = 0; i < 21; i++) {
 23efabc:	3201      	adds	r2, #1
 23efabe:	b2d2      	uxtb	r2, r2
 23efac0:	2a15      	cmp	r2, #21
 23efac2:	d1e7      	bne.n	23efa94 <_ZN15Adafruit_BMP3XX5_initEv+0x44>
    crc = (crc ^ 0xFF);
 23efac4:	43e4      	mvns	r4, r4
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 23efac6:	463b      	mov	r3, r7
 23efac8:	2201      	movs	r2, #1
 23efaca:	2030      	movs	r0, #48	; 0x30
 23efacc:	f10d 0107 	add.w	r1, sp, #7
 23efad0:	f7f5 fd04 	bl	23e54dc <bmp3_get_regs>
    if (stored_crc != crc) {
 23efad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23efad8:	b2e4      	uxtb	r4, r4
 23efada:	42a3      	cmp	r3, r4
 23efadc:	d1c9      	bne.n	23efa72 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  if (rslt != BMP3_OK)
 23efade:	2800      	cmp	r0, #0
 23efae0:	d1c7      	bne.n	23efa72 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  the_sensor.settings.odr_filter.odr = odr;
 23efae2:	2303      	movs	r3, #3
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23efae4:	2001      	movs	r0, #1
  the_sensor.settings.odr_filter.odr = odr;
 23efae6:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
    _filterEnabled = false;
 23efaea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  the_sensor.settings.odr_filter.press_os = oversample;
 23efaee:	f885 60e3 	strb.w	r6, [r5, #227]	; 0xe3
  the_sensor.settings.odr_filter.temp_os = oversample;
 23efaf2:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    _filterEnabled = false;
 23efaf6:	61ab      	str	r3, [r5, #24]
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23efaf8:	f885 00e0 	strb.w	r0, [r5, #224]	; 0xe0
  return true;
 23efafc:	e7ba      	b.n	23efa74 <_ZN15Adafruit_BMP3XX5_initEv+0x24>
 23efafe:	bf00      	nop
 23efb00:	1007ae5c 	.word	0x1007ae5c
 23efb04:	1007ae60 	.word	0x1007ae60
 23efb08:	023efa3d 	.word	0x023efa3d

023efb0c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>:
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23efb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23efb0e:	4604      	mov	r4, r0
  if (i2c_dev)
 23efb10:	6900      	ldr	r0, [r0, #16]
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23efb12:	460e      	mov	r6, r1
 23efb14:	4617      	mov	r7, r2
  if (i2c_dev)
 23efb16:	b110      	cbz	r0, 23efb1e <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x12>
    delete i2c_dev;
 23efb18:	2110      	movs	r1, #16
 23efb1a:	f7f5 fb7a 	bl	23e5212 <_ZdlPvj>
  if (spi_dev)
 23efb1e:	6965      	ldr	r5, [r4, #20]
 23efb20:	b135      	cbz	r5, 23efb30 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x24>
    delete spi_dev;
 23efb22:	4628      	mov	r0, r5
 23efb24:	f000 fa39 	bl	23eff9a <_ZN18Adafruit_SPIDeviceD1Ev>
 23efb28:	2138      	movs	r1, #56	; 0x38
 23efb2a:	4628      	mov	r0, r5
 23efb2c:	f7f5 fb71 	bl	23e5212 <_ZdlPvj>
  spi_dev = NULL;
 23efb30:	2300      	movs	r3, #0
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23efb32:	2010      	movs	r0, #16
  spi_dev = NULL;
 23efb34:	6163      	str	r3, [r4, #20]
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23efb36:	f7f5 fb68 	bl	23e520a <_Znwj>
 23efb3a:	4605      	mov	r5, r0
 23efb3c:	b118      	cbz	r0, 23efb46 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x3a>
 23efb3e:	463a      	mov	r2, r7
 23efb40:	4631      	mov	r1, r6
 23efb42:	f000 f996 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23efb46:	4f0e      	ldr	r7, [pc, #56]	; (23efb80 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x74>)
  if (!i2c_dev->begin()) {
 23efb48:	2101      	movs	r1, #1
 23efb4a:	4628      	mov	r0, r5
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23efb4c:	6125      	str	r5, [r4, #16]
 23efb4e:	603d      	str	r5, [r7, #0]
  if (!i2c_dev->begin()) {
 23efb50:	f000 f9ab 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23efb54:	b190      	cbz	r0, 23efb7c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x70>
  the_sensor.intf = BMP3_I2C_INTF;
 23efb56:	2301      	movs	r3, #1
 23efb58:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  the_sensor.read = &i2c_read;
 23efb5c:	4b09      	ldr	r3, [pc, #36]	; (23efb84 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x78>)
  return _init();
 23efb5e:	4620      	mov	r0, r4
  the_sensor.read = &i2c_read;
 23efb60:	63e3      	str	r3, [r4, #60]	; 0x3c
  the_sensor.write = &i2c_write;
 23efb62:	4b09      	ldr	r3, [pc, #36]	; (23efb88 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x7c>)
  the_sensor.chip_id = addr;
 23efb64:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  the_sensor.write = &i2c_write;
 23efb68:	6423      	str	r3, [r4, #64]	; 0x40
  the_sensor.intf_ptr = g_i2c_dev;
 23efb6a:	683b      	ldr	r3, [r7, #0]
 23efb6c:	6363      	str	r3, [r4, #52]	; 0x34
  the_sensor.dummy_byte = 0;
 23efb6e:	2300      	movs	r3, #0
 23efb70:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 23efb74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return _init();
 23efb78:	f7ff bf6a 	b.w	23efa50 <_ZN15Adafruit_BMP3XX5_initEv>
}
 23efb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23efb7e:	bf00      	nop
 23efb80:	1007ae5c 	.word	0x1007ae5c
 23efb84:	023efa11 	.word	0x023efa11
 23efb88:	023ef9e9 	.word	0x023ef9e9

023efb8c <_ZN15Adafruit_BMP3XX14performReadingEv>:
bool Adafruit_BMP3XX::performReading(void) {
 23efb8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  g_i2c_dev = i2c_dev;
 23efb8e:	4b21      	ldr	r3, [pc, #132]	; (23efc14 <_ZN15Adafruit_BMP3XX14performReadingEv+0x88>)
 23efb90:	6902      	ldr	r2, [r0, #16]
bool Adafruit_BMP3XX::performReading(void) {
 23efb92:	4604      	mov	r4, r0
  g_i2c_dev = i2c_dev;
 23efb94:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23efb96:	6942      	ldr	r2, [r0, #20]
 23efb98:	4b1f      	ldr	r3, [pc, #124]	; (23efc18 <_ZN15Adafruit_BMP3XX14performReadingEv+0x8c>)
 23efb9a:	601a      	str	r2, [r3, #0]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23efb9c:	2301      	movs	r3, #1
  if (_tempOSEnabled) {
 23efb9e:	7e42      	ldrb	r2, [r0, #25]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23efba0:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
  the_sensor.settings.press_en = BMP3_ENABLE;
 23efba4:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
  if (_presOSEnabled) {
 23efba8:	7ea3      	ldrb	r3, [r4, #26]
    settings_sel |= BMP3_SEL_TEMP_OS;
 23efbaa:	2a00      	cmp	r2, #0
 23efbac:	bf0c      	ite	eq
 23efbae:	2004      	moveq	r0, #4
 23efbb0:	2024      	movne	r0, #36	; 0x24
  if (_presOSEnabled) {
 23efbb2:	b993      	cbnz	r3, 23efbda <_ZN15Adafruit_BMP3XX14performReadingEv+0x4e>
  settings_sel |= BMP3_SEL_PRESS_EN;
 23efbb4:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled) {
 23efbb8:	7e23      	ldrb	r3, [r4, #24]
 23efbba:	b10b      	cbz	r3, 23efbc0 <_ZN15Adafruit_BMP3XX14performReadingEv+0x34>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 23efbbc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  if (_ODREnabled) {
 23efbc0:	7ee3      	ldrb	r3, [r4, #27]
 23efbc2:	b10b      	cbz	r3, 23efbc8 <_ZN15Adafruit_BMP3XX14performReadingEv+0x3c>
    settings_sel |= BMP3_SEL_ODR;
 23efbc4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 23efbc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23efbcc:	4631      	mov	r1, r6
 23efbce:	f7f5 fd31 	bl	23e5634 <bmp3_set_sensor_settings>
  if (rslt != BMP3_OK)
 23efbd2:	b128      	cbz	r0, 23efbe0 <_ZN15Adafruit_BMP3XX14performReadingEv+0x54>
    return false;
 23efbd4:	2000      	movs	r0, #0
}
 23efbd6:	b004      	add	sp, #16
 23efbd8:	bd70      	pop	{r4, r5, r6, pc}
    settings_sel |= BMP3_SEL_PRESS_OS;
 23efbda:	f040 0012 	orr.w	r0, r0, #18
 23efbde:	e7eb      	b.n	23efbb8 <_ZN15Adafruit_BMP3XX14performReadingEv+0x2c>
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23efbe0:	2501      	movs	r5, #1
  rslt = bmp3_set_op_mode(&the_sensor);
 23efbe2:	4630      	mov	r0, r6
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23efbe4:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
  rslt = bmp3_set_op_mode(&the_sensor);
 23efbe8:	f7f5 ffa7 	bl	23e5b3a <bmp3_set_op_mode>
  if (rslt != BMP3_OK)
 23efbec:	2800      	cmp	r0, #0
 23efbee:	d1f1      	bne.n	23efbd4 <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 23efbf0:	4632      	mov	r2, r6
 23efbf2:	4669      	mov	r1, sp
 23efbf4:	2003      	movs	r0, #3
 23efbf6:	f7f6 f815 	bl	23e5c24 <bmp3_get_sensor_data>
  if (rslt != BMP3_OK)
 23efbfa:	2800      	cmp	r0, #0
 23efbfc:	d1ea      	bne.n	23efbd4 <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  temperature = data.temperature;
 23efbfe:	e9dd 2300 	ldrd	r2, r3, [sp]
  return true;
 23efc02:	4628      	mov	r0, r5
  temperature = data.temperature;
 23efc04:	e9c4 2300 	strd	r2, r3, [r4]
  pressure = data.pressure;
 23efc08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23efc0c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  return true;
 23efc10:	e7e1      	b.n	23efbd6 <_ZN15Adafruit_BMP3XX14performReadingEv+0x4a>
 23efc12:	bf00      	nop
 23efc14:	1007ae5c 	.word	0x1007ae5c
 23efc18:	1007ae60 	.word	0x1007ae60

023efc1c <_ZN15Adafruit_BMP3XX15readTemperatureEv>:
float Adafruit_BMP3XX::readTemperature(void) {
 23efc1c:	b510      	push	{r4, lr}
 23efc1e:	4604      	mov	r4, r0
  performReading();
 23efc20:	f7ff ffb4 	bl	23efb8c <_ZN15Adafruit_BMP3XX14performReadingEv>
  return temperature;
 23efc24:	e9d4 0100 	ldrd	r0, r1, [r4]
 23efc28:	f7f4 ff82 	bl	23e4b30 <__aeabi_d2f>
}
 23efc2c:	ee00 0a10 	vmov	s0, r0
 23efc30:	bd10      	pop	{r4, pc}

023efc32 <_ZN15Adafruit_BMP3XX12readPressureEv>:
float Adafruit_BMP3XX::readPressure(void) {
 23efc32:	b510      	push	{r4, lr}
 23efc34:	4604      	mov	r4, r0
  performReading();
 23efc36:	f7ff ffa9 	bl	23efb8c <_ZN15Adafruit_BMP3XX14performReadingEv>
  return pressure;
 23efc3a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23efc3e:	f7f4 ff77 	bl	23e4b30 <__aeabi_d2f>
}
 23efc42:	ee00 0a10 	vmov	s0, r0
 23efc46:	bd10      	pop	{r4, pc}

023efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
 23efc48:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
 23efc4a:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
  _addrwidth = address_width;
  _address = reg_addr;
 23efc4c:	8142      	strh	r2, [r0, #10]
  _spidevice = NULL;
 23efc4e:	e9c0 1500 	strd	r1, r5, [r0]
  _byteorder = byteorder;
 23efc52:	f89d 200c 	ldrb.w	r2, [sp, #12]
  _addrwidth = address_width;
 23efc56:	f89d 1010 	ldrb.w	r1, [sp, #16]
                                                 uint8_t address_width) {
 23efc5a:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
 23efc5c:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
 23efc5e:	7382      	strb	r2, [r0, #14]
  _width = width;
 23efc60:	7303      	strb	r3, [r0, #12]
}
 23efc62:	bd30      	pop	{r4, r5, pc}

023efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 23efc64:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 23efc66:	2500      	movs	r5, #0
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
 23efc68:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
 23efc6a:	f89d 3018 	ldrb.w	r3, [sp, #24]
  _i2cdevice = i2cdevice;
 23efc6e:	e9c0 1200 	strd	r1, r2, [r0]
  _addrwidth = address_width;
 23efc72:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
 23efc74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    uint8_t byteorder, uint8_t address_width) {
 23efc78:	6145      	str	r5, [r0, #20]
  _address = reg_addr;
 23efc7a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
 23efc7c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23efc80:	7383      	strb	r3, [r0, #14]
  _width = width;
 23efc82:	f89d 3010 	ldrb.w	r3, [sp, #16]
 23efc86:	7303      	strb	r3, [r0, #12]
}
 23efc88:	bd30      	pop	{r4, r5, pc}

023efc8a <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23efc8a:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23efc8c:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23efc8e:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23efc90:	4603      	mov	r3, r0

  if (_i2cdevice) {
 23efc92:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23efc94:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 23efc96:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23efc98:	460e      	mov	r6, r1
 23efc9a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
 23efc9c:	f88d 400c 	strb.w	r4, [sp, #12]
 23efca0:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
 23efca4:	b140      	cbz	r0, 23efcb8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23efca6:	7b5b      	ldrb	r3, [r3, #13]
 23efca8:	9301      	str	r3, [sp, #4]
 23efcaa:	ab03      	add	r3, sp, #12
 23efcac:	9300      	str	r3, [sp, #0]
 23efcae:	2301      	movs	r3, #1
 23efcb0:	f000 f90a 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
 23efcb4:	b005      	add	sp, #20
 23efcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 23efcb8:	6858      	ldr	r0, [r3, #4]
 23efcba:	2800      	cmp	r0, #0
 23efcbc:	d0fa      	beq.n	23efcb4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23efcbe:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23efcc2:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23efcc6:	f1be 0f03 	cmp.w	lr, #3
 23efcca:	d10c      	bne.n	23efce6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23efccc:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
 23efcd0:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23efcd4:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
 23efcd6:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23efcda:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23efcde:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23efce0:	f000 fa15 	bl	23f010e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 23efce4:	e7e6      	b.n	23efcb4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23efce6:	f1be 0f00 	cmp.w	lr, #0
 23efcea:	d109      	bne.n	23efd00 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
 23efcec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
 23efcf0:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23efcf4:	463a      	mov	r2, r7
 23efcf6:	4631      	mov	r1, r6
 23efcf8:	f8cd c000 	str.w	ip, [sp]
 23efcfc:	ab03      	add	r3, sp, #12
 23efcfe:	e7ef      	b.n	23efce0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23efd00:	f1be 0f02 	cmp.w	lr, #2
 23efd04:	d102      	bne.n	23efd0c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
 23efd06:	f064 047f 	orn	r4, r4, #127	; 0x7f
 23efd0a:	e7f1      	b.n	23efcf0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23efd0c:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
 23efd10:	bf01      	itttt	eq
 23efd12:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 23efd16:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
 23efd1a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 23efd1e:	f88d 300c 	strbeq.w	r3, [sp, #12]
 23efd22:	e7e7      	b.n	23efcf4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

023efd24 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 23efd24:	460b      	mov	r3, r1
 23efd26:	b4f0      	push	{r4, r5, r6, r7}
  if (numbytes == 0) {
 23efd28:	b902      	cbnz	r2, 23efd2c <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
 23efd2a:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
 23efd2c:	2a04      	cmp	r2, #4
 23efd2e:	d814      	bhi.n	23efd5a <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
 23efd30:	f100 050f 	add.w	r5, r0, #15
 23efd34:	4629      	mov	r1, r5
 23efd36:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
 23efd38:	1884      	adds	r4, r0, r2
 23efd3a:	4284      	cmp	r4, r0
 23efd3c:	d009      	beq.n	23efd52 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
 23efd3e:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
 23efd40:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
 23efd42:	b927      	cbnz	r7, 23efd4e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
 23efd44:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
 23efd46:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
 23efd48:	3501      	adds	r5, #1
 23efd4a:	3c01      	subs	r4, #1
 23efd4c:	e7f5      	b.n	23efd3a <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
 23efd4e:	73a6      	strb	r6, [r4, #14]
 23efd50:	e7f9      	b.n	23efd46 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
 23efd52:	4620      	mov	r0, r4
}
 23efd54:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
 23efd56:	f7ff bf98 	b.w	23efc8a <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
 23efd5a:	2000      	movs	r0, #0
 23efd5c:	bcf0      	pop	{r4, r5, r6, r7}
 23efd5e:	4770      	bx	lr

023efd60 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23efd60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23efd62:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23efd64:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23efd66:	4604      	mov	r4, r0

  if (_i2cdevice) {
 23efd68:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
 23efd6a:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23efd6c:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
 23efd6e:	f88d 500c 	strb.w	r5, [sp, #12]
 23efd72:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
 23efd76:	b140      	cbz	r0, 23efd8a <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23efd78:	2100      	movs	r1, #0
 23efd7a:	e9cd 2100 	strd	r2, r1, [sp]
 23efd7e:	a903      	add	r1, sp, #12
 23efd80:	7b62      	ldrb	r2, [r4, #13]
 23efd82:	f000 f8f3 	bl	23eff6c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
 23efd86:	b004      	add	sp, #16
 23efd88:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
 23efd8a:	6860      	ldr	r0, [r4, #4]
 23efd8c:	2800      	cmp	r0, #0
 23efd8e:	d0fa      	beq.n	23efd86 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23efd90:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23efd92:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23efd94:	2903      	cmp	r1, #3
 23efd96:	d10d      	bne.n	23efdb4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23efd98:	21ff      	movs	r1, #255	; 0xff
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
 23efd9a:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23efd9e:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
 23efda2:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23efda6:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23efdaa:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23efdac:	a903      	add	r1, sp, #12
 23efdae:	f000 f9e0 	bl	23f0172 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 23efdb2:	e7e8      	b.n	23efd86 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23efdb4:	b941      	cbnz	r1, 23efdc8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
 23efdb6:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
 23efdba:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23efdbe:	21ff      	movs	r1, #255	; 0xff
 23efdc0:	e9cd 2100 	strd	r2, r1, [sp]
 23efdc4:	4622      	mov	r2, r4
 23efdc6:	e7f1      	b.n	23efdac <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23efdc8:	2902      	cmp	r1, #2
 23efdca:	d102      	bne.n	23efdd2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
 23efdcc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 23efdd0:	e7f3      	b.n	23efdba <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23efdd2:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
 23efdd4:	bf02      	ittt	eq
 23efdd6:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
 23efdda:	f061 013f 	orneq	r1, r1, #63	; 0x3f
 23efdde:	f88d 100c 	strbeq.w	r1, [sp, #12]
 23efde2:	e7ec      	b.n	23efdbe <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

023efde4 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
 23efde4:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
 23efde6:	f100 050f 	add.w	r5, r0, #15
 23efdea:	4629      	mov	r1, r5
 23efdec:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
 23efdee:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
 23efdf0:	f7ff ffb6 	bl	23efd60 <_ZN23Adafruit_BusIO_Register4readEPhh>
 23efdf4:	b178      	cbz	r0, 23efe16 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
 23efdf6:	4629      	mov	r1, r5
  uint32_t value = 0;
 23efdf8:	2000      	movs	r0, #0
 23efdfa:	7b22      	ldrb	r2, [r4, #12]
 23efdfc:	4422      	add	r2, r4
  for (int i = 0; i < _width; i++) {
 23efdfe:	42a2      	cmp	r2, r4
 23efe00:	d00b      	beq.n	23efe1a <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
 23efe02:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
 23efe04:	7ba0      	ldrb	r0, [r4, #14]
 23efe06:	b920      	cbnz	r0, 23efe12 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
 23efe08:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
 23efe0a:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
 23efe0c:	3a01      	subs	r2, #1
 23efe0e:	3101      	adds	r1, #1
 23efe10:	e7f5      	b.n	23efdfe <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
 23efe12:	7808      	ldrb	r0, [r1, #0]
 23efe14:	e7f9      	b.n	23efe0a <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
 23efe16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23efe1a:	bd38      	pop	{r3, r4, r5, pc}

023efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 23efe1c:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 23efe1e:	6001      	str	r1, [r0, #0]
  _bits = bits;
 23efe20:	7102      	strb	r2, [r0, #4]
  _shift = shift;
 23efe22:	7143      	strb	r3, [r0, #5]
}
 23efe24:	bd10      	pop	{r4, pc}

023efe26 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 23efe26:	b510      	push	{r4, lr}
 23efe28:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23efe2a:	6800      	ldr	r0, [r0, #0]
 23efe2c:	f7ff ffda 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
 23efe30:	2301      	movs	r3, #1
 23efe32:	7922      	ldrb	r2, [r4, #4]
 23efe34:	4093      	lsls	r3, r2
  val >>= _shift;
 23efe36:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
 23efe38:	3b01      	subs	r3, #1
  val >>= _shift;
 23efe3a:	40d0      	lsrs	r0, r2
}
 23efe3c:	4018      	ands	r0, r3
 23efe3e:	bd10      	pop	{r4, pc}

023efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23efe40:	b570      	push	{r4, r5, r6, lr}
 23efe42:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23efe44:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23efe46:	460e      	mov	r6, r1
  uint32_t val = _register->read();
 23efe48:	f7ff ffcc 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 23efe4c:	2201      	movs	r2, #1
 23efe4e:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
 23efe50:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
 23efe52:	409a      	lsls	r2, r3
 23efe54:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
 23efe56:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
 23efe5a:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
 23efe5e:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
 23efe60:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
 23efe62:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
 23efe66:	4329      	orrs	r1, r5
 23efe68:	7b02      	ldrb	r2, [r0, #12]
}
 23efe6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
 23efe6e:	f7ff bf59 	b.w	23efd24 <_ZN23Adafruit_BusIO_Register5writeEmh>

023efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23efe72:	6042      	str	r2, [r0, #4]
  _begun = false;
 23efe74:	2200      	movs	r2, #0
 23efe76:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 23efe78:	2220      	movs	r2, #32
  _addr = addr;
 23efe7a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23efe7c:	60c2      	str	r2, [r0, #12]
#endif
}
 23efe7e:	4770      	bx	lr

023efe80 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23efe80:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23efe82:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23efe84:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23efe86:	b153      	cbz	r3, 23efe9e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23efe88:	7821      	ldrb	r1, [r4, #0]
 23efe8a:	6860      	ldr	r0, [r4, #4]
 23efe8c:	f008 fce8 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23efe90:	6860      	ldr	r0, [r4, #4]
 23efe92:	f008 fcf0 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
 23efe96:	fab0 f080 	clz	r0, r0
 23efe9a:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23efe9c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23efe9e:	2101      	movs	r1, #1
 23efea0:	f000 f803 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23efea4:	2800      	cmp	r0, #0
 23efea6:	d1ef      	bne.n	23efe88 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23efea8:	e7f8      	b.n	23efe9c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023efeaa <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23efeaa:	b538      	push	{r3, r4, r5, lr}
 23efeac:	4604      	mov	r4, r0
  _wire->begin();
 23efeae:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23efeb0:	460d      	mov	r5, r1
  _wire->begin();
 23efeb2:	f008 fcab 	bl	23f880c <_ZN7TwoWire5beginEv>
  _begun = true;
 23efeb6:	2001      	movs	r0, #1
 23efeb8:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23efeba:	b125      	cbz	r5, 23efec6 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23efebc:	4620      	mov	r0, r4
}
 23efebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23efec2:	f7ff bfdd 	b.w	23efe80 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23efec6:	bd38      	pop	{r3, r4, r5, pc}

023efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23efec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23efecc:	461f      	mov	r7, r3
 23efece:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23efed2:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23efed4:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23efed6:	4432      	add	r2, r6
 23efed8:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23efeda:	4604      	mov	r4, r0
 23efedc:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23efede:	d902      	bls.n	23efee6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23efee0:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
 23efee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23efee6:	7801      	ldrb	r1, [r0, #0]
 23efee8:	6840      	ldr	r0, [r0, #4]
 23efeea:	f008 fcb9 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23efeee:	b97e      	cbnz	r6, 23eff10 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23efef0:	6860      	ldr	r0, [r4, #4]
 23efef2:	462a      	mov	r2, r5
 23efef4:	6803      	ldr	r3, [r0, #0]
 23efef6:	4641      	mov	r1, r8
 23efef8:	68db      	ldr	r3, [r3, #12]
 23efefa:	4798      	blx	r3
 23efefc:	4285      	cmp	r5, r0
 23efefe:	d1ef      	bne.n	23efee0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23eff00:	4639      	mov	r1, r7
 23eff02:	6860      	ldr	r0, [r4, #4]
 23eff04:	f008 fcb3 	bl	23f886e <_ZN7TwoWire15endTransmissionEh>
 23eff08:	fab0 f080 	clz	r0, r0
 23eff0c:	0940      	lsrs	r0, r0, #5
 23eff0e:	e7e8      	b.n	23efee2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23eff10:	f1b9 0f00 	cmp.w	r9, #0
 23eff14:	d0ec      	beq.n	23efef0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23eff16:	6860      	ldr	r0, [r4, #4]
 23eff18:	4632      	mov	r2, r6
 23eff1a:	6803      	ldr	r3, [r0, #0]
 23eff1c:	4649      	mov	r1, r9
 23eff1e:	68db      	ldr	r3, [r3, #12]
 23eff20:	4798      	blx	r3
 23eff22:	4286      	cmp	r6, r0
 23eff24:	d1dc      	bne.n	23efee0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23eff26:	e7e3      	b.n	23efef0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23eff28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eff2c:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
 23eff2e:	68c2      	ldr	r2, [r0, #12]
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23eff30:	4604      	mov	r4, r0
  if (len > maxBufferSize()) {
 23eff32:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23eff34:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
 23eff36:	d314      	bcc.n	23eff62 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
  }

#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 23eff38:	7801      	ldrb	r1, [r0, #0]
 23eff3a:	b2ea      	uxtb	r2, r5
 23eff3c:	6840      	ldr	r0, [r0, #4]
 23eff3e:	f008 fc78 	bl	23f8832 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 23eff42:	4285      	cmp	r5, r0
 23eff44:	d10d      	bne.n	23eff62 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
 23eff46:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 23eff48:	fa1f f887 	uxth.w	r8, r7
 23eff4c:	4545      	cmp	r5, r8
 23eff4e:	f107 0701 	add.w	r7, r7, #1
 23eff52:	d909      	bls.n	23eff68 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
 23eff54:	6860      	ldr	r0, [r4, #4]
 23eff56:	6803      	ldr	r3, [r0, #0]
 23eff58:	695b      	ldr	r3, [r3, #20]
 23eff5a:	4798      	blx	r3
 23eff5c:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 23eff60:	e7f2      	b.n	23eff48 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
 23eff62:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23eff64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23eff68:	2001      	movs	r0, #1
 23eff6a:	e7fb      	b.n	23eff64 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

023eff6c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 23eff6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23eff6e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 23eff70:	2300      	movs	r3, #0
 23eff72:	e9cd 3300 	strd	r3, r3, [sp]
 23eff76:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 23eff7a:	4604      	mov	r4, r0
 23eff7c:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 23eff7e:	f7ff ffa3 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23eff82:	b140      	cbz	r0, 23eff96 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 23eff84:	2301      	movs	r3, #1
 23eff86:	4632      	mov	r2, r6
 23eff88:	4629      	mov	r1, r5
 23eff8a:	4620      	mov	r0, r4
}
 23eff8c:	b002      	add	sp, #8
 23eff8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 23eff92:	f7ff bfc9 	b.w	23eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 23eff96:	b002      	add	sp, #8
 23eff98:	bd70      	pop	{r4, r5, r6, pc}

023eff9a <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23eff9a:	b510      	push	{r4, lr}
 23eff9c:	4604      	mov	r4, r0
  if (_spiSetting) {
 23eff9e:	6840      	ldr	r0, [r0, #4]
 23effa0:	b110      	cbz	r0, 23effa8 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23effa2:	6803      	ldr	r3, [r0, #0]
 23effa4:	689b      	ldr	r3, [r3, #8]
 23effa6:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 23effa8:	4620      	mov	r0, r4
 23effaa:	bd10      	pop	{r4, pc}

023effac <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23effac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23effb0:	4604      	mov	r4, r0
  if (_spi) {
 23effb2:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23effb4:	460d      	mov	r5, r1
 23effb6:	b085      	sub	sp, #20
  if (_spi) {
 23effb8:	b140      	cbz	r0, 23effcc <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 23effba:	2300      	movs	r3, #0
 23effbc:	9300      	str	r3, [sp, #0]
 23effbe:	4613      	mov	r3, r2
 23effc0:	460a      	mov	r2, r1
 23effc2:	f009 f9c1 	bl	23f9348 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23effc6:	b005      	add	sp, #20
 23effc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23effcc:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23effce:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23effd0:	2b00      	cmp	r3, #0
 23effd2:	bf0c      	ite	eq
 23effd4:	f04f 0b01 	moveq.w	fp, #1
 23effd8:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23effdc:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23effde:	4f44      	ldr	r7, [pc, #272]	; (23f00f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23effe0:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23effe4:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23effe8:	bf0c      	ite	eq
 23effea:	f04f 0901 	moveq.w	r9, #1
 23effee:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23efff2:	188b      	adds	r3, r1, r2
 23efff4:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23efff6:	9303      	str	r3, [sp, #12]
 23efff8:	9b03      	ldr	r3, [sp, #12]
 23efffa:	42ab      	cmp	r3, r5
 23efffc:	d0e3      	beq.n	23effc6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23efffe:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23f0000:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23f0004:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23f0008:	b117      	cbz	r7, 23f0010 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
 23f000a:	4638      	mov	r0, r7
 23f000c:	f006 ff1e 	bl	23f6e4c <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23f0010:	7b63      	ldrb	r3, [r4, #13]
 23f0012:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23f0016:	d141      	bne.n	23f009c <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23f0018:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23f001c:	1c5a      	adds	r2, r3, #1
 23f001e:	d00f      	beq.n	23f0040 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23f0020:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23f0024:	bf14      	ite	ne
 23f0026:	2301      	movne	r3, #1
 23f0028:	2300      	moveq	r3, #0
 23f002a:	454b      	cmp	r3, r9
 23f002c:	d008      	beq.n	23f0040 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23f002e:	6963      	ldr	r3, [r4, #20]
 23f0030:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f0032:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23f0034:	2900      	cmp	r1, #0
 23f0036:	d02c      	beq.n	23f0092 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23f0038:	f04f 0901 	mov.w	r9, #1
 23f003c:	4302      	orrs	r2, r0
 23f003e:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23f0040:	69a1      	ldr	r1, [r4, #24]
 23f0042:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f0044:	680a      	ldr	r2, [r1, #0]
 23f0046:	4313      	orrs	r3, r2
 23f0048:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23f004a:	b117      	cbz	r7, 23f0052 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23f004c:	4638      	mov	r0, r7
 23f004e:	f006 fefd 	bl	23f6e4c <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23f0052:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f0056:	3301      	adds	r3, #1
 23f0058:	d006      	beq.n	23f0068 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23f005a:	69e3      	ldr	r3, [r4, #28]
 23f005c:	681a      	ldr	r2, [r3, #0]
 23f005e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f0060:	421a      	tst	r2, r3
            reply |= b;
 23f0062:	bf18      	it	ne
 23f0064:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23f0068:	69a1      	ldr	r1, [r4, #24]
 23f006a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f006c:	680a      	ldr	r2, [r1, #0]
 23f006e:	ea22 0303 	bic.w	r3, r2, r3
 23f0072:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23f0074:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f0078:	3301      	adds	r3, #1
        buffer[i] = reply;
 23f007a:	bf18      	it	ne
 23f007c:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23f0080:	7b23      	ldrb	r3, [r4, #12]
 23f0082:	2b00      	cmp	r3, #0
 23f0084:	d132      	bne.n	23f00ec <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23f0086:	0076      	lsls	r6, r6, #1
 23f0088:	b2f6      	uxtb	r6, r6
 23f008a:	2e00      	cmp	r6, #0
 23f008c:	d1bc      	bne.n	23f0008 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23f008e:	3501      	adds	r5, #1
 23f0090:	e7b2      	b.n	23efff8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23f0092:	ea22 0200 	bic.w	r2, r2, r0
 23f0096:	4689      	mov	r9, r1
 23f0098:	601a      	str	r2, [r3, #0]
 23f009a:	e7d1      	b.n	23f0040 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23f009c:	69a1      	ldr	r1, [r4, #24]
 23f009e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f00a0:	680a      	ldr	r2, [r1, #0]
 23f00a2:	4313      	orrs	r3, r2
 23f00a4:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23f00a6:	b117      	cbz	r7, 23f00ae <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23f00a8:	4638      	mov	r0, r7
 23f00aa:	f006 fecf 	bl	23f6e4c <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23f00ae:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23f00b2:	3301      	adds	r3, #1
 23f00b4:	d008      	beq.n	23f00c8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23f00b6:	6963      	ldr	r3, [r4, #20]
 23f00b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f00ba:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23f00bc:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23f00c0:	bf14      	ite	ne
 23f00c2:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23f00c4:	438a      	biceq	r2, r1
 23f00c6:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23f00c8:	69a1      	ldr	r1, [r4, #24]
 23f00ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f00cc:	680a      	ldr	r2, [r1, #0]
 23f00ce:	ea22 0303 	bic.w	r3, r2, r3
 23f00d2:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23f00d4:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f00d8:	3301      	adds	r3, #1
 23f00da:	d0cb      	beq.n	23f0074 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23f00dc:	69e3      	ldr	r3, [r4, #28]
 23f00de:	681a      	ldr	r2, [r3, #0]
 23f00e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f00e2:	421a      	tst	r2, r3
            reply |= b;
 23f00e4:	bf18      	it	ne
 23f00e6:	ea46 0808 	orrne.w	r8, r6, r8
 23f00ea:	e7c3      	b.n	23f0074 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23f00ec:	0876      	lsrs	r6, r6, #1
 23f00ee:	e7cc      	b.n	23f008a <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23f00f0:	0007a120 	.word	0x0007a120

023f00f4 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23f00f4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23f00f6:	2201      	movs	r2, #1
  uint8_t data = send;
 23f00f8:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23f00fc:	f10d 0107 	add.w	r1, sp, #7
 23f0100:	f7ff ff54 	bl	23effac <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23f0104:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23f0108:	b003      	add	sp, #12
 23f010a:	f85d fb04 	ldr.w	pc, [sp], #4

023f010e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23f010e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0112:	4604      	mov	r4, r0
  if (_spi) {
 23f0114:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23f0116:	460e      	mov	r6, r1
 23f0118:	4617      	mov	r7, r2
 23f011a:	461d      	mov	r5, r3
  if (_spi) {
 23f011c:	b110      	cbz	r0, 23f0124 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 23f011e:	6861      	ldr	r1, [r4, #4]
 23f0120:	f009 f89e 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23f0124:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f0128:	2100      	movs	r1, #0
 23f012a:	b280      	uxth	r0, r0
 23f012c:	f009 fe6b 	bl	23f9e06 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 23f0130:	9b06      	ldr	r3, [sp, #24]
 23f0132:	eb05 0803 	add.w	r8, r5, r3
 23f0136:	4545      	cmp	r5, r8
 23f0138:	d108      	bne.n	23f014c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 23f013a:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 23f013c:	42b7      	cmp	r7, r6
 23f013e:	d00b      	beq.n	23f0158 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 23f0140:	4620      	mov	r0, r4
 23f0142:	f816 1b01 	ldrb.w	r1, [r6], #1
 23f0146:	f7ff ffd5 	bl	23f00f4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 23f014a:	e7f7      	b.n	23f013c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 23f014c:	4620      	mov	r0, r4
 23f014e:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f0152:	f7ff ffcf 	bl	23f00f4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 23f0156:	e7ee      	b.n	23f0136 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 23f0158:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f015c:	2101      	movs	r1, #1
 23f015e:	b280      	uxth	r0, r0
 23f0160:	f009 fe51 	bl	23f9e06 <digitalWrite>

  if (_spi) {
 23f0164:	6820      	ldr	r0, [r4, #0]
 23f0166:	b108      	cbz	r0, 23f016c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 23f0168:	f009 f860 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23f016c:	2001      	movs	r0, #1
 23f016e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f0172 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 23f0172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0176:	4604      	mov	r4, r0
  if (_spi) {
 23f0178:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 23f017a:	460e      	mov	r6, r1
 23f017c:	4617      	mov	r7, r2
 23f017e:	461d      	mov	r5, r3
 23f0180:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 23f0184:	b110      	cbz	r0, 23f018c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 23f0186:	6861      	ldr	r1, [r4, #4]
 23f0188:	f009 f86a 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23f018c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f0190:	2100      	movs	r1, #0
 23f0192:	b280      	uxth	r0, r0
 23f0194:	f009 fe37 	bl	23f9e06 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 23f0198:	4437      	add	r7, r6
 23f019a:	42be      	cmp	r6, r7
 23f019c:	d10a      	bne.n	23f01b4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 23f019e:	9b06      	ldr	r3, [sp, #24]
 23f01a0:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 23f01a2:	42ae      	cmp	r6, r5
 23f01a4:	d00c      	beq.n	23f01c0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 23f01a6:	4641      	mov	r1, r8
 23f01a8:	4620      	mov	r0, r4
 23f01aa:	f7ff ffa3 	bl	23f00f4 <_ZN18Adafruit_SPIDevice8transferEh>
 23f01ae:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 23f01b2:	e7f6      	b.n	23f01a2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 23f01b4:	4620      	mov	r0, r4
 23f01b6:	f816 1b01 	ldrb.w	r1, [r6], #1
 23f01ba:	f7ff ff9b 	bl	23f00f4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 23f01be:	e7ec      	b.n	23f019a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 23f01c0:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f01c4:	2101      	movs	r1, #1
 23f01c6:	b280      	uxth	r0, r0
 23f01c8:	f009 fe1d 	bl	23f9e06 <digitalWrite>

  if (_spi) {
 23f01cc:	6820      	ldr	r0, [r4, #0]
 23f01ce:	b108      	cbz	r0, 23f01d4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 23f01d0:	f009 f82c 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 23f01d4:	2001      	movs	r0, #1
 23f01d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f01da <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23f01da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f01de:	461f      	mov	r7, r3
 23f01e0:	b085      	sub	sp, #20
 23f01e2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23f01e6:	eba7 0a01 	sub.w	sl, r7, r1
 23f01ea:	eba8 0902 	sub.w	r9, r8, r2
 23f01ee:	f1b9 0f00 	cmp.w	r9, #0
 23f01f2:	bfb8      	it	lt
 23f01f4:	f1c9 0900 	rsblt	r9, r9, #0
 23f01f8:	f1ba 0f00 	cmp.w	sl, #0
 23f01fc:	bfb8      	it	lt
 23f01fe:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23f0202:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23f0204:	4683      	mov	fp, r0
 23f0206:	460c      	mov	r4, r1
 23f0208:	4615      	mov	r5, r2
 23f020a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23f020e:	dd04      	ble.n	23f021a <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23f0210:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23f0212:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23f0214:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23f0216:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23f0218:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23f021a:	42bc      	cmp	r4, r7
 23f021c:	dd05      	ble.n	23f022a <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23f021e:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23f0220:	4645      	mov	r5, r8
 23f0222:	4690      	mov	r8, r2
  if (x0 > x1) {
 23f0224:	4622      	mov	r2, r4
 23f0226:	463c      	mov	r4, r7
 23f0228:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23f022a:	1b3e      	subs	r6, r7, r4
 23f022c:	b2b2      	uxth	r2, r6
 23f022e:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23f0230:	eba8 0205 	sub.w	r2, r8, r5
 23f0234:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23f0238:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23f023c:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23f0240:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23f0244:	4545      	cmp	r5, r8
 23f0246:	bfb4      	ite	lt
 23f0248:	2201      	movlt	r2, #1
 23f024a:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23f024e:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23f0250:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23f0252:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23f0254:	42bc      	cmp	r4, r7
 23f0256:	dc1c      	bgt.n	23f0292 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23f0258:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23f025c:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23f025e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23f0262:	bfc7      	ittee	gt
 23f0264:	4629      	movgt	r1, r5
 23f0266:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23f0268:	462a      	movle	r2, r5
 23f026a:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23f026c:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23f026e:	4658      	mov	r0, fp
 23f0270:	47c0      	blx	r8
    }
    err -= dy;
 23f0272:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23f0274:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23f0276:	1ab6      	subs	r6, r6, r2
 23f0278:	b2b1      	uxth	r1, r6
 23f027a:	b236      	sxth	r6, r6
    if (err < 0) {
 23f027c:	2e00      	cmp	r6, #0
 23f027e:	da05      	bge.n	23f028c <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23f0280:	9a02      	ldr	r2, [sp, #8]
 23f0282:	4415      	add	r5, r2
      err += dx;
 23f0284:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23f0286:	b22d      	sxth	r5, r5
      err += dx;
 23f0288:	1856      	adds	r6, r2, r1
 23f028a:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23f028c:	3401      	adds	r4, #1
 23f028e:	b224      	sxth	r4, r4
 23f0290:	e7e0      	b.n	23f0254 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23f0292:	b005      	add	sp, #20
 23f0294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f0298 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23f0298:	4770      	bx	lr

023f029a <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23f029a:	b410      	push	{r4}
  drawPixel(x, y, color);
 23f029c:	6804      	ldr	r4, [r0, #0]
 23f029e:	6924      	ldr	r4, [r4, #16]
 23f02a0:	46a4      	mov	ip, r4
}
 23f02a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23f02a6:	4760      	bx	ip

023f02a8 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23f02a8:	b430      	push	{r4, r5}
 23f02aa:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23f02ae:	6804      	ldr	r4, [r0, #0]
 23f02b0:	9502      	str	r5, [sp, #8]
 23f02b2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23f02b4:	46a4      	mov	ip, r4
}
 23f02b6:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23f02b8:	4760      	bx	ip

023f02ba <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23f02ba:	b430      	push	{r4, r5}
 23f02bc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23f02c0:	6804      	ldr	r4, [r0, #0]
 23f02c2:	9502      	str	r5, [sp, #8]
 23f02c4:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23f02c6:	46a4      	mov	ip, r4
}
 23f02c8:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23f02ca:	4760      	bx	ip

023f02cc <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23f02cc:	b470      	push	{r4, r5, r6}
 23f02ce:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23f02d2:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23f02d6:	6804      	ldr	r4, [r0, #0]
 23f02d8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23f02dc:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23f02de:	46a4      	mov	ip, r4
}
 23f02e0:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23f02e2:	4760      	bx	ip

023f02e4 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23f02e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f02e8:	461c      	mov	r4, r3
 23f02ea:	4616      	mov	r6, r2
 23f02ec:	4605      	mov	r5, r0
 23f02ee:	460f      	mov	r7, r1
  startWrite();
 23f02f0:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23f02f2:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23f02f4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23f02f8:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23f02fa:	4434      	add	r4, r6
  startWrite();
 23f02fc:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23f02fe:	b224      	sxth	r4, r4
 23f0300:	682b      	ldr	r3, [r5, #0]
 23f0302:	f8cd 8004 	str.w	r8, [sp, #4]
 23f0306:	9400      	str	r4, [sp, #0]
 23f0308:	4628      	mov	r0, r5
 23f030a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23f030c:	4632      	mov	r2, r6
 23f030e:	463b      	mov	r3, r7
 23f0310:	4639      	mov	r1, r7
 23f0312:	47a0      	blx	r4
  endWrite();
 23f0314:	4628      	mov	r0, r5
 23f0316:	682b      	ldr	r3, [r5, #0]
 23f0318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f031a:	b002      	add	sp, #8
 23f031c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23f0320:	4718      	bx	r3

023f0322 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23f0322:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f0326:	4617      	mov	r7, r2
 23f0328:	4604      	mov	r4, r0
 23f032a:	461d      	mov	r5, r3
 23f032c:	460e      	mov	r6, r1
  startWrite();
 23f032e:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23f0330:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23f0334:	695b      	ldr	r3, [r3, #20]
 23f0336:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23f0338:	e9cd 7800 	strd	r7, r8, [sp]
 23f033c:	6822      	ldr	r2, [r4, #0]
 23f033e:	1e6b      	subs	r3, r5, #1
 23f0340:	4433      	add	r3, r6
 23f0342:	4620      	mov	r0, r4
 23f0344:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23f0346:	4631      	mov	r1, r6
 23f0348:	463a      	mov	r2, r7
 23f034a:	b21b      	sxth	r3, r3
 23f034c:	47a8      	blx	r5
  endWrite();
 23f034e:	4620      	mov	r0, r4
 23f0350:	6823      	ldr	r3, [r4, #0]
 23f0352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f0354:	b002      	add	sp, #8
 23f0356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23f035a:	4718      	bx	r3

023f035c <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23f035c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f0360:	461e      	mov	r6, r3
  startWrite();
 23f0362:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23f0364:	460c      	mov	r4, r1
  startWrite();
 23f0366:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23f0368:	4605      	mov	r5, r0
 23f036a:	4617      	mov	r7, r2
 23f036c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23f0370:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23f0374:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23f0376:	4426      	add	r6, r4
 23f0378:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23f037a:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23f037c:	da0b      	bge.n	23f0396 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23f037e:	f8cd 8000 	str.w	r8, [sp]
 23f0382:	4621      	mov	r1, r4
 23f0384:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23f0388:	463a      	mov	r2, r7
 23f038a:	464b      	mov	r3, r9
 23f038c:	4628      	mov	r0, r5
 23f038e:	3401      	adds	r4, #1
 23f0390:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23f0392:	b224      	sxth	r4, r4
 23f0394:	e7f0      	b.n	23f0378 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23f0396:	4628      	mov	r0, r5
 23f0398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f039a:	b002      	add	sp, #8
 23f039c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23f03a0:	4718      	bx	r3

023f03a2 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23f03a2:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23f03a4:	9101      	str	r1, [sp, #4]
 23f03a6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23f03aa:	6802      	ldr	r2, [r0, #0]
 23f03ac:	9100      	str	r1, [sp, #0]
 23f03ae:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23f03b0:	2200      	movs	r2, #0
 23f03b2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f03b6:	4611      	mov	r1, r2
 23f03b8:	47a0      	blx	r4
}
 23f03ba:	b002      	add	sp, #8
 23f03bc:	bd10      	pop	{r4, pc}

023f03be <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23f03be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23f03c2:	4299      	cmp	r1, r3
                            uint16_t color) {
 23f03c4:	4616      	mov	r6, r2
 23f03c6:	4680      	mov	r8, r0
 23f03c8:	460d      	mov	r5, r1
 23f03ca:	461c      	mov	r4, r3
 23f03cc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23f03d0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23f03d4:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23f03d6:	d112      	bne.n	23f03fe <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23f03d8:	42be      	cmp	r6, r7
 23f03da:	bfc2      	ittt	gt
 23f03dc:	4633      	movgt	r3, r6
 23f03de:	463e      	movgt	r6, r7
 23f03e0:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23f03e2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23f03e6:	1c7b      	adds	r3, r7, #1
 23f03e8:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23f03ea:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f03ec:	4632      	mov	r2, r6
 23f03ee:	4629      	mov	r1, r5
 23f03f0:	4640      	mov	r0, r8
 23f03f2:	46a4      	mov	ip, r4
 23f03f4:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23f03f6:	b003      	add	sp, #12
 23f03f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f03fc:	4760      	bx	ip
  } else if (y0 == y1) {
 23f03fe:	42be      	cmp	r6, r7
 23f0400:	d10a      	bne.n	23f0418 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23f0402:	4299      	cmp	r1, r3
 23f0404:	bfc2      	ittt	gt
 23f0406:	460b      	movgt	r3, r1
 23f0408:	4625      	movgt	r5, r4
 23f040a:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f040c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23f0410:	1c63      	adds	r3, r4, #1
 23f0412:	1b5b      	subs	r3, r3, r5
 23f0414:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23f0416:	e7e9      	b.n	23f03ec <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23f0418:	6953      	ldr	r3, [r2, #20]
 23f041a:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23f041c:	e9cd 7900 	strd	r7, r9, [sp]
 23f0420:	f8d8 3000 	ldr.w	r3, [r8]
 23f0424:	4640      	mov	r0, r8
 23f0426:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23f0428:	4632      	mov	r2, r6
 23f042a:	4623      	mov	r3, r4
 23f042c:	4629      	mov	r1, r5
 23f042e:	47b8      	blx	r7
    endWrite();
 23f0430:	4640      	mov	r0, r8
 23f0432:	f8d8 3000 	ldr.w	r3, [r8]
 23f0436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f0438:	b003      	add	sp, #12
 23f043a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23f043e:	4718      	bx	r3

023f0440 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23f0440:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f0444:	4604      	mov	r4, r0
 23f0446:	460f      	mov	r7, r1
 23f0448:	4616      	mov	r6, r2
 23f044a:	461d      	mov	r5, r3
  startWrite();
 23f044c:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23f044e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23f0452:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23f0454:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23f0458:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23f045a:	6823      	ldr	r3, [r4, #0]
 23f045c:	f8cd 8000 	str.w	r8, [sp]
 23f0460:	4632      	mov	r2, r6
 23f0462:	4639      	mov	r1, r7
 23f0464:	4620      	mov	r0, r4
 23f0466:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23f046a:	462b      	mov	r3, r5
 23f046c:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23f046e:	6823      	ldr	r3, [r4, #0]
 23f0470:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23f0474:	f8cd 8000 	str.w	r8, [sp]
 23f0478:	4432      	add	r2, r6
 23f047a:	4639      	mov	r1, r7
 23f047c:	4620      	mov	r0, r4
 23f047e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23f0482:	b212      	sxth	r2, r2
 23f0484:	462b      	mov	r3, r5
 23f0486:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23f0488:	6823      	ldr	r3, [r4, #0]
 23f048a:	f8cd 8000 	str.w	r8, [sp]
 23f048e:	4632      	mov	r2, r6
 23f0490:	4639      	mov	r1, r7
 23f0492:	4620      	mov	r0, r4
 23f0494:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23f0498:	464b      	mov	r3, r9
 23f049a:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23f049c:	1e6b      	subs	r3, r5, #1
 23f049e:	19d9      	adds	r1, r3, r7
 23f04a0:	6823      	ldr	r3, [r4, #0]
 23f04a2:	f8cd 8000 	str.w	r8, [sp]
 23f04a6:	4620      	mov	r0, r4
 23f04a8:	6a1d      	ldr	r5, [r3, #32]
 23f04aa:	4632      	mov	r2, r6
 23f04ac:	464b      	mov	r3, r9
 23f04ae:	b209      	sxth	r1, r1
 23f04b0:	47a8      	blx	r5
  endWrite();
 23f04b2:	4620      	mov	r0, r4
 23f04b4:	6823      	ldr	r3, [r4, #0]
 23f04b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f04b8:	b002      	add	sp, #8
 23f04ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23f04be:	4718      	bx	r3

023f04c0 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23f04c0:	4770      	bx	lr

023f04c2 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23f04c2:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23f04c6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23f04ca:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23f04cc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23f04d0:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23f04d2:	bf59      	ittee	pl
 23f04d4:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23f04d6:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23f04d8:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23f04da:	81c3      	strhmi	r3, [r0, #14]
}
 23f04dc:	4770      	bx	lr
	...

023f04e0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f04e0:	b530      	push	{r4, r5, lr}
 23f04e2:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23f04e4:	2400      	movs	r4, #0
  _width = WIDTH;
 23f04e6:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23f04e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f04ec:	4d05      	ldr	r5, [pc, #20]	; (23f0504 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23f04ee:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23f04f0:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23f04f2:	4a05      	ldr	r2, [pc, #20]	; (23f0508 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23f04f4:	6044      	str	r4, [r0, #4]
 23f04f6:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f04fa:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23f04fc:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23f04fe:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23f0500:	6204      	str	r4, [r0, #32]
}
 23f0502:	bd30      	pop	{r4, r5, pc}
 23f0504:	023fef18 	.word	0x023fef18
 23f0508:	01000101 	.word	0x01000101

023f050c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 23f050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 23f0510:	2600      	movs	r6, #0
  uint8_t byte = 0;
 23f0512:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 23f0514:	b089      	sub	sp, #36	; 0x24
 23f0516:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23f051a:	9304      	str	r3, [sp, #16]
  startWrite();
 23f051c:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 23f051e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 23f0522:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  startWrite();
 23f0526:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
 23f0528:	9305      	str	r3, [sp, #20]
 23f052a:	4604      	mov	r4, r0
 23f052c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23f0530:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 23f0532:	f118 0207 	adds.w	r2, r8, #7
 23f0536:	bf48      	it	mi
 23f0538:	f108 020e 	addmi.w	r2, r8, #14
 23f053c:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
 23f0540:	9601      	str	r6, [sp, #4]
 23f0542:	9b03      	ldr	r3, [sp, #12]
 23f0544:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 23f0546:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 23f054a:	189a      	adds	r2, r3, r2
 23f054c:	9b05      	ldr	r3, [sp, #20]
 23f054e:	b212      	sxth	r2, r2
 23f0550:	428b      	cmp	r3, r1
 23f0552:	dd27      	ble.n	23f05a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 23f0554:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f0558:	9b04      	ldr	r3, [sp, #16]
 23f055a:	4433      	add	r3, r6
 23f055c:	9306      	str	r3, [sp, #24]
 23f055e:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
 23f0562:	4580      	cmp	r8, r0
 23f0564:	fa1f f189 	uxth.w	r1, r9
 23f0568:	dd17      	ble.n	23f059a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 23f056a:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f056c:	bf05      	ittet	eq
 23f056e:	9b06      	ldreq	r3, [sp, #24]
 23f0570:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
 23f0572:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f0574:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
 23f0576:	bf18      	it	ne
 23f0578:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
 23f057a:	062b      	lsls	r3, r5, #24
 23f057c:	d50a      	bpl.n	23f0594 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 23f057e:	9b02      	ldr	r3, [sp, #8]
 23f0580:	6820      	ldr	r0, [r4, #0]
 23f0582:	4419      	add	r1, r3
 23f0584:	6983      	ldr	r3, [r0, #24]
 23f0586:	9207      	str	r2, [sp, #28]
 23f0588:	461f      	mov	r7, r3
 23f058a:	4620      	mov	r0, r4
 23f058c:	4653      	mov	r3, sl
 23f058e:	b209      	sxth	r1, r1
 23f0590:	47b8      	blx	r7
 23f0592:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 23f0594:	f109 0901 	add.w	r9, r9, #1
 23f0598:	e7e1      	b.n	23f055e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 23f059a:	9b01      	ldr	r3, [sp, #4]
 23f059c:	445e      	add	r6, fp
 23f059e:	3301      	adds	r3, #1
 23f05a0:	9301      	str	r3, [sp, #4]
 23f05a2:	e7ce      	b.n	23f0542 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 23f05a4:	4620      	mov	r0, r4
 23f05a6:	6823      	ldr	r3, [r4, #0]
 23f05a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f05aa:	b009      	add	sp, #36	; 0x24
 23f05ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23f05b0:	4718      	bx	r3
	...

023f05b4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23f05b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f05b8:	ed2d 8b02 	vpush	{d8}
 23f05bc:	b091      	sub	sp, #68	; 0x44
 23f05be:	4616      	mov	r6, r2
 23f05c0:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23f05c2:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23f05c4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23f05c8:	4683      	mov	fp, r0
 23f05ca:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23f05ce:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23f05d2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23f05d6:	9103      	str	r1, [sp, #12]
 23f05d8:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23f05da:	2a00      	cmp	r2, #0
 23f05dc:	f040 80c5 	bne.w	23f076a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23f05e0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f05e4:	428b      	cmp	r3, r1
 23f05e6:	f340 814c 	ble.w	23f0882 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23f05ea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23f05ee:	42b3      	cmp	r3, r6
 23f05f0:	f340 8147 	ble.w	23f0882 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23f05f4:	2306      	movs	r3, #6
 23f05f6:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23f05fa:	2b00      	cmp	r3, #0
 23f05fc:	f340 8141 	ble.w	23f0882 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23f0600:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23f0604:	2b00      	cmp	r3, #0
 23f0606:	f340 813c 	ble.w	23f0882 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23f060a:	7f03      	ldrb	r3, [r0, #28]
 23f060c:	b91b      	cbnz	r3, 23f0616 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23f060e:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23f0610:	bf84      	itt	hi
 23f0612:	3701      	addhi	r7, #1
 23f0614:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23f0616:	f8db 3000 	ldr.w	r3, [fp]
 23f061a:	4658      	mov	r0, fp
 23f061c:	695b      	ldr	r3, [r3, #20]
 23f061e:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f0620:	2205      	movs	r2, #5
 23f0622:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23f0624:	2200      	movs	r2, #0
 23f0626:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f0628:	4a98      	ldr	r2, [pc, #608]	; (23f088c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23f062a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23f062e:	18d3      	adds	r3, r2, r3
 23f0630:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23f0632:	b2b3      	uxth	r3, r6
 23f0634:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f0636:	9a05      	ldr	r2, [sp, #20]
 23f0638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f063a:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f063e:	5c9b      	ldrb	r3, [r3, r2]
 23f0640:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f0642:	b2ab      	uxth	r3, r5
 23f0644:	930b      	str	r3, [sp, #44]	; 0x2c
 23f0646:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f064a:	9308      	str	r3, [sp, #32]
 23f064c:	9b03      	ldr	r3, [sp, #12]
 23f064e:	fa19 f983 	uxtah	r9, r9, r3
 23f0652:	fa0f f389 	sxth.w	r3, r9
 23f0656:	ee08 3a10 	vmov	s16, r3
 23f065a:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23f065c:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f0660:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23f0662:	9b03      	ldr	r3, [sp, #12]
 23f0664:	eb02 0a03 	add.w	sl, r2, r3
 23f0668:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23f066c:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23f066e:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23f0672:	07d2      	lsls	r2, r2, #31
 23f0674:	d552      	bpl.n	23f071c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23f0676:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23f0678:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23f067c:	d13e      	bne.n	23f06fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23f067e:	2c01      	cmp	r4, #1
 23f0680:	d13c      	bne.n	23f06fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23f0682:	699b      	ldr	r3, [r3, #24]
 23f0684:	9906      	ldr	r1, [sp, #24]
 23f0686:	461f      	mov	r7, r3
 23f0688:	9b04      	ldr	r3, [sp, #16]
 23f068a:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23f068c:	4651      	mov	r1, sl
 23f068e:	4658      	mov	r0, fp
 23f0690:	b212      	sxth	r2, r2
 23f0692:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23f0694:	f109 0301 	add.w	r3, r9, #1
 23f0698:	fa4f f983 	sxtb.w	r9, r3
 23f069c:	9b07      	ldr	r3, [sp, #28]
 23f069e:	085b      	lsrs	r3, r3, #1
 23f06a0:	9307      	str	r3, [sp, #28]
 23f06a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f06a4:	3b01      	subs	r3, #1
 23f06a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23f06aa:	930a      	str	r3, [sp, #40]	; 0x28
 23f06ac:	d1de      	bne.n	23f066c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23f06ae:	9f05      	ldr	r7, [sp, #20]
 23f06b0:	3701      	adds	r7, #1
 23f06b2:	b27b      	sxtb	r3, r7
 23f06b4:	9305      	str	r3, [sp, #20]
 23f06b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f06b8:	3b01      	subs	r3, #1
 23f06ba:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23f06be:	9309      	str	r3, [sp, #36]	; 0x24
 23f06c0:	d1b9      	bne.n	23f0636 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23f06c2:	9b04      	ldr	r3, [sp, #16]
 23f06c4:	4543      	cmp	r3, r8
 23f06c6:	d00f      	beq.n	23f06e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23f06c8:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23f06ca:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23f06ce:	d13b      	bne.n	23f0748 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23f06d0:	2c01      	cmp	r4, #1
 23f06d2:	d139      	bne.n	23f0748 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23f06d4:	9908      	ldr	r1, [sp, #32]
 23f06d6:	f8cd 8000 	str.w	r8, [sp]
 23f06da:	3105      	adds	r1, #5
 23f06dc:	6a1c      	ldr	r4, [r3, #32]
 23f06de:	4632      	mov	r2, r6
 23f06e0:	2308      	movs	r3, #8
 23f06e2:	4658      	mov	r0, fp
 23f06e4:	b209      	sxth	r1, r1
 23f06e6:	47a0      	blx	r4
    endWrite();
 23f06e8:	4658      	mov	r0, fp
 23f06ea:	f8db 3000 	ldr.w	r3, [fp]
 23f06ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f06f0:	b011      	add	sp, #68	; 0x44
 23f06f2:	ecbd 8b02 	vpop	{d8}
 23f06f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23f06fa:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23f06fc:	fb14 f202 	smulbb	r2, r4, r2
 23f0700:	9906      	ldr	r1, [sp, #24]
 23f0702:	440a      	add	r2, r1
 23f0704:	9904      	ldr	r1, [sp, #16]
 23f0706:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f0708:	9400      	str	r4, [sp, #0]
 23f070a:	69db      	ldr	r3, [r3, #28]
 23f070c:	ee18 1a10 	vmov	r1, s16
 23f0710:	461f      	mov	r7, r3
 23f0712:	4658      	mov	r0, fp
 23f0714:	462b      	mov	r3, r5
 23f0716:	b212      	sxth	r2, r2
 23f0718:	47b8      	blx	r7
 23f071a:	e7bb      	b.n	23f0694 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23f071c:	9a04      	ldr	r2, [sp, #16]
 23f071e:	4542      	cmp	r2, r8
 23f0720:	d0b8      	beq.n	23f0694 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23f0722:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23f0724:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23f0728:	d107      	bne.n	23f073a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23f072a:	2c01      	cmp	r4, #1
 23f072c:	d105      	bne.n	23f073a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23f072e:	699b      	ldr	r3, [r3, #24]
 23f0730:	9906      	ldr	r1, [sp, #24]
 23f0732:	461f      	mov	r7, r3
 23f0734:	440a      	add	r2, r1
 23f0736:	4643      	mov	r3, r8
 23f0738:	e7a8      	b.n	23f068c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f073a:	fb14 f202 	smulbb	r2, r4, r2
 23f073e:	9906      	ldr	r1, [sp, #24]
 23f0740:	f8cd 8004 	str.w	r8, [sp, #4]
 23f0744:	440a      	add	r2, r1
 23f0746:	e7df      	b.n	23f0708 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23f0748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f074a:	00e4      	lsls	r4, r4, #3
 23f074c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23f0750:	9a08      	ldr	r2, [sp, #32]
 23f0752:	f8cd 8004 	str.w	r8, [sp, #4]
 23f0756:	440a      	add	r2, r1
 23f0758:	4611      	mov	r1, r2
 23f075a:	9400      	str	r4, [sp, #0]
 23f075c:	69dc      	ldr	r4, [r3, #28]
 23f075e:	4632      	mov	r2, r6
 23f0760:	462b      	mov	r3, r5
 23f0762:	4658      	mov	r0, fp
 23f0764:	b209      	sxth	r1, r1
 23f0766:	47a0      	blx	r4
    endWrite();
 23f0768:	e7be      	b.n	23f06e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f076a:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23f076c:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f076e:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23f0770:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23f0772:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23f0774:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f0776:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23f077a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f077e:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f0780:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23f0782:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f0784:	9209      	str	r2, [sp, #36]	; 0x24
 23f0786:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23f0788:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f078c:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23f078e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23f0792:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23f0794:	d801      	bhi.n	23f079a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23f0796:	2c01      	cmp	r4, #1
 23f0798:	d957      	bls.n	23f084a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23f079a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23f079e:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23f07a0:	fa0f f38a 	sxth.w	r3, sl
 23f07a4:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23f07a6:	f04f 0800 	mov.w	r8, #0
 23f07aa:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23f07ac:	4647      	mov	r7, r8
    startWrite();
 23f07ae:	f8db 3000 	ldr.w	r3, [fp]
 23f07b2:	4658      	mov	r0, fp
 23f07b4:	695b      	ldr	r3, [r3, #20]
 23f07b6:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f07b8:	b2b3      	uxth	r3, r6
 23f07ba:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23f07bc:	fa1a f386 	uxtah	r3, sl, r6
 23f07c0:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23f07c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f07c4:	429f      	cmp	r7, r3
 23f07c6:	d28f      	bcs.n	23f06e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f07c8:	9b07      	ldr	r3, [sp, #28]
 23f07ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f07cc:	443b      	add	r3, r7
 23f07ce:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23f07d2:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f07d4:	b21b      	sxth	r3, r3
 23f07d6:	ee08 3a10 	vmov	s16, r3
 23f07da:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23f07dc:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23f07de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23f07e0:	eb02 0a07 	add.w	sl, r2, r7
 23f07e4:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23f07e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f07ea:	9905      	ldr	r1, [sp, #20]
 23f07ec:	4291      	cmp	r1, r2
 23f07ee:	d241      	bcs.n	23f0874 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23f07f0:	1c5a      	adds	r2, r3, #1
 23f07f2:	b2d2      	uxtb	r2, r2
 23f07f4:	075b      	lsls	r3, r3, #29
 23f07f6:	920d      	str	r2, [sp, #52]	; 0x34
 23f07f8:	d107      	bne.n	23f080a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23f07fa:	9b06      	ldr	r3, [sp, #24]
 23f07fc:	9906      	ldr	r1, [sp, #24]
 23f07fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f0800:	3301      	adds	r3, #1
 23f0802:	b29b      	uxth	r3, r3
 23f0804:	f812 9001 	ldrb.w	r9, [r2, r1]
 23f0808:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23f080a:	f019 0f80 	tst.w	r9, #128	; 0x80
 23f080e:	d012      	beq.n	23f0836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23f0810:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23f0812:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f0816:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23f081a:	d11a      	bne.n	23f0852 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23f081c:	2c01      	cmp	r4, #1
 23f081e:	d118      	bne.n	23f0852 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23f0820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f0822:	699b      	ldr	r3, [r3, #24]
 23f0824:	4411      	add	r1, r2
 23f0826:	9a05      	ldr	r2, [sp, #20]
 23f0828:	461e      	mov	r6, r3
 23f082a:	4411      	add	r1, r2
 23f082c:	4658      	mov	r0, fp
 23f082e:	4652      	mov	r2, sl
 23f0830:	9b04      	ldr	r3, [sp, #16]
 23f0832:	b209      	sxth	r1, r1
 23f0834:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23f0836:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23f0838:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23f083c:	3601      	adds	r6, #1
 23f083e:	b2f3      	uxtb	r3, r6
 23f0840:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23f0842:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23f0846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23f0848:	e7ce      	b.n	23f07e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23f084a:	2300      	movs	r3, #0
 23f084c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23f0850:	e7a9      	b.n	23f07a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f0852:	9805      	ldr	r0, [sp, #20]
 23f0854:	9a08      	ldr	r2, [sp, #32]
 23f0856:	4402      	add	r2, r0
 23f0858:	fb02 1105 	mla	r1, r2, r5, r1
 23f085c:	9a04      	ldr	r2, [sp, #16]
 23f085e:	4658      	mov	r0, fp
 23f0860:	e9cd 4200 	strd	r4, r2, [sp]
 23f0864:	69db      	ldr	r3, [r3, #28]
 23f0866:	ee18 2a10 	vmov	r2, s16
 23f086a:	461e      	mov	r6, r3
 23f086c:	b209      	sxth	r1, r1
 23f086e:	462b      	mov	r3, r5
 23f0870:	47b0      	blx	r6
 23f0872:	e7e0      	b.n	23f0836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23f0874:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23f0876:	3701      	adds	r7, #1
 23f0878:	4498      	add	r8, r3
 23f087a:	fa5f f888 	uxtb.w	r8, r8
 23f087e:	b2ff      	uxtb	r7, r7
 23f0880:	e79f      	b.n	23f07c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23f0882:	b011      	add	sp, #68	; 0x44
 23f0884:	ecbd 8b02 	vpop	{d8}
 23f0888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f088c:	023fea10 	.word	0x023fea10

023f0890 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23f0890:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23f0892:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23f0894:	4604      	mov	r4, r0
 23f0896:	460b      	mov	r3, r1
 23f0898:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23f089a:	2a00      	cmp	r2, #0
 23f089c:	d134      	bne.n	23f0908 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23f089e:	290a      	cmp	r1, #10
 23f08a0:	d108      	bne.n	23f08b4 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23f08a2:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23f08a4:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f08a6:	7e42      	ldrb	r2, [r0, #25]
 23f08a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23f08ac:	8263      	strh	r3, [r4, #18]
}
 23f08ae:	2001      	movs	r0, #1
 23f08b0:	b005      	add	sp, #20
 23f08b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23f08b4:	290d      	cmp	r1, #13
 23f08b6:	d0fa      	beq.n	23f08ae <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f08b8:	7ee1      	ldrb	r1, [r4, #27]
 23f08ba:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f08bc:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f08be:	b171      	cbz	r1, 23f08de <_ZN12Adafruit_GFX5writeEh+0x4e>
 23f08c0:	2106      	movs	r1, #6
 23f08c2:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23f08c6:	fb11 6100 	smlabb	r1, r1, r0, r6
 23f08ca:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23f08ce:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23f08d0:	bfc1      	itttt	gt
 23f08d2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23f08d6:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23f08d8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23f08dc:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f08de:	8ae2      	ldrh	r2, [r4, #22]
 23f08e0:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23f08e4:	9201      	str	r2, [sp, #4]
 23f08e6:	8aa2      	ldrh	r2, [r4, #20]
 23f08e8:	4620      	mov	r0, r4
 23f08ea:	9200      	str	r2, [sp, #0]
 23f08ec:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f08f0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f08f4:	f7ff fe5e 	bl	23f05b4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23f08f8:	7e23      	ldrb	r3, [r4, #24]
 23f08fa:	8a22      	ldrh	r2, [r4, #16]
 23f08fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f0900:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23f0904:	8223      	strh	r3, [r4, #16]
 23f0906:	e7d2      	b.n	23f08ae <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23f0908:	290a      	cmp	r1, #10
 23f090a:	d107      	bne.n	23f091c <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23f090c:	2300      	movs	r3, #0
 23f090e:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f0910:	7e41      	ldrb	r1, [r0, #25]
 23f0912:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23f0914:	8a43      	ldrh	r3, [r0, #18]
 23f0916:	fb01 3302 	mla	r3, r1, r2, r3
 23f091a:	e7c7      	b.n	23f08ac <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23f091c:	290d      	cmp	r1, #13
 23f091e:	d0c6      	beq.n	23f08ae <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23f0920:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23f0922:	42a9      	cmp	r1, r5
 23f0924:	d3c3      	bcc.n	23f08ae <_ZN12Adafruit_GFX5writeEh+0x1e>
 23f0926:	7a91      	ldrb	r1, [r2, #10]
 23f0928:	4299      	cmp	r1, r3
 23f092a:	d3c0      	bcc.n	23f08ae <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23f092c:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23f092e:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23f0930:	b2ed      	uxtb	r5, r5
 23f0932:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23f0936:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23f0938:	b328      	cbz	r0, 23f0986 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23f093a:	78e9      	ldrb	r1, [r5, #3]
 23f093c:	b319      	cbz	r1, 23f0986 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f093e:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f0940:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f0942:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f0944:	b191      	cbz	r1, 23f096c <_ZN12Adafruit_GFX5writeEh+0xdc>
 23f0946:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23f094a:	4408      	add	r0, r1
 23f094c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f0950:	fb06 1100 	mla	r1, r6, r0, r1
 23f0954:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23f0958:	4281      	cmp	r1, r0
 23f095a:	dd07      	ble.n	23f096c <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23f095c:	2000      	movs	r0, #0
 23f095e:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f0960:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f0964:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23f0966:	fb02 1207 	mla	r2, r2, r7, r1
 23f096a:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f096c:	8ae2      	ldrh	r2, [r4, #22]
 23f096e:	4620      	mov	r0, r4
 23f0970:	9201      	str	r2, [sp, #4]
 23f0972:	8aa2      	ldrh	r2, [r4, #20]
 23f0974:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23f0978:	9200      	str	r2, [sp, #0]
 23f097a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f097e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f0982:	f7ff fe17 	bl	23f05b4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23f0986:	7929      	ldrb	r1, [r5, #4]
 23f0988:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23f098a:	8a23      	ldrh	r3, [r4, #16]
 23f098c:	fb01 3302 	mla	r3, r1, r2, r3
 23f0990:	e7b8      	b.n	23f0904 <_ZN12Adafruit_GFX5writeEh+0x74>

023f0992 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 23f0992:	2901      	cmp	r1, #1
 23f0994:	bf38      	it	cc
 23f0996:	2101      	movcc	r1, #1
 23f0998:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 23f099a:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 23f099c:	4770      	bx	lr

023f099e <_ZN16Adafruit_HDC302xC1Ev>:
#include "Adafruit_HDC302x.h"

/**
 * Constructor for the HDC302x sensor driver.
 */
Adafruit_HDC302x::Adafruit_HDC302x() { currentAutoMode = EXIT_AUTO_MODE; }
 23f099e:	2200      	movs	r2, #0
 23f09a0:	6002      	str	r2, [r0, #0]
 23f09a2:	f243 0293 	movw	r2, #12435	; 0x3093
 23f09a6:	8082      	strh	r2, [r0, #4]
 23f09a8:	4770      	bx	lr

023f09aa <_ZN16Adafruit_HDC302x12writeCommandEt>:
 * Writes a command to the HDC302x sensor.
 *
 * @param command The command to write.
 * @return true if the command was written successfully, otherwise false.
 */
bool Adafruit_HDC302x::writeCommand(uint16_t command) {
 23f09aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = (uint8_t)(command >> 8);   // High byte
 23f09ac:	0a0b      	lsrs	r3, r1, #8
 23f09ae:	f88d 300c 	strb.w	r3, [sp, #12]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte

  return i2c_dev->write(buffer, 2);
 23f09b2:	2300      	movs	r3, #0
 23f09b4:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte
 23f09b8:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(buffer, 2);
 23f09bc:	2301      	movs	r3, #1
 23f09be:	2202      	movs	r2, #2
 23f09c0:	a903      	add	r1, sp, #12
 23f09c2:	6800      	ldr	r0, [r0, #0]
 23f09c4:	f7ff fa80 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f09c8:	b005      	add	sp, #20
 23f09ca:	f85d fb04 	ldr.w	pc, [sp], #4

023f09ce <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>:
  currentAutoMode = mode;
 23f09ce:	8081      	strh	r1, [r0, #4]
  writeCommand(mode);
 23f09d0:	f7ff bfeb 	b.w	23f09aa <_ZN16Adafruit_HDC302x12writeCommandEt>

023f09d4 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>:
  return writeCommand(HDC302x_Commands::CLEAR_STATUS_REGISTER);
 23f09d4:	f243 0141 	movw	r1, #12353	; 0x3041
 23f09d8:	f7ff bfe7 	b.w	23f09aa <_ZN16Adafruit_HDC302x12writeCommandEt>

023f09dc <_ZN16Adafruit_HDC302x5resetEv>:
  return writeCommand(HDC302x_Commands::SOFT_RESET);
 23f09dc:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f09e0:	f7ff bfe3 	b.w	23f09aa <_ZN16Adafruit_HDC302x12writeCommandEt>

023f09e4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>:
 * @param len Length of the data array.
 * @return uint8_t The calculated CRC-8 value.
 */
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
  uint8_t crc = 0xFF; // Typical initial value
  for (int i = 0; i < len; i++) {
 23f09e4:	2300      	movs	r3, #0
  uint8_t crc = 0xFF; // Typical initial value
 23f09e6:	20ff      	movs	r0, #255	; 0xff
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
 23f09e8:	b510      	push	{r4, lr}
  for (int i = 0; i < len; i++) {
 23f09ea:	4293      	cmp	r3, r2
 23f09ec:	da0e      	bge.n	23f0a0c <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x28>
    crc ^= data[i];               // XOR byte into least sig. byte of crc
 23f09ee:	5ccc      	ldrb	r4, [r1, r3]
 23f09f0:	4060      	eors	r0, r4
 23f09f2:	2408      	movs	r4, #8
    for (int j = 8; j > 0; j--) { // Loop over each bit
      if (crc & 0x80) {           // If the uppermost bit is 1...
 23f09f4:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f09f8:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ 0x31;  // Polynomial used by HDC302x
 23f09fc:	bf18      	it	ne
 23f09fe:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f0a02:	3c01      	subs	r4, #1
      } else {
        crc = (crc << 1);
 23f0a04:	b2c0      	uxtb	r0, r0
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f0a06:	d1f5      	bne.n	23f09f4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x10>
  for (int i = 0; i < len; i++) {
 23f0a08:	3301      	adds	r3, #1
 23f0a0a:	e7ee      	b.n	23f09ea <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x6>
      }
    }
  }
  return crc; // Final XOR value can also be applied if specified by device
}
 23f0a0c:	bd10      	pop	{r4, pc}
	...

023f0a10 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>:
                                          double &RH) {
 23f0a10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f0a14:	4605      	mov	r5, r0
 23f0a16:	4617      	mov	r7, r2
 23f0a18:	461e      	mov	r6, r3
  if (!writeCommand(command)) {
 23f0a1a:	f7ff ffc6 	bl	23f09aa <_ZN16Adafruit_HDC302x12writeCommandEt>
 23f0a1e:	4604      	mov	r4, r0
 23f0a20:	2800      	cmp	r0, #0
 23f0a22:	d04a      	beq.n	23f0aba <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f0a24:	f04f 080a 	mov.w	r8, #10
  while (!i2c_dev->read(buffer, 6)) {
 23f0a28:	2301      	movs	r3, #1
 23f0a2a:	2206      	movs	r2, #6
 23f0a2c:	4669      	mov	r1, sp
 23f0a2e:	6828      	ldr	r0, [r5, #0]
 23f0a30:	f7ff fa7a 	bl	23eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f0a34:	4604      	mov	r4, r0
 23f0a36:	b930      	cbnz	r0, 23f0a46 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x36>
    if (++retries >= MAX_RETRIES) {
 23f0a38:	f1b8 0801 	subs.w	r8, r8, #1
 23f0a3c:	d03d      	beq.n	23f0aba <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
    delay(1); // Wait and retry if NAK received
 23f0a3e:	2001      	movs	r0, #1
 23f0a40:	f007 f920 	bl	23f7c84 <delay>
  while (!i2c_dev->read(buffer, 6)) {
 23f0a44:	e7f0      	b.n	23f0a28 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x18>
  if (calculateCRC8(buffer, 2) != buffer[2]) {
 23f0a46:	2202      	movs	r2, #2
 23f0a48:	4669      	mov	r1, sp
 23f0a4a:	4628      	mov	r0, r5
 23f0a4c:	f7ff ffca 	bl	23f09e4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f0a50:	f89d 3002 	ldrb.w	r3, [sp, #2]
 23f0a54:	4283      	cmp	r3, r0
 23f0a56:	d134      	bne.n	23f0ac2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  if (calculateCRC8(buffer + 3, 2) != buffer[5]) {
 23f0a58:	4628      	mov	r0, r5
 23f0a5a:	f10d 0103 	add.w	r1, sp, #3
 23f0a5e:	f7ff ffc1 	bl	23f09e4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f0a62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23f0a66:	4283      	cmp	r3, r0
 23f0a68:	d12b      	bne.n	23f0ac2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  temp = ((rawTemperature / 65535.0) * 175.0) - 45.0;
 23f0a6a:	f8bd 0000 	ldrh.w	r0, [sp]
 23f0a6e:	f8bd 5003 	ldrh.w	r5, [sp, #3]
 23f0a72:	ba40      	rev16	r0, r0
 23f0a74:	b280      	uxth	r0, r0
 23f0a76:	f7f3 fcf9 	bl	23e446c <__aeabi_i2d>
 23f0a7a:	a313      	add	r3, pc, #76	; (adr r3, 23f0ac8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f0a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0a80:	f7f3 fe88 	bl	23e4794 <__aeabi_ddiv>
 23f0a84:	a314      	add	r3, pc, #80	; (adr r3, 23f0ad8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc8>)
 23f0a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0a8a:	f7f3 fd59 	bl	23e4540 <__aeabi_dmul>
 23f0a8e:	2200      	movs	r2, #0
 23f0a90:	4b0f      	ldr	r3, [pc, #60]	; (23f0ad0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc0>)
 23f0a92:	f7f3 fb9d 	bl	23e41d0 <__aeabi_dsub>
 23f0a96:	ba6d      	rev16	r5, r5
 23f0a98:	b2ad      	uxth	r5, r5
 23f0a9a:	e9c7 0100 	strd	r0, r1, [r7]
  RH = (rawHumidity / 65535.0) * 100.0;
 23f0a9e:	4628      	mov	r0, r5
 23f0aa0:	f7f3 fce4 	bl	23e446c <__aeabi_i2d>
 23f0aa4:	a308      	add	r3, pc, #32	; (adr r3, 23f0ac8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f0aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0aaa:	f7f3 fe73 	bl	23e4794 <__aeabi_ddiv>
 23f0aae:	2200      	movs	r2, #0
 23f0ab0:	4b08      	ldr	r3, [pc, #32]	; (23f0ad4 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc4>)
 23f0ab2:	f7f3 fd45 	bl	23e4540 <__aeabi_dmul>
 23f0ab6:	e9c6 0100 	strd	r0, r1, [r6]
}
 23f0aba:	4620      	mov	r0, r4
 23f0abc:	b002      	add	sp, #8
 23f0abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false; // CRC check failed
 23f0ac2:	2400      	movs	r4, #0
 23f0ac4:	e7f9      	b.n	23f0aba <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f0ac6:	bf00      	nop
 23f0ac8:	00000000 	.word	0x00000000
 23f0acc:	40efffe0 	.word	0x40efffe0
 23f0ad0:	40468000 	.word	0x40468000
 23f0ad4:	40590000 	.word	0x40590000
 23f0ad8:	00000000 	.word	0x00000000
 23f0adc:	4065e000 	.word	0x4065e000

023f0ae0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>:
    double &temp, double &RH, hdcTriggerMode_t mode = TRIGGERMODE_LP0) {
 23f0ae0:	b410      	push	{r4}
 23f0ae2:	460c      	mov	r4, r1
 23f0ae4:	4619      	mov	r1, r3
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f0ae6:	4613      	mov	r3, r2
 23f0ae8:	4622      	mov	r2, r4
}
 23f0aea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f0aee:	f7ff bf8f 	b.w	23f0a10 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>

023f0af2 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>:
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f0af2:	b5f0      	push	{r4, r5, r6, r7, lr}
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f0af4:	0a0b      	lsrs	r3, r1, #8
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f0af6:	b085      	sub	sp, #20
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f0af8:	f88d 3008 	strb.w	r3, [sp, #8]
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f0afc:	2700      	movs	r7, #0
 23f0afe:	2303      	movs	r3, #3
 23f0b00:	e9cd 3700 	strd	r3, r7, [sp]
  cmd_buffer[1] = (uint8_t)(command & 0xFF); // Low byte of the command
 23f0b04:	f88d 1009 	strb.w	r1, [sp, #9]
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f0b08:	4605      	mov	r5, r0
 23f0b0a:	4616      	mov	r6, r2
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f0b0c:	6800      	ldr	r0, [r0, #0]
 23f0b0e:	2202      	movs	r2, #2
 23f0b10:	ab03      	add	r3, sp, #12
 23f0b12:	a902      	add	r1, sp, #8
 23f0b14:	f7ff fa2a 	bl	23eff6c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23f0b18:	4604      	mov	r4, r0
 23f0b1a:	b160      	cbz	r0, 23f0b36 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>
  uint8_t calculated_crc = calculateCRC8(data_buffer, 2);
 23f0b1c:	2202      	movs	r2, #2
 23f0b1e:	4628      	mov	r0, r5
 23f0b20:	a903      	add	r1, sp, #12
 23f0b22:	f7ff ff5f 	bl	23f09e4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
  if (calculated_crc != data_buffer[2]) {
 23f0b26:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f0b2a:	4283      	cmp	r3, r0
 23f0b2c:	d106      	bne.n	23f0b3c <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x4a>
  data = (uint16_t)(data_buffer[0] << 8 | data_buffer[1]);
 23f0b2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f0b32:	ba5b      	rev16	r3, r3
 23f0b34:	8033      	strh	r3, [r6, #0]
}
 23f0b36:	4620      	mov	r0, r4
 23f0b38:	b005      	add	sp, #20
 23f0b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false; // Communication failed
 23f0b3c:	463c      	mov	r4, r7
 23f0b3e:	e7fa      	b.n	23f0b36 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>

023f0b40 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>:
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f0b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f0b42:	4604      	mov	r4, r0
  delay(5); // wait for device to be ready
 23f0b44:	2005      	movs	r0, #5
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f0b46:	460e      	mov	r6, r1
 23f0b48:	4617      	mov	r7, r2
  delay(5); // wait for device to be ready
 23f0b4a:	f007 f89b 	bl	23f7c84 <delay>
  if (i2c_dev) {
 23f0b4e:	6820      	ldr	r0, [r4, #0]
 23f0b50:	b110      	cbz	r0, 23f0b58 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x18>
    delete i2c_dev;
 23f0b52:	2110      	movs	r1, #16
 23f0b54:	f7f4 fb5d 	bl	23e5212 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f0b58:	2010      	movs	r0, #16
 23f0b5a:	f7f4 fb56 	bl	23e520a <_Znwj>
 23f0b5e:	4605      	mov	r5, r0
 23f0b60:	b118      	cbz	r0, 23f0b6a <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x2a>
 23f0b62:	463a      	mov	r2, r7
 23f0b64:	4631      	mov	r1, r6
 23f0b66:	f7ff f984 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0b6a:	2101      	movs	r1, #1
 23f0b6c:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f0b6e:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f0b70:	f7ff f99b 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23f0b74:	b918      	cbnz	r0, 23f0b7e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x3e>
    return false;
 23f0b76:	2500      	movs	r5, #0
}
 23f0b78:	4628      	mov	r0, r5
 23f0b7a:	b003      	add	sp, #12
 23f0b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
 23f0b7e:	4620      	mov	r0, r4
 23f0b80:	f7ff ff2c 	bl	23f09dc <_ZN16Adafruit_HDC302x5resetEv>
 23f0b84:	2800      	cmp	r0, #0
 23f0b86:	d0f6      	beq.n	23f0b76 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  clearStatusRegister();
 23f0b88:	4620      	mov	r0, r4
 23f0b8a:	f7ff ff23 	bl	23f09d4 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>
  if (!writeCommandReadData(HDC302x_Commands::READ_MANUFACTURER_ID,
 23f0b8e:	f243 7181 	movw	r1, #14209	; 0x3781
 23f0b92:	4620      	mov	r0, r4
 23f0b94:	f10d 0206 	add.w	r2, sp, #6
 23f0b98:	f7ff ffab 	bl	23f0af2 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>
                            manufacturerID) ||
 23f0b9c:	4605      	mov	r5, r0
 23f0b9e:	2800      	cmp	r0, #0
 23f0ba0:	d0e9      	beq.n	23f0b76 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
 23f0ba2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f0ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 23f0baa:	d1e4      	bne.n	23f0b76 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  setAutoMode(EXIT_AUTO_MODE);
 23f0bac:	f243 0193 	movw	r1, #12435	; 0x3093
 23f0bb0:	4620      	mov	r0, r4
 23f0bb2:	f7ff ff0c 	bl	23f09ce <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>
  return true;
 23f0bb6:	e7df      	b.n	23f0b78 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x38>

023f0bb8 <_ZN16Adafruit_HTU21DFC1Ev>:
#include "Adafruit_HTU21DF.h"

/**
 * Constructor for the HTU21DF driver.
 */
Adafruit_HTU21DF::Adafruit_HTU21DF() {
 23f0bb8:	2200      	movs	r2, #0
 23f0bba:	6002      	str	r2, [r0, #0]
  /* Assign default values to internal tracking variables. */
  _last_humidity = 0.0f;
 23f0bbc:	2200      	movs	r2, #0
 23f0bbe:	6042      	str	r2, [r0, #4]
  _last_temp = 0.0f;
 23f0bc0:	6082      	str	r2, [r0, #8]
}
 23f0bc2:	4770      	bx	lr

023f0bc4 <_ZN16Adafruit_HTU21DF5resetEv>:
}

/**
 * Sends a 'reset' request to the HTU21DF, followed by a 15ms delay.
 */
void Adafruit_HTU21DF::reset(void) {
 23f0bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd = HTU21DF_RESET;
 23f0bc6:	23fe      	movs	r3, #254	; 0xfe
 23f0bc8:	f88d 300f 	strb.w	r3, [sp, #15]
  i2c_dev->write(&cmd, 1);
 23f0bcc:	2300      	movs	r3, #0
 23f0bce:	e9cd 3300 	strd	r3, r3, [sp]
 23f0bd2:	2301      	movs	r3, #1
 23f0bd4:	f10d 010f 	add.w	r1, sp, #15
 23f0bd8:	461a      	mov	r2, r3
 23f0bda:	6800      	ldr	r0, [r0, #0]
 23f0bdc:	f7ff f974 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  delay(15);
 23f0be0:	200f      	movs	r0, #15
 23f0be2:	f007 f84f 	bl	23f7c84 <delay>
}
 23f0be6:	b005      	add	sp, #20
 23f0be8:	f85d fb04 	ldr.w	pc, [sp], #4

023f0bec <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>:
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f0bec:	b570      	push	{r4, r5, r6, lr}
 23f0bee:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f0bf0:	6800      	ldr	r0, [r0, #0]
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f0bf2:	460e      	mov	r6, r1
 23f0bf4:	b088      	sub	sp, #32
  if (i2c_dev) {
 23f0bf6:	b110      	cbz	r0, 23f0bfe <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x12>
    delete i2c_dev;
 23f0bf8:	2110      	movs	r1, #16
 23f0bfa:	f7f4 fb0a 	bl	23e5212 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f0bfe:	2010      	movs	r0, #16
 23f0c00:	f7f4 fb03 	bl	23e520a <_Znwj>
 23f0c04:	4605      	mov	r5, r0
 23f0c06:	b118      	cbz	r0, 23f0c10 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x24>
 23f0c08:	4632      	mov	r2, r6
 23f0c0a:	2140      	movs	r1, #64	; 0x40
 23f0c0c:	f7ff f931 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0c10:	2101      	movs	r1, #1
 23f0c12:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f0c14:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f0c16:	f7ff f948 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23f0c1a:	b188      	cbz	r0, 23f0c40 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x54>
  reset();
 23f0c1c:	4620      	mov	r0, r4
 23f0c1e:	f7ff ffd1 	bl	23f0bc4 <_ZN16Adafruit_HTU21DF5resetEv>
      Adafruit_BusIO_Register(i2c_dev, HTU21DF_READREG);
 23f0c22:	2301      	movs	r3, #1
 23f0c24:	2200      	movs	r2, #0
 23f0c26:	6821      	ldr	r1, [r4, #0]
 23f0c28:	e9cd 2300 	strd	r2, r3, [sp]
 23f0c2c:	a802      	add	r0, sp, #8
 23f0c2e:	22e7      	movs	r2, #231	; 0xe7
 23f0c30:	f7ff f80a 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (reg.read() == 0x2); // after reset should be 0x2
 23f0c34:	a802      	add	r0, sp, #8
 23f0c36:	f7ff f8d5 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>
 23f0c3a:	1e83      	subs	r3, r0, #2
 23f0c3c:	4258      	negs	r0, r3
 23f0c3e:	4158      	adcs	r0, r3
}
 23f0c40:	b008      	add	sp, #32
 23f0c42:	bd70      	pop	{r4, r5, r6, pc}

023f0c44 <_ZN16Adafruit_HTU21DF15readTemperatureEv>:
 * Performs a single temperature conversion in degrees Celsius.
 *
 * @return a single-precision (32-bit) float value indicating the measured
 *         temperature in degrees Celsius or NAN on failure.
 */
float Adafruit_HTU21DF::readTemperature(void) {
 23f0c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // OK lets ready!
  uint8_t cmd = HTU21DF_READTEMP;
 23f0c46:	23e3      	movs	r3, #227	; 0xe3
 23f0c48:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f0c4c:	2300      	movs	r3, #0
 23f0c4e:	e9cd 3300 	strd	r3, r3, [sp]
 23f0c52:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readTemperature(void) {
 23f0c54:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f0c56:	461a      	mov	r2, r3
 23f0c58:	6800      	ldr	r0, [r0, #0]
 23f0c5a:	f10d 010b 	add.w	r1, sp, #11
 23f0c5e:	f7ff f933 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f0c62:	b318      	cbz	r0, 23f0cac <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
    return NAN;
  }

  delay(50); // add delay between request and actual read!
 23f0c64:	2032      	movs	r0, #50	; 0x32
 23f0c66:	f007 f80d 	bl	23f7c84 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f0c6a:	2301      	movs	r3, #1
 23f0c6c:	2203      	movs	r2, #3
 23f0c6e:	6820      	ldr	r0, [r4, #0]
 23f0c70:	a903      	add	r1, sp, #12
 23f0c72:	f7ff f959 	bl	23eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f0c76:	b1c8      	cbz	r0, 23f0cac <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t t = buf[0];
  t <<= 8;
  t |= buf[1] & 0b11111100;
 23f0c78:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t t = buf[0];
 23f0c7c:	f89d 200c 	ldrb.w	r2, [sp, #12]
  t |= buf[1] & 0b11111100;
 23f0c80:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float temp = t;
 23f0c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f0c88:	ee07 3a90 	vmov	s15, r3
  temp *= 175.72f;
 23f0c8c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f0cb4 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x70>
  float temp = t;
 23f0c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
  temp /= 65536.0f;
  temp -= 46.85f;
 23f0c94:	ed9f 0a08 	vldr	s0, [pc, #32]	; 23f0cb8 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x74>
  temp *= 175.72f;
 23f0c98:	ee67 7a87 	vmul.f32	s15, s15, s14
  temp -= 46.85f;
 23f0c9c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f0cbc <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x78>
 23f0ca0:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_temp = temp;
 23f0ca4:	ed84 0a02 	vstr	s0, [r4, #8]

  return temp;
}
 23f0ca8:	b004      	add	sp, #16
 23f0caa:	bd10      	pop	{r4, pc}
    return NAN;
 23f0cac:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23f0cc0 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x7c>
 23f0cb0:	e7fa      	b.n	23f0ca8 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x64>
 23f0cb2:	bf00      	nop
 23f0cb4:	432fb852 	.word	0x432fb852
 23f0cb8:	c23b6666 	.word	0xc23b6666
 23f0cbc:	37800000 	.word	0x37800000
 23f0cc0:	7fc00000 	.word	0x7fc00000

023f0cc4 <_ZN16Adafruit_HTU21DF12readHumidityEv>:
 * Performs a single relative humidity conversion.
 *
 * @return A single-precision (32-bit) float value indicating the relative
 *         humidity in percent (0..100.0%).
 */
float Adafruit_HTU21DF::readHumidity(void) {
 23f0cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Prepare the I2C request. */
  uint8_t cmd = HTU21DF_READHUM;
 23f0cc6:	23e5      	movs	r3, #229	; 0xe5
 23f0cc8:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f0ccc:	2300      	movs	r3, #0
 23f0cce:	e9cd 3300 	strd	r3, r3, [sp]
 23f0cd2:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readHumidity(void) {
 23f0cd4:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f0cd6:	461a      	mov	r2, r3
 23f0cd8:	6800      	ldr	r0, [r0, #0]
 23f0cda:	f10d 010b 	add.w	r1, sp, #11
 23f0cde:	f7ff f8f3 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f0ce2:	b318      	cbz	r0, 23f0d2c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
    return NAN;
  }

  /* Wait a bit for the conversion to complete. */
  delay(50);
 23f0ce4:	2032      	movs	r0, #50	; 0x32
 23f0ce6:	f006 ffcd 	bl	23f7c84 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f0cea:	2301      	movs	r3, #1
 23f0cec:	2203      	movs	r2, #3
 23f0cee:	6820      	ldr	r0, [r4, #0]
 23f0cf0:	a903      	add	r1, sp, #12
 23f0cf2:	f7ff f919 	bl	23eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f0cf6:	b1c8      	cbz	r0, 23f0d2c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t h = buf[0];
  h <<= 8;
  h |= buf[1] & 0b11111100;
 23f0cf8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t h = buf[0];
 23f0cfc:	f89d 200c 	ldrb.w	r2, [sp, #12]
  h |= buf[1] & 0b11111100;
 23f0d00:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float hum = h;
 23f0d04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f0d08:	ee07 3a90 	vmov	s15, r3
  hum *= 125.0f;
 23f0d0c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f0d34 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x70>
  float hum = h;
 23f0d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
  hum /= 65536.0f;
  hum -= 6.0f;
 23f0d14:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum *= 125.0f;
 23f0d18:	ee67 7a87 	vmul.f32	s15, s15, s14
  hum -= 6.0f;
 23f0d1c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 23f0d38 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x74>
 23f0d20:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_humidity = hum;
 23f0d24:	ed84 0a01 	vstr	s0, [r4, #4]

  return hum;
}
 23f0d28:	b004      	add	sp, #16
 23f0d2a:	bd10      	pop	{r4, pc}
    return NAN;
 23f0d2c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23f0d3c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x78>
 23f0d30:	e7fa      	b.n	23f0d28 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x64>
 23f0d32:	bf00      	nop
 23f0d34:	42fa0000 	.word	0x42fa0000
 23f0d38:	37800000 	.word	0x37800000
 23f0d3c:	7fc00000 	.word	0x7fc00000

023f0d40 <_ZN16Adafruit_LPS35HWC1Ev>:
#include "Adafruit_LPS35HW.h"

/*!
 *    @brief  Instantiates a new LPS35HW class
 */
Adafruit_LPS35HW::Adafruit_LPS35HW(void) {}
 23f0d40:	4770      	bx	lr

023f0d42 <_ZN16Adafruit_LPS35HW5resetEv>:
/*!
    @brief Resets the hardware. All configuration registers are set to
            default values, the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_LPS35HW::reset(void) {
 23f0d42:	b507      	push	{r0, r1, r2, lr}
  Adafruit_BusIO_RegisterBits reset =
      Adafruit_BusIO_RegisterBits(Config2, 1, 2);
 23f0d44:	2302      	movs	r3, #2
 23f0d46:	6841      	ldr	r1, [r0, #4]
 23f0d48:	2201      	movs	r2, #1
 23f0d4a:	4668      	mov	r0, sp
 23f0d4c:	f7ff f866 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  reset.write(1);
 23f0d50:	2101      	movs	r1, #1
 23f0d52:	4668      	mov	r0, sp
 23f0d54:	f7ff f874 	bl	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (reset.read() == true) {
 23f0d58:	4668      	mov	r0, sp
 23f0d5a:	f7ff f864 	bl	23efe26 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f0d5e:	2801      	cmp	r0, #1
 23f0d60:	d102      	bne.n	23f0d68 <_ZN16Adafruit_LPS35HW5resetEv+0x26>
    delay(1);
 23f0d62:	f006 ff8f 	bl	23f7c84 <delay>
  while (reset.read() == true) {
 23f0d66:	e7f7      	b.n	23f0d58 <_ZN16Adafruit_LPS35HW5resetEv+0x16>
  }
}
 23f0d68:	b003      	add	sp, #12
 23f0d6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f0d70 <_ZN16Adafruit_LPS35HW15readTemperatureEv>:
    @return The current temperature in degrees C
*/
/**************************************************************************/
float Adafruit_LPS35HW::readTemperature(void) {
  Adafruit_BusIO_Register temp = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f0d70:	2300      	movs	r3, #0
 23f0d72:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readTemperature(void) {
 23f0d74:	b500      	push	{lr}
 23f0d76:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f0d78:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0d7c:	2102      	movs	r1, #2
 23f0d7e:	222b      	movs	r2, #43	; 0x2b
 23f0d80:	e9cd 2100 	strd	r2, r1, [sp]
 23f0d84:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f0d88:	a804      	add	r0, sp, #16
 23f0d8a:	f7fe ff6b 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return (int16_t)temp.read() / 100.0;
 23f0d8e:	a804      	add	r0, sp, #16
 23f0d90:	f7ff f828 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>
 23f0d94:	b200      	sxth	r0, r0
 23f0d96:	f7f3 fb69 	bl	23e446c <__aeabi_i2d>
 23f0d9a:	2200      	movs	r2, #0
 23f0d9c:	4b04      	ldr	r3, [pc, #16]	; (23f0db0 <_ZN16Adafruit_LPS35HW15readTemperatureEv+0x40>)
 23f0d9e:	f7f3 fcf9 	bl	23e4794 <__aeabi_ddiv>
 23f0da2:	f7f3 fec5 	bl	23e4b30 <__aeabi_d2f>
}
 23f0da6:	ee00 0a10 	vmov	s0, r0
 23f0daa:	b00b      	add	sp, #44	; 0x2c
 23f0dac:	f85d fb04 	ldr.w	pc, [sp], #4
 23f0db0:	40590000 	.word	0x40590000

023f0db4 <_ZN16Adafruit_LPS35HW12readPressureEv>:
    @return The current pressure in hPa, relative to the reference temperature
*/
/**************************************************************************/
float Adafruit_LPS35HW::readPressure(void) {
  Adafruit_BusIO_Register pressure = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f0db4:	2300      	movs	r3, #0
 23f0db6:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readPressure(void) {
 23f0db8:	b500      	push	{lr}
 23f0dba:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f0dbc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0dc0:	2103      	movs	r1, #3
 23f0dc2:	2228      	movs	r2, #40	; 0x28
 23f0dc4:	e9cd 2100 	strd	r2, r1, [sp]
 23f0dc8:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f0dcc:	a804      	add	r0, sp, #16
 23f0dce:	f7fe ff49 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  int32_t raw_pressure = pressure.read();
 23f0dd2:	a804      	add	r0, sp, #16
 23f0dd4:	f7ff f806 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>
  // perform sign extension for 24 bit number if needed
  if (raw_pressure & 0x800000) {
 23f0dd8:	0203      	lsls	r3, r0, #8
    raw_pressure = (0xff000000 | raw_pressure);
 23f0dda:	bf48      	it	mi
 23f0ddc:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
  }

  return (raw_pressure / 4096.0);
 23f0de0:	f7f3 fb44 	bl	23e446c <__aeabi_i2d>
 23f0de4:	2200      	movs	r2, #0
 23f0de6:	4b05      	ldr	r3, [pc, #20]	; (23f0dfc <_ZN16Adafruit_LPS35HW12readPressureEv+0x48>)
 23f0de8:	f7f3 fbaa 	bl	23e4540 <__aeabi_dmul>
 23f0dec:	f7f3 fea0 	bl	23e4b30 <__aeabi_d2f>
}
 23f0df0:	ee00 0a10 	vmov	s0, r0
 23f0df4:	b00b      	add	sp, #44	; 0x2c
 23f0df6:	f85d fb04 	ldr.w	pc, [sp], #4
 23f0dfa:	bf00      	nop
 23f0dfc:	3f300000 	.word	0x3f300000

023f0e00 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>:
    @brief Sets a new measurement rate
    @param new_rate
          The new output data rate to be set (ODR)
*/
/**************************************************************************/
void Adafruit_LPS35HW::setDataRate(LPS35HW_DataRate new_rate) {
 23f0e00:	b513      	push	{r0, r1, r4, lr}
 23f0e02:	460c      	mov	r4, r1
  Adafruit_BusIO_RegisterBits data_rate =
      Adafruit_BusIO_RegisterBits(Config1, 3, 4);
 23f0e04:	2304      	movs	r3, #4
 23f0e06:	2203      	movs	r2, #3
 23f0e08:	6801      	ldr	r1, [r0, #0]
 23f0e0a:	4668      	mov	r0, sp
 23f0e0c:	f7ff f806 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  data_rate.write(new_rate);
 23f0e10:	4621      	mov	r1, r4
 23f0e12:	4668      	mov	r0, sp
 23f0e14:	f7ff f814 	bl	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 23f0e18:	b002      	add	sp, #8
 23f0e1a:	bd10      	pop	{r4, pc}

023f0e1c <_ZN16Adafruit_LPS35HW5_initEv>:
boolean Adafruit_LPS35HW::_init(void) {
 23f0e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f0e1e:	2500      	movs	r5, #0
 23f0e20:	2701      	movs	r7, #1
 23f0e22:	230f      	movs	r3, #15
boolean Adafruit_LPS35HW::_init(void) {
 23f0e24:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f0e26:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f0e2a:	9300      	str	r3, [sp, #0]
 23f0e2c:	9701      	str	r7, [sp, #4]
 23f0e2e:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f0e32:	462b      	mov	r3, r5
boolean Adafruit_LPS35HW::_init(void) {
 23f0e34:	4604      	mov	r4, r0
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f0e36:	a806      	add	r0, sp, #24
 23f0e38:	f7fe ff14 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0xB1) {
 23f0e3c:	a806      	add	r0, sp, #24
 23f0e3e:	f7fe ffd1 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>
 23f0e42:	28b1      	cmp	r0, #177	; 0xb1
 23f0e44:	d167      	bne.n	23f0f16 <_ZN16Adafruit_LPS35HW5_initEv+0xfa>
                                        LPS35HW_CTRL_REG1, 1);
 23f0e46:	2018      	movs	r0, #24
 23f0e48:	f7f4 f9df 	bl	23e520a <_Znwj>
 23f0e4c:	4606      	mov	r6, r0
 23f0e4e:	b148      	cbz	r0, 23f0e64 <_ZN16Adafruit_LPS35HW5_initEv+0x48>
 23f0e50:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f0e54:	2310      	movs	r3, #16
 23f0e56:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f0e5a:	9300      	str	r3, [sp, #0]
 23f0e5c:	9701      	str	r7, [sp, #4]
 23f0e5e:	462b      	mov	r3, r5
 23f0e60:	f7fe ff00 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
                                        LPS35HW_CTRL_REG2, 1);
 23f0e64:	2018      	movs	r0, #24
  Config1 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f0e66:	6026      	str	r6, [r4, #0]
                                        LPS35HW_CTRL_REG2, 1);
 23f0e68:	f7f4 f9cf 	bl	23e520a <_Znwj>
 23f0e6c:	4605      	mov	r5, r0
 23f0e6e:	b150      	cbz	r0, 23f0e86 <_ZN16Adafruit_LPS35HW5_initEv+0x6a>
 23f0e70:	2201      	movs	r2, #1
 23f0e72:	2300      	movs	r3, #0
 23f0e74:	9201      	str	r2, [sp, #4]
 23f0e76:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0e7a:	2211      	movs	r2, #17
 23f0e7c:	9200      	str	r2, [sp, #0]
 23f0e7e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f0e82:	f7fe feef 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config2 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f0e86:	6065      	str	r5, [r4, #4]
                                        LPS35HW_CTRL_REG3, 1);
 23f0e88:	2018      	movs	r0, #24
 23f0e8a:	f7f4 f9be 	bl	23e520a <_Znwj>
 23f0e8e:	4605      	mov	r5, r0
 23f0e90:	b150      	cbz	r0, 23f0ea8 <_ZN16Adafruit_LPS35HW5_initEv+0x8c>
 23f0e92:	2201      	movs	r2, #1
 23f0e94:	2300      	movs	r3, #0
 23f0e96:	9201      	str	r2, [sp, #4]
 23f0e98:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0e9c:	2212      	movs	r2, #18
 23f0e9e:	9200      	str	r2, [sp, #0]
 23f0ea0:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f0ea4:	f7fe fede 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config3 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f0ea8:	60a5      	str	r5, [r4, #8]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INTERRUPT_CFG, 1);
 23f0eaa:	2018      	movs	r0, #24
 23f0eac:	f7f4 f9ad 	bl	23e520a <_Znwj>
 23f0eb0:	4605      	mov	r5, r0
 23f0eb2:	b150      	cbz	r0, 23f0eca <_ZN16Adafruit_LPS35HW5_initEv+0xae>
 23f0eb4:	2201      	movs	r2, #1
 23f0eb6:	2300      	movs	r3, #0
 23f0eb8:	9201      	str	r2, [sp, #4]
 23f0eba:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0ebe:	220b      	movs	r2, #11
 23f0ec0:	9200      	str	r2, [sp, #0]
 23f0ec2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f0ec6:	f7fe fecd 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  InterruptCfg = new Adafruit_BusIO_Register(
 23f0eca:	60e5      	str	r5, [r4, #12]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INT_SOURCE, 1);
 23f0ecc:	2018      	movs	r0, #24
 23f0ece:	f7f4 f99c 	bl	23e520a <_Znwj>
 23f0ed2:	4605      	mov	r5, r0
 23f0ed4:	b150      	cbz	r0, 23f0eec <_ZN16Adafruit_LPS35HW5_initEv+0xd0>
 23f0ed6:	2201      	movs	r2, #1
 23f0ed8:	2300      	movs	r3, #0
 23f0eda:	9201      	str	r2, [sp, #4]
 23f0edc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0ee0:	2225      	movs	r2, #37	; 0x25
 23f0ee2:	9200      	str	r2, [sp, #0]
 23f0ee4:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f0ee8:	f7fe febc 	bl	23efc64 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  reset();
 23f0eec:	4620      	mov	r0, r4
  InterruptStatus = new Adafruit_BusIO_Register(
 23f0eee:	6125      	str	r5, [r4, #16]
  reset();
 23f0ef0:	f7ff ff27 	bl	23f0d42 <_ZN16Adafruit_LPS35HW5resetEv>
  setDataRate(LPS35HW_RATE_10_HZ); // default in continuous at 10 hz
 23f0ef4:	2102      	movs	r1, #2
 23f0ef6:	4620      	mov	r0, r4
 23f0ef8:	f7ff ff82 	bl	23f0e00 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>
      Adafruit_BusIO_RegisterBits(Config1, 1, 1);
 23f0efc:	2301      	movs	r3, #1
 23f0efe:	6821      	ldr	r1, [r4, #0]
 23f0f00:	461a      	mov	r2, r3
 23f0f02:	a804      	add	r0, sp, #16
 23f0f04:	f7fe ff8a 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  block_reads.write(0x1);
 23f0f08:	2101      	movs	r1, #1
 23f0f0a:	a804      	add	r0, sp, #16
 23f0f0c:	f7fe ff98 	bl	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  return true;
 23f0f10:	2001      	movs	r0, #1
}
 23f0f12:	b00d      	add	sp, #52	; 0x34
 23f0f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 23f0f16:	4628      	mov	r0, r5
 23f0f18:	e7fb      	b.n	23f0f12 <_ZN16Adafruit_LPS35HW5_initEv+0xf6>

023f0f1a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>:
  spi_dev = NULL;
 23f0f1a:	2300      	movs	r3, #0
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f0f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  spi_dev = NULL;
 23f0f1e:	6183      	str	r3, [r0, #24]
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f0f20:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f0f22:	2010      	movs	r0, #16
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f0f24:	e9cd 2100 	strd	r2, r1, [sp]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f0f28:	f7f4 f96f 	bl	23e520a <_Znwj>
 23f0f2c:	4605      	mov	r5, r0
 23f0f2e:	b118      	cbz	r0, 23f0f38 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x1e>
 23f0f30:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f0f34:	f7fe ff9d 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0f38:	2101      	movs	r1, #1
 23f0f3a:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f0f3c:	6165      	str	r5, [r4, #20]
  if (!i2c_dev->begin()) {
 23f0f3e:	f7fe ffb4 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23f0f42:	b128      	cbz	r0, 23f0f50 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x36>
  return _init();
 23f0f44:	4620      	mov	r0, r4
}
 23f0f46:	b003      	add	sp, #12
 23f0f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
 23f0f4c:	f7ff bf66 	b.w	23f0e1c <_ZN16Adafruit_LPS35HW5_initEv>
}
 23f0f50:	b003      	add	sp, #12
 23f0f52:	bd30      	pop	{r4, r5, pc}

023f0f54 <_ZN16Adafruit_MCP9808D1Ev>:
 23f0f54:	4770      	bx	lr

023f0f56 <_ZN16Adafruit_MCP9808D0Ev>:
 23f0f56:	b510      	push	{r4, lr}
 23f0f58:	4604      	mov	r4, r0
 23f0f5a:	210c      	movs	r1, #12
 23f0f5c:	f7f4 f959 	bl	23e5212 <_ZdlPvj>
 23f0f60:	4620      	mov	r0, r4
 23f0f62:	bd10      	pop	{r4, pc}

023f0f64 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t>:
   resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be
   filled with sensor type data
*/
/**************************************************************************/
void Adafruit_MCP9808::getSensor(sensor_t *sensor) {
 23f0f64:	b538      	push	{r3, r4, r5, lr}
 23f0f66:	460c      	mov	r4, r1
 23f0f68:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23f0f6a:	2220      	movs	r2, #32
 23f0f6c:	2100      	movs	r1, #0
 23f0f6e:	f104 0008 	add.w	r0, r4, #8
 23f0f72:	f00b fd98 	bl	23fcaa6 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "MCP9808", sizeof(sensor->name) - 1);
 23f0f76:	220b      	movs	r2, #11
 23f0f78:	4620      	mov	r0, r4
 23f0f7a:	4908      	ldr	r1, [pc, #32]	; (23f0f9c <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x38>)
 23f0f7c:	f00b fe41 	bl	23fcc02 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23f0f80:	2301      	movs	r3, #1
 23f0f82:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23f0f84:	88eb      	ldrh	r3, [r5, #6]
 23f0f86:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f0f88:	230d      	movs	r3, #13
 23f0f8a:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 100.0;
 23f0f8c:	4b04      	ldr	r3, [pc, #16]	; (23f0fa0 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x3c>)
 23f0f8e:	61a3      	str	r3, [r4, #24]
  sensor->min_value = -20.0;
 23f0f90:	4b04      	ldr	r3, [pc, #16]	; (23f0fa4 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x40>)
 23f0f92:	61e3      	str	r3, [r4, #28]
  sensor->resolution = 0.0625;
 23f0f94:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 23f0f98:	6223      	str	r3, [r4, #32]
}
 23f0f9a:	bd38      	pop	{r3, r4, r5, pc}
 23f0f9c:	023fef68 	.word	0x023fef68
 23f0fa0:	42c80000 	.word	0x42c80000
 23f0fa4:	c1a00000 	.word	0xc1a00000

023f0fa8 <_ZN16Adafruit_MCP9808C1Ev>:
Adafruit_MCP9808::Adafruit_MCP9808() {}
 23f0fa8:	4a03      	ldr	r2, [pc, #12]	; (23f0fb8 <_ZN16Adafruit_MCP9808C1Ev+0x10>)
 23f0faa:	6002      	str	r2, [r0, #0]
 23f0fac:	f242 6250 	movw	r2, #9808	; 0x2650
 23f0fb0:	80c2      	strh	r2, [r0, #6]
 23f0fb2:	2200      	movs	r2, #0
 23f0fb4:	6082      	str	r2, [r0, #8]
 23f0fb6:	4770      	bx	lr
 23f0fb8:	023fef78 	.word	0x023fef78

023f0fbc <_ZN16Adafruit_MCP98087write16Eht>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f0fbc:	2301      	movs	r3, #1
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
 23f0fbe:	b510      	push	{r4, lr}
 23f0fc0:	4614      	mov	r4, r2
 23f0fc2:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f0fc4:	e9cd 3300 	strd	r3, r3, [sp]
 23f0fc8:	460a      	mov	r2, r1
 23f0fca:	2302      	movs	r3, #2
 23f0fcc:	6881      	ldr	r1, [r0, #8]
 23f0fce:	a802      	add	r0, sp, #8
 23f0fd0:	f7fe fe3a 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg16.write(value);
 23f0fd4:	2200      	movs	r2, #0
 23f0fd6:	4621      	mov	r1, r4
 23f0fd8:	a802      	add	r0, sp, #8
 23f0fda:	f7fe fea3 	bl	23efd24 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
 23f0fde:	b008      	add	sp, #32
 23f0fe0:	bd10      	pop	{r4, pc}

023f0fe2 <_ZN16Adafruit_MCP98086read16Eh>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f0fe2:	2301      	movs	r3, #1
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f0fe4:	b500      	push	{lr}
 23f0fe6:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f0fe8:	e9cd 3300 	strd	r3, r3, [sp]
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f0fec:	460a      	mov	r2, r1
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f0fee:	2302      	movs	r3, #2
 23f0ff0:	6881      	ldr	r1, [r0, #8]
 23f0ff2:	a802      	add	r0, sp, #8
 23f0ff4:	f7fe fe28 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return reg16.read();
 23f0ff8:	a802      	add	r0, sp, #8
 23f0ffa:	f7fe fef3 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f0ffe:	b280      	uxth	r0, r0
 23f1000:	b009      	add	sp, #36	; 0x24
 23f1002:	f85d fb04 	ldr.w	pc, [sp], #4

023f1006 <_ZN16Adafruit_MCP98084initEv>:
bool Adafruit_MCP9808::init() {
 23f1006:	b538      	push	{r3, r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f1008:	2101      	movs	r1, #1
bool Adafruit_MCP9808::init() {
 23f100a:	4604      	mov	r4, r0
  if (!i2c_dev->begin()) {
 23f100c:	6880      	ldr	r0, [r0, #8]
 23f100e:	f7fe ff4c 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23f1012:	4605      	mov	r5, r0
 23f1014:	b910      	cbnz	r0, 23f101c <_ZN16Adafruit_MCP98084initEv+0x16>
    return false;
 23f1016:	2500      	movs	r5, #0
}
 23f1018:	4628      	mov	r0, r5
 23f101a:	bd38      	pop	{r3, r4, r5, pc}
  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 23f101c:	2106      	movs	r1, #6
 23f101e:	4620      	mov	r0, r4
 23f1020:	f7ff ffdf 	bl	23f0fe2 <_ZN16Adafruit_MCP98086read16Eh>
 23f1024:	2854      	cmp	r0, #84	; 0x54
 23f1026:	d1f6      	bne.n	23f1016 <_ZN16Adafruit_MCP98084initEv+0x10>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 23f1028:	2107      	movs	r1, #7
 23f102a:	4620      	mov	r0, r4
 23f102c:	f7ff ffd9 	bl	23f0fe2 <_ZN16Adafruit_MCP98086read16Eh>
 23f1030:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 23f1034:	d1ef      	bne.n	23f1016 <_ZN16Adafruit_MCP98084initEv+0x10>
  write16(MCP9808_REG_CONFIG, 0x0);
 23f1036:	2200      	movs	r2, #0
 23f1038:	2101      	movs	r1, #1
 23f103a:	4620      	mov	r0, r4
 23f103c:	f7ff ffbe 	bl	23f0fbc <_ZN16Adafruit_MCP98087write16Eht>
  return true;
 23f1040:	e7ea      	b.n	23f1018 <_ZN16Adafruit_MCP98084initEv+0x12>

023f1042 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>:
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f1042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1044:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f1046:	6880      	ldr	r0, [r0, #8]
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f1048:	460e      	mov	r6, r1
 23f104a:	4617      	mov	r7, r2
  if (i2c_dev) {
 23f104c:	b110      	cbz	r0, 23f1054 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x12>
    delete i2c_dev;
 23f104e:	2110      	movs	r1, #16
 23f1050:	f7f4 f8df 	bl	23e5212 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f1054:	2010      	movs	r0, #16
 23f1056:	f7f4 f8d8 	bl	23e520a <_Znwj>
 23f105a:	4605      	mov	r5, r0
 23f105c:	b118      	cbz	r0, 23f1066 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x24>
 23f105e:	463a      	mov	r2, r7
 23f1060:	4631      	mov	r1, r6
 23f1062:	f7fe ff06 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return init();
 23f1066:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f1068:	60a5      	str	r5, [r4, #8]
}
 23f106a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return init();
 23f106e:	f7ff bfca 	b.w	23f1006 <_ZN16Adafruit_MCP98084initEv>

023f1072 <_ZN16Adafruit_MCP98085beginEh>:
bool Adafruit_MCP9808::begin(uint8_t addr) { return begin(addr, &Wire); }
 23f1072:	b513      	push	{r0, r1, r4, lr}
 23f1074:	4604      	mov	r4, r0
 23f1076:	9101      	str	r1, [sp, #4]
 23f1078:	f008 ff38 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23f107c:	4602      	mov	r2, r0
 23f107e:	4620      	mov	r0, r4
 23f1080:	9901      	ldr	r1, [sp, #4]
 23f1082:	b002      	add	sp, #8
 23f1084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f1088:	f7ff bfdb 	b.w	23f1042 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>

023f108c <_ZN16Adafruit_MCP98089readTempCEv>:
float Adafruit_MCP9808::readTempC() {
 23f108c:	b508      	push	{r3, lr}
  uint16_t t = read16(MCP9808_REG_AMBIENT_TEMP);
 23f108e:	2105      	movs	r1, #5
 23f1090:	f7ff ffa7 	bl	23f0fe2 <_ZN16Adafruit_MCP98086read16Eh>
  if (t != 0xFFFF) {
 23f1094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f1098:	4298      	cmp	r0, r3
 23f109a:	d00c      	beq.n	23f10b6 <_ZN16Adafruit_MCP98089readTempCEv+0x2a>
    temp = t & 0x0FFF;
 23f109c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 23f10a0:	ee00 3a10 	vmov	s0, r3
    if (t & 0x1000)
 23f10a4:	04c3      	lsls	r3, r0, #19
    temp /= 16.0;
 23f10a6:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    if (t & 0x1000)
 23f10aa:	d503      	bpl.n	23f10b4 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
      temp -= 256;
 23f10ac:	eddf 7a03 	vldr	s15, [pc, #12]	; 23f10bc <_ZN16Adafruit_MCP98089readTempCEv+0x30>
 23f10b0:	ee30 0a67 	vsub.f32	s0, s0, s15
}
 23f10b4:	bd08      	pop	{r3, pc}
  float temp = NAN;
 23f10b6:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f10c0 <_ZN16Adafruit_MCP98089readTempCEv+0x34>
  return temp;
 23f10ba:	e7fb      	b.n	23f10b4 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
 23f10bc:	43800000 	.word	0x43800000
 23f10c0:	7fc00000 	.word	0x7fc00000

023f10c4 <_ZN16Adafruit_MCP98088getEventEP15sensors_event_t>:
bool Adafruit_MCP9808::getEvent(sensors_event_t *temp) {
 23f10c4:	b570      	push	{r4, r5, r6, lr}
 23f10c6:	460c      	mov	r4, r1
 23f10c8:	4605      	mov	r5, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f10ca:	f005 fecd 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  memset(temp, 0, sizeof(sensors_event_t));
 23f10ce:	2220      	movs	r2, #32
 23f10d0:	4606      	mov	r6, r0
 23f10d2:	2100      	movs	r1, #0
 23f10d4:	1d20      	adds	r0, r4, #4
 23f10d6:	f00b fce6 	bl	23fcaa6 <memset>
  temp->version = sizeof(sensors_event_t);
 23f10da:	2324      	movs	r3, #36	; 0x24
 23f10dc:	6023      	str	r3, [r4, #0]
  temp->sensor_id = _sensorID;
 23f10de:	88eb      	ldrh	r3, [r5, #6]
  temp->temperature = readTempC();
 23f10e0:	4628      	mov	r0, r5
  temp->sensor_id = _sensorID;
 23f10e2:	6063      	str	r3, [r4, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f10e4:	230d      	movs	r3, #13
  temp->timestamp = t;
 23f10e6:	6126      	str	r6, [r4, #16]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f10e8:	60a3      	str	r3, [r4, #8]
  temp->temperature = readTempC();
 23f10ea:	f7ff ffcf 	bl	23f108c <_ZN16Adafruit_MCP98089readTempCEv>
}
 23f10ee:	2001      	movs	r0, #1
  temp->temperature = readTempC();
 23f10f0:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23f10f4:	bd70      	pop	{r4, r5, r6, pc}

023f10f6 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
 23f10f6:	2200      	movs	r2, #0
 23f10f8:	e9c0 2200 	strd	r2, r2, [r0]
 23f10fc:	4770      	bx	lr

023f10fe <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f10fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
 23f1100:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f1102:	4604      	mov	r4, r0
  if (!i2c_dev) {
 23f1104:	b953      	cbnz	r3, 23f111c <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
 23f1106:	2010      	movs	r0, #16
 23f1108:	9101      	str	r1, [sp, #4]
 23f110a:	f7f4 f87e 	bl	23e520a <_Znwj>
 23f110e:	4605      	mov	r5, r0
 23f1110:	b118      	cbz	r0, 23f111a <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
 23f1112:	2112      	movs	r1, #18
 23f1114:	9a01      	ldr	r2, [sp, #4]
 23f1116:	f7fe feac 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23f111a:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
 23f111c:	2101      	movs	r1, #1
 23f111e:	6820      	ldr	r0, [r4, #0]
    return false;
  }

  return true;
}
 23f1120:	b003      	add	sp, #12
 23f1122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f1126:	f7fe bec0 	b.w	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>

023f112a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>:
 *  @brief  Setups the hardware and detects a valid UART PM2.5
 *  @param  data
 *          Pointer to PM25_AQI_Data that will be filled by read()ing
 *  @return True on successful read, false if timed out or bad data
 */
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f112a:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f112c:	4604      	mov	r4, r0
  uint8_t buffer[32];
  uint16_t sum = 0;

  if (!data) {
 23f112e:	460d      	mov	r5, r1
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f1130:	b091      	sub	sp, #68	; 0x44
  if (!data) {
 23f1132:	b911      	cbnz	r1, 23f113a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x10>
        return false;
      }
    }
    if (serial_dev->peek() != 0x42) {
      serial_dev->read();
      return false;
 23f1134:	2000      	movs	r0, #0
    return false;
  }

  // success!
  return true;
}
 23f1136:	b011      	add	sp, #68	; 0x44
 23f1138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (i2c_dev) { // ok using i2c?
 23f113a:	6800      	ldr	r0, [r0, #0]
 23f113c:	2800      	cmp	r0, #0
 23f113e:	d039      	beq.n	23f11b4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x8a>
    if (!i2c_dev->read(buffer, 32)) {
 23f1140:	2220      	movs	r2, #32
 23f1142:	2301      	movs	r3, #1
 23f1144:	eb0d 0102 	add.w	r1, sp, r2
 23f1148:	f7fe feee 	bl	23eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f114c:	2800      	cmp	r0, #0
 23f114e:	d0f1      	beq.n	23f1134 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
  if (buffer[0] != 0x42) {
 23f1150:	f89d 3020 	ldrb.w	r3, [sp, #32]
 23f1154:	2b42      	cmp	r3, #66	; 0x42
 23f1156:	d1ed      	bne.n	23f1134 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f1158:	aa08      	add	r2, sp, #32
 23f115a:	4611      	mov	r1, r2
 23f115c:	231e      	movs	r3, #30
  uint16_t sum = 0;
 23f115e:	2600      	movs	r6, #0
    sum += buffer[i];
 23f1160:	f811 0b01 	ldrb.w	r0, [r1], #1
  for (uint8_t i = 0; i < 30; i++) {
 23f1164:	3b01      	subs	r3, #1
    sum += buffer[i];
 23f1166:	4430      	add	r0, r6
  for (uint8_t i = 0; i < 30; i++) {
 23f1168:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    sum += buffer[i];
 23f116c:	b286      	uxth	r6, r0
  for (uint8_t i = 0; i < 30; i++) {
 23f116e:	d1f7      	bne.n	23f1160 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x36>
 23f1170:	4668      	mov	r0, sp
 23f1172:	2101      	movs	r1, #1
 23f1174:	4603      	mov	r3, r0
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f1176:	7897      	ldrb	r7, [r2, #2]
    buffer_u16[i] = buffer[2 + i * 2 + 1];
 23f1178:	78d4      	ldrb	r4, [r2, #3]
  for (uint8_t i = 0; i < 15; i++) {
 23f117a:	3101      	adds	r1, #1
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f117c:	eb04 2407 	add.w	r4, r4, r7, lsl #8
  for (uint8_t i = 0; i < 15; i++) {
 23f1180:	2910      	cmp	r1, #16
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f1182:	f820 4b02 	strh.w	r4, [r0], #2
  for (uint8_t i = 0; i < 15; i++) {
 23f1186:	f102 0202 	add.w	r2, r2, #2
 23f118a:	d1f4      	bne.n	23f1176 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x4c>
  memcpy((void *)data, (void *)buffer_u16, 30);
 23f118c:	462a      	mov	r2, r5
 23f118e:	af06      	add	r7, sp, #24
 23f1190:	461c      	mov	r4, r3
 23f1192:	cc03      	ldmia	r4!, {r0, r1}
 23f1194:	42bc      	cmp	r4, r7
 23f1196:	6010      	str	r0, [r2, #0]
 23f1198:	6051      	str	r1, [r2, #4]
 23f119a:	4623      	mov	r3, r4
 23f119c:	f102 0208 	add.w	r2, r2, #8
 23f11a0:	d1f6      	bne.n	23f1190 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x66>
 23f11a2:	6820      	ldr	r0, [r4, #0]
 23f11a4:	6010      	str	r0, [r2, #0]
 23f11a6:	88a3      	ldrh	r3, [r4, #4]
 23f11a8:	8093      	strh	r3, [r2, #4]
  if (sum != data->checksum) {
 23f11aa:	8ba8      	ldrh	r0, [r5, #28]
 23f11ac:	1b83      	subs	r3, r0, r6
 23f11ae:	4258      	negs	r0, r3
 23f11b0:	4158      	adcs	r0, r3
 23f11b2:	e7c0      	b.n	23f1136 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc>
  } else if (serial_dev) { // ok using uart
 23f11b4:	6860      	ldr	r0, [r4, #4]
 23f11b6:	2800      	cmp	r0, #0
 23f11b8:	d0bc      	beq.n	23f1134 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (!serial_dev->available()) {
 23f11ba:	6803      	ldr	r3, [r0, #0]
 23f11bc:	691b      	ldr	r3, [r3, #16]
 23f11be:	4798      	blx	r3
 23f11c0:	2800      	cmp	r0, #0
 23f11c2:	d0b7      	beq.n	23f1134 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f11c4:	2620      	movs	r6, #32
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f11c6:	6860      	ldr	r0, [r4, #4]
 23f11c8:	6803      	ldr	r3, [r0, #0]
 23f11ca:	699b      	ldr	r3, [r3, #24]
 23f11cc:	4798      	blx	r3
 23f11ce:	2842      	cmp	r0, #66	; 0x42
 23f11d0:	d00b      	beq.n	23f11ea <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc0>
      serial_dev->read();
 23f11d2:	6860      	ldr	r0, [r4, #4]
 23f11d4:	6803      	ldr	r3, [r0, #0]
 23f11d6:	695b      	ldr	r3, [r3, #20]
 23f11d8:	4798      	blx	r3
      if (!serial_dev->available()) {
 23f11da:	6860      	ldr	r0, [r4, #4]
 23f11dc:	6803      	ldr	r3, [r0, #0]
 23f11de:	691b      	ldr	r3, [r3, #16]
 23f11e0:	4798      	blx	r3
 23f11e2:	2800      	cmp	r0, #0
 23f11e4:	d0a6      	beq.n	23f1134 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f11e6:	3e01      	subs	r6, #1
 23f11e8:	d1ed      	bne.n	23f11c6 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x9c>
    if (serial_dev->peek() != 0x42) {
 23f11ea:	6860      	ldr	r0, [r4, #4]
 23f11ec:	6803      	ldr	r3, [r0, #0]
 23f11ee:	699b      	ldr	r3, [r3, #24]
 23f11f0:	4798      	blx	r3
 23f11f2:	2842      	cmp	r0, #66	; 0x42
 23f11f4:	6860      	ldr	r0, [r4, #4]
      serial_dev->read();
 23f11f6:	6803      	ldr	r3, [r0, #0]
    if (serial_dev->peek() != 0x42) {
 23f11f8:	d002      	beq.n	23f1200 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xd6>
      serial_dev->read();
 23f11fa:	695b      	ldr	r3, [r3, #20]
 23f11fc:	4798      	blx	r3
 23f11fe:	e799      	b.n	23f1134 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->available() < 32) {
 23f1200:	691b      	ldr	r3, [r3, #16]
 23f1202:	4798      	blx	r3
 23f1204:	281f      	cmp	r0, #31
 23f1206:	dd95      	ble.n	23f1134 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    serial_dev->readBytes((char *)buffer, 32);
 23f1208:	2220      	movs	r2, #32
 23f120a:	6860      	ldr	r0, [r4, #4]
 23f120c:	eb0d 0102 	add.w	r1, sp, r2
 23f1210:	6803      	ldr	r3, [r0, #0]
 23f1212:	6a1b      	ldr	r3, [r3, #32]
 23f1214:	4798      	blx	r3
 23f1216:	e79b      	b.n	23f1150 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x26>

023f1218 <_ZL4crc8PKhi.constprop.0>:

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);

  for (int j = len; j; --j) {
    crc ^= *data++;
 23f1218:	7803      	ldrb	r3, [r0, #0]
 23f121a:	2208      	movs	r2, #8
 23f121c:	43db      	mvns	r3, r3
 23f121e:	b2db      	uxtb	r3, r3

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f1220:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f1224:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f1228:	d001      	beq.n	23f122e <_ZL4crc8PKhi.constprop.0+0x16>
 23f122a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
    for (int i = 8; i; --i) {
 23f122e:	3a01      	subs	r2, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f1230:	b2db      	uxtb	r3, r3
    for (int i = 8; i; --i) {
 23f1232:	d1f5      	bne.n	23f1220 <_ZL4crc8PKhi.constprop.0+0x8>
    crc ^= *data++;
 23f1234:	7840      	ldrb	r0, [r0, #1]
 23f1236:	4058      	eors	r0, r3
 23f1238:	2308      	movs	r3, #8
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f123a:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f123e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23f1242:	d001      	beq.n	23f1248 <_ZL4crc8PKhi.constprop.0+0x30>
 23f1244:	f080 0031 	eor.w	r0, r0, #49	; 0x31
    for (int i = 8; i; --i) {
 23f1248:	3b01      	subs	r3, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f124a:	b2c0      	uxtb	r0, r0
    for (int i = 8; i; --i) {
 23f124c:	d1f5      	bne.n	23f123a <_ZL4crc8PKhi.constprop.0+0x22>
 23f124e:	4770      	bx	lr

023f1250 <_ZN14Adafruit_SHT31C1EP7TwoWire>:
Adafruit_SHT31::Adafruit_SHT31(TwoWire *theWire) {
 23f1250:	2200      	movs	r2, #0
  _wire = theWire;
 23f1252:	e9c0 1202 	strd	r1, r2, [r0, #8]
  humidity = NAN;
 23f1256:	4a02      	ldr	r2, [pc, #8]	; (23f1260 <_ZN14Adafruit_SHT31C1EP7TwoWire+0x10>)
 23f1258:	6002      	str	r2, [r0, #0]
  temp = NAN;
 23f125a:	6042      	str	r2, [r0, #4]
}
 23f125c:	4770      	bx	lr
 23f125e:	bf00      	nop
 23f1260:	7fc00000 	.word	0x7fc00000

023f1264 <_ZN14Adafruit_SHT31D1Ev>:
Adafruit_SHT31::~Adafruit_SHT31() {
 23f1264:	b510      	push	{r4, lr}
 23f1266:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f1268:	68c0      	ldr	r0, [r0, #12]
 23f126a:	b110      	cbz	r0, 23f1272 <_ZN14Adafruit_SHT31D1Ev+0xe>
    delete i2c_dev; // remove old interface
 23f126c:	2110      	movs	r1, #16
 23f126e:	f7f3 ffd0 	bl	23e5212 <_ZdlPvj>
}
 23f1272:	4620      	mov	r0, r4
 23f1274:	bd10      	pop	{r4, pc}

023f1276 <_ZN14Adafruit_SHT3112writeCommandEt>:
/**
 * Internal function to perform and I2C write.
 *
 * @param cmd   The 16-bit command ID to send.
 */
bool Adafruit_SHT31::writeCommand(uint16_t command) {
 23f1276:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd[2];

  cmd[0] = command >> 8;
 23f1278:	0a0b      	lsrs	r3, r1, #8
 23f127a:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd[1] = command & 0xFF;

  return i2c_dev->write(cmd, 2);
 23f127e:	2300      	movs	r3, #0
 23f1280:	e9cd 3300 	strd	r3, r3, [sp]
  cmd[1] = command & 0xFF;
 23f1284:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(cmd, 2);
 23f1288:	2301      	movs	r3, #1
 23f128a:	2202      	movs	r2, #2
 23f128c:	a903      	add	r1, sp, #12
 23f128e:	68c0      	ldr	r0, [r0, #12]
 23f1290:	f7fe fe1a 	bl	23efec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f1294:	b005      	add	sp, #20
 23f1296:	f85d fb04 	ldr.w	pc, [sp], #4

023f129a <_ZN14Adafruit_SHT3110readStatusEv>:
uint16_t Adafruit_SHT31::readStatus(void) {
 23f129a:	b513      	push	{r0, r1, r4, lr}
 23f129c:	4604      	mov	r4, r0
  writeCommand(SHT31_READSTATUS);
 23f129e:	f24f 312d 	movw	r1, #62253	; 0xf32d
 23f12a2:	f7ff ffe8 	bl	23f1276 <_ZN14Adafruit_SHT3112writeCommandEt>
  i2c_dev->read(data, 3);
 23f12a6:	2301      	movs	r3, #1
 23f12a8:	2203      	movs	r2, #3
 23f12aa:	68e0      	ldr	r0, [r4, #12]
 23f12ac:	a901      	add	r1, sp, #4
 23f12ae:	f7fe fe3b 	bl	23eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>
  return stat;
 23f12b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 23f12b6:	ba40      	rev16	r0, r0
}
 23f12b8:	b280      	uxth	r0, r0
 23f12ba:	b002      	add	sp, #8
 23f12bc:	bd10      	pop	{r4, pc}

023f12be <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
 23f12be:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 23f12c0:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f12c4:	f7ff ffd7 	bl	23f1276 <_ZN14Adafruit_SHT3112writeCommandEt>
}
 23f12c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
 23f12cc:	200a      	movs	r0, #10
 23f12ce:	f006 bcd9 	b.w	23f7c84 <delay>

023f12d2 <_ZN14Adafruit_SHT315beginEh>:
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f12d2:	b570      	push	{r4, r5, r6, lr}
 23f12d4:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f12d6:	68c0      	ldr	r0, [r0, #12]
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f12d8:	460e      	mov	r6, r1
  if (i2c_dev) {
 23f12da:	b110      	cbz	r0, 23f12e2 <_ZN14Adafruit_SHT315beginEh+0x10>
    delete i2c_dev; // remove old interface
 23f12dc:	2110      	movs	r1, #16
 23f12de:	f7f3 ff98 	bl	23e5212 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f12e2:	2010      	movs	r0, #16
 23f12e4:	f7f3 ff91 	bl	23e520a <_Znwj>
 23f12e8:	4605      	mov	r5, r0
 23f12ea:	b118      	cbz	r0, 23f12f4 <_ZN14Adafruit_SHT315beginEh+0x22>
 23f12ec:	4631      	mov	r1, r6
 23f12ee:	68a2      	ldr	r2, [r4, #8]
 23f12f0:	f7fe fdbf 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f12f4:	2101      	movs	r1, #1
 23f12f6:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f12f8:	60e5      	str	r5, [r4, #12]
  if (!i2c_dev->begin()) {
 23f12fa:	f7fe fdd6 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23f12fe:	b150      	cbz	r0, 23f1316 <_ZN14Adafruit_SHT315beginEh+0x44>
  reset();
 23f1300:	4620      	mov	r0, r4
 23f1302:	f7ff ffdc 	bl	23f12be <_ZN14Adafruit_SHT315resetEv>
  return readStatus() != 0xFFFF;
 23f1306:	4620      	mov	r0, r4
 23f1308:	f7ff ffc7 	bl	23f129a <_ZN14Adafruit_SHT3110readStatusEv>
 23f130c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f1310:	1ac0      	subs	r0, r0, r3
 23f1312:	bf18      	it	ne
 23f1314:	2001      	movne	r0, #1
}
 23f1316:	bd70      	pop	{r4, r5, r6, pc}

023f1318 <_ZN14Adafruit_SHT3111readTempHumEv>:
bool Adafruit_SHT31::readTempHum(void) {
 23f1318:	b513      	push	{r0, r1, r4, lr}
 23f131a:	4604      	mov	r4, r0
  writeCommand(SHT31_MEAS_HIGHREP);
 23f131c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 23f1320:	f7ff ffa9 	bl	23f1276 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(20);
 23f1324:	2014      	movs	r0, #20
 23f1326:	f006 fcad 	bl	23f7c84 <delay>
  i2c_dev->read(readbuffer, sizeof(readbuffer));
 23f132a:	2301      	movs	r3, #1
 23f132c:	2206      	movs	r2, #6
 23f132e:	4669      	mov	r1, sp
 23f1330:	68e0      	ldr	r0, [r4, #12]
 23f1332:	f7fe fdf9 	bl	23eff28 <_ZN18Adafruit_I2CDevice4readEPhjb>
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f1336:	4668      	mov	r0, sp
 23f1338:	f7ff ff6e 	bl	23f1218 <_ZL4crc8PKhi.constprop.0>
 23f133c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 23f1340:	4281      	cmp	r1, r0
 23f1342:	d12f      	bne.n	23f13a4 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
      readbuffer[5] != crc8(readbuffer + 3, 2))
 23f1344:	f10d 0003 	add.w	r0, sp, #3
 23f1348:	f7ff ff66 	bl	23f1218 <_ZL4crc8PKhi.constprop.0>
 23f134c:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f1350:	4281      	cmp	r1, r0
 23f1352:	d127      	bne.n	23f13a4 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f1354:	f241 1217 	movw	r2, #4375	; 0x1117
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f1358:	f8bd 3000 	ldrh.w	r3, [sp]
  temp = (float)stemp / 100.0f;
 23f135c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23f13a8 <_ZN14Adafruit_SHT3111readTempHumEv+0x90>
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f1360:	ba5b      	rev16	r3, r3
 23f1362:	b29b      	uxth	r3, r3
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f1364:	4353      	muls	r3, r2
 23f1366:	139b      	asrs	r3, r3, #14
 23f1368:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 23f136c:	3b14      	subs	r3, #20
  temp = (float)stemp / 100.0f;
 23f136e:	ee07 3a90 	vmov	s15, r3
  shum = (625 * shum) >> 12;
 23f1372:	f240 2271 	movw	r2, #625	; 0x271
  temp = (float)stemp / 100.0f;
 23f1376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  shum = (625 * shum) >> 12;
 23f137a:	f8bd 3003 	ldrh.w	r3, [sp, #3]
  temp = (float)stemp / 100.0f;
 23f137e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  shum = (625 * shum) >> 12;
 23f1382:	ba5b      	rev16	r3, r3
 23f1384:	b29b      	uxth	r3, r3
 23f1386:	4353      	muls	r3, r2
 23f1388:	0b1b      	lsrs	r3, r3, #12
  humidity = (float)shum / 100.0f;
 23f138a:	ee07 3a90 	vmov	s15, r3
 23f138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  temp = (float)stemp / 100.0f;
 23f1392:	edc4 6a01 	vstr	s13, [r4, #4]
  humidity = (float)shum / 100.0f;
 23f1396:	eec7 6a87 	vdiv.f32	s13, s15, s14
  return true;
 23f139a:	2001      	movs	r0, #1
  humidity = (float)shum / 100.0f;
 23f139c:	edc4 6a00 	vstr	s13, [r4]
}
 23f13a0:	b002      	add	sp, #8
 23f13a2:	bd10      	pop	{r4, pc}
    return false;
 23f13a4:	2000      	movs	r0, #0
 23f13a6:	e7fb      	b.n	23f13a0 <_ZN14Adafruit_SHT3111readTempHumEv+0x88>
 23f13a8:	42c80000 	.word	0x42c80000

023f13ac <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
 23f13ac:	b510      	push	{r4, lr}
 23f13ae:	4604      	mov	r4, r0
  if (!readTempHum())
 23f13b0:	f7ff ffb2 	bl	23f1318 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f13b4:	b110      	cbz	r0, 23f13bc <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
 23f13b6:	ed94 0a01 	vldr	s0, [r4, #4]
}
 23f13ba:	bd10      	pop	{r4, pc}
    return NAN;
 23f13bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f13c4 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
 23f13c0:	e7fb      	b.n	23f13ba <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
 23f13c2:	bf00      	nop
 23f13c4:	7fc00000 	.word	0x7fc00000

023f13c8 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
 23f13c8:	b510      	push	{r4, lr}
 23f13ca:	4604      	mov	r4, r0
  if (!readTempHum())
 23f13cc:	f7ff ffa4 	bl	23f1318 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f13d0:	b110      	cbz	r0, 23f13d8 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
 23f13d2:	ed94 0a00 	vldr	s0, [r4]
}
 23f13d6:	bd10      	pop	{r4, pc}
    return NAN;
 23f13d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f13e0 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
 23f13dc:	e7fb      	b.n	23f13d6 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
 23f13de:	bf00      	nop
 23f13e0:	7fc00000 	.word	0x7fc00000

023f13e4 <_ZN15Adafruit_SI1145C1Ev>:
#include "Adafruit_SI1145.h"
/**
 * @brief Construct a new Adafruit_SI1145::Adafruit_SI1145 object
 *
 */
Adafruit_SI1145::Adafruit_SI1145() : m_pBus(&Wire), _addr(SI1145_ADDR) {}
 23f13e4:	b510      	push	{r4, lr}
 23f13e6:	4604      	mov	r4, r0
 23f13e8:	f008 fd80 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23f13ec:	2360      	movs	r3, #96	; 0x60
 23f13ee:	6020      	str	r0, [r4, #0]
 23f13f0:	7123      	strb	r3, [r4, #4]
 23f13f2:	4620      	mov	r0, r4
 23f13f4:	bd10      	pop	{r4, pc}

023f13f6 <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t Adafruit_SI1145::read8(uint8_t reg) {
 23f13f6:	b538      	push	{r3, r4, r5, lr}
 23f13f8:	4604      	mov	r4, r0
 23f13fa:	460d      	mov	r5, r1
  m_pBus->beginTransmission(_addr);
 23f13fc:	7901      	ldrb	r1, [r0, #4]
 23f13fe:	6800      	ldr	r0, [r0, #0]
 23f1400:	f007 fa2e 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write((uint8_t)reg);
 23f1404:	6820      	ldr	r0, [r4, #0]
 23f1406:	4629      	mov	r1, r5
 23f1408:	6803      	ldr	r3, [r0, #0]
 23f140a:	689b      	ldr	r3, [r3, #8]
 23f140c:	4798      	blx	r3
  m_pBus->endTransmission();
 23f140e:	6820      	ldr	r0, [r4, #0]
 23f1410:	f007 fa31 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom((uint8_t)_addr, (uint8_t)1);
 23f1414:	2201      	movs	r2, #1
 23f1416:	7921      	ldrb	r1, [r4, #4]
 23f1418:	6820      	ldr	r0, [r4, #0]
 23f141a:	f007 fa1e 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
  return m_pBus->read();
 23f141e:	6820      	ldr	r0, [r4, #0]
 23f1420:	6803      	ldr	r3, [r0, #0]
 23f1422:	695b      	ldr	r3, [r3, #20]
 23f1424:	4798      	blx	r3
}
 23f1426:	b2c0      	uxtb	r0, r0
 23f1428:	bd38      	pop	{r3, r4, r5, pc}

023f142a <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
 23f142a:	b538      	push	{r3, r4, r5, lr}
 23f142c:	4604      	mov	r4, r0
 23f142e:	460d      	mov	r5, r1
  uint16_t ret;

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f1430:	7901      	ldrb	r1, [r0, #4]
 23f1432:	6800      	ldr	r0, [r0, #0]
 23f1434:	f007 fa14 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(a);                 // sends register address to read from
 23f1438:	6820      	ldr	r0, [r4, #0]
 23f143a:	4629      	mov	r1, r5
 23f143c:	6803      	ldr	r3, [r0, #0]
 23f143e:	689b      	ldr	r3, [r3, #8]
 23f1440:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f1442:	6820      	ldr	r0, [r4, #0]
 23f1444:	f007 fa17 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom(_addr, (uint8_t)2); // send data n-bytes read
 23f1448:	2202      	movs	r2, #2
 23f144a:	7921      	ldrb	r1, [r4, #4]
 23f144c:	6820      	ldr	r0, [r4, #0]
 23f144e:	f007 fa04 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
  ret = m_pBus->read();                   // receive DATA
 23f1452:	6820      	ldr	r0, [r4, #0]
 23f1454:	6803      	ldr	r3, [r0, #0]
 23f1456:	695b      	ldr	r3, [r3, #20]
 23f1458:	4798      	blx	r3
 23f145a:	4605      	mov	r5, r0
  ret |= (uint16_t)m_pBus->read() << 8;   // receive DATA
 23f145c:	6820      	ldr	r0, [r4, #0]
 23f145e:	6803      	ldr	r3, [r0, #0]
 23f1460:	695b      	ldr	r3, [r3, #20]
 23f1462:	4798      	blx	r3
 23f1464:	ea45 2000 	orr.w	r0, r5, r0, lsl #8

  return ret;
}
 23f1468:	b280      	uxth	r0, r0
 23f146a:	bd38      	pop	{r3, r4, r5, pc}

023f146c <_ZN15Adafruit_SI11456readUVEv>:
uint16_t Adafruit_SI1145::readUV(void) { return read16(0x2C); }
 23f146c:	212c      	movs	r1, #44	; 0x2c
 23f146e:	f7ff bfdc 	b.w	23f142a <_ZN15Adafruit_SI11456read16Eh>

023f1472 <_ZN15Adafruit_SI114511readVisibleEv>:
uint16_t Adafruit_SI1145::readVisible(void) { return read16(0x22); }
 23f1472:	2122      	movs	r1, #34	; 0x22
 23f1474:	f7ff bfd9 	b.w	23f142a <_ZN15Adafruit_SI11456read16Eh>

023f1478 <_ZN15Adafruit_SI11456readIREv>:
uint16_t Adafruit_SI1145::readIR(void) { return read16(0x24); }
 23f1478:	2124      	movs	r1, #36	; 0x24
 23f147a:	f7ff bfd6 	b.w	23f142a <_ZN15Adafruit_SI11456read16Eh>

023f147e <_ZN15Adafruit_SI11456write8Ehh>:

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
 23f147e:	b570      	push	{r4, r5, r6, lr}
 23f1480:	4604      	mov	r4, r0
 23f1482:	460e      	mov	r6, r1
 23f1484:	4615      	mov	r5, r2

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f1486:	7901      	ldrb	r1, [r0, #4]
 23f1488:	6800      	ldr	r0, [r0, #0]
 23f148a:	f007 f9e9 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(reg);               // sends register address to write
 23f148e:	6820      	ldr	r0, [r4, #0]
 23f1490:	4631      	mov	r1, r6
 23f1492:	6803      	ldr	r3, [r0, #0]
 23f1494:	689b      	ldr	r3, [r3, #8]
 23f1496:	4798      	blx	r3
  m_pBus->write(val);               // sends value
 23f1498:	6820      	ldr	r0, [r4, #0]
 23f149a:	4629      	mov	r1, r5
 23f149c:	6803      	ldr	r3, [r0, #0]
 23f149e:	689b      	ldr	r3, [r3, #8]
 23f14a0:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f14a2:	6820      	ldr	r0, [r4, #0]
}
 23f14a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m_pBus->endTransmission();        // end transmission
 23f14a8:	f007 b9e5 	b.w	23f8876 <_ZN7TwoWire15endTransmissionEv>

023f14ac <_ZN15Adafruit_SI11455resetEv>:
void Adafruit_SI1145::reset() {
 23f14ac:	b510      	push	{r4, lr}
 23f14ae:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
 23f14b0:	2200      	movs	r2, #0
 23f14b2:	2108      	movs	r1, #8
 23f14b4:	f7ff ffe3 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
 23f14b8:	4620      	mov	r0, r4
 23f14ba:	2200      	movs	r2, #0
 23f14bc:	2109      	movs	r1, #9
 23f14be:	f7ff ffde 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
 23f14c2:	4620      	mov	r0, r4
 23f14c4:	2200      	movs	r2, #0
 23f14c6:	2104      	movs	r1, #4
 23f14c8:	f7ff ffd9 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
 23f14cc:	4620      	mov	r0, r4
 23f14ce:	2200      	movs	r2, #0
 23f14d0:	2105      	movs	r1, #5
 23f14d2:	f7ff ffd4 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
 23f14d6:	4620      	mov	r0, r4
 23f14d8:	2200      	movs	r2, #0
 23f14da:	2106      	movs	r1, #6
 23f14dc:	f7ff ffcf 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
 23f14e0:	4620      	mov	r0, r4
 23f14e2:	2200      	movs	r2, #0
 23f14e4:	2103      	movs	r1, #3
 23f14e6:	f7ff ffca 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
 23f14ea:	4620      	mov	r0, r4
 23f14ec:	22ff      	movs	r2, #255	; 0xff
 23f14ee:	2121      	movs	r1, #33	; 0x21
 23f14f0:	f7ff ffc5 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_RESET);
 23f14f4:	2201      	movs	r2, #1
 23f14f6:	2118      	movs	r1, #24
 23f14f8:	4620      	mov	r0, r4
 23f14fa:	f7ff ffc0 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
 23f14fe:	200a      	movs	r0, #10
 23f1500:	f006 fbc0 	bl	23f7c84 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
 23f1504:	4620      	mov	r0, r4
 23f1506:	2217      	movs	r2, #23
 23f1508:	2107      	movs	r1, #7
 23f150a:	f7ff ffb8 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
}
 23f150e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23f1512:	200a      	movs	r0, #10
 23f1514:	f006 bbb6 	b.w	23f7c84 <delay>

023f1518 <_ZN15Adafruit_SI114510writeParamEhh>:
uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
 23f1518:	b538      	push	{r3, r4, r5, lr}
 23f151a:	4604      	mov	r4, r0
 23f151c:	460d      	mov	r5, r1
  write8(SI1145_REG_PARAMWR, v);
 23f151e:	2117      	movs	r1, #23
 23f1520:	f7ff ffad 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
 23f1524:	4620      	mov	r0, r4
 23f1526:	2118      	movs	r1, #24
 23f1528:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
 23f152c:	f7ff ffa7 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
 23f1530:	4620      	mov	r0, r4
}
 23f1532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read8(SI1145_REG_PARAMRD);
 23f1536:	212e      	movs	r1, #46	; 0x2e
 23f1538:	f7ff bf5d 	b.w	23f13f6 <_ZN15Adafruit_SI11455read8Eh>

023f153c <_ZN15Adafruit_SI11455beginEhP7TwoWire>:
boolean Adafruit_SI1145::begin(uint8_t addr, TwoWire *pBus) {
 23f153c:	b510      	push	{r4, lr}
 23f153e:	4604      	mov	r4, r0
 23f1540:	4610      	mov	r0, r2
  _addr = addr;
 23f1542:	7121      	strb	r1, [r4, #4]
  m_pBus = pBus;
 23f1544:	6022      	str	r2, [r4, #0]
  m_pBus->begin();
 23f1546:	f007 f961 	bl	23f880c <_ZN7TwoWire5beginEv>
  uint8_t id = read8(SI1145_REG_PARTID);
 23f154a:	2100      	movs	r1, #0
 23f154c:	4620      	mov	r0, r4
 23f154e:	f7ff ff52 	bl	23f13f6 <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45)
 23f1552:	2845      	cmp	r0, #69	; 0x45
 23f1554:	d172      	bne.n	23f163c <_ZN15Adafruit_SI11455beginEhP7TwoWire+0x100>
  reset();
 23f1556:	4620      	mov	r0, r4
 23f1558:	f7ff ffa8 	bl	23f14ac <_ZN15Adafruit_SI11455resetEv>
  write8(SI1145_REG_UCOEFF0, 0x29);
 23f155c:	2229      	movs	r2, #41	; 0x29
 23f155e:	2113      	movs	r1, #19
 23f1560:	4620      	mov	r0, r4
 23f1562:	f7ff ff8c 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
 23f1566:	2289      	movs	r2, #137	; 0x89
 23f1568:	2114      	movs	r1, #20
 23f156a:	4620      	mov	r0, r4
 23f156c:	f7ff ff87 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
 23f1570:	2202      	movs	r2, #2
 23f1572:	2115      	movs	r1, #21
 23f1574:	4620      	mov	r0, r4
 23f1576:	f7ff ff82 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
 23f157a:	2200      	movs	r2, #0
 23f157c:	2116      	movs	r1, #22
 23f157e:	4620      	mov	r0, r4
 23f1580:	f7ff ff7d 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_CHLIST,
 23f1584:	22b1      	movs	r2, #177	; 0xb1
 23f1586:	2101      	movs	r1, #1
 23f1588:	4620      	mov	r0, r4
 23f158a:	f7ff ffc5 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);
 23f158e:	2201      	movs	r2, #1
 23f1590:	2103      	movs	r1, #3
 23f1592:	4620      	mov	r0, r4
 23f1594:	f7ff ff73 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);
 23f1598:	2201      	movs	r2, #1
 23f159a:	2104      	movs	r1, #4
 23f159c:	4620      	mov	r0, r4
 23f159e:	f7ff ff6e 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
 23f15a2:	2203      	movs	r2, #3
 23f15a4:	210f      	movs	r1, #15
 23f15a6:	4620      	mov	r0, r4
 23f15a8:	f7ff ff69 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
 23f15ac:	2203      	movs	r2, #3
 23f15ae:	2107      	movs	r1, #7
 23f15b0:	4620      	mov	r0, r4
 23f15b2:	f7ff ffb1 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
 23f15b6:	2201      	movs	r2, #1
 23f15b8:	2102      	movs	r1, #2
 23f15ba:	4620      	mov	r0, r4
 23f15bc:	f7ff ffac 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
 23f15c0:	2200      	movs	r2, #0
 23f15c2:	210b      	movs	r1, #11
 23f15c4:	4620      	mov	r0, r4
 23f15c6:	f7ff ffa7 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f15ca:	2270      	movs	r2, #112	; 0x70
 23f15cc:	210a      	movs	r1, #10
 23f15ce:	4620      	mov	r0, r4
 23f15d0:	f7ff ffa2 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCMISC,
 23f15d4:	2224      	movs	r2, #36	; 0x24
 23f15d6:	210c      	movs	r1, #12
 23f15d8:	4620      	mov	r0, r4
 23f15da:	f7ff ff9d 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);
 23f15de:	2200      	movs	r2, #0
 23f15e0:	210e      	movs	r1, #14
 23f15e2:	4620      	mov	r0, r4
 23f15e4:	f7ff ff98 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
 23f15e8:	2200      	movs	r2, #0
 23f15ea:	211e      	movs	r1, #30
 23f15ec:	4620      	mov	r0, r4
 23f15ee:	f7ff ff93 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f15f2:	2270      	movs	r2, #112	; 0x70
 23f15f4:	211d      	movs	r1, #29
 23f15f6:	4620      	mov	r0, r4
 23f15f8:	f7ff ff8e 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
 23f15fc:	2220      	movs	r2, #32
 23f15fe:	211f      	movs	r1, #31
 23f1600:	4620      	mov	r0, r4
 23f1602:	f7ff ff89 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
 23f1606:	2200      	movs	r2, #0
 23f1608:	2111      	movs	r1, #17
 23f160a:	4620      	mov	r0, r4
 23f160c:	f7ff ff84 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f1610:	2270      	movs	r2, #112	; 0x70
 23f1612:	2110      	movs	r1, #16
 23f1614:	4620      	mov	r0, r4
 23f1616:	f7ff ff7f 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
 23f161a:	2220      	movs	r2, #32
 23f161c:	2112      	movs	r1, #18
 23f161e:	4620      	mov	r0, r4
 23f1620:	f7ff ff7a 	bl	23f1518 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
 23f1624:	22ff      	movs	r2, #255	; 0xff
 23f1626:	2108      	movs	r1, #8
 23f1628:	4620      	mov	r0, r4
 23f162a:	f7ff ff28 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
 23f162e:	4620      	mov	r0, r4
 23f1630:	220f      	movs	r2, #15
 23f1632:	2118      	movs	r1, #24
 23f1634:	f7ff ff23 	bl	23f147e <_ZN15Adafruit_SI11456write8Ehh>
 23f1638:	2001      	movs	r0, #1
}
 23f163a:	bd10      	pop	{r4, pc}
    return false; // look for SI1145
 23f163c:	2000      	movs	r0, #0
 23f163e:	e7fc      	b.n	23f163a <_ZN15Adafruit_SI11455beginEhP7TwoWire+0xfe>

023f1640 <_ZN15Adafruit_SI11455beginEP7TwoWire>:
boolean Adafruit_SI1145::begin(TwoWire *pBus) {
 23f1640:	460a      	mov	r2, r1
  return begin(SI1145_ADDR, pBus);
 23f1642:	2160      	movs	r1, #96	; 0x60
 23f1644:	f7ff bf7a 	b.w	23f153c <_ZN15Adafruit_SI11455beginEhP7TwoWire>

023f1648 <_ZN16Adafruit_SSD1306D1Ev>:
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f1648:	b510      	push	{r4, lr}
 23f164a:	4b04      	ldr	r3, [pc, #16]	; (23f165c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 23f164c:	4604      	mov	r4, r0
 23f164e:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23f1650:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f1652:	b108      	cbz	r0, 23f1658 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 23f1654:	f006 fa1a 	bl	23f7a8c <free>
    buffer = NULL;
  }
}
 23f1658:	4620      	mov	r0, r4
 23f165a:	bd10      	pop	{r4, pc}
 23f165c:	023ff434 	.word	0x023ff434

023f1660 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f1660:	b510      	push	{r4, lr}
 23f1662:	4604      	mov	r4, r0
}
 23f1664:	f7ff fff0 	bl	23f1648 <_ZN16Adafruit_SSD1306D1Ev>
 23f1668:	4620      	mov	r0, r4
 23f166a:	2174      	movs	r1, #116	; 0x74
 23f166c:	f7f3 fdd1 	bl	23e5212 <_ZdlPvj>
 23f1670:	4620      	mov	r0, r4
 23f1672:	bd10      	pop	{r4, pc}

023f1674 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f1674:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23f1676:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f1678:	db4b      	blt.n	23f1712 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f167a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23f167e:	428c      	cmp	r4, r1
 23f1680:	dd47      	ble.n	23f1712 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f1682:	2a00      	cmp	r2, #0
 23f1684:	db45      	blt.n	23f1712 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f1686:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23f168a:	4294      	cmp	r4, r2
 23f168c:	dd41      	ble.n	23f1712 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23f168e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23f1690:	2c02      	cmp	r4, #2
 23f1692:	d01f      	beq.n	23f16d4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
 23f1694:	2c03      	cmp	r4, #3
 23f1696:	d026      	beq.n	23f16e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
 23f1698:	2c01      	cmp	r4, #1
 23f169a:	d104      	bne.n	23f16a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 23f169c:	43d2      	mvns	r2, r2
 23f169e:	8904      	ldrh	r4, [r0, #8]
 23f16a0:	4414      	add	r4, r2
      break;
 23f16a2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23f16a4:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
 23f16a6:	2b01      	cmp	r3, #1
 23f16a8:	d023      	beq.n	23f16f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
 23f16aa:	2b02      	cmp	r3, #2
 23f16ac:	d032      	beq.n	23f1714 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
 23f16ae:	bb83      	cbnz	r3, 23f1712 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23f16b0:	4613      	mov	r3, r2
 23f16b2:	2a00      	cmp	r2, #0
 23f16b4:	8904      	ldrh	r4, [r0, #8]
 23f16b6:	bfb8      	it	lt
 23f16b8:	1dd3      	addlt	r3, r2, #7
 23f16ba:	10db      	asrs	r3, r3, #3
 23f16bc:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f16c0:	2301      	movs	r3, #1
 23f16c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f16c4:	f002 0207 	and.w	r2, r2, #7
 23f16c8:	4093      	lsls	r3, r2
 23f16ca:	5c42      	ldrb	r2, [r0, r1]
 23f16cc:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f16d0:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
 23f16d2:	e01e      	b.n	23f1712 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      y = HEIGHT - y - 1;
 23f16d4:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23f16d6:	8904      	ldrh	r4, [r0, #8]
 23f16d8:	3c01      	subs	r4, #1
 23f16da:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23f16dc:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23f16de:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23f16e0:	4422      	add	r2, r4
 23f16e2:	b212      	sxth	r2, r2
      break;
 23f16e4:	e7df      	b.n	23f16a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23f16e6:	8944      	ldrh	r4, [r0, #10]
 23f16e8:	3c01      	subs	r4, #1
 23f16ea:	1a64      	subs	r4, r4, r1
      break;
 23f16ec:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23f16ee:	b222      	sxth	r2, r4
      break;
 23f16f0:	e7d9      	b.n	23f16a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23f16f2:	4613      	mov	r3, r2
 23f16f4:	2a00      	cmp	r2, #0
 23f16f6:	8904      	ldrh	r4, [r0, #8]
 23f16f8:	bfb8      	it	lt
 23f16fa:	1dd3      	addlt	r3, r2, #7
 23f16fc:	10db      	asrs	r3, r3, #3
 23f16fe:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f1702:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f1704:	f002 0007 	and.w	r0, r2, #7
 23f1708:	2201      	movs	r2, #1
 23f170a:	4082      	lsls	r2, r0
 23f170c:	5c58      	ldrb	r0, [r3, r1]
 23f170e:	4302      	orrs	r2, r0
 23f1710:	545a      	strb	r2, [r3, r1]
}
 23f1712:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f1714:	4613      	mov	r3, r2
 23f1716:	2a00      	cmp	r2, #0
 23f1718:	8904      	ldrh	r4, [r0, #8]
 23f171a:	bfb8      	it	lt
 23f171c:	1dd3      	addlt	r3, r2, #7
 23f171e:	10db      	asrs	r3, r3, #3
 23f1720:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f1724:	2301      	movs	r3, #1
 23f1726:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f1728:	f002 0207 	and.w	r2, r2, #7
 23f172c:	fa03 f202 	lsl.w	r2, r3, r2
 23f1730:	5c43      	ldrb	r3, [r0, r1]
 23f1732:	405a      	eors	r2, r3
 23f1734:	e7cc      	b.n	23f16d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

023f1738 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 23f1738:	b570      	push	{r4, r5, r6, lr}
 23f173a:	4604      	mov	r4, r0
 23f173c:	461d      	mov	r5, r3
      wireClk(clkDuring), restoreClk(clkAfter)
 23f173e:	2600      	movs	r6, #0
 23f1740:	f7fe fece 	bl	23f04e0 <_ZN12Adafruit_GFXC1Ess>
 23f1744:	4b11      	ldr	r3, [pc, #68]	; (23f178c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
 23f1746:	6266      	str	r6, [r4, #36]	; 0x24
 23f1748:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
 23f174a:	b915      	cbnz	r5, 23f1752 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 23f174c:	f008 fbce 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23f1750:	4605      	mov	r5, r0
      wireClk(clkDuring), restoreClk(clkAfter)
 23f1752:	23ff      	movs	r3, #255	; 0xff
 23f1754:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f1758:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 23f175c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23f1760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 23f1764:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 23f1768:	9b05      	ldr	r3, [sp, #20]
}
 23f176a:	4620      	mov	r0, r4
      wireClk(clkDuring), restoreClk(clkAfter)
 23f176c:	65a3      	str	r3, [r4, #88]	; 0x58
 23f176e:	9b06      	ldr	r3, [sp, #24]
 23f1770:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
 23f1774:	65e3      	str	r3, [r4, #92]	; 0x5c
  {
 23f1776:	4b06      	ldr	r3, [pc, #24]	; (23f1790 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
 23f1778:	86a2      	strh	r2, [r4, #52]	; 0x34
 23f177a:	6663      	str	r3, [r4, #100]	; 0x64
 23f177c:	2301      	movs	r3, #1
 23f177e:	66e6      	str	r6, [r4, #108]	; 0x6c
 23f1780:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f1784:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
}
 23f1788:	bd70      	pop	{r4, r5, r6, pc}
 23f178a:	bf00      	nop
 23f178c:	023ff434 	.word	0x023ff434
 23f1790:	023fe7a0 	.word	0x023fe7a0

023f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f1794:	b570      	push	{r4, r5, r6, lr}
 23f1796:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f1798:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f179a:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f179c:	b190      	cbz	r0, 23f17c4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 23f179e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f17a2:	f007 f861 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f17a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f17a8:	2100      	movs	r1, #0
 23f17aa:	6803      	ldr	r3, [r0, #0]
 23f17ac:	689b      	ldr	r3, [r3, #8]
 23f17ae:	4798      	blx	r3
    WIRE_WRITE(c);
 23f17b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f17b2:	4629      	mov	r1, r5
 23f17b4:	6803      	ldr	r3, [r0, #0]
 23f17b6:	689b      	ldr	r3, [r3, #8]
 23f17b8:	4798      	blx	r3
    wire->endTransmission();
 23f17ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 23f17bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wire->endTransmission();
 23f17c0:	f007 b859 	b.w	23f8876 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f17c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f17c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f17c8:	6813      	ldr	r3, [r2, #0]
 23f17ca:	ea23 0300 	bic.w	r3, r3, r0
 23f17ce:	6013      	str	r3, [r2, #0]
  if (spi) {
 23f17d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f17d2:	b118      	cbz	r0, 23f17dc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x48>
}
 23f17d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)spi->transfer(d);
 23f17d8:	f007 bdb0 	b.w	23f933c <_ZN8SPIClass8transferEh>
 23f17dc:	2208      	movs	r2, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f17de:	2180      	movs	r1, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f17e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f17e2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 23f17e4:	6818      	ldr	r0, [r3, #0]
      if (d & bit)
 23f17e6:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
 23f17e8:	bf14      	ite	ne
 23f17ea:	4330      	orrne	r0, r6
        *mosiPort &= ~mosiPinMask;
 23f17ec:	43b0      	biceq	r0, r6
 23f17ee:	6018      	str	r0, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f17f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f17f2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f17f4:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f17f6:	3a01      	subs	r2, #1
      *clkPort |= clkPinMask;  // Clock high
 23f17f8:	ea43 0306 	orr.w	r3, r3, r6
 23f17fc:	6003      	str	r3, [r0, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f17fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f1800:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f1802:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1804:	ea4f 0151 	mov.w	r1, r1, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f1808:	ea23 0306 	bic.w	r3, r3, r6
 23f180c:	6003      	str	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f180e:	d1e7      	bne.n	23f17e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4c>
}
 23f1810:	bd70      	pop	{r4, r5, r6, pc}

023f1812 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f1812:	b538      	push	{r3, r4, r5, lr}
 23f1814:	4604      	mov	r4, r0
  TRANSACTION_START
 23f1816:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f1818:	460d      	mov	r5, r1
  TRANSACTION_START
 23f181a:	b180      	cbz	r0, 23f183e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
 23f181c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f181e:	f006 fff1 	bl	23f8804 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 23f1822:	2d00      	cmp	r5, #0
 23f1824:	4620      	mov	r0, r4
 23f1826:	bf14      	ite	ne
 23f1828:	21a7      	movne	r1, #167	; 0xa7
 23f182a:	21a6      	moveq	r1, #166	; 0xa6
 23f182c:	f7ff ffb2 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f1830:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1832:	b188      	cbz	r0, 23f1858 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 23f1834:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f1836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f183a:	f006 bfe3 	b.w	23f8804 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f183e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1840:	b118      	cbz	r0, 23f184a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 23f1842:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f1846:	f007 fd0b 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f184a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f184c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f184e:	6813      	ldr	r3, [r2, #0]
 23f1850:	ea23 0301 	bic.w	r3, r3, r1
 23f1854:	6013      	str	r3, [r2, #0]
 23f1856:	e7e4      	b.n	23f1822 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
 23f1858:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f185a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f185c:	6813      	ldr	r3, [r2, #0]
 23f185e:	430b      	orrs	r3, r1
 23f1860:	6013      	str	r3, [r2, #0]
 23f1862:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1864:	b118      	cbz	r0, 23f186e <_ZN16Adafruit_SSD130613invertDisplayEb+0x5c>
}
 23f1866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f186a:	f007 bcdf 	b.w	23f922c <_ZN8SPIClass14endTransactionEv>
}
 23f186e:	bd38      	pop	{r3, r4, r5, pc}

023f1870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f1870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1872:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f1874:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f1876:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f1878:	188f      	adds	r7, r1, r2
 23f187a:	b340      	cbz	r0, 23f18ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5e>
    wire->beginTransmission(i2caddr);
 23f187c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f1880:	f006 fff2 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f1884:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1886:	2100      	movs	r1, #0
 23f1888:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f188a:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f188c:	689b      	ldr	r3, [r3, #8]
 23f188e:	4798      	blx	r3
    while (n--) {
 23f1890:	42bd      	cmp	r5, r7
        wire->endTransmission();
 23f1892:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--) {
 23f1894:	d017      	beq.n	23f18c6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x56>
      if (bytesOut >= WIRE_MAX) {
 23f1896:	2e1f      	cmp	r6, #31
 23f1898:	d90c      	bls.n	23f18b4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x44>
        wire->endTransmission();
 23f189a:	f006 ffec 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f189e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f18a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f18a4:	f006 ffe0 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f18a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f18aa:	2100      	movs	r1, #0
 23f18ac:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f18ae:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f18b0:	689b      	ldr	r3, [r3, #8]
 23f18b2:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 23f18b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f18b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f18ba:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f18bc:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 23f18be:	689b      	ldr	r3, [r3, #8]
 23f18c0:	4798      	blx	r3
      bytesOut++;
 23f18c2:	b2b6      	uxth	r6, r6
    while (n--) {
 23f18c4:	e7e4      	b.n	23f1890 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20>
}
 23f18c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 23f18ca:	f006 bfd4 	b.w	23f8876 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f18ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f18d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f18d2:	6813      	ldr	r3, [r2, #0]
 23f18d4:	ea23 0301 	bic.w	r3, r3, r1
 23f18d8:	6013      	str	r3, [r2, #0]
    while (n--)
 23f18da:	42bd      	cmp	r5, r7
 23f18dc:	d026      	beq.n	23f192c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xbc>
  if (spi) {
 23f18de:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
 23f18e0:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f18e4:	b110      	cbz	r0, 23f18ec <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7c>
    (void)spi->transfer(d);
 23f18e6:	f007 fd29 	bl	23f933c <_ZN8SPIClass8transferEh>
 23f18ea:	e7f6      	b.n	23f18da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
 23f18ec:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f18f0:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f18f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f18f4:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f18f8:	681e      	ldr	r6, [r3, #0]
      if (d & bit)
 23f18fa:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f18fc:	bf14      	ite	ne
 23f18fe:	ea46 060c 	orrne.w	r6, r6, ip
        *mosiPort &= ~mosiPinMask;
 23f1902:	ea26 060c 	biceq.w	r6, r6, ip
 23f1906:	601e      	str	r6, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f1908:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f190a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f190c:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f190e:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f1912:	ea43 0302 	orr.w	r3, r3, r2
 23f1916:	6033      	str	r3, [r6, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f1918:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f191a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f191c:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f191e:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f1922:	ea23 0302 	bic.w	r3, r3, r2
 23f1926:	6033      	str	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1928:	d1e3      	bne.n	23f18f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x82>
 23f192a:	e7d6      	b.n	23f18da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
}
 23f192c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f192e <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f192e:	b538      	push	{r3, r4, r5, lr}
 23f1930:	4604      	mov	r4, r0
  TRANSACTION_START
 23f1932:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f1934:	460d      	mov	r5, r1
  TRANSACTION_START
 23f1936:	b168      	cbz	r0, 23f1954 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x26>
 23f1938:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f193a:	f006 ff63 	bl	23f8804 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(c);
 23f193e:	4620      	mov	r0, r4
 23f1940:	4629      	mov	r1, r5
 23f1942:	f7ff ff27 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f1946:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1948:	b188      	cbz	r0, 23f196e <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x40>
 23f194a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f194c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f1950:	f006 bf58 	b.w	23f8804 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f1954:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1956:	b118      	cbz	r0, 23f1960 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x32>
 23f1958:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f195c:	f007 fc80 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f1960:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1962:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1964:	6813      	ldr	r3, [r2, #0]
 23f1966:	ea23 0301 	bic.w	r3, r3, r1
 23f196a:	6013      	str	r3, [r2, #0]
 23f196c:	e7e7      	b.n	23f193e <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x10>
  TRANSACTION_END
 23f196e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1970:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1972:	6813      	ldr	r3, [r2, #0]
 23f1974:	430b      	orrs	r3, r1
 23f1976:	6013      	str	r3, [r2, #0]
 23f1978:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f197a:	b118      	cbz	r0, 23f1984 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x56>
}
 23f197c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f1980:	f007 bc54 	b.w	23f922c <_ZN8SPIClass14endTransactionEv>
}
 23f1984:	bd38      	pop	{r3, r4, r5, pc}

023f1986 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 23f1986:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f198a:	2100      	movs	r1, #0
 23f198c:	1dda      	adds	r2, r3, #7
 23f198e:	bf48      	it	mi
 23f1990:	f103 020e 	addmi.w	r2, r3, #14
 23f1994:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 23f1998:	10d2      	asrs	r2, r2, #3
 23f199a:	435a      	muls	r2, r3
 23f199c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f199e:	f00b b882 	b.w	23fcaa6 <memset>
	...

023f19a4 <_ZN16Adafruit_SSD13065beginEhhbb>:
                             bool periphBegin) {
 23f19a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f19a8:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f19aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                             bool periphBegin) {
 23f19ac:	4604      	mov	r4, r0
 23f19ae:	460f      	mov	r7, r1
 23f19b0:	4615      	mov	r5, r2
 23f19b2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f19b6:	b1c3      	cbz	r3, 23f19ea <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
 23f19b8:	4620      	mov	r0, r4
 23f19ba:	f7ff ffe4 	bl	23f1986 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32) {
 23f19be:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 23f19c2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 23f19c6:	2820      	cmp	r0, #32
 23f19c8:	dc21      	bgt.n	23f1a0e <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f19ca:	2320      	movs	r3, #32
 23f19cc:	2201      	movs	r2, #1
 23f19ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 23f19d2:	2373      	movs	r3, #115	; 0x73
 23f19d4:	3820      	subs	r0, #32
 23f19d6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23f19da:	3973      	subs	r1, #115	; 0x73
 23f19dc:	9300      	str	r3, [sp, #0]
 23f19de:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f19e2:	4bb8      	ldr	r3, [pc, #736]	; (23f1cc4 <_ZN16Adafruit_SSD13065beginEhhbb+0x320>)
 23f19e4:	f340 024f 	sbfx	r2, r0, #1, #16
 23f19e8:	e021      	b.n	23f1a2e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f19ea:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f19ee:	1dd8      	adds	r0, r3, #7
 23f19f0:	bf48      	it	mi
 23f19f2:	f103 000e 	addmi.w	r0, r3, #14
 23f19f6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 23f19fa:	10c0      	asrs	r0, r0, #3
 23f19fc:	4358      	muls	r0, r3
 23f19fe:	f006 f837 	bl	23f7a70 <malloc>
 23f1a02:	62e0      	str	r0, [r4, #44]	; 0x2c
 23f1a04:	2800      	cmp	r0, #0
 23f1a06:	d1d7      	bne.n	23f19b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 23f1a08:	b004      	add	sp, #16
 23f1a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
 23f1a0e:	3840      	subs	r0, #64	; 0x40
 23f1a10:	f3c0 32c0 	ubfx	r2, r0, #15, #1
 23f1a14:	2340      	movs	r3, #64	; 0x40
 23f1a16:	fa02 f280 	sxtah	r2, r2, r0
 23f1a1a:	2001      	movs	r0, #1
 23f1a1c:	e9cd 3001 	strd	r3, r0, [sp, #4]
 23f1a20:	2352      	movs	r3, #82	; 0x52
 23f1a22:	3952      	subs	r1, #82	; 0x52
 23f1a24:	9300      	str	r3, [sp, #0]
 23f1a26:	4ba8      	ldr	r3, [pc, #672]	; (23f1cc8 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>)
 23f1a28:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f1a2c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f1a2e:	4620      	mov	r0, r4
 23f1a30:	f341 014f 	sbfx	r1, r1, #1, #16
 23f1a34:	f7fe fd6a 	bl	23f050c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire) { // Using I2C
 23f1a38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 23f1a3a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
 23f1a3e:	2800      	cmp	r0, #0
 23f1a40:	f000 809a 	beq.w	23f1b78 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d4>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f1a44:	2d00      	cmp	r5, #0
 23f1a46:	f040 8095 	bne.w	23f1b74 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d0>
 23f1a4a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f1a4e:	2b20      	cmp	r3, #32
 23f1a50:	bf0c      	ite	eq
 23f1a52:	253c      	moveq	r5, #60	; 0x3c
 23f1a54:	253d      	movne	r5, #61	; 0x3d
 23f1a56:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
 23f1a5a:	f1b8 0f00 	cmp.w	r8, #0
 23f1a5e:	d001      	beq.n	23f1a64 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      wire->begin();
 23f1a60:	f006 fed4 	bl	23f880c <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0)) {
 23f1a64:	b1fe      	cbz	r6, 23f1aa6 <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
 23f1a66:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f1a6a:	2800      	cmp	r0, #0
 23f1a6c:	db1b      	blt.n	23f1aa6 <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
    pinMode(rstPin, OUTPUT);
 23f1a6e:	2101      	movs	r1, #1
 23f1a70:	b280      	uxth	r0, r0
 23f1a72:	f008 f9b7 	bl	23f9de4 <pinMode>
    digitalWrite(rstPin, HIGH);
 23f1a76:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f1a7a:	2101      	movs	r1, #1
 23f1a7c:	b280      	uxth	r0, r0
 23f1a7e:	f008 f9c2 	bl	23f9e06 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 23f1a82:	2001      	movs	r0, #1
 23f1a84:	f006 f8fe 	bl	23f7c84 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 23f1a88:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f1a8c:	2100      	movs	r1, #0
 23f1a8e:	b280      	uxth	r0, r0
 23f1a90:	f008 f9b9 	bl	23f9e06 <digitalWrite>
    delay(10);                  // Wait 10 ms
 23f1a94:	200a      	movs	r0, #10
 23f1a96:	f006 f8f5 	bl	23f7c84 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 23f1a9a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f1a9e:	2101      	movs	r1, #1
 23f1aa0:	b280      	uxth	r0, r0
 23f1aa2:	f008 f9b0 	bl	23f9e06 <digitalWrite>
  TRANSACTION_START
 23f1aa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1aa8:	2800      	cmp	r0, #0
 23f1aaa:	f000 80e5 	beq.w	23f1c78 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d4>
 23f1aae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f1ab0:	f006 fea8 	bl	23f8804 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 23f1ab4:	2204      	movs	r2, #4
 23f1ab6:	4620      	mov	r0, r4
 23f1ab8:	4984      	ldr	r1, [pc, #528]	; (23f1ccc <_ZN16Adafruit_SSD13065beginEhhbb+0x328>)
 23f1aba:	f7ff fed9 	bl	23f1870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 23f1abe:	8961      	ldrh	r1, [r4, #10]
 23f1ac0:	4620      	mov	r0, r4
 23f1ac2:	3901      	subs	r1, #1
 23f1ac4:	b2c9      	uxtb	r1, r1
 23f1ac6:	f7ff fe65 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 23f1aca:	4981      	ldr	r1, [pc, #516]	; (23f1cd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x32c>)
 23f1acc:	2204      	movs	r2, #4
 23f1ace:	4620      	mov	r0, r4
 23f1ad0:	f7ff fece 	bl	23f1870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 23f1ad4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f1ad8:	4620      	mov	r0, r4
 23f1ada:	2b01      	cmp	r3, #1
 23f1adc:	bf0c      	ite	eq
 23f1ade:	2110      	moveq	r1, #16
 23f1ae0:	2114      	movne	r1, #20
 23f1ae2:	f7ff fe57 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 23f1ae6:	2204      	movs	r2, #4
 23f1ae8:	4620      	mov	r0, r4
 23f1aea:	497a      	ldr	r1, [pc, #488]	; (23f1cd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x330>)
 23f1aec:	f7ff fec0 	bl	23f1870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  contrast = 0x8F;
 23f1af0:	238f      	movs	r3, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f1af2:	4a79      	ldr	r2, [pc, #484]	; (23f1cd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x334>)
  contrast = 0x8F;
 23f1af4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f1af8:	68a3      	ldr	r3, [r4, #8]
 23f1afa:	4293      	cmp	r3, r2
 23f1afc:	f000 80d4 	beq.w	23f1ca8 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
 23f1b00:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 23f1b04:	4293      	cmp	r3, r2
 23f1b06:	f040 80c4 	bne.w	23f1c92 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ee>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f1b0a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
 23f1b0e:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f1b10:	2b01      	cmp	r3, #1
 23f1b12:	bf0c      	ite	eq
 23f1b14:	239f      	moveq	r3, #159	; 0x9f
 23f1b16:	23cf      	movne	r3, #207	; 0xcf
 23f1b18:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  ssd1306_command1(SSD1306_SETCOMPINS);
 23f1b1c:	21da      	movs	r1, #218	; 0xda
 23f1b1e:	4620      	mov	r0, r4
 23f1b20:	f7ff fe38 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(comPins);
 23f1b24:	4629      	mov	r1, r5
 23f1b26:	4620      	mov	r0, r4
 23f1b28:	f7ff fe34 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETCONTRAST);
 23f1b2c:	2181      	movs	r1, #129	; 0x81
 23f1b2e:	4620      	mov	r0, r4
 23f1b30:	f7ff fe30 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(contrast);
 23f1b34:	4620      	mov	r0, r4
 23f1b36:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 23f1b3a:	f7ff fe2b 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 23f1b3e:	21d9      	movs	r1, #217	; 0xd9
 23f1b40:	4620      	mov	r0, r4
 23f1b42:	f7ff fe27 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 23f1b46:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f1b4a:	4620      	mov	r0, r4
 23f1b4c:	2b01      	cmp	r3, #1
 23f1b4e:	bf0c      	ite	eq
 23f1b50:	2122      	moveq	r1, #34	; 0x22
 23f1b52:	21f1      	movne	r1, #241	; 0xf1
 23f1b54:	f7ff fe1e 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 23f1b58:	4620      	mov	r0, r4
 23f1b5a:	2206      	movs	r2, #6
 23f1b5c:	495f      	ldr	r1, [pc, #380]	; (23f1cdc <_ZN16Adafruit_SSD13065beginEhhbb+0x338>)
 23f1b5e:	f7ff fe87 	bl	23f1870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 23f1b62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1b64:	2800      	cmp	r0, #0
 23f1b66:	f000 80a1 	beq.w	23f1cac <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
 23f1b6a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 23f1b6c:	f006 fe4a 	bl	23f8804 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 23f1b70:	2001      	movs	r0, #1
 23f1b72:	e749      	b.n	23f1a08 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f1b74:	b26d      	sxtb	r5, r5
 23f1b76:	e76e      	b.n	23f1a56 <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 23f1b78:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 23f1b7c:	2101      	movs	r1, #1
 23f1b7e:	b280      	uxth	r0, r0
 23f1b80:	f008 f930 	bl	23f9de4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 23f1b84:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 23f1b88:	2101      	movs	r1, #1
 23f1b8a:	b280      	uxth	r0, r0
 23f1b8c:	f008 f92a 	bl	23f9de4 <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
 23f1b90:	f005 f9e8 	bl	23f6f64 <hal_pin_map>
 23f1b94:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f1b98:	4d51      	ldr	r5, [pc, #324]	; (23f1ce0 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>)
 23f1b9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1b9e:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f1ba2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f1ba6:	6423      	str	r3, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
 23f1ba8:	f005 f9dc 	bl	23f6f64 <hal_pin_map>
 23f1bac:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f1bb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1bb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f1bb8:	785b      	ldrb	r3, [r3, #1]
 23f1bba:	6523      	str	r3, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
 23f1bbc:	f005 f9d2 	bl	23f6f64 <hal_pin_map>
 23f1bc0:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 23f1bc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1bc8:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f1bcc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f1bd0:	6463      	str	r3, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f1bd2:	f005 f9c7 	bl	23f6f64 <hal_pin_map>
 23f1bd6:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    SSD1306_DESELECT
 23f1bda:	6c62      	ldr	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f1bdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1be0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f1be4:	785b      	ldrb	r3, [r3, #1]
 23f1be6:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
 23f1be8:	6811      	ldr	r1, [r2, #0]
 23f1bea:	430b      	orrs	r3, r1
 23f1bec:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
 23f1bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1bf0:	b130      	cbz	r0, 23f1c00 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>
      if (periphBegin)
 23f1bf2:	f1b8 0f00 	cmp.w	r8, #0
 23f1bf6:	f43f af35 	beq.w	23f1a64 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
        spi->begin();
 23f1bfa:	f007 fadd 	bl	23f91b8 <_ZN8SPIClass5beginEv>
 23f1bfe:	e731      	b.n	23f1a64 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 23f1c00:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 23f1c04:	2101      	movs	r1, #1
 23f1c06:	b280      	uxth	r0, r0
 23f1c08:	f008 f8ec 	bl	23f9de4 <pinMode>
      pinMode(clkPin, OUTPUT);
 23f1c0c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 23f1c10:	2101      	movs	r1, #1
 23f1c12:	b280      	uxth	r0, r0
 23f1c14:	f008 f8e6 	bl	23f9de4 <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
 23f1c18:	f005 f9a4 	bl	23f6f64 <hal_pin_map>
 23f1c1c:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f1c20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1c24:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f1c28:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f1c2c:	63a3      	str	r3, [r4, #56]	; 0x38
      mosiPinMask = digitalPinToBitMask(mosiPin);
 23f1c2e:	f005 f999 	bl	23f6f64 <hal_pin_map>
 23f1c32:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f1c36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1c3a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f1c3e:	785b      	ldrb	r3, [r3, #1]
 23f1c40:	64a3      	str	r3, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
 23f1c42:	f005 f98f 	bl	23f6f64 <hal_pin_map>
 23f1c46:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 23f1c4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1c4e:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f1c52:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f1c56:	63e3      	str	r3, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f1c58:	f005 f984 	bl	23f6f64 <hal_pin_map>
 23f1c5c:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      *clkPort &= ~clkPinMask; // Clock low
 23f1c60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f1c62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1c66:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f1c6a:	7859      	ldrb	r1, [r3, #1]
 23f1c6c:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
 23f1c6e:	6813      	ldr	r3, [r2, #0]
 23f1c70:	ea23 0301 	bic.w	r3, r3, r1
 23f1c74:	6013      	str	r3, [r2, #0]
 23f1c76:	e6f5      	b.n	23f1a64 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
  TRANSACTION_START
 23f1c78:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1c7a:	b118      	cbz	r0, 23f1c84 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e0>
 23f1c7c:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f1c80:	f007 faee 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f1c84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1c86:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1c88:	6813      	ldr	r3, [r2, #0]
 23f1c8a:	ea23 0301 	bic.w	r3, r3, r1
 23f1c8e:	6013      	str	r3, [r2, #0]
 23f1c90:	e710      	b.n	23f1ab4 <_ZN16Adafruit_SSD13065beginEhhbb+0x110>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
 23f1c92:	4a14      	ldr	r2, [pc, #80]	; (23f1ce4 <_ZN16Adafruit_SSD13065beginEhhbb+0x340>)
 23f1c94:	4293      	cmp	r3, r2
 23f1c96:	d107      	bne.n	23f1ca8 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 23f1c98:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f1c9c:	2b01      	cmp	r3, #1
 23f1c9e:	bf0c      	ite	eq
 23f1ca0:	2310      	moveq	r3, #16
 23f1ca2:	23af      	movne	r3, #175	; 0xaf
 23f1ca4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    comPins = 0x02;
 23f1ca8:	2502      	movs	r5, #2
 23f1caa:	e737      	b.n	23f1b1c <_ZN16Adafruit_SSD13065beginEhhbb+0x178>
  TRANSACTION_END
 23f1cac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1cae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1cb0:	6813      	ldr	r3, [r2, #0]
 23f1cb2:	430b      	orrs	r3, r1
 23f1cb4:	6013      	str	r3, [r2, #0]
 23f1cb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1cb8:	2800      	cmp	r0, #0
 23f1cba:	f43f af59 	beq.w	23f1b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f1cbe:	f007 fab5 	bl	23f922c <_ZN8SPIClass14endTransactionEv>
 23f1cc2:	e755      	b.n	23f1b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f1cc4:	023ff24c 	.word	0x023ff24c
 23f1cc8:	023fef8c 	.word	0x023fef8c
 23f1ccc:	023ff494 	.word	0x023ff494
 23f1cd0:	023ff498 	.word	0x023ff498
 23f1cd4:	023ff49c 	.word	0x023ff49c
 23f1cd8:	00200080 	.word	0x00200080
 23f1cdc:	023ff4a0 	.word	0x023ff4a0
 23f1ce0:	101c0024 	.word	0x101c0024
 23f1ce4:	00100060 	.word	0x00100060

023f1ce8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
                                             uint16_t color) {
 23f1ce8:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f1cea:	2a00      	cmp	r2, #0
                                             uint16_t color) {
 23f1cec:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f1cf0:	db3f      	blt.n	23f1d72 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 23f1cf2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f1cf6:	4294      	cmp	r4, r2
 23f1cf8:	dd3b      	ble.n	23f1d72 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if (x < 0) {                  // Clip left
 23f1cfa:	2900      	cmp	r1, #0
      w += x;
 23f1cfc:	bfbe      	ittt	lt
 23f1cfe:	185b      	addlt	r3, r3, r1
      x = 0;
 23f1d00:	2100      	movlt	r1, #0
      w += x;
 23f1d02:	b21b      	sxthlt	r3, r3
    if ((x + w) > WIDTH) { // Clip right
 23f1d04:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 23f1d08:	18ce      	adds	r6, r1, r3
 23f1d0a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
 23f1d0c:	bfc4      	itt	gt
 23f1d0e:	1a63      	subgt	r3, r4, r1
 23f1d10:	b21b      	sxthgt	r3, r3
    if (w > 0) { // Proceed only if width is positive
 23f1d12:	2b00      	cmp	r3, #0
 23f1d14:	dd2d      	ble.n	23f1d72 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f1d16:	10d6      	asrs	r6, r2, #3
 23f1d18:	fb14 1106 	smlabb	r1, r4, r6, r1
 23f1d1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch (color) {
 23f1d1e:	2d01      	cmp	r5, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f1d20:	4401      	add	r1, r0
 23f1d22:	f002 0007 	and.w	r0, r2, #7
 23f1d26:	f04f 0201 	mov.w	r2, #1
 23f1d2a:	fa02 f200 	lsl.w	r2, r2, r0
 23f1d2e:	b2d2      	uxtb	r2, r2
      switch (color) {
 23f1d30:	d016      	beq.n	23f1d60 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 23f1d32:	2d02      	cmp	r5, #2
 23f1d34:	d00b      	beq.n	23f1d4e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 23f1d36:	b9e5      	cbnz	r5, 23f1d72 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
        mask = ~mask;
 23f1d38:	43d2      	mvns	r2, r2
 23f1d3a:	440b      	add	r3, r1
 23f1d3c:	b2d2      	uxtb	r2, r2
        while (w--) {
 23f1d3e:	4299      	cmp	r1, r3
 23f1d40:	d017      	beq.n	23f1d72 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ &= mask;
 23f1d42:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f1d46:	4010      	ands	r0, r2
 23f1d48:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f1d4c:	e7f7      	b.n	23f1d3e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 23f1d4e:	440b      	add	r3, r1
        while (w--) {
 23f1d50:	4299      	cmp	r1, r3
 23f1d52:	d00e      	beq.n	23f1d72 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ ^= mask;
 23f1d54:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f1d58:	4050      	eors	r0, r2
 23f1d5a:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f1d5e:	e7f7      	b.n	23f1d50 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 23f1d60:	440b      	add	r3, r1
        while (w--) {
 23f1d62:	4299      	cmp	r1, r3
 23f1d64:	d005      	beq.n	23f1d72 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ |= mask;
 23f1d66:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f1d6a:	4310      	orrs	r0, r2
 23f1d6c:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f1d70:	e7f7      	b.n	23f1d62 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 23f1d72:	bd70      	pop	{r4, r5, r6, pc}

023f1d74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
                                             int16_t __h, uint16_t color) {
 23f1d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f1d76:	2900      	cmp	r1, #0
                                             int16_t __h, uint16_t color) {
 23f1d78:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f1d7c:	db77      	blt.n	23f1e6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 23f1d7e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 23f1d82:	42b1      	cmp	r1, r6
 23f1d84:	da73      	bge.n	23f1e6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
    if (__y < 0) {               // Clip top
 23f1d86:	2a00      	cmp	r2, #0
      __h += __y;
 23f1d88:	bfbe      	ittt	lt
 23f1d8a:	189b      	addlt	r3, r3, r2
      __y = 0;
 23f1d8c:	2200      	movlt	r2, #0
      __h += __y;
 23f1d8e:	b21b      	sxthlt	r3, r3
    if ((__y + __h) > HEIGHT) { // Clip bottom
 23f1d90:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f1d94:	18d7      	adds	r7, r2, r3
 23f1d96:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 23f1d98:	bfc4      	itt	gt
 23f1d9a:	1aa3      	subgt	r3, r4, r2
 23f1d9c:	b21b      	sxthgt	r3, r3
    if (__h > 0) { // Proceed only if height is now positive
 23f1d9e:	2b00      	cmp	r3, #0
 23f1da0:	dd65      	ble.n	23f1e6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f1da2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 23f1da6:	fb16 1604 	smlabb	r6, r6, r4, r1
 23f1daa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if (mod) {
 23f1dac:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
 23f1db0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f1db2:	eb07 0406 	add.w	r4, r7, r6
      if (mod) {
 23f1db6:	d024      	beq.n	23f1e02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 23f1db8:	f1c2 0208 	rsb	r2, r2, #8
 23f1dbc:	b2d2      	uxtb	r2, r2
        if (h < mod)
 23f1dbe:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
 23f1dc0:	bf38      	it	cc
 23f1dc2:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f1dc6:	492c      	ldr	r1, [pc, #176]	; (23f1e78 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          mask &= (0XFF >> (mod - h));
 23f1dc8:	bf38      	it	cc
 23f1dca:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f1dce:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
 23f1dd0:	bf3c      	itt	cc
 23f1dd2:	fa4c fc0e 	asrcc.w	ip, ip, lr
 23f1dd6:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color) {
 23f1dda:	2d01      	cmp	r5, #1
 23f1ddc:	d007      	beq.n	23f1dee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 23f1dde:	2d02      	cmp	r5, #2
 23f1de0:	d02e      	beq.n	23f1e40 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 23f1de2:	b94d      	cbnz	r5, 23f1df8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
          *pBuf &= ~mask;
 23f1de4:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f1de8:	ea2c 0101 	bic.w	r1, ip, r1
 23f1dec:	e003      	b.n	23f1df6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf |= mask;
 23f1dee:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f1df2:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
 23f1df6:	55b9      	strb	r1, [r7, r6]
      if (h >= mod) { // More to go?
 23f1df8:	4293      	cmp	r3, r2
 23f1dfa:	d338      	bcc.n	23f1e6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
        pBuf += WIDTH;
 23f1dfc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 23f1e00:	440c      	add	r4, r1
        h -= mod;
 23f1e02:	1a9a      	subs	r2, r3, r2
 23f1e04:	b2d2      	uxtb	r2, r2
        if (h >= 8) {
 23f1e06:	2a07      	cmp	r2, #7
 23f1e08:	d90e      	bls.n	23f1e28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if (color == SSD1306_INVERSE) {
 23f1e0a:	2d02      	cmp	r5, #2
 23f1e0c:	d11d      	bne.n	23f1e4a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 23f1e0e:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
 23f1e10:	7821      	ldrb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f1e12:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF; // Invert byte
 23f1e14:	43c9      	mvns	r1, r1
 23f1e16:	7021      	strb	r1, [r4, #0]
              pBuf += WIDTH; // Advance pointer 8 rows
 23f1e18:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f1e1c:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f1e1e:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f1e20:	440c      	add	r4, r1
            } while (h >= 8);
 23f1e22:	d8f5      	bhi.n	23f1e10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
              h -= 8;        // Subtract 8 rows from height
 23f1e24:	f002 0207 	and.w	r2, r2, #7
        if (h) { // Do the final partial byte, if necessary
 23f1e28:	b30a      	cbz	r2, 23f1e6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f1e2a:	4b14      	ldr	r3, [pc, #80]	; (23f1e7c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x108>)
          switch (color) {
 23f1e2c:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f1e2e:	5c9b      	ldrb	r3, [r3, r2]
          switch (color) {
 23f1e30:	d01a      	beq.n	23f1e68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf4>
 23f1e32:	2d02      	cmp	r5, #2
 23f1e34:	d01c      	beq.n	23f1e70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfc>
 23f1e36:	b9d5      	cbnz	r5, 23f1e6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
            *pBuf &= ~mask;
 23f1e38:	7822      	ldrb	r2, [r4, #0]
 23f1e3a:	ea22 0303 	bic.w	r3, r2, r3
 23f1e3e:	e015      	b.n	23f1e6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          *pBuf ^= mask;
 23f1e40:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f1e44:	ea81 010c 	eor.w	r1, r1, ip
 23f1e48:	e7d5      	b.n	23f1df6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 23f1e4a:	1e29      	subs	r1, r5, #0
 23f1e4c:	bf18      	it	ne
 23f1e4e:	2101      	movne	r1, #1
 23f1e50:	4613      	mov	r3, r2
 23f1e52:	4249      	negs	r1, r1
 23f1e54:	b2c9      	uxtb	r1, r1
              *pBuf = val;   // Set byte
 23f1e56:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f1e58:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
 23f1e5a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f1e5e:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f1e60:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f1e62:	4434      	add	r4, r6
            } while (h >= 8);
 23f1e64:	d8f7      	bhi.n	23f1e56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe2>
 23f1e66:	e7dd      	b.n	23f1e24 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
            *pBuf |= mask;
 23f1e68:	7822      	ldrb	r2, [r4, #0]
 23f1e6a:	4313      	orrs	r3, r2
            *pBuf ^= mask;
 23f1e6c:	7023      	strb	r3, [r4, #0]
}
 23f1e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
 23f1e70:	7822      	ldrb	r2, [r4, #0]
 23f1e72:	4053      	eors	r3, r2
 23f1e74:	e7fa      	b.n	23f1e6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 23f1e76:	bf00      	nop
 23f1e78:	023ff484 	.word	0x023ff484
 23f1e7c:	023ff48c 	.word	0x023ff48c

023f1e80 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
                                     uint16_t color) {
 23f1e80:	b470      	push	{r4, r5, r6}
 23f1e82:	4614      	mov	r4, r2
  switch (rotation) {
 23f1e84:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f1e86:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation) {
 23f1e8a:	2a02      	cmp	r2, #2
 23f1e8c:	d00d      	beq.n	23f1eaa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 23f1e8e:	2a03      	cmp	r2, #3
 23f1e90:	d018      	beq.n	23f1ec4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 23f1e92:	2a01      	cmp	r2, #1
 23f1e94:	d111      	bne.n	23f1eba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 23f1e96:	43e4      	mvns	r4, r4
 23f1e98:	8902      	ldrh	r2, [r0, #8]
 23f1e9a:	4414      	add	r4, r2
 23f1e9c:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
 23f1e9e:	460a      	mov	r2, r1
 23f1ea0:	9603      	str	r6, [sp, #12]
 23f1ea2:	4621      	mov	r1, r4
}
 23f1ea4:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
 23f1ea6:	f7ff bf65 	b.w	23f1d74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f1eaa:	43e4      	mvns	r4, r4
 23f1eac:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
 23f1eae:	8905      	ldrh	r5, [r0, #8]
 23f1eb0:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
 23f1eb2:	4414      	add	r4, r2
    x -= (w - 1);
 23f1eb4:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
 23f1eb6:	b224      	sxth	r4, r4
    x -= (w - 1);
 23f1eb8:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
 23f1eba:	4622      	mov	r2, r4
 23f1ebc:	9603      	str	r6, [sp, #12]
}
 23f1ebe:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
 23f1ec0:	f7ff bf12 	b.w	23f1ce8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
 23f1ec4:	8945      	ldrh	r5, [r0, #10]
 23f1ec6:	4419      	add	r1, r3
 23f1ec8:	1a69      	subs	r1, r5, r1
 23f1eca:	b209      	sxth	r1, r1
    break;
 23f1ecc:	e7e7      	b.n	23f1e9e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

023f1ece <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
                                     uint16_t color) {
 23f1ece:	b430      	push	{r4, r5}
 23f1ed0:	4614      	mov	r4, r2
  switch (rotation) {
 23f1ed2:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f1ed4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation) {
 23f1ed8:	2a02      	cmp	r2, #2
 23f1eda:	d00d      	beq.n	23f1ef8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 23f1edc:	2a03      	cmp	r2, #3
 23f1ede:	d018      	beq.n	23f1f12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 23f1ee0:	2a01      	cmp	r2, #1
 23f1ee2:	d111      	bne.n	23f1f08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
 23f1ee4:	18e2      	adds	r2, r4, r3
 23f1ee6:	8904      	ldrh	r4, [r0, #8]
 23f1ee8:	1aa4      	subs	r4, r4, r2
 23f1eea:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
 23f1eec:	460a      	mov	r2, r1
 23f1eee:	9502      	str	r5, [sp, #8]
 23f1ef0:	4621      	mov	r1, r4
}
 23f1ef2:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
 23f1ef4:	f7ff bef8 	b.w	23f1ce8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
 23f1ef8:	43c9      	mvns	r1, r1
 23f1efa:	8902      	ldrh	r2, [r0, #8]
 23f1efc:	4411      	add	r1, r2
    y -= (h - 1);
 23f1efe:	18e2      	adds	r2, r4, r3
 23f1f00:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH - x - 1;
 23f1f02:	b209      	sxth	r1, r1
    y -= (h - 1);
 23f1f04:	1aa4      	subs	r4, r4, r2
 23f1f06:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
 23f1f08:	4622      	mov	r2, r4
 23f1f0a:	9502      	str	r5, [sp, #8]
}
 23f1f0c:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
 23f1f0e:	f7ff bf31 	b.w	23f1d74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f1f12:	43c9      	mvns	r1, r1
 23f1f14:	8942      	ldrh	r2, [r0, #10]
 23f1f16:	4411      	add	r1, r2
 23f1f18:	b209      	sxth	r1, r1
    break;
 23f1f1a:	e7e7      	b.n	23f1eec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

023f1f1c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 23f1f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1f1e:	4604      	mov	r4, r0
  TRANSACTION_START
 23f1f20:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f1f22:	2800      	cmp	r0, #0
 23f1f24:	d042      	beq.n	23f1fac <_ZN16Adafruit_SSD13067displayEv+0x90>
 23f1f26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f1f28:	f006 fc6c 	bl	23f8804 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 23f1f2c:	2205      	movs	r2, #5
 23f1f2e:	4620      	mov	r0, r4
 23f1f30:	4947      	ldr	r1, [pc, #284]	; (23f2050 <_ZN16Adafruit_SSD13067displayEv+0x134>)
 23f1f32:	f7ff fc9d 	bl	23f1870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 23f1f36:	8921      	ldrh	r1, [r4, #8]
 23f1f38:	4620      	mov	r0, r4
 23f1f3a:	3901      	subs	r1, #1
 23f1f3c:	b2c9      	uxtb	r1, r1
 23f1f3e:	f7ff fc29 	bl	23f1794 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if (wire) { // I2C
 23f1f42:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 23f1f46:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f1f4a:	1dde      	adds	r6, r3, #7
 23f1f4c:	bf48      	it	mi
 23f1f4e:	f103 060e 	addmi.w	r6, r3, #14
 23f1f52:	8923      	ldrh	r3, [r4, #8]
 23f1f54:	10f6      	asrs	r6, r6, #3
 23f1f56:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
 23f1f5a:	fa15 f686 	uxtah	r6, r5, r6
  if (wire) { // I2C
 23f1f5e:	2800      	cmp	r0, #0
 23f1f60:	d03b      	beq.n	23f1fda <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
 23f1f62:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f1f66:	f006 fc7f 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 23f1f6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1f6c:	2140      	movs	r1, #64	; 0x40
 23f1f6e:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f1f70:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 23f1f72:	689b      	ldr	r3, [r3, #8]
 23f1f74:	4798      	blx	r3
    while (count--) {
 23f1f76:	42ae      	cmp	r6, r5
        wire->endTransmission();
 23f1f78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--) {
 23f1f7a:	d024      	beq.n	23f1fc6 <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if (bytesOut >= WIRE_MAX) {
 23f1f7c:	2f1f      	cmp	r7, #31
 23f1f7e:	d90c      	bls.n	23f1f9a <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 23f1f80:	f006 fc79 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f1f84:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f1f88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1f8a:	f006 fc6d 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 23f1f8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1f90:	2140      	movs	r1, #64	; 0x40
 23f1f92:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f1f94:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 23f1f96:	689b      	ldr	r3, [r3, #8]
 23f1f98:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 23f1f9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1f9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f1fa0:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f1fa2:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 23f1fa4:	689b      	ldr	r3, [r3, #8]
 23f1fa6:	4798      	blx	r3
      bytesOut++;
 23f1fa8:	b2bf      	uxth	r7, r7
    while (count--) {
 23f1faa:	e7e4      	b.n	23f1f76 <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 23f1fac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1fae:	b118      	cbz	r0, 23f1fb8 <_ZN16Adafruit_SSD13067displayEv+0x9c>
 23f1fb0:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f1fb4:	f007 f954 	bl	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f1fb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1fba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1fbc:	6813      	ldr	r3, [r2, #0]
 23f1fbe:	ea23 0301 	bic.w	r3, r3, r1
 23f1fc2:	6013      	str	r3, [r2, #0]
 23f1fc4:	e7b2      	b.n	23f1f2c <_ZN16Adafruit_SSD13067displayEv+0x10>
    wire->endTransmission();
 23f1fc6:	f006 fc56 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 23f1fca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1fcc:	2800      	cmp	r0, #0
 23f1fce:	d032      	beq.n	23f2036 <_ZN16Adafruit_SSD13067displayEv+0x11a>
 23f1fd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f1fd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 23f1fd6:	f006 bc15 	b.w	23f8804 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 23f1fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f1fdc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f1fde:	6813      	ldr	r3, [r2, #0]
 23f1fe0:	430b      	orrs	r3, r1
 23f1fe2:	6013      	str	r3, [r2, #0]
    while (count--)
 23f1fe4:	42b5      	cmp	r5, r6
 23f1fe6:	d0f0      	beq.n	23f1fca <_ZN16Adafruit_SSD13067displayEv+0xae>
  if (spi) {
 23f1fe8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
 23f1fea:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f1fee:	b110      	cbz	r0, 23f1ff6 <_ZN16Adafruit_SSD13067displayEv+0xda>
    (void)spi->transfer(d);
 23f1ff0:	f007 f9a4 	bl	23f933c <_ZN8SPIClass8transferEh>
 23f1ff4:	e7f6      	b.n	23f1fe4 <_ZN16Adafruit_SSD13067displayEv+0xc8>
 23f1ff6:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1ffa:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f1ffc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f1ffe:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f2002:	681f      	ldr	r7, [r3, #0]
      if (d & bit)
 23f2004:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f2006:	bf14      	ite	ne
 23f2008:	ea47 070c 	orrne.w	r7, r7, ip
        *mosiPort &= ~mosiPinMask;
 23f200c:	ea27 070c 	biceq.w	r7, r7, ip
 23f2010:	601f      	str	r7, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f2012:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f2014:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f2016:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f2018:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f201c:	ea43 0302 	orr.w	r3, r3, r2
 23f2020:	603b      	str	r3, [r7, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f2022:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f2024:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f2026:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f2028:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f202c:	ea23 0302 	bic.w	r3, r3, r2
 23f2030:	603b      	str	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f2032:	d1e3      	bne.n	23f1ffc <_ZN16Adafruit_SSD13067displayEv+0xe0>
 23f2034:	e7d6      	b.n	23f1fe4 <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 23f2036:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f2038:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f203a:	6813      	ldr	r3, [r2, #0]
 23f203c:	430b      	orrs	r3, r1
 23f203e:	6013      	str	r3, [r2, #0]
 23f2040:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2042:	b118      	cbz	r0, 23f204c <_ZN16Adafruit_SSD13067displayEv+0x130>
}
 23f2044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TRANSACTION_END
 23f2048:	f007 b8f0 	b.w	23f922c <_ZN8SPIClass14endTransactionEv>
}
 23f204c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f204e:	bf00      	nop
 23f2050:	023ff4a6 	.word	0x023ff4a6

023f2054 <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
 23f2054:	4a03      	ldr	r2, [pc, #12]	; (23f2064 <_ZN17Adafruit_VEML7700C1Ev+0x10>)
 23f2056:	6002      	str	r2, [r0, #0]
 23f2058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f205c:	6042      	str	r2, [r0, #4]
 23f205e:	4a02      	ldr	r2, [pc, #8]	; (23f2068 <_ZN17Adafruit_VEML7700C1Ev+0x14>)
 23f2060:	6082      	str	r2, [r0, #8]
 23f2062:	4770      	bx	lr
 23f2064:	3b6bedfa 	.word	0x3b6bedfa
 23f2068:	44480000 	.word	0x44480000

023f206c <_ZN17Adafruit_VEML77006enableEb>:

/*!
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable) {
 23f206c:	b510      	push	{r4, lr}
 23f206e:	460c      	mov	r4, r1
  ALS_Shutdown->write(!enable);
 23f2070:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f2072:	f081 0101 	eor.w	r1, r1, #1
 23f2076:	f7fd fee3 	bl	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  //   When activating the sensor, set bit 0 of the command register
  //   to “0” with a wait time of 2.5 ms before the first measurement
  //   is needed, allowing for the correct start of the signal
  //   processor and oscillator.
  //   '''
  if (enable)
 23f207a:	b124      	cbz	r4, 23f2086 <_ZN17Adafruit_VEML77006enableEb+0x1a>
    delay(5); // doubling 2.5ms spec to be sure
}
 23f207c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(5); // doubling 2.5ms spec to be sure
 23f2080:	2005      	movs	r0, #5
 23f2082:	f005 bdff 	b.w	23f7c84 <delay>
}
 23f2086:	bd10      	pop	{r4, pc}

023f2088 <_ZN17Adafruit_VEML770015interruptEnableEb>:
/*!
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable) {
  ALS_Interrupt_Enable->write(enable);
 23f2088:	6b00      	ldr	r0, [r0, #48]	; 0x30
 23f208a:	f7fd bed9 	b.w	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f208e <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @brief Set the ALS IRQ persistence setting
 *    @param pers Persistence constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers) {
  ALS_Persistence->write(pers);
 23f208e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23f2090:	f7fd bed6 	b.w	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f2094 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
/*!
 *    @brief Get ALS integration time setting
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS,
 * VEML7700_IT_400MS, VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void) {
 23f2094:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
 23f2096:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f2098:	f7fd fec5 	bl	23efe26 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
 23f209c:	b2c0      	uxtb	r0, r0
 23f209e:	bd08      	pop	{r3, pc}

023f20a0 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>:

/*!
 *    @brief Get ALS integration time value
 *    @returns ALS integration time in milliseconds
 */
int Adafruit_VEML7700::getIntegrationTimeValue(void) {
 23f20a0:	b508      	push	{r3, lr}
  switch (getIntegrationTime()) {
 23f20a2:	f7ff fff7 	bl	23f2094 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
 23f20a6:	280c      	cmp	r0, #12
 23f20a8:	bf96      	itet	ls
 23f20aa:	4b03      	ldrls	r3, [pc, #12]	; (23f20b8 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv+0x18>)
 23f20ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23f20b0:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
  case VEML7700_IT_800MS:
    return 800;
  default:
    return -1;
  }
}
 23f20b4:	bd08      	pop	{r3, pc}
 23f20b6:	bf00      	nop
 23f20b8:	023ff4ac 	.word	0x023ff4ac

023f20bc <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>:
void Adafruit_VEML7700::setIntegrationTime(uint8_t it, bool wait) {
 23f20bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f20be:	4605      	mov	r5, r0
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f20c0:	b17a      	cbz	r2, 23f20e2 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x26>
 23f20c2:	9101      	str	r1, [sp, #4]
 23f20c4:	f7ff ffec 	bl	23f20a0 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f20c8:	4604      	mov	r4, r0
 23f20ca:	9901      	ldr	r1, [sp, #4]
  ALS_Integration_Time->write(it);
 23f20cc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 23f20ce:	f7fd feb7 	bl	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(flushDelay);
 23f20d2:	4620      	mov	r0, r4
 23f20d4:	f005 fdd6 	bl	23f7c84 <delay>
 23f20d8:	f004 fec6 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f20dc:	60e8      	str	r0, [r5, #12]
}
 23f20de:	b003      	add	sp, #12
 23f20e0:	bd30      	pop	{r4, r5, pc}
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f20e2:	4614      	mov	r4, r2
 23f20e4:	e7f2      	b.n	23f20cc <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x10>

023f20e6 <_ZN17Adafruit_VEML77007setGainEh>:
/*!
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or
 * VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain) {
 23f20e6:	b510      	push	{r4, lr}
 23f20e8:	4604      	mov	r4, r0
  ALS_Gain->write(gain);
 23f20ea:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f20ec:	f7fd fea8 	bl	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
 23f20f0:	f004 feba 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis(); // reset
 23f20f4:	60e0      	str	r0, [r4, #12]
}
 23f20f6:	bd10      	pop	{r4, pc}

023f20f8 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain setting
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2,
 * VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void) { return ALS_Gain->read(); }
 23f20f8:	b508      	push	{r3, lr}
 23f20fa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f20fc:	f7fd fe93 	bl	23efe26 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f2100:	b2c0      	uxtb	r0, r0
 23f2102:	bd08      	pop	{r3, pc}

023f2104 <_ZN17Adafruit_VEML770012getGainValueEv>:

/*!
 *    @brief Get ALS gain value
 *    @returns Actual gain value as float
 */
float Adafruit_VEML7700::getGainValue(void) {
 23f2104:	b508      	push	{r3, lr}
  switch (getGain()) {
 23f2106:	f7ff fff7 	bl	23f20f8 <_ZN17Adafruit_VEML77007getGainEv>
 23f210a:	2803      	cmp	r0, #3
 23f210c:	bf97      	itett	ls
 23f210e:	4b04      	ldrls	r3, [pc, #16]	; (23f2120 <_ZN17Adafruit_VEML770012getGainValueEv+0x1c>)
 23f2110:	eebf 0a00 	vmovhi.f32	s0, #240	; 0xbf800000 -1.0
 23f2114:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 23f2118:	ed90 0a00 	vldrls	s0, [r0]
  case VEML7700_GAIN_2:
    return 2;
  default:
    return -1;
  }
}
 23f211c:	bd08      	pop	{r3, pc}
 23f211e:	bf00      	nop
 23f2120:	023ff4c8 	.word	0x023ff4c8

023f2124 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
/*!
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable) {
  PowerSave_Enable->write(enable);
 23f2124:	6c00      	ldr	r0, [r0, #64]	; 0x40
 23f2126:	f7fd be8b 	b.w	23efe40 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f212a <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f212a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f212c:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f212e:	2010      	movs	r0, #16
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f2130:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f2132:	f7f3 f86a 	bl	23e520a <_Znwj>
 23f2136:	4605      	mov	r5, r0
 23f2138:	b118      	cbz	r0, 23f2142 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
 23f213a:	2110      	movs	r1, #16
 23f213c:	9a03      	ldr	r2, [sp, #12]
 23f213e:	f7fd fe98 	bl	23efe72 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f2142:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f2144:	64a5      	str	r5, [r4, #72]	; 0x48
  if (!i2c_dev->begin()) {
 23f2146:	2101      	movs	r1, #1
 23f2148:	f7fd feaf 	bl	23efeaa <_ZN18Adafruit_I2CDevice5beginEb>
 23f214c:	4605      	mov	r5, r0
 23f214e:	2800      	cmp	r0, #0
 23f2150:	f000 80d6 	beq.w	23f2300 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1d6>
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
 23f2154:	2018      	movs	r0, #24
 23f2156:	f7f3 f858 	bl	23e520a <_Znwj>
 23f215a:	4606      	mov	r6, r0
 23f215c:	b138      	cbz	r0, 23f216e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x44>
 23f215e:	2301      	movs	r3, #1
 23f2160:	2200      	movs	r2, #0
 23f2162:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2164:	e9cd 2300 	strd	r2, r3, [sp]
 23f2168:	2302      	movs	r3, #2
 23f216a:	f7fd fd6d 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_Config =
 23f216e:	6126      	str	r6, [r4, #16]
      i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
 23f2170:	2018      	movs	r0, #24
 23f2172:	f7f3 f84a 	bl	23e520a <_Znwj>
 23f2176:	4606      	mov	r6, r0
 23f2178:	b138      	cbz	r0, 23f218a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x60>
 23f217a:	2300      	movs	r3, #0
 23f217c:	2201      	movs	r2, #1
 23f217e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2180:	e9cd 3200 	strd	r3, r2, [sp]
 23f2184:	2302      	movs	r3, #2
 23f2186:	f7fd fd5f 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_HighThreshold = new Adafruit_I2CRegister(
 23f218a:	61e6      	str	r6, [r4, #28]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
 23f218c:	2018      	movs	r0, #24
 23f218e:	f7f3 f83c 	bl	23e520a <_Znwj>
 23f2192:	4606      	mov	r6, r0
 23f2194:	b140      	cbz	r0, 23f21a8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7e>
 23f2196:	2300      	movs	r3, #0
 23f2198:	2201      	movs	r2, #1
 23f219a:	e9cd 3200 	strd	r3, r2, [sp]
 23f219e:	2302      	movs	r3, #2
 23f21a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f21a2:	461a      	mov	r2, r3
 23f21a4:	f7fd fd50 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_LowThreshold =
 23f21a8:	6226      	str	r6, [r4, #32]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
 23f21aa:	2018      	movs	r0, #24
 23f21ac:	f7f3 f82d 	bl	23e520a <_Znwj>
 23f21b0:	4606      	mov	r6, r0
 23f21b2:	b148      	cbz	r0, 23f21c8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9e>
 23f21b4:	2300      	movs	r3, #0
 23f21b6:	f04f 0e01 	mov.w	lr, #1
 23f21ba:	2203      	movs	r2, #3
 23f21bc:	e9cd 3e00 	strd	r3, lr, [sp]
 23f21c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f21c2:	2302      	movs	r3, #2
 23f21c4:	f7fd fd40 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Power_Saving =
 23f21c8:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
 23f21ca:	2018      	movs	r0, #24
 23f21cc:	f7f3 f81d 	bl	23e520a <_Znwj>
 23f21d0:	4606      	mov	r6, r0
 23f21d2:	b148      	cbz	r0, 23f21e8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbe>
 23f21d4:	2300      	movs	r3, #0
 23f21d6:	f04f 0c01 	mov.w	ip, #1
 23f21da:	2204      	movs	r2, #4
 23f21dc:	e9cd 3c00 	strd	r3, ip, [sp]
 23f21e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f21e2:	2302      	movs	r3, #2
 23f21e4:	f7fd fd30 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
 23f21e8:	6166      	str	r6, [r4, #20]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
 23f21ea:	2018      	movs	r0, #24
 23f21ec:	f7f3 f80d 	bl	23e520a <_Znwj>
 23f21f0:	4606      	mov	r6, r0
 23f21f2:	b140      	cbz	r0, 23f2206 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xdc>
 23f21f4:	2300      	movs	r3, #0
 23f21f6:	2101      	movs	r1, #1
 23f21f8:	2205      	movs	r2, #5
 23f21fa:	e9cd 3100 	strd	r3, r1, [sp]
 23f21fe:	2302      	movs	r3, #2
 23f2200:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2202:	f7fd fd21 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  White_Data =
 23f2206:	61a6      	str	r6, [r4, #24]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
 23f2208:	2018      	movs	r0, #24
 23f220a:	f7f2 fffe 	bl	23e520a <_Znwj>
 23f220e:	4606      	mov	r6, r0
 23f2210:	b140      	cbz	r0, 23f2224 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xfa>
 23f2212:	2300      	movs	r3, #0
 23f2214:	2201      	movs	r2, #1
 23f2216:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2218:	e9cd 3200 	strd	r3, r2, [sp]
 23f221c:	2302      	movs	r3, #2
 23f221e:	2206      	movs	r2, #6
 23f2220:	f7fd fd12 	bl	23efc48 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Interrupt_Status =
 23f2224:	62a6      	str	r6, [r4, #40]	; 0x28
      new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
 23f2226:	2008      	movs	r0, #8
 23f2228:	f7f2 ffef 	bl	23e520a <_Znwj>
 23f222c:	4606      	mov	r6, r0
 23f222e:	b120      	cbz	r0, 23f223a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x110>
 23f2230:	2300      	movs	r3, #0
 23f2232:	2201      	movs	r2, #1
 23f2234:	6921      	ldr	r1, [r4, #16]
 23f2236:	f7fd fdf1 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ALS_Shutdown =
 23f223a:	62e6      	str	r6, [r4, #44]	; 0x2c
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
 23f223c:	2008      	movs	r0, #8
 23f223e:	f7f2 ffe4 	bl	23e520a <_Znwj>
 23f2242:	4606      	mov	r6, r0
 23f2244:	b120      	cbz	r0, 23f2250 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x126>
 23f2246:	2301      	movs	r3, #1
 23f2248:	6921      	ldr	r1, [r4, #16]
 23f224a:	461a      	mov	r2, r3
 23f224c:	f7fd fde6 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2250:	6326      	str	r6, [r4, #48]	; 0x30
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
 23f2252:	2008      	movs	r0, #8
 23f2254:	f7f2 ffd9 	bl	23e520a <_Znwj>
 23f2258:	4606      	mov	r6, r0
 23f225a:	b120      	cbz	r0, 23f2266 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13c>
 23f225c:	2304      	movs	r3, #4
 23f225e:	2202      	movs	r2, #2
 23f2260:	6921      	ldr	r1, [r4, #16]
 23f2262:	f7fd fddb 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2266:	6366      	str	r6, [r4, #52]	; 0x34
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
 23f2268:	2008      	movs	r0, #8
 23f226a:	f7f2 ffce 	bl	23e520a <_Znwj>
 23f226e:	4606      	mov	r6, r0
 23f2270:	b120      	cbz	r0, 23f227c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x152>
 23f2272:	2306      	movs	r3, #6
 23f2274:	2204      	movs	r2, #4
 23f2276:	6921      	ldr	r1, [r4, #16]
 23f2278:	f7fd fdd0 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f227c:	63a6      	str	r6, [r4, #56]	; 0x38
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
 23f227e:	2008      	movs	r0, #8
 23f2280:	f7f2 ffc3 	bl	23e520a <_Znwj>
 23f2284:	4606      	mov	r6, r0
 23f2286:	b120      	cbz	r0, 23f2292 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x168>
 23f2288:	230b      	movs	r3, #11
 23f228a:	2202      	movs	r2, #2
 23f228c:	6921      	ldr	r1, [r4, #16]
 23f228e:	f7fd fdc5 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2292:	63e6      	str	r6, [r4, #60]	; 0x3c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
 23f2294:	2008      	movs	r0, #8
 23f2296:	f7f2 ffb8 	bl	23e520a <_Znwj>
 23f229a:	4606      	mov	r6, r0
 23f229c:	b120      	cbz	r0, 23f22a8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17e>
 23f229e:	2300      	movs	r3, #0
 23f22a0:	2201      	movs	r2, #1
 23f22a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f22a4:	f7fd fdba 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f22a8:	6426      	str	r6, [r4, #64]	; 0x40
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f22aa:	2008      	movs	r0, #8
 23f22ac:	f7f2 ffad 	bl	23e520a <_Znwj>
 23f22b0:	4606      	mov	r6, r0
 23f22b2:	b120      	cbz	r0, 23f22be <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x194>
 23f22b4:	2301      	movs	r3, #1
 23f22b6:	2202      	movs	r2, #2
 23f22b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f22ba:	f7fd fdaf 	bl	23efe1c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  enable(false);
 23f22be:	2100      	movs	r1, #0
 23f22c0:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f22c2:	6466      	str	r6, [r4, #68]	; 0x44
  enable(false);
 23f22c4:	f7ff fed2 	bl	23f206c <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
 23f22c8:	2100      	movs	r1, #0
 23f22ca:	4620      	mov	r0, r4
 23f22cc:	f7ff fedc 	bl	23f2088 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
 23f22d0:	2100      	movs	r1, #0
 23f22d2:	4620      	mov	r0, r4
 23f22d4:	f7ff fedb 	bl	23f208e <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1_8);
 23f22d8:	2102      	movs	r1, #2
 23f22da:	4620      	mov	r0, r4
 23f22dc:	f7ff ff03 	bl	23f20e6 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
 23f22e0:	2201      	movs	r2, #1
 23f22e2:	2100      	movs	r1, #0
 23f22e4:	4620      	mov	r0, r4
 23f22e6:	f7ff fee9 	bl	23f20bc <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
  powerSaveEnable(false);
 23f22ea:	2100      	movs	r1, #0
 23f22ec:	4620      	mov	r0, r4
 23f22ee:	f7ff ff19 	bl	23f2124 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
 23f22f2:	2101      	movs	r1, #1
 23f22f4:	4620      	mov	r0, r4
 23f22f6:	f7ff feb9 	bl	23f206c <_ZN17Adafruit_VEML77006enableEb>
 23f22fa:	f004 fdb5 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f22fe:	60e0      	str	r0, [r4, #12]
}
 23f2300:	4628      	mov	r0, r5
 23f2302:	b004      	add	sp, #16
 23f2304:	bd70      	pop	{r4, r5, r6, pc}

023f2306 <_ZN17Adafruit_VEML770013getResolutionEv>:

/*!
 *    @brief Determines resolution for current gain and integration time
 * settings.
 */
float Adafruit_VEML7700::getResolution(void) {
 23f2306:	b510      	push	{r4, lr}
 23f2308:	ed2d 8b04 	vpush	{d8-d9}
 23f230c:	4604      	mov	r4, r0
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f230e:	edd0 8a00 	vldr	s17, [r0]
 23f2312:	ed90 9a02 	vldr	s18, [r0, #8]
 23f2316:	f7ff fec3 	bl	23f20a0 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f231a:	ee07 0a90 	vmov	s15, r0
 23f231e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f2322:	ee89 8a27 	vdiv.f32	s16, s18, s15
         (GAIN_MAX / getGainValue());
 23f2326:	4620      	mov	r0, r4
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f2328:	ee28 8a28 	vmul.f32	s16, s16, s17
         (GAIN_MAX / getGainValue());
 23f232c:	edd4 8a01 	vldr	s17, [r4, #4]
 23f2330:	f7ff fee8 	bl	23f2104 <_ZN17Adafruit_VEML770012getGainValueEv>
 23f2334:	eec8 7a80 	vdiv.f32	s15, s17, s0
}
 23f2338:	ee27 0a88 	vmul.f32	s0, s15, s16
 23f233c:	ecbd 8b04 	vpop	{d8-d9}
 23f2340:	bd10      	pop	{r4, pc}
 23f2342:	0000      	movs	r0, r0
 23f2344:	0000      	movs	r0, r0
	...

023f2348 <_ZN17Adafruit_VEML770010computeLuxEtb>:
 *    @brief Copmute lux from ALS reading.
 *    @param rawALS raw ALS register value
 *    @param corrected if true, apply non-linear correction
 *    @return lux value
 */
float Adafruit_VEML7700::computeLux(uint16_t rawALS, bool corrected) {
 23f2348:	b538      	push	{r3, r4, r5, lr}
 23f234a:	ed2d 8b02 	vpush	{d8}
 23f234e:	ee08 1a10 	vmov	s16, r1
 23f2352:	4614      	mov	r4, r2
  float lux = getResolution() * rawALS;
 23f2354:	f7ff ffd7 	bl	23f2306 <_ZN17Adafruit_VEML770013getResolutionEv>
 23f2358:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f235c:	ee28 0a00 	vmul.f32	s0, s16, s0
  if (corrected)
 23f2360:	b34c      	cbz	r4, 23f23b6 <_ZN17Adafruit_VEML770010computeLuxEtb+0x6e>
    lux = (((6.0135e-13 * lux - 9.3924e-9) * lux + 8.1488e-5) * lux + 1.0023) *
 23f2362:	ee10 0a10 	vmov	r0, s0
 23f2366:	f7f2 f893 	bl	23e4490 <__aeabi_f2d>
 23f236a:	a315      	add	r3, pc, #84	; (adr r3, 23f23c0 <_ZN17Adafruit_VEML770010computeLuxEtb+0x78>)
 23f236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2370:	4604      	mov	r4, r0
 23f2372:	460d      	mov	r5, r1
 23f2374:	f7f2 f8e4 	bl	23e4540 <__aeabi_dmul>
 23f2378:	a313      	add	r3, pc, #76	; (adr r3, 23f23c8 <_ZN17Adafruit_VEML770010computeLuxEtb+0x80>)
 23f237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f237e:	f7f1 ff27 	bl	23e41d0 <__aeabi_dsub>
 23f2382:	4622      	mov	r2, r4
 23f2384:	462b      	mov	r3, r5
 23f2386:	f7f2 f8db 	bl	23e4540 <__aeabi_dmul>
 23f238a:	a311      	add	r3, pc, #68	; (adr r3, 23f23d0 <_ZN17Adafruit_VEML770010computeLuxEtb+0x88>)
 23f238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2390:	f7f1 ff20 	bl	23e41d4 <__adddf3>
 23f2394:	4622      	mov	r2, r4
 23f2396:	462b      	mov	r3, r5
 23f2398:	f7f2 f8d2 	bl	23e4540 <__aeabi_dmul>
 23f239c:	a30e      	add	r3, pc, #56	; (adr r3, 23f23d8 <_ZN17Adafruit_VEML770010computeLuxEtb+0x90>)
 23f239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f23a2:	f7f1 ff17 	bl	23e41d4 <__adddf3>
 23f23a6:	4622      	mov	r2, r4
 23f23a8:	462b      	mov	r3, r5
 23f23aa:	f7f2 f8c9 	bl	23e4540 <__aeabi_dmul>
 23f23ae:	f7f2 fbbf 	bl	23e4b30 <__aeabi_d2f>
 23f23b2:	ee00 0a10 	vmov	s0, r0
          lux;
  return lux;
}
 23f23b6:	ecbd 8b02 	vpop	{d8}
 23f23ba:	bd38      	pop	{r3, r4, r5, pc}
 23f23bc:	f3af 8000 	nop.w
 23f23c0:	b18f283b 	.word	0xb18f283b
 23f23c4:	3d65287a 	.word	0x3d65287a
 23f23c8:	c91ef46e 	.word	0xc91ef46e
 23f23cc:	3e442b86 	.word	0x3e442b86
 23f23d0:	2e18cab0 	.word	0x2e18cab0
 23f23d4:	3f155c91 	.word	0x3f155c91
 23f23d8:	b98c7e28 	.word	0xb98c7e28
 23f23dc:	3ff0096b 	.word	0x3ff0096b

023f23e0 <_ZN17Adafruit_VEML77008readWaitEv>:

void Adafruit_VEML7700::readWait(void) {
 23f23e0:	b538      	push	{r3, r4, r5, lr}
 23f23e2:	4605      	mov	r5, r0
  //   at least for the programmed integration time. For example,
  //   for ALS_IT = 100 ms a wait time of ≥ 100 ms is needed.
  //   '''
  // Based on testing, it needs more. So doubling to be sure.

  unsigned long timeToWait = 2 * getIntegrationTimeValue(); // see above
 23f23e4:	f7ff fe5c 	bl	23f20a0 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f23e8:	0044      	lsls	r4, r0, #1
 23f23ea:	f004 fd3d 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  unsigned long timeWaited = millis() - lastRead;
 23f23ee:	68eb      	ldr	r3, [r5, #12]
 23f23f0:	1ac2      	subs	r2, r0, r3

  if (timeWaited < timeToWait)
 23f23f2:	4294      	cmp	r4, r2
 23f23f4:	d905      	bls.n	23f2402 <_ZN17Adafruit_VEML77008readWaitEv+0x22>
    delay(timeToWait - timeWaited);
 23f23f6:	1a18      	subs	r0, r3, r0
 23f23f8:	4420      	add	r0, r4
}
 23f23fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(timeToWait - timeWaited);
 23f23fe:	f005 bc41 	b.w	23f7c84 <delay>
}
 23f2402:	bd38      	pop	{r3, r4, r5, pc}

023f2404 <_ZN17Adafruit_VEML77007readALSEb>:
uint16_t Adafruit_VEML7700::readALS(bool wait) {
 23f2404:	b510      	push	{r4, lr}
 23f2406:	4604      	mov	r4, r0
  if (wait)
 23f2408:	b109      	cbz	r1, 23f240e <_ZN17Adafruit_VEML77007readALSEb+0xa>
    readWait();
 23f240a:	f7ff ffe9 	bl	23f23e0 <_ZN17Adafruit_VEML77008readWaitEv>
 23f240e:	f004 fd2b 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f2412:	60e0      	str	r0, [r4, #12]
  return ALS_Data->read();
 23f2414:	6960      	ldr	r0, [r4, #20]
 23f2416:	f7fd fce5 	bl	23efde4 <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f241a:	b280      	uxth	r0, r0
 23f241c:	bd10      	pop	{r4, pc}
	...

023f2420 <_ZN17Adafruit_VEML77007autoLuxEv>:
 *  @brief Implemenation of App Note "Designing the VEML7700 Into an
 * Application", Vishay Document Number: 84323, Fig. 24 Flow Chart. This will
 * automatically adjust gain and integration time as needed to obtain a good raw
 * count value. Additionally, a non-linear correction is applied if needed.
 */
float Adafruit_VEML7700::autoLux(void) {
 23f2420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f2422:	4604      	mov	r4, r0
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f2424:	4b2e      	ldr	r3, [pc, #184]	; (23f24e0 <_ZN17Adafruit_VEML77007autoLuxEv+0xc0>)

  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
  bool useCorrection = false; // flag for non-linear correction

  setGain(gains[gainIndex]);
 23f2426:	2102      	movs	r1, #2
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f2428:	9301      	str	r3, [sp, #4]
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f242a:	4b2e      	ldr	r3, [pc, #184]	; (23f24e4 <_ZN17Adafruit_VEML77007autoLuxEv+0xc4>)
 23f242c:	6818      	ldr	r0, [r3, #0]
 23f242e:	889b      	ldrh	r3, [r3, #4]
 23f2430:	9002      	str	r0, [sp, #8]
  setGain(gains[gainIndex]);
 23f2432:	4620      	mov	r0, r4
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f2434:	f8ad 300c 	strh.w	r3, [sp, #12]
  setGain(gains[gainIndex]);
 23f2438:	f7ff fe55 	bl	23f20e6 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(intTimes[itIndex]);
 23f243c:	2201      	movs	r2, #1
 23f243e:	2100      	movs	r1, #0
 23f2440:	4620      	mov	r0, r4
 23f2442:	f7ff fe3b 	bl	23f20bc <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>

  uint16_t ALS = readALS(true);
 23f2446:	2101      	movs	r1, #1
 23f2448:	4620      	mov	r0, r4
 23f244a:	f7ff ffdb 	bl	23f2404 <_ZN17Adafruit_VEML77007readALSEb>
  // Serial.println("** AUTO LUX DEBUG **");
  // Serial.print("ALS initial = "); Serial.println(ALS);

  if (ALS <= 100) {
 23f244e:	2864      	cmp	r0, #100	; 0x64
 23f2450:	d82e      	bhi.n	23f24b0 <_ZN17Adafruit_VEML77007autoLuxEv+0x90>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f2452:	2602      	movs	r6, #2
  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
 23f2454:	2500      	movs	r5, #0

    // increase first gain and then integration time as needed
    // compute lux using simple linear formula
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f2456:	2d03      	cmp	r5, #3
 23f2458:	d109      	bne.n	23f246e <_ZN17Adafruit_VEML77007autoLuxEv+0x4e>
 23f245a:	2e05      	cmp	r6, #5
 23f245c:	d11a      	bne.n	23f2494 <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
  bool useCorrection = false; // flag for non-linear correction
 23f245e:	2200      	movs	r2, #0
      // Serial.print("ALS  hi lux = "); Serial.println(ALS);
    }
  }
  // Serial.println("** AUTO LUX DEBUG **");

  return computeLux(ALS, useCorrection);
 23f2460:	4601      	mov	r1, r0
 23f2462:	4620      	mov	r0, r4
 23f2464:	b004      	add	sp, #16
 23f2466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return computeLux(ALS, useCorrection);
 23f246a:	f7ff bf6d 	b.w	23f2348 <_ZN17Adafruit_VEML770010computeLuxEtb>
      if (gainIndex < 3) {
 23f246e:	2d02      	cmp	r5, #2
 23f2470:	d810      	bhi.n	23f2494 <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
        setGain(gains[++gainIndex]);
 23f2472:	1c6b      	adds	r3, r5, #1
 23f2474:	aa04      	add	r2, sp, #16
 23f2476:	b2dd      	uxtb	r5, r3
 23f2478:	fa52 f383 	uxtab	r3, r2, r3
 23f247c:	4620      	mov	r0, r4
 23f247e:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 23f2482:	f7ff fe30 	bl	23f20e6 <_ZN17Adafruit_VEML77007setGainEh>
      ALS = readALS(true);
 23f2486:	2101      	movs	r1, #1
 23f2488:	4620      	mov	r0, r4
 23f248a:	f7ff ffbb 	bl	23f2404 <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f248e:	2864      	cmp	r0, #100	; 0x64
 23f2490:	d9e1      	bls.n	23f2456 <_ZN17Adafruit_VEML77007autoLuxEv+0x36>
 23f2492:	e7e4      	b.n	23f245e <_ZN17Adafruit_VEML77007autoLuxEv+0x3e>
      } else if (itIndex < 5) {
 23f2494:	2e04      	cmp	r6, #4
 23f2496:	d8f6      	bhi.n	23f2486 <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
        setIntegrationTime(intTimes[++itIndex]);
 23f2498:	aa04      	add	r2, sp, #16
 23f249a:	1c73      	adds	r3, r6, #1
 23f249c:	b2de      	uxtb	r6, r3
 23f249e:	fa52 f383 	uxtab	r3, r2, r3
 23f24a2:	4620      	mov	r0, r4
 23f24a4:	2201      	movs	r2, #1
 23f24a6:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f24aa:	f7ff fe07 	bl	23f20bc <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
 23f24ae:	e7ea      	b.n	23f2486 <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f24b0:	2502      	movs	r5, #2
    while ((ALS > 10000) && (itIndex > 0)) {
 23f24b2:	f242 7610 	movw	r6, #10000	; 0x2710
 23f24b6:	42b0      	cmp	r0, r6
 23f24b8:	d910      	bls.n	23f24dc <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
 23f24ba:	b17d      	cbz	r5, 23f24dc <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
      setIntegrationTime(intTimes[--itIndex]);
 23f24bc:	aa04      	add	r2, sp, #16
 23f24be:	1e6b      	subs	r3, r5, #1
 23f24c0:	b2dd      	uxtb	r5, r3
 23f24c2:	fa52 f383 	uxtab	r3, r2, r3
 23f24c6:	4620      	mov	r0, r4
 23f24c8:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f24cc:	2201      	movs	r2, #1
 23f24ce:	f7ff fdf5 	bl	23f20bc <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
      ALS = readALS(true);
 23f24d2:	2101      	movs	r1, #1
 23f24d4:	4620      	mov	r0, r4
 23f24d6:	f7ff ff95 	bl	23f2404 <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS > 10000) && (itIndex > 0)) {
 23f24da:	e7ec      	b.n	23f24b6 <_ZN17Adafruit_VEML77007autoLuxEv+0x96>
    useCorrection = true;
 23f24dc:	2201      	movs	r2, #1
 23f24de:	e7bf      	b.n	23f2460 <_ZN17Adafruit_VEML77007autoLuxEv+0x40>
 23f24e0:	01000302 	.word	0x01000302
 23f24e4:	023fcf68 	.word	0x023fcf68

023f24e8 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>:
float Adafruit_VEML7700::readLux(luxMethod method) {
 23f24e8:	b510      	push	{r4, lr}
 23f24ea:	4604      	mov	r4, r0
 23f24ec:	ed2d 8b02 	vpush	{d8}
 23f24f0:	2904      	cmp	r1, #4
 23f24f2:	d82b      	bhi.n	23f254c <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x64>
 23f24f4:	e8df f001 	tbb	[pc, r1]
 23f24f8:	03242213 	.word	0x03242213
 23f24fc:	15          	.byte	0x15
 23f24fd:	00          	.byte	0x00
  bool wait = true;
 23f24fe:	2100      	movs	r1, #0
    return computeLux(readALS(wait));
 23f2500:	4620      	mov	r0, r4
 23f2502:	f7ff ff7f 	bl	23f2404 <_ZN17Adafruit_VEML77007readALSEb>
 23f2506:	ee08 0a10 	vmov	s16, r0
  float lux = getResolution() * rawALS;
 23f250a:	4620      	mov	r0, r4
 23f250c:	f7ff fefb 	bl	23f2306 <_ZN17Adafruit_VEML770013getResolutionEv>
 23f2510:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f2514:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 23f2518:	ecbd 8b02 	vpop	{d8}
 23f251c:	bd10      	pop	{r4, pc}
  bool wait = true;
 23f251e:	2101      	movs	r1, #1
 23f2520:	e7ee      	b.n	23f2500 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x18>
 23f2522:	2100      	movs	r1, #0
    return computeLux(readALS(wait), true);
 23f2524:	4620      	mov	r0, r4
 23f2526:	f7ff ff6d 	bl	23f2404 <_ZN17Adafruit_VEML77007readALSEb>
}
 23f252a:	ecbd 8b02 	vpop	{d8}
    return computeLux(readALS(wait), true);
 23f252e:	4601      	mov	r1, r0
 23f2530:	2201      	movs	r2, #1
 23f2532:	4620      	mov	r0, r4
}
 23f2534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return computeLux(readALS(wait), true);
 23f2538:	f7ff bf06 	b.w	23f2348 <_ZN17Adafruit_VEML770010computeLuxEtb>
  bool wait = true;
 23f253c:	2101      	movs	r1, #1
 23f253e:	e7f1      	b.n	23f2524 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x3c>
}
 23f2540:	ecbd 8b02 	vpop	{d8}
 23f2544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return autoLux();
 23f2548:	f7ff bf6a 	b.w	23f2420 <_ZN17Adafruit_VEML77007autoLuxEv>
  bool wait = true;
 23f254c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f2550:	e7e2      	b.n	23f2518 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x30>

023f2552 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
 23f2552:	6803      	ldr	r3, [r0, #0]
 23f2554:	b2c9      	uxtb	r1, r1
 23f2556:	689b      	ldr	r3, [r3, #8]
 23f2558:	4718      	bx	r3

023f255a <_ZN8LeafSensC1Ev>:
 */
#include "LeafSens.h"


LeafSens::LeafSens(){
  addr=0x61;
 23f255a:	2361      	movs	r3, #97	; 0x61
 23f255c:	7103      	strb	r3, [r0, #4]
}
 23f255e:	4770      	bx	lr

023f2560 <_ZN8LeafSens4initEh>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int LeafSens::init(uint8_t address){
 23f2560:	b538      	push	{r3, r4, r5, lr}
 23f2562:	4604      	mov	r4, r0
 23f2564:	460d      	mov	r5, r1
  _wire = &Wire;
 23f2566:	f007 fcc1 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23f256a:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f256c:	f006 f94e 	bl	23f880c <_ZN7TwoWire5beginEv>
  // _wire->setClock(100000L);
  addr = address;
  return 0;
}
 23f2570:	2000      	movs	r0, #0
  addr = address;
 23f2572:	7125      	strb	r5, [r4, #4]
}
 23f2574:	bd38      	pop	{r3, r4, r5, pc}

023f2576 <_ZN8LeafSens8i2cdelayEi>:


bool LeafSens::i2cdelay(int size){
 23f2576:	b570      	push	{r4, r5, r6, lr}
 23f2578:	4606      	mov	r6, r0
  delay(1);
 23f257a:	2001      	movs	r0, #1
bool LeafSens::i2cdelay(int size){
 23f257c:	460d      	mov	r5, r1
  int i=0;
 23f257e:	2400      	movs	r4, #0
  delay(1);
 23f2580:	f005 fb80 	bl	23f7c84 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f2584:	6830      	ldr	r0, [r6, #0]
 23f2586:	6803      	ldr	r3, [r0, #0]
 23f2588:	691b      	ldr	r3, [r3, #16]
 23f258a:	4798      	blx	r3
 23f258c:	42a8      	cmp	r0, r5
 23f258e:	da06      	bge.n	23f259e <_ZN8LeafSens8i2cdelayEi+0x28>
 23f2590:	42ac      	cmp	r4, r5
 23f2592:	dc09      	bgt.n	23f25a8 <_ZN8LeafSens8i2cdelayEi+0x32>
	  delay(2);
 23f2594:	2002      	movs	r0, #2
 23f2596:	f005 fb75 	bl	23f7c84 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f259a:	3401      	adds	r4, #1
 23f259c:	e7f2      	b.n	23f2584 <_ZN8LeafSens8i2cdelayEi+0xe>
  }
  if(i>=size){
 23f259e:	42ac      	cmp	r4, r5
 23f25a0:	bfac      	ite	ge
 23f25a2:	2000      	movge	r0, #0
 23f25a4:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f25a6:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f25a8:	2000      	movs	r0, #0
 23f25aa:	e7fc      	b.n	23f25a6 <_ZN8LeafSens8i2cdelayEi+0x30>

023f25ac <_ZN8LeafSens8getStateEv>:

int LeafSens::getState(){ //-1:no data, 0:err, 1:ok
 23f25ac:	b510      	push	{r4, lr}
 23f25ae:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f25b0:	7901      	ldrb	r1, [r0, #4]
 23f25b2:	2201      	movs	r2, #1
 23f25b4:	6800      	ldr	r0, [r0, #0]
 23f25b6:	f006 f950 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f25ba:	2101      	movs	r1, #1
 23f25bc:	4620      	mov	r0, r4
 23f25be:	f7ff ffda 	bl	23f2576 <_ZN8LeafSens8i2cdelayEi>
 23f25c2:	b128      	cbz	r0, 23f25d0 <_ZN8LeafSens8getStateEv+0x24>
    return _wire->read();
 23f25c4:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f25c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f25ca:	6803      	ldr	r3, [r0, #0]
 23f25cc:	695b      	ldr	r3, [r3, #20]
 23f25ce:	4718      	bx	r3
}
 23f25d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f25d4:	bd10      	pop	{r4, pc}

023f25d6 <_ZN8LeafSens6getValEh>:

int16_t LeafSens::getVal(byte reg){
 23f25d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f25d8:	4604      	mov	r4, r0
 23f25da:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f25dc:	7901      	ldrb	r1, [r0, #4]
 23f25de:	6800      	ldr	r0, [r0, #0]
 23f25e0:	f006 f93e 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f25e4:	6820      	ldr	r0, [r4, #0]
 23f25e6:	4629      	mov	r1, r5
 23f25e8:	6803      	ldr	r3, [r0, #0]
 23f25ea:	689b      	ldr	r3, [r3, #8]
 23f25ec:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f25ee:	6820      	ldr	r0, [r4, #0]
 23f25f0:	f006 f941 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  delay(10);
 23f25f4:	200a      	movs	r0, #10
 23f25f6:	f005 fb45 	bl	23f7c84 <delay>
  _wire->requestFrom(addr, (uint8_t)2);
 23f25fa:	7921      	ldrb	r1, [r4, #4]
 23f25fc:	2202      	movs	r2, #2
 23f25fe:	6820      	ldr	r0, [r4, #0]
 23f2600:	f006 f92b 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f2604:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f2606:	2102      	movs	r1, #2
 23f2608:	4620      	mov	r0, r4
  int16_t ret=0;
 23f260a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f260e:	f7ff ffb2 	bl	23f2576 <_ZN8LeafSens8i2cdelayEi>
 23f2612:	b158      	cbz	r0, 23f262c <_ZN8LeafSens6getValEh+0x56>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f2614:	6820      	ldr	r0, [r4, #0]
 23f2616:	6803      	ldr	r3, [r0, #0]
 23f2618:	695b      	ldr	r3, [r3, #20]
 23f261a:	4798      	blx	r3
 23f261c:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f2620:	6820      	ldr	r0, [r4, #0]
 23f2622:	6803      	ldr	r3, [r0, #0]
 23f2624:	695b      	ldr	r3, [r3, #20]
 23f2626:	4798      	blx	r3
 23f2628:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f262c:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f2630:	b003      	add	sp, #12
 23f2632:	bd30      	pop	{r4, r5, pc}

023f2634 <_ZN8LeafSens10newReadingEv>:
    return 0;
  }
  return 1;
}

int LeafSens::newReading(){
 23f2634:	b510      	push	{r4, lr}
 23f2636:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f2638:	7901      	ldrb	r1, [r0, #4]
 23f263a:	6800      	ldr	r0, [r0, #0]
 23f263c:	f006 f910 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_ST);              // sends one byte
 23f2640:	2101      	movs	r1, #1
 23f2642:	6820      	ldr	r0, [r4, #0]
 23f2644:	f7ff ff85 	bl	23f2552 <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f2648:	6820      	ldr	r0, [r4, #0]
 23f264a:	f006 f914 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  delay(200); // let sensor read the data
 23f264e:	20c8      	movs	r0, #200	; 0xc8
 23f2650:	f005 fb18 	bl	23f7c84 <delay>
  return getState();
 23f2654:	4620      	mov	r0, r4
}
 23f2656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f265a:	f7ff bfa7 	b.w	23f25ac <_ZN8LeafSens8getStateEv>
	...

023f2660 <_ZN8LeafSens6getWetEv>:

float LeafSens::getWet()
{
 23f2660:	b508      	push	{r3, lr}
  return getVal(REG_WET)/100.0;
 23f2662:	2105      	movs	r1, #5
 23f2664:	f7ff ffb7 	bl	23f25d6 <_ZN8LeafSens6getValEh>
 23f2668:	f7f1 ff00 	bl	23e446c <__aeabi_i2d>
 23f266c:	2200      	movs	r2, #0
 23f266e:	4b04      	ldr	r3, [pc, #16]	; (23f2680 <_ZN8LeafSens6getWetEv+0x20>)
 23f2670:	f7f2 f890 	bl	23e4794 <__aeabi_ddiv>
 23f2674:	f7f2 fa5c 	bl	23e4b30 <__aeabi_d2f>
}
 23f2678:	ee00 0a10 	vmov	s0, r0
 23f267c:	bd08      	pop	{r3, pc}
 23f267e:	bf00      	nop
 23f2680:	40590000 	.word	0x40590000

023f2684 <_ZN8LeafSens7getTempEv>:

float LeafSens::getTemp()
{
 23f2684:	b508      	push	{r3, lr}
  return getVal(REG_TEMP)/100.0;
 23f2686:	2104      	movs	r1, #4
 23f2688:	f7ff ffa5 	bl	23f25d6 <_ZN8LeafSens6getValEh>
 23f268c:	f7f1 feee 	bl	23e446c <__aeabi_i2d>
 23f2690:	2200      	movs	r2, #0
 23f2692:	4b04      	ldr	r3, [pc, #16]	; (23f26a4 <_ZN8LeafSens7getTempEv+0x20>)
 23f2694:	f7f2 f87e 	bl	23e4794 <__aeabi_ddiv>
 23f2698:	f7f2 fa4a 	bl	23e4b30 <__aeabi_d2f>
}
 23f269c:	ee00 0a10 	vmov	s0, r0
 23f26a0:	bd08      	pop	{r3, pc}
 23f26a2:	bf00      	nop
 23f26a4:	40590000 	.word	0x40590000

023f26a8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 23f26a8:	2001      	movs	r0, #1
 23f26aa:	4770      	bx	lr

023f26ac <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 23f26ac:	b510      	push	{r4, lr}
 23f26ae:	4604      	mov	r4, r0
    while (!available())
 23f26b0:	6823      	ldr	r3, [r4, #0]
 23f26b2:	4620      	mov	r0, r4
 23f26b4:	685b      	ldr	r3, [r3, #4]
 23f26b6:	4798      	blx	r3
 23f26b8:	2800      	cmp	r0, #0
 23f26ba:	d0f9      	beq.n	23f26b0 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 23f26bc:	bd10      	pop	{r4, pc}

023f26be <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 23f26be:	7903      	ldrb	r3, [r0, #4]
 23f26c0:	2b03      	cmp	r3, #3
 23f26c2:	d0fc      	beq.n	23f26be <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 23f26c4:	2001      	movs	r0, #1
 23f26c6:	4770      	bx	lr

023f26c8 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
 23f26c8:	2000      	movs	r0, #0
 23f26ca:	4770      	bx	lr

023f26cc <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 23f26cc:	7181      	strb	r1, [r0, #6]
}
 23f26ce:	4770      	bx	lr

023f26d0 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 23f26d0:	7141      	strb	r1, [r0, #5]
}
 23f26d2:	4770      	bx	lr

023f26d4 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 23f26d4:	72c1      	strb	r1, [r0, #11]
}
 23f26d6:	4770      	bx	lr

023f26d8 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 23f26d8:	7301      	strb	r1, [r0, #12]
}
 23f26da:	4770      	bx	lr

023f26dc <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 23f26dc:	7341      	strb	r1, [r0, #13]
}
 23f26de:	4770      	bx	lr

023f26e0 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
 23f26e0:	7b83      	ldrb	r3, [r0, #14]
 23f26e2:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
 23f26e6:	4311      	orrs	r1, r2
 23f26e8:	7381      	strb	r1, [r0, #14]
}
 23f26ea:	4770      	bx	lr

023f26ec <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 23f26ec:	79c0      	ldrb	r0, [r0, #7]
}
 23f26ee:	4770      	bx	lr

023f26f0 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 23f26f0:	7a00      	ldrb	r0, [r0, #8]
}
 23f26f2:	4770      	bx	lr

023f26f4 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 23f26f4:	7a40      	ldrb	r0, [r0, #9]
}
 23f26f6:	4770      	bx	lr

023f26f8 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 23f26f8:	7a80      	ldrb	r0, [r0, #10]
}
 23f26fa:	4770      	bx	lr

023f26fc <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
 23f26fc:	8a00      	ldrh	r0, [r0, #16]
}
 23f26fe:	b200      	sxth	r0, r0
 23f2700:	4770      	bx	lr

023f2702 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
 23f2702:	7900      	ldrb	r0, [r0, #4]
}
 23f2704:	4770      	bx	lr

023f2706 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
 23f2706:	7101      	strb	r1, [r0, #4]
}
 23f2708:	4770      	bx	lr

023f270a <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
 23f270a:	8a40      	ldrh	r0, [r0, #18]
}
 23f270c:	b280      	uxth	r0, r0
 23f270e:	4770      	bx	lr

023f2710 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
 23f2710:	8a80      	ldrh	r0, [r0, #20]
}
 23f2712:	b280      	uxth	r0, r0
 23f2714:	4770      	bx	lr

023f2716 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
 23f2716:	8ac0      	ldrh	r0, [r0, #22]
}
 23f2718:	b280      	uxth	r0, r0
 23f271a:	4770      	bx	lr

023f271c <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
 23f271c:	b570      	push	{r4, r5, r6, lr}
 23f271e:	4604      	mov	r4, r0
 23f2720:	460e      	mov	r6, r1
 23f2722:	f004 fba1 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
 23f2726:	4605      	mov	r5, r0
 23f2728:	f004 fb9e 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f272c:	1b40      	subs	r0, r0, r5
 23f272e:	42b0      	cmp	r0, r6
 23f2730:	d206      	bcs.n	23f2740 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
 23f2732:	6823      	ldr	r3, [r4, #0]
 23f2734:	4620      	mov	r0, r4
 23f2736:	685b      	ldr	r3, [r3, #4]
 23f2738:	4798      	blx	r3
 23f273a:	2800      	cmp	r0, #0
 23f273c:	d0f4      	beq.n	23f2728 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
 23f273e:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f2740:	2000      	movs	r0, #0
 23f2742:	e7fc      	b.n	23f273e <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

023f2744 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
 23f2744:	b570      	push	{r4, r5, r6, lr}
 23f2746:	4604      	mov	r4, r0
 23f2748:	460e      	mov	r6, r1
 23f274a:	f004 fb8d 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
 23f274e:	4605      	mov	r5, r0
 23f2750:	f004 fb8a 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f2754:	1b40      	subs	r0, r0, r5
 23f2756:	42b0      	cmp	r0, r6
 23f2758:	d204      	bcs.n	23f2764 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
 23f275a:	7923      	ldrb	r3, [r4, #4]
 23f275c:	2b03      	cmp	r3, #3
 23f275e:	d0f7      	beq.n	23f2750 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 23f2760:	2001      	movs	r0, #1
}
 23f2762:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f2764:	2000      	movs	r0, #0
 23f2766:	e7fc      	b.n	23f2762 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

023f2768 <_ZN15RHGenericDriver7waitCADEv>:
{
 23f2768:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
 23f276a:	69c3      	ldr	r3, [r0, #28]
{
 23f276c:	4604      	mov	r4, r0
    if (!_cad_timeout)
 23f276e:	b1b3      	cbz	r3, 23f279e <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f2770:	f004 fb7a 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f2774:	2664      	movs	r6, #100	; 0x64
 23f2776:	4605      	mov	r5, r0
    while (isChannelActive())
 23f2778:	6823      	ldr	r3, [r4, #0]
 23f277a:	4620      	mov	r0, r4
 23f277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f277e:	4798      	blx	r3
 23f2780:	b168      	cbz	r0, 23f279e <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f2782:	f004 fb71 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
 23f2786:	69e3      	ldr	r3, [r4, #28]
 23f2788:	1b40      	subs	r0, r0, r5
 23f278a:	4298      	cmp	r0, r3
 23f278c:	d809      	bhi.n	23f27a2 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f278e:	210a      	movs	r1, #10
 23f2790:	2001      	movs	r0, #1
 23f2792:	f006 fcf1 	bl	23f9178 <_Z6randomii>
 23f2796:	4370      	muls	r0, r6
 23f2798:	f005 fa74 	bl	23f7c84 <delay>
    while (isChannelActive())
 23f279c:	e7ec      	b.n	23f2778 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
 23f279e:	2001      	movs	r0, #1
}
 23f27a0:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
 23f27a2:	2000      	movs	r0, #0
 23f27a4:	e7fc      	b.n	23f27a0 <_ZN15RHGenericDriver7waitCADEv+0x38>
	...

023f27a8 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
 23f27a8:	4a06      	ldr	r2, [pc, #24]	; (23f27c4 <_ZN15RHGenericDriverC1Ev+0x1c>)
 23f27aa:	21ff      	movs	r1, #255	; 0xff
 23f27ac:	6002      	str	r2, [r0, #0]
 23f27ae:	2200      	movs	r2, #0
 23f27b0:	7141      	strb	r1, [r0, #5]
 23f27b2:	7102      	strb	r2, [r0, #4]
 23f27b4:	72c1      	strb	r1, [r0, #11]
 23f27b6:	8242      	strh	r2, [r0, #18]
 23f27b8:	8181      	strh	r1, [r0, #12]
 23f27ba:	8282      	strh	r2, [r0, #20]
 23f27bc:	7382      	strb	r2, [r0, #14]
 23f27be:	82c2      	strh	r2, [r0, #22]
 23f27c0:	61c2      	str	r2, [r0, #28]
}
 23f27c2:	4770      	bx	lr
 23f27c4:	023ff4e0 	.word	0x023ff4e0

023f27c8 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
 23f27c8:	4770      	bx	lr

023f27ca <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
 23f27ca:	4770      	bx	lr

023f27cc <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
 23f27cc:	4770      	bx	lr

023f27ce <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
 23f27ce:	4770      	bx	lr

023f27d0 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
 23f27d0:	4770      	bx	lr

023f27d2 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 23f27d2:	7141      	strb	r1, [r0, #5]
}
 23f27d4:	4770      	bx	lr

023f27d6 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 23f27d6:	7181      	strb	r1, [r0, #6]
}
 23f27d8:	4770      	bx	lr

023f27da <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 23f27da:	7101      	strb	r1, [r0, #4]
}
 23f27dc:	4770      	bx	lr
	...

023f27e0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f27e0:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
 23f27e2:	4d03      	ldr	r5, [pc, #12]	; (23f27f0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 23f27e4:	7101      	strb	r1, [r0, #4]
 23f27e6:	6005      	str	r5, [r0, #0]
 23f27e8:	7142      	strb	r2, [r0, #5]
 23f27ea:	7183      	strb	r3, [r0, #6]
}
 23f27ec:	bd30      	pop	{r4, r5, pc}
 23f27ee:	bf00      	nop
 23f27f0:	023ff558 	.word	0x023ff558

023f27f4 <_ZN13RHHardwareSPI14usingInterruptEh>:
void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
#if defined(SPI_HAS_TRANSACTION)

#endif
}
 23f27f4:	4770      	bx	lr
	...

023f27f8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f27f8:	b510      	push	{r4, lr}
 23f27fa:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f27fc:	f7ff fff0 	bl	23f27e0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 23f2800:	4b05      	ldr	r3, [pc, #20]	; (23f2818 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
}
 23f2802:	4620      	mov	r0, r4
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f2804:	6023      	str	r3, [r4, #0]
 23f2806:	4b05      	ldr	r3, [pc, #20]	; (23f281c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
 23f2808:	60a3      	str	r3, [r4, #8]
 23f280a:	2301      	movs	r3, #1
 23f280c:	7323      	strb	r3, [r4, #12]
 23f280e:	2300      	movs	r3, #0
 23f2810:	6123      	str	r3, [r4, #16]
 23f2812:	82a3      	strh	r3, [r4, #20]
}
 23f2814:	bd10      	pop	{r4, pc}
 23f2816:	bf00      	nop
 23f2818:	023ff58c 	.word	0x023ff58c
 23f281c:	023fe7a0 	.word	0x023fe7a0

023f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>:
    static SPIClass& instance() {
 23f2820:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
 23f2822:	4c09      	ldr	r4, [pc, #36]	; (23f2848 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x28>)
 23f2824:	e8d4 3f8f 	ldab	r3, [r4]
 23f2828:	07db      	lsls	r3, r3, #31
 23f282a:	d40a      	bmi.n	23f2842 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f282c:	4620      	mov	r0, r4
 23f282e:	f005 fa0d 	bl	23f7c4c <__cxa_guard_acquire>
 23f2832:	b130      	cbz	r0, 23f2842 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f2834:	2101      	movs	r1, #1
 23f2836:	4805      	ldr	r0, [pc, #20]	; (23f284c <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f2838:	f006 fcb4 	bl	23f91a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f283c:	4620      	mov	r0, r4
 23f283e:	f005 fa13 	bl	23f7c68 <__cxa_guard_release>
        return instance;
    }
 23f2842:	4802      	ldr	r0, [pc, #8]	; (23f284c <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f2844:	bd10      	pop	{r4, pc}
 23f2846:	bf00      	nop
 23f2848:	1007ae64 	.word	0x1007ae64
 23f284c:	1007ae68 	.word	0x1007ae68

023f2850 <_ZN13RHHardwareSPI8transferEh>:
{
 23f2850:	b507      	push	{r0, r1, r2, lr}
 23f2852:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23f2854:	f7ff ffe4 	bl	23f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f2858:	9901      	ldr	r1, [sp, #4]
}
 23f285a:	b003      	add	sp, #12
 23f285c:	f85d eb04 	ldr.w	lr, [sp], #4
 23f2860:	f006 bd6c 	b.w	23f933c <_ZN8SPIClass8transferEh>

023f2864 <_ZN13RHHardwareSPI15attachInterruptEv>:
{
 23f2864:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
 23f2866:	f7ff ffdb 	bl	23f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f286a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f286e:	f006 bd7e 	b.w	23f936e <_ZN8SPIClass15attachInterruptEv>

023f2872 <_ZN13RHHardwareSPI15detachInterruptEv>:
{
 23f2872:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
 23f2874:	f7ff ffd4 	bl	23f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f2878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f287c:	f006 bd78 	b.w	23f9370 <_ZN8SPIClass15detachInterruptEv>

023f2880 <_ZN13RHHardwareSPI5beginEv>:
{
 23f2880:	b510      	push	{r4, lr}
   if (_frequency == Frequency16MHz)
 23f2882:	7903      	ldrb	r3, [r0, #4]
 23f2884:	2b04      	cmp	r3, #4
 23f2886:	d021      	beq.n	23f28cc <_ZN13RHHardwareSPI5beginEv+0x4c>
   else if (_frequency == Frequency8MHz)
 23f2888:	2b03      	cmp	r3, #3
 23f288a:	d021      	beq.n	23f28d0 <_ZN13RHHardwareSPI5beginEv+0x50>
   else if (_frequency == Frequency4MHz)
 23f288c:	2b02      	cmp	r3, #2
 23f288e:	d021      	beq.n	23f28d4 <_ZN13RHHardwareSPI5beginEv+0x54>
       frequency = 1000000;
 23f2890:	4a11      	ldr	r2, [pc, #68]	; (23f28d8 <_ZN13RHHardwareSPI5beginEv+0x58>)
 23f2892:	4912      	ldr	r1, [pc, #72]	; (23f28dc <_ZN13RHHardwareSPI5beginEv+0x5c>)
 23f2894:	2b01      	cmp	r3, #1
 23f2896:	bf18      	it	ne
 23f2898:	460a      	movne	r2, r1
   if (_bitOrder == BitOrderLSBFirst)
 23f289a:	7941      	ldrb	r1, [r0, #5]
    if (_dataMode == DataMode0)
 23f289c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
 23f289e:	3901      	subs	r1, #1
 23f28a0:	bf18      	it	ne
 23f28a2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
 23f28a4:	b133      	cbz	r3, 23f28b4 <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode1)
 23f28a6:	2b01      	cmp	r3, #1
 23f28a8:	d004      	beq.n	23f28b4 <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode2)
 23f28aa:	2b02      	cmp	r3, #2
 23f28ac:	d002      	beq.n	23f28b4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
 23f28ae:	2b03      	cmp	r3, #3
 23f28b0:	bf18      	it	ne
 23f28b2:	2300      	movne	r3, #0
class SPISettings : public Printable {
 23f28b4:	2400      	movs	r4, #0
 23f28b6:	7501      	strb	r1, [r0, #20]
 23f28b8:	7304      	strb	r4, [r0, #12]
 23f28ba:	6102      	str	r2, [r0, #16]
 23f28bc:	7543      	strb	r3, [r0, #21]
        instance().begin(ss_pin);
 23f28be:	f7ff ffaf 	bl	23f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f28c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f28c6:	21ff      	movs	r1, #255	; 0xff
 23f28c8:	f006 bc8a 	b.w	23f91e0 <_ZN8SPIClass5beginEt>
       frequency = 16000000;
 23f28cc:	4a04      	ldr	r2, [pc, #16]	; (23f28e0 <_ZN13RHHardwareSPI5beginEv+0x60>)
 23f28ce:	e7e4      	b.n	23f289a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
 23f28d0:	4a04      	ldr	r2, [pc, #16]	; (23f28e4 <_ZN13RHHardwareSPI5beginEv+0x64>)
 23f28d2:	e7e2      	b.n	23f289a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
 23f28d4:	4a04      	ldr	r2, [pc, #16]	; (23f28e8 <_ZN13RHHardwareSPI5beginEv+0x68>)
 23f28d6:	e7e0      	b.n	23f289a <_ZN13RHHardwareSPI5beginEv+0x1a>
 23f28d8:	001e8480 	.word	0x001e8480
 23f28dc:	000f4240 	.word	0x000f4240
 23f28e0:	00f42400 	.word	0x00f42400
 23f28e4:	007a1200 	.word	0x007a1200
 23f28e8:	003d0900 	.word	0x003d0900

023f28ec <_ZN13RHHardwareSPI3endEv>:
{
 23f28ec:	b508      	push	{r3, lr}
        instance().end();
 23f28ee:	f7ff ff97 	bl	23f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f28f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f28f6:	f006 bc87 	b.w	23f9208 <_ZN8SPIClass3endEv>

023f28fa <_ZN13RHHardwareSPI16beginTransactionEv>:
{
 23f28fa:	b510      	push	{r4, lr}
 23f28fc:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 23f28fe:	f7ff ff8f 	bl	23f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f2902:	f104 0108 	add.w	r1, r4, #8
}
 23f2906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f290a:	f006 bca9 	b.w	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f290e <_ZN13RHHardwareSPI14endTransactionEv>:
{
 23f290e:	b508      	push	{r3, lr}
        instance().endTransaction();
 23f2910:	f7ff ff86 	bl	23f2820 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f2914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f2918:	f006 bc88 	b.w	23f922c <_ZN8SPIClass14endTransactionEv>

023f291c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
 23f291c:	2300      	movs	r3, #0
 23f291e:	4802      	ldr	r0, [pc, #8]	; (23f2928 <_GLOBAL__sub_I_hardware_spi+0xc>)
 23f2920:	461a      	mov	r2, r3
 23f2922:	4619      	mov	r1, r3
 23f2924:	f7ff bf68 	b.w	23f27f8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 23f2928:	1007ae70 	.word	0x1007ae70

023f292c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 23f292c:	b510      	push	{r4, lr}
 23f292e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 23f2930:	6a00      	ldr	r0, [r0, #32]
 23f2932:	6803      	ldr	r3, [r0, #0]
 23f2934:	68db      	ldr	r3, [r3, #12]
 23f2936:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 23f2938:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f293c:	2101      	movs	r1, #1
 23f293e:	f007 fa51 	bl	23f9de4 <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 23f2942:	2101      	movs	r1, #1
 23f2944:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2948:	f007 fa5d 	bl	23f9e06 <digitalWrite>

    delay(100);
 23f294c:	2064      	movs	r0, #100	; 0x64
 23f294e:	f005 f999 	bl	23f7c84 <delay>
    return true;
}
 23f2952:	2001      	movs	r0, #1
 23f2954:	bd10      	pop	{r4, pc}
	...

023f2958 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 23f2958:	b570      	push	{r4, r5, r6, lr}
 23f295a:	4604      	mov	r4, r0
 23f295c:	460d      	mov	r5, r1
 23f295e:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
 23f2960:	f7ff ff22 	bl	23f27a8 <_ZN15RHGenericDriverC1Ev>
 23f2964:	4b03      	ldr	r3, [pc, #12]	; (23f2974 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
}
 23f2966:	4620      	mov	r0, r4
    _slaveSelectPin(slaveSelectPin)
 23f2968:	6023      	str	r3, [r4, #0]
 23f296a:	6226      	str	r6, [r4, #32]
 23f296c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
 23f2970:	bd70      	pop	{r4, r5, r6, pc}
 23f2972:	bf00      	nop
 23f2974:	023ff5c0 	.word	0x023ff5c0

023f2978 <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 23f2978:	b538      	push	{r3, r4, r5, lr}
 23f297a:	4604      	mov	r4, r0
 23f297c:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
 23f297e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 23f2982:	2100      	movs	r1, #0
 23f2984:	f007 fa3f 	bl	23f9e06 <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 23f2988:	6a20      	ldr	r0, [r4, #32]
 23f298a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 23f298e:	6803      	ldr	r3, [r0, #0]
 23f2990:	681b      	ldr	r3, [r3, #0]
 23f2992:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 23f2994:	6a20      	ldr	r0, [r4, #32]
 23f2996:	2100      	movs	r1, #0
 23f2998:	6803      	ldr	r3, [r0, #0]
 23f299a:	681b      	ldr	r3, [r3, #0]
 23f299c:	4798      	blx	r3
 23f299e:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 23f29a0:	2101      	movs	r1, #1
 23f29a2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f29a6:	f007 fa2e 	bl	23f9e06 <digitalWrite>
    ATOMIC_BLOCK_END;
    return val;
}
 23f29aa:	4628      	mov	r0, r5
 23f29ac:	bd38      	pop	{r3, r4, r5, pc}

023f29ae <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 23f29ae:	b570      	push	{r4, r5, r6, lr}
 23f29b0:	4604      	mov	r4, r0
 23f29b2:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f29b4:	6a00      	ldr	r0, [r0, #32]
{
 23f29b6:	4616      	mov	r6, r2
    _spi.beginTransaction();
 23f29b8:	6803      	ldr	r3, [r0, #0]
 23f29ba:	6a1b      	ldr	r3, [r3, #32]
 23f29bc:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f29be:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f29c2:	2100      	movs	r1, #0
 23f29c4:	f007 fa1f 	bl	23f9e06 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 23f29c8:	6a20      	ldr	r0, [r4, #32]
 23f29ca:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f29ce:	6803      	ldr	r3, [r0, #0]
 23f29d0:	681b      	ldr	r3, [r3, #0]
 23f29d2:	4798      	blx	r3
 23f29d4:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 23f29d6:	6a20      	ldr	r0, [r4, #32]
 23f29d8:	4631      	mov	r1, r6
 23f29da:	6803      	ldr	r3, [r0, #0]
 23f29dc:	681b      	ldr	r3, [r3, #0]
 23f29de:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 23f29e0:	2101      	movs	r1, #1
 23f29e2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f29e6:	f007 fa0e 	bl	23f9e06 <digitalWrite>
    _spi.endTransaction();
 23f29ea:	6a20      	ldr	r0, [r4, #32]
 23f29ec:	6803      	ldr	r3, [r0, #0]
 23f29ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f29f0:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f29f2:	4628      	mov	r0, r5
 23f29f4:	bd70      	pop	{r4, r5, r6, pc}

023f29f6 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 23f29f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f29f8:	4604      	mov	r4, r0
 23f29fa:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f29fc:	6a00      	ldr	r0, [r0, #32]
{
 23f29fe:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f2a00:	6803      	ldr	r3, [r0, #0]
{
 23f2a02:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f2a04:	6a1b      	ldr	r3, [r3, #32]
 23f2a06:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f2a08:	2100      	movs	r1, #0
 23f2a0a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2a0e:	f007 f9fa 	bl	23f9e06 <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 23f2a12:	6a20      	ldr	r0, [r4, #32]
 23f2a14:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 23f2a18:	6803      	ldr	r3, [r0, #0]
 23f2a1a:	442e      	add	r6, r5
 23f2a1c:	681b      	ldr	r3, [r3, #0]
 23f2a1e:	4798      	blx	r3
 23f2a20:	4607      	mov	r7, r0
    while (len--)
 23f2a22:	42b5      	cmp	r5, r6
 23f2a24:	d007      	beq.n	23f2a36 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x40>
	*dest++ = _spi.transfer(0);
 23f2a26:	6a20      	ldr	r0, [r4, #32]
 23f2a28:	2100      	movs	r1, #0
 23f2a2a:	6803      	ldr	r3, [r0, #0]
 23f2a2c:	681b      	ldr	r3, [r3, #0]
 23f2a2e:	4798      	blx	r3
 23f2a30:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
 23f2a34:	e7f5      	b.n	23f2a22 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f2a36:	2101      	movs	r1, #1
 23f2a38:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2a3c:	f007 f9e3 	bl	23f9e06 <digitalWrite>
    _spi.endTransaction();
 23f2a40:	6a20      	ldr	r0, [r4, #32]
 23f2a42:	6803      	ldr	r3, [r0, #0]
 23f2a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2a46:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f2a48:	4638      	mov	r0, r7
 23f2a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f2a4c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 23f2a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2a4e:	4604      	mov	r4, r0
 23f2a50:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f2a52:	6a00      	ldr	r0, [r0, #32]
{
 23f2a54:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f2a56:	6803      	ldr	r3, [r0, #0]
{
 23f2a58:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f2a5a:	6a1b      	ldr	r3, [r3, #32]
 23f2a5c:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f2a5e:	2100      	movs	r1, #0
 23f2a60:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2a64:	f007 f9cf 	bl	23f9e06 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 23f2a68:	6a20      	ldr	r0, [r4, #32]
 23f2a6a:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 23f2a6e:	6803      	ldr	r3, [r0, #0]
 23f2a70:	442e      	add	r6, r5
 23f2a72:	681b      	ldr	r3, [r3, #0]
 23f2a74:	4798      	blx	r3
 23f2a76:	4607      	mov	r7, r0
    while (len--)
 23f2a78:	42b5      	cmp	r5, r6
 23f2a7a:	d006      	beq.n	23f2a8a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3e>
	_spi.transfer(*src++);
 23f2a7c:	6a20      	ldr	r0, [r4, #32]
 23f2a7e:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f2a82:	6803      	ldr	r3, [r0, #0]
 23f2a84:	681b      	ldr	r3, [r3, #0]
 23f2a86:	4798      	blx	r3
    while (len--)
 23f2a88:	e7f6      	b.n	23f2a78 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f2a8a:	2101      	movs	r1, #1
 23f2a8c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2a90:	f007 f9b9 	bl	23f9e06 <digitalWrite>
    _spi.endTransaction();
 23f2a94:	6a20      	ldr	r0, [r4, #32]
 23f2a96:	6803      	ldr	r3, [r0, #0]
 23f2a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2a9a:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f2a9c:	4638      	mov	r0, r7
 23f2a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f2aa0 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _slaveSelectPin = slaveSelectPin;
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
 23f2aa0:	6a00      	ldr	r0, [r0, #32]
 23f2aa2:	6803      	ldr	r3, [r0, #0]
 23f2aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f2aa6:	4718      	bx	r3

023f2aa8 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 23f2aa8:	20fb      	movs	r0, #251	; 0xfb
 23f2aaa:	4770      	bx	lr

023f2aac <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
 23f2aac:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
 23f2aae:	7903      	ldrb	r3, [r0, #4]
{
 23f2ab0:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
 23f2ab2:	2b05      	cmp	r3, #5
 23f2ab4:	d00a      	beq.n	23f2acc <_ZN7RH_RF9515isChannelActiveEv+0x20>
    {
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 23f2ab6:	2207      	movs	r2, #7
 23f2ab8:	2101      	movs	r1, #1
 23f2aba:	f7ff ff78 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 23f2abe:	2280      	movs	r2, #128	; 0x80
 23f2ac0:	2140      	movs	r1, #64	; 0x40
 23f2ac2:	4620      	mov	r0, r4
 23f2ac4:	f7ff ff73 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
 23f2ac8:	2305      	movs	r3, #5
 23f2aca:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
 23f2acc:	7923      	ldrb	r3, [r4, #4]
 23f2ace:	2b05      	cmp	r3, #5
 23f2ad0:	d0fc      	beq.n	23f2acc <_ZN7RH_RF9515isChannelActiveEv+0x20>
        YIELD;

    return _cad;
 23f2ad2:	7e20      	ldrb	r0, [r4, #24]
}
 23f2ad4:	bd10      	pop	{r4, pc}

023f2ad6 <_ZN7RH_RF955sleepEv>:
{
 23f2ad6:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 23f2ad8:	7903      	ldrb	r3, [r0, #4]
{
 23f2ada:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 23f2adc:	2b01      	cmp	r3, #1
 23f2ade:	d005      	beq.n	23f2aec <_ZN7RH_RF955sleepEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 23f2ae0:	2200      	movs	r2, #0
 23f2ae2:	2101      	movs	r1, #1
 23f2ae4:	f7ff ff63 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 23f2ae8:	2301      	movs	r3, #1
 23f2aea:	7123      	strb	r3, [r4, #4]
}
 23f2aec:	2001      	movs	r0, #1
 23f2aee:	bd10      	pop	{r4, pc}

023f2af0 <_ZN7RH_RF954recvEPhS0_>:
{
 23f2af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
 23f2af2:	6803      	ldr	r3, [r0, #0]
{
 23f2af4:	4604      	mov	r4, r0
    if (!available())
 23f2af6:	685b      	ldr	r3, [r3, #4]
{
 23f2af8:	460f      	mov	r7, r1
 23f2afa:	4615      	mov	r5, r2
    if (!available())
 23f2afc:	4798      	blx	r3
 23f2afe:	4606      	mov	r6, r0
 23f2b00:	b1b8      	cbz	r0, 23f2b32 <_ZN7RH_RF954recvEPhS0_+0x42>
    if (buf && len)
 23f2b02:	b18f      	cbz	r7, 23f2b28 <_ZN7RH_RF954recvEPhS0_+0x38>
 23f2b04:	b185      	cbz	r5, 23f2b28 <_ZN7RH_RF954recvEPhS0_+0x38>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 23f2b06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23f2b0a:	782a      	ldrb	r2, [r5, #0]
 23f2b0c:	3b03      	subs	r3, #3
 23f2b0e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f2b10:	bfd8      	it	le
 23f2b12:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f2b16:	4638      	mov	r0, r7
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f2b18:	bfdc      	itt	le
 23f2b1a:	3b04      	suble	r3, #4
 23f2b1c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f2b1e:	782a      	ldrb	r2, [r5, #0]
 23f2b20:	f104 012d 	add.w	r1, r4, #45	; 0x2d
 23f2b24:	f009 ffb2 	bl	23fca8c <memcpy>
    _rxBufValid = false;
 23f2b28:	2300      	movs	r3, #0
 23f2b2a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
 23f2b2e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 23f2b32:	4630      	mov	r0, r6
 23f2b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f2b36 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 23)
 23f2b36:	2917      	cmp	r1, #23
void RH_RF95::setTxPower(int8_t power, bool useRFO)
 23f2b38:	b538      	push	{r3, r4, r5, lr}
 23f2b3a:	4605      	mov	r5, r0
 23f2b3c:	460c      	mov	r4, r1
	if (power > 23)
 23f2b3e:	dc14      	bgt.n	23f2b6a <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 5)
 23f2b40:	2904      	cmp	r1, #4
 23f2b42:	dd14      	ble.n	23f2b6e <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 20)
 23f2b44:	2914      	cmp	r1, #20
 23f2b46:	dd13      	ble.n	23f2b70 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 23f2b48:	2207      	movs	r2, #7
 23f2b4a:	214d      	movs	r1, #77	; 0x4d
 23f2b4c:	4628      	mov	r0, r5
 23f2b4e:	f7ff ff2e 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 23f2b52:	3c03      	subs	r4, #3
 23f2b54:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f2b56:	1f62      	subs	r2, r4, #5
 23f2b58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 23f2b5c:	4628      	mov	r0, r5
}
 23f2b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f2b62:	2109      	movs	r1, #9
 23f2b64:	b2d2      	uxtb	r2, r2
 23f2b66:	f7ff bf22 	b.w	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 23;
 23f2b6a:	2417      	movs	r4, #23
 23f2b6c:	e7ec      	b.n	23f2b48 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 5;
 23f2b6e:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 23f2b70:	2204      	movs	r2, #4
 23f2b72:	214d      	movs	r1, #77	; 0x4d
 23f2b74:	4628      	mov	r0, r5
 23f2b76:	f7ff ff1a 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
 23f2b7a:	e7ec      	b.n	23f2b56 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>

023f2b7c <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 23f2b7c:	b538      	push	{r3, r4, r5, lr}
 23f2b7e:	4604      	mov	r4, r0
 23f2b80:	4615      	mov	r5, r2
    _rxBufValid(0)
 23f2b82:	461a      	mov	r2, r3
 23f2b84:	f7ff fee8 	bl	23f2958 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 23f2b88:	4b05      	ldr	r3, [pc, #20]	; (23f2ba0 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x24>)
}
 23f2b8a:	4620      	mov	r0, r4
    _rxBufValid(0)
 23f2b8c:	6023      	str	r3, [r4, #0]
 23f2b8e:	2300      	movs	r3, #0
 23f2b90:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _myInterruptIndex = 0xff; // Not allocated yet
 23f2b94:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
 23f2b96:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _myInterruptIndex = 0xff; // Not allocated yet
 23f2b9a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 23f2b9e:	bd38      	pop	{r3, r4, r5, pc}
 23f2ba0:	023ff644 	.word	0x023ff644

023f2ba4 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
 23f2ba4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 23f2ba8:	2b03      	cmp	r3, #3
 23f2baa:	d91b      	bls.n	23f2be4 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
 23f2bac:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 23f2bb0:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 23f2bb2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 23f2bb6:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 23f2bb8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 23f2bbc:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 23f2bbe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 23f2bc2:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
 23f2bc4:	7983      	ldrb	r3, [r0, #6]
 23f2bc6:	b933      	cbnz	r3, 23f2bd6 <_ZN7RH_RF9513validateRxBufEv+0x32>
 23f2bc8:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
 23f2bca:	7942      	ldrb	r2, [r0, #5]
 23f2bcc:	429a      	cmp	r2, r3
 23f2bce:	d002      	beq.n	23f2bd6 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 23f2bd0:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
 23f2bd2:	2bff      	cmp	r3, #255	; 0xff
 23f2bd4:	d106      	bne.n	23f2be4 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
 23f2bd6:	8a83      	ldrh	r3, [r0, #20]
 23f2bd8:	3301      	adds	r3, #1
 23f2bda:	b29b      	uxth	r3, r3
 23f2bdc:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
 23f2bde:	2301      	movs	r3, #1
 23f2be0:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
 23f2be4:	4770      	bx	lr
	...

023f2be8 <_ZN7RH_RF9512setFrequencyEf>:
{
 23f2be8:	b538      	push	{r3, r4, r5, lr}
 23f2bea:	4604      	mov	r4, r0
 23f2bec:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f2bf0:	ee10 0a10 	vmov	r0, s0
{
 23f2bf4:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f2bf8:	f7f1 fc4a 	bl	23e4490 <__aeabi_f2d>
 23f2bfc:	a317      	add	r3, pc, #92	; (adr r3, 23f2c5c <_ZN7RH_RF9512setFrequencyEf+0x74>)
 23f2bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2c02:	f7f1 fc9d 	bl	23e4540 <__aeabi_dmul>
 23f2c06:	a317      	add	r3, pc, #92	; (adr r3, 23f2c64 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
 23f2c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2c0c:	f7f1 fdc2 	bl	23e4794 <__aeabi_ddiv>
 23f2c10:	f7f1 ff6e 	bl	23e4af0 <__aeabi_d2uiz>
 23f2c14:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 23f2c16:	f3c0 4207 	ubfx	r2, r0, #16, #8
 23f2c1a:	2106      	movs	r1, #6
 23f2c1c:	4620      	mov	r0, r4
 23f2c1e:	f7ff fec6 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 23f2c22:	2107      	movs	r1, #7
 23f2c24:	f3c5 2207 	ubfx	r2, r5, #8, #8
 23f2c28:	4620      	mov	r0, r4
 23f2c2a:	f7ff fec0 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 23f2c2e:	2108      	movs	r1, #8
 23f2c30:	4620      	mov	r0, r4
 23f2c32:	b2ea      	uxtb	r2, r5
 23f2c34:	f7ff febb 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
 23f2c38:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f2c58 <_ZN7RH_RF9512setFrequencyEf+0x70>
 23f2c3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
 23f2c40:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
 23f2c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2c48:	bfac      	ite	ge
 23f2c4a:	2301      	movge	r3, #1
 23f2c4c:	2300      	movlt	r3, #0
}
 23f2c4e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
 23f2c50:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
 23f2c54:	bd38      	pop	{r3, r4, r5, pc}
 23f2c56:	bf00      	nop
 23f2c58:	4442c000 	.word	0x4442c000
 23f2c5c:	00000000 	.word	0x00000000
 23f2c60:	412e8480 	.word	0x412e8480
 23f2c64:	00000000 	.word	0x00000000
 23f2c68:	404e8480 	.word	0x404e8480

023f2c6c <_ZN7RH_RF9511setModeIdleEv>:
{
 23f2c6c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 23f2c6e:	7903      	ldrb	r3, [r0, #4]
{
 23f2c70:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 23f2c72:	2b02      	cmp	r3, #2
 23f2c74:	d005      	beq.n	23f2c82 <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 23f2c76:	2201      	movs	r2, #1
 23f2c78:	4611      	mov	r1, r2
 23f2c7a:	f7ff fe98 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 23f2c7e:	2302      	movs	r3, #2
 23f2c80:	7123      	strb	r3, [r4, #4]
}
 23f2c82:	bd10      	pop	{r4, pc}

023f2c84 <_ZN7RH_RF9515handleInterruptEv>:
{
 23f2c84:	b538      	push	{r3, r4, r5, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f2c86:	2112      	movs	r1, #18
{
 23f2c88:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f2c8a:	f7ff fe75 	bl	23f2978 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f2c8e:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f2c90:	4605      	mov	r5, r0
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f2c92:	4620      	mov	r0, r4
 23f2c94:	f7ff fe70 	bl	23f2978 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx
 23f2c98:	7923      	ldrb	r3, [r4, #4]
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f2c9a:	2b04      	cmp	r3, #4
 23f2c9c:	d117      	bne.n	23f2cce <_ZN7RH_RF9515handleInterruptEv+0x4a>
	    | !(crc_present & RH_RF95_RX_PAYLOAD_CRC_IS_ON)))
 23f2c9e:	f080 0040 	eor.w	r0, r0, #64	; 0x40
 23f2ca2:	f3c0 1080 	ubfx	r0, r0, #6, #1
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f2ca6:	f005 03a0 	and.w	r3, r5, #160	; 0xa0
 23f2caa:	4303      	orrs	r3, r0
 23f2cac:	d00f      	beq.n	23f2cce <_ZN7RH_RF9515handleInterruptEv+0x4a>
	_rxBad++;
 23f2cae:	8a63      	ldrh	r3, [r4, #18]
 23f2cb0:	3301      	adds	r3, #1
 23f2cb2:	b29b      	uxth	r3, r3
 23f2cb4:	8263      	strh	r3, [r4, #18]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f2cb6:	22ff      	movs	r2, #255	; 0xff
 23f2cb8:	2112      	movs	r1, #18
 23f2cba:	4620      	mov	r0, r4
 23f2cbc:	f7ff fe77 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f2cc0:	4620      	mov	r0, r4
}
 23f2cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f2cc6:	22ff      	movs	r2, #255	; 0xff
 23f2cc8:	2112      	movs	r1, #18
 23f2cca:	f7ff be70 	b.w	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 23f2cce:	7923      	ldrb	r3, [r4, #4]
 23f2cd0:	2b04      	cmp	r3, #4
 23f2cd2:	d101      	bne.n	23f2cd8 <_ZN7RH_RF9515handleInterruptEv+0x54>
 23f2cd4:	0669      	lsls	r1, r5, #25
 23f2cd6:	d40d      	bmi.n	23f2cf4 <_ZN7RH_RF9515handleInterruptEv+0x70>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 23f2cd8:	7923      	ldrb	r3, [r4, #4]
 23f2cda:	2b03      	cmp	r3, #3
 23f2cdc:	d101      	bne.n	23f2ce2 <_ZN7RH_RF9515handleInterruptEv+0x5e>
 23f2cde:	072a      	lsls	r2, r5, #28
 23f2ce0:	d459      	bmi.n	23f2d96 <_ZN7RH_RF9515handleInterruptEv+0x112>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
 23f2ce2:	7923      	ldrb	r3, [r4, #4]
 23f2ce4:	2b05      	cmp	r3, #5
 23f2ce6:	d1e6      	bne.n	23f2cb6 <_ZN7RH_RF9515handleInterruptEv+0x32>
 23f2ce8:	076b      	lsls	r3, r5, #29
 23f2cea:	d5e4      	bpl.n	23f2cb6 <_ZN7RH_RF9515handleInterruptEv+0x32>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
 23f2cec:	f005 0501 	and.w	r5, r5, #1
 23f2cf0:	7625      	strb	r5, [r4, #24]
 23f2cf2:	e054      	b.n	23f2d9e <_ZN7RH_RF9515handleInterruptEv+0x11a>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f2cf4:	2113      	movs	r1, #19
 23f2cf6:	4620      	mov	r0, r4
 23f2cf8:	f7ff fe3e 	bl	23f2978 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f2cfc:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f2cfe:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f2d00:	4620      	mov	r0, r4
 23f2d02:	f7ff fe39 	bl	23f2978 <_ZN11RHSPIDriver7spiReadEh>
 23f2d06:	210d      	movs	r1, #13
 23f2d08:	4602      	mov	r2, r0
 23f2d0a:	4620      	mov	r0, r4
 23f2d0c:	f7ff fe4f 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 23f2d10:	462b      	mov	r3, r5
 23f2d12:	2100      	movs	r1, #0
 23f2d14:	f104 0229 	add.w	r2, r4, #41	; 0x29
 23f2d18:	4620      	mov	r0, r4
 23f2d1a:	f7ff fe6c 	bl	23f29f6 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f2d1e:	22ff      	movs	r2, #255	; 0xff
 23f2d20:	2112      	movs	r1, #18
 23f2d22:	4620      	mov	r0, r4
	_bufLen = len;
 23f2d24:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f2d28:	f7ff fe41 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
 23f2d2c:	2119      	movs	r1, #25
 23f2d2e:	4620      	mov	r0, r4
 23f2d30:	f7ff fe22 	bl	23f2978 <_ZN11RHSPIDriver7spiReadEh>
 23f2d34:	b240      	sxtb	r0, r0
 23f2d36:	2800      	cmp	r0, #0
 23f2d38:	bfb8      	it	lt
 23f2d3a:	3003      	addlt	r0, #3
 23f2d3c:	1080      	asrs	r0, r0, #2
 23f2d3e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f2d42:	211a      	movs	r1, #26
 23f2d44:	4620      	mov	r0, r4
 23f2d46:	f7ff fe17 	bl	23f2978 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
 23f2d4a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f2d4e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
 23f2d50:	2b00      	cmp	r3, #0
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f2d52:	bfa8      	it	ge
 23f2d54:	220f      	movge	r2, #15
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f2d56:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f2d58:	bfa9      	itett	ge
 23f2d5a:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
 23f2d5c:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f2d5e:	b21b      	sxthge	r3, r3
 23f2d60:	011b      	lslge	r3, r3, #4
 23f2d62:	bfac      	ite	ge
 23f2d64:	fb93 f3f2 	sdivge	r3, r3, r2
	    _lastRssi = _lastRssi + _lastSNR;
 23f2d68:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f2d6a:	b21b      	sxth	r3, r3
 23f2d6c:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
 23f2d6e:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 23f2d72:	b16b      	cbz	r3, 23f2d90 <_ZN7RH_RF9515handleInterruptEv+0x10c>
	    _lastRssi -= 157;
 23f2d74:	8a23      	ldrh	r3, [r4, #16]
 23f2d76:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
 23f2d78:	b21b      	sxth	r3, r3
 23f2d7a:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
 23f2d7c:	4620      	mov	r0, r4
 23f2d7e:	f7ff ff11 	bl	23f2ba4 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 23f2d82:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 23f2d86:	2b00      	cmp	r3, #0
 23f2d88:	d095      	beq.n	23f2cb6 <_ZN7RH_RF9515handleInterruptEv+0x32>
        setModeIdle();
 23f2d8a:	f7ff ff6f 	bl	23f2c6c <_ZN7RH_RF9511setModeIdleEv>
 23f2d8e:	e792      	b.n	23f2cb6 <_ZN7RH_RF9515handleInterruptEv+0x32>
	    _lastRssi -= 164;
 23f2d90:	8a23      	ldrh	r3, [r4, #16]
 23f2d92:	3ba4      	subs	r3, #164	; 0xa4
 23f2d94:	e7f0      	b.n	23f2d78 <_ZN7RH_RF9515handleInterruptEv+0xf4>
	_txGood++;
 23f2d96:	8ae3      	ldrh	r3, [r4, #22]
 23f2d98:	3301      	adds	r3, #1
 23f2d9a:	b29b      	uxth	r3, r3
 23f2d9c:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
 23f2d9e:	4620      	mov	r0, r4
 23f2da0:	e7f3      	b.n	23f2d8a <_ZN7RH_RF9515handleInterruptEv+0x106>
	...

023f2da4 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
 23f2da4:	4b02      	ldr	r3, [pc, #8]	; (23f2db0 <_ZN7RH_RF954isr0Ev+0xc>)
 23f2da6:	6818      	ldr	r0, [r3, #0]
 23f2da8:	b108      	cbz	r0, 23f2dae <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 23f2daa:	f7ff bf6b 	b.w	23f2c84 <_ZN7RH_RF9515handleInterruptEv>
}
 23f2dae:	4770      	bx	lr
 23f2db0:	1007ae8c 	.word	0x1007ae8c

023f2db4 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
 23f2db4:	4b02      	ldr	r3, [pc, #8]	; (23f2dc0 <_ZN7RH_RF954isr1Ev+0xc>)
 23f2db6:	6858      	ldr	r0, [r3, #4]
 23f2db8:	b108      	cbz	r0, 23f2dbe <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 23f2dba:	f7ff bf63 	b.w	23f2c84 <_ZN7RH_RF9515handleInterruptEv>
}
 23f2dbe:	4770      	bx	lr
 23f2dc0:	1007ae8c 	.word	0x1007ae8c

023f2dc4 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
 23f2dc4:	4b02      	ldr	r3, [pc, #8]	; (23f2dd0 <_ZN7RH_RF954isr2Ev+0xc>)
 23f2dc6:	6898      	ldr	r0, [r3, #8]
 23f2dc8:	b108      	cbz	r0, 23f2dce <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 23f2dca:	f7ff bf5b 	b.w	23f2c84 <_ZN7RH_RF9515handleInterruptEv>
}
 23f2dce:	4770      	bx	lr
 23f2dd0:	1007ae8c 	.word	0x1007ae8c

023f2dd4 <_ZN7RH_RF959setModeRxEv>:
{
 23f2dd4:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 23f2dd6:	7903      	ldrb	r3, [r0, #4]
{
 23f2dd8:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 23f2dda:	2b04      	cmp	r3, #4
 23f2ddc:	d00a      	beq.n	23f2df4 <_ZN7RH_RF959setModeRxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 23f2dde:	2205      	movs	r2, #5
 23f2de0:	2101      	movs	r1, #1
 23f2de2:	f7ff fde4 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 23f2de6:	2200      	movs	r2, #0
 23f2de8:	2140      	movs	r1, #64	; 0x40
 23f2dea:	4620      	mov	r0, r4
 23f2dec:	f7ff fddf 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
 23f2df0:	2304      	movs	r3, #4
 23f2df2:	7123      	strb	r3, [r4, #4]
}
 23f2df4:	bd10      	pop	{r4, pc}

023f2df6 <_ZN7RH_RF959availableEv>:
{
 23f2df6:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 23f2df8:	7903      	ldrb	r3, [r0, #4]
{
 23f2dfa:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 23f2dfc:	2b03      	cmp	r3, #3
 23f2dfe:	d005      	beq.n	23f2e0c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
 23f2e00:	f7ff ffe8 	bl	23f2dd4 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 23f2e04:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 23f2e08:	b2c0      	uxtb	r0, r0
}
 23f2e0a:	bd10      	pop	{r4, pc}
	return false;
 23f2e0c:	2000      	movs	r0, #0
 23f2e0e:	e7fc      	b.n	23f2e0a <_ZN7RH_RF959availableEv+0x14>

023f2e10 <_ZN7RH_RF959setModeTxEv>:
{
 23f2e10:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 23f2e12:	7903      	ldrb	r3, [r0, #4]
{
 23f2e14:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 23f2e16:	2b03      	cmp	r3, #3
 23f2e18:	d00a      	beq.n	23f2e30 <_ZN7RH_RF959setModeTxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 23f2e1a:	2203      	movs	r2, #3
 23f2e1c:	2101      	movs	r1, #1
 23f2e1e:	f7ff fdc6 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 23f2e22:	2240      	movs	r2, #64	; 0x40
 23f2e24:	4620      	mov	r0, r4
 23f2e26:	4611      	mov	r1, r2
 23f2e28:	f7ff fdc1 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
 23f2e2c:	2303      	movs	r3, #3
 23f2e2e:	7123      	strb	r3, [r4, #4]
}
 23f2e30:	bd10      	pop	{r4, pc}

023f2e32 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f2e32:	2afb      	cmp	r2, #251	; 0xfb
{
 23f2e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2e36:	4604      	mov	r4, r0
 23f2e38:	460f      	mov	r7, r1
 23f2e3a:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f2e3c:	d902      	bls.n	23f2e44 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
 23f2e3e:	2600      	movs	r6, #0
}
 23f2e40:	4630      	mov	r0, r6
 23f2e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 23f2e44:	6803      	ldr	r3, [r0, #0]
 23f2e46:	699b      	ldr	r3, [r3, #24]
 23f2e48:	4798      	blx	r3
    setModeIdle();
 23f2e4a:	4620      	mov	r0, r4
 23f2e4c:	f7ff ff0e 	bl	23f2c6c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
 23f2e50:	6823      	ldr	r3, [r4, #0]
 23f2e52:	4620      	mov	r0, r4
 23f2e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2e56:	4798      	blx	r3
 23f2e58:	4606      	mov	r6, r0
 23f2e5a:	2800      	cmp	r0, #0
 23f2e5c:	d0ef      	beq.n	23f2e3e <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 23f2e5e:	2200      	movs	r2, #0
 23f2e60:	210d      	movs	r1, #13
 23f2e62:	4620      	mov	r0, r4
 23f2e64:	f7ff fda3 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 23f2e68:	7ae2      	ldrb	r2, [r4, #11]
 23f2e6a:	2100      	movs	r1, #0
 23f2e6c:	4620      	mov	r0, r4
 23f2e6e:	f7ff fd9e 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 23f2e72:	7b22      	ldrb	r2, [r4, #12]
 23f2e74:	2100      	movs	r1, #0
 23f2e76:	4620      	mov	r0, r4
 23f2e78:	f7ff fd99 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 23f2e7c:	7b62      	ldrb	r2, [r4, #13]
 23f2e7e:	2100      	movs	r1, #0
 23f2e80:	4620      	mov	r0, r4
 23f2e82:	f7ff fd94 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 23f2e86:	7ba2      	ldrb	r2, [r4, #14]
 23f2e88:	2100      	movs	r1, #0
 23f2e8a:	4620      	mov	r0, r4
 23f2e8c:	f7ff fd8f 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 23f2e90:	462b      	mov	r3, r5
 23f2e92:	463a      	mov	r2, r7
 23f2e94:	2100      	movs	r1, #0
 23f2e96:	4620      	mov	r0, r4
 23f2e98:	f7ff fdd8 	bl	23f2a4c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 23f2e9c:	1d2a      	adds	r2, r5, #4
 23f2e9e:	2122      	movs	r1, #34	; 0x22
 23f2ea0:	4620      	mov	r0, r4
 23f2ea2:	b2d2      	uxtb	r2, r2
 23f2ea4:	f7ff fd83 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
 23f2ea8:	4620      	mov	r0, r4
 23f2eaa:	f7ff ffb1 	bl	23f2e10 <_ZN7RH_RF959setModeTxEv>
    return true;
 23f2eae:	e7c7      	b.n	23f2e40 <_ZN7RH_RF954sendEPKhh+0xe>

023f2eb0 <_ZN7RH_RF9510setTxPowerEab>:
    if (useRFO)
 23f2eb0:	b15a      	cbz	r2, 23f2eca <_ZN7RH_RF9510setTxPowerEab+0x1a>
	if (power > 14)
 23f2eb2:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 23f2eb6:	2a0e      	cmp	r2, #14
 23f2eb8:	bfa8      	it	ge
 23f2eba:	220e      	movge	r2, #14
 23f2ebc:	3201      	adds	r2, #1
 23f2ebe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 23f2ec2:	2109      	movs	r1, #9
 23f2ec4:	b2d2      	uxtb	r2, r2
 23f2ec6:	f7ff bd72 	b.w	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
 23f2eca:	f7ff be34 	b.w	23f2b36 <_ZN7RH_RF9510setTxPowerEab.part.0>

023f2ece <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
 23f2ece:	b538      	push	{r3, r4, r5, lr}
 23f2ed0:	4605      	mov	r5, r0
 23f2ed2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 23f2ed4:	780a      	ldrb	r2, [r1, #0]
 23f2ed6:	211d      	movs	r1, #29
 23f2ed8:	f7ff fd69 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 23f2edc:	7862      	ldrb	r2, [r4, #1]
 23f2ede:	211e      	movs	r1, #30
 23f2ee0:	4628      	mov	r0, r5
 23f2ee2:	f7ff fd64 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f2ee6:	4628      	mov	r0, r5
 23f2ee8:	78a2      	ldrb	r2, [r4, #2]
 23f2eea:	2126      	movs	r1, #38	; 0x26
}
 23f2eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f2ef0:	f7ff bd5d 	b.w	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>

023f2ef4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f2ef4:	2904      	cmp	r1, #4
{
 23f2ef6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f2ef8:	d80f      	bhi.n	23f2f1a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f2efa:	4b09      	ldr	r3, [pc, #36]	; (23f2f20 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 23f2efc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 23f2f00:	185c      	adds	r4, r3, r1
 23f2f02:	5a5a      	ldrh	r2, [r3, r1]
 23f2f04:	78a3      	ldrb	r3, [r4, #2]
    setModemRegisters(&cfg);
 23f2f06:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f2f08:	f8ad 2004 	strh.w	r2, [sp, #4]
 23f2f0c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 23f2f10:	f7ff ffdd 	bl	23f2ece <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
 23f2f14:	2001      	movs	r0, #1
}
 23f2f16:	b002      	add	sp, #8
 23f2f18:	bd10      	pop	{r4, pc}
        return false;
 23f2f1a:	2000      	movs	r0, #0
 23f2f1c:	e7fb      	b.n	23f2f16 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
 23f2f1e:	bf00      	nop
 23f2f20:	023ff630 	.word	0x023ff630

023f2f24 <_ZN7RH_RF9517setPreambleLengthEt>:
{
 23f2f24:	b538      	push	{r3, r4, r5, lr}
 23f2f26:	4605      	mov	r5, r0
 23f2f28:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 23f2f2a:	0a0a      	lsrs	r2, r1, #8
 23f2f2c:	2120      	movs	r1, #32
 23f2f2e:	f7ff fd3e 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f2f32:	4628      	mov	r0, r5
 23f2f34:	b2e2      	uxtb	r2, r4
 23f2f36:	2121      	movs	r1, #33	; 0x21
}
 23f2f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f2f3c:	f7ff bd37 	b.w	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>

023f2f40 <_ZN7RH_RF954initEv>:
{
 23f2f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f2f42:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 23f2f44:	f7ff fcf2 	bl	23f292c <_ZN11RHSPIDriver4initEv>
 23f2f48:	4605      	mov	r5, r0
 23f2f4a:	b918      	cbnz	r0, 23f2f54 <_ZN7RH_RF954initEv+0x14>
	return false;
 23f2f4c:	2500      	movs	r5, #0
}
 23f2f4e:	4628      	mov	r0, r5
 23f2f50:	b002      	add	sp, #8
 23f2f52:	bd70      	pop	{r4, r5, r6, pc}
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 23f2f54:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
    spiUsingInterrupt(interruptNumber);
 23f2f58:	4620      	mov	r0, r4
 23f2f5a:	4631      	mov	r1, r6
 23f2f5c:	f7ff fda0 	bl	23f2aa0 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 23f2f60:	2280      	movs	r2, #128	; 0x80
 23f2f62:	2101      	movs	r1, #1
 23f2f64:	4620      	mov	r0, r4
 23f2f66:	f7ff fd22 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 23f2f6a:	200a      	movs	r0, #10
 23f2f6c:	f004 fe8a 	bl	23f7c84 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 23f2f70:	2101      	movs	r1, #1
 23f2f72:	4620      	mov	r0, r4
 23f2f74:	f7ff fd00 	bl	23f2978 <_ZN11RHSPIDriver7spiReadEh>
 23f2f78:	2880      	cmp	r0, #128	; 0x80
 23f2f7a:	d1e7      	bne.n	23f2f4c <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
 23f2f7c:	2100      	movs	r1, #0
 23f2f7e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 23f2f82:	f006 ff2f 	bl	23f9de4 <pinMode>
    if (_myInterruptIndex == 0xff)
 23f2f86:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 23f2f8a:	2bff      	cmp	r3, #255	; 0xff
 23f2f8c:	d107      	bne.n	23f2f9e <_ZN7RH_RF954initEv+0x5e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 23f2f8e:	4a23      	ldr	r2, [pc, #140]	; (23f301c <_ZN7RH_RF954initEv+0xdc>)
 23f2f90:	7813      	ldrb	r3, [r2, #0]
 23f2f92:	2b03      	cmp	r3, #3
 23f2f94:	d8da      	bhi.n	23f2f4c <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 23f2f96:	1c59      	adds	r1, r3, #1
 23f2f98:	7011      	strb	r1, [r2, #0]
 23f2f9a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    _deviceForInterrupt[_myInterruptIndex] = this;
 23f2f9e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 23f2fa2:	4b1f      	ldr	r3, [pc, #124]	; (23f3020 <_ZN7RH_RF954initEv+0xe0>)
 23f2fa4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 23f2fa8:	bb32      	cbnz	r2, 23f2ff8 <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr0, RISING);
 23f2faa:	9200      	str	r2, [sp, #0]
 23f2fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f2fb0:	2201      	movs	r2, #1
 23f2fb2:	491c      	ldr	r1, [pc, #112]	; (23f3024 <_ZN7RH_RF954initEv+0xe4>)
	attachInterrupt(interruptNumber, isr2, RISING);
 23f2fb4:	4630      	mov	r0, r6
 23f2fb6:	f005 fca5 	bl	23f8904 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 23f2fba:	2200      	movs	r2, #0
 23f2fbc:	210e      	movs	r1, #14
 23f2fbe:	4620      	mov	r0, r4
 23f2fc0:	f7ff fcf5 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 23f2fc4:	2200      	movs	r2, #0
 23f2fc6:	210f      	movs	r1, #15
 23f2fc8:	4620      	mov	r0, r4
 23f2fca:	f7ff fcf0 	bl	23f29ae <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
 23f2fce:	4620      	mov	r0, r4
 23f2fd0:	f7ff fe4c 	bl	23f2c6c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
 23f2fd4:	2100      	movs	r1, #0
 23f2fd6:	4620      	mov	r0, r4
 23f2fd8:	f7ff ff8c 	bl	23f2ef4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
 23f2fdc:	2108      	movs	r1, #8
 23f2fde:	4620      	mov	r0, r4
 23f2fe0:	f7ff ffa0 	bl	23f2f24 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
 23f2fe4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 23f3028 <_ZN7RH_RF954initEv+0xe8>
 23f2fe8:	4620      	mov	r0, r4
 23f2fea:	f7ff fdfd 	bl	23f2be8 <_ZN7RH_RF9512setFrequencyEf>
    if (useRFO)
 23f2fee:	210d      	movs	r1, #13
 23f2ff0:	4620      	mov	r0, r4
 23f2ff2:	f7ff fda0 	bl	23f2b36 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
 23f2ff6:	e7aa      	b.n	23f2f4e <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
 23f2ff8:	2a01      	cmp	r2, #1
 23f2ffa:	f04f 0300 	mov.w	r3, #0
 23f2ffe:	d104      	bne.n	23f300a <_ZN7RH_RF954initEv+0xca>
	attachInterrupt(interruptNumber, isr1, RISING);
 23f3000:	9300      	str	r3, [sp, #0]
 23f3002:	490a      	ldr	r1, [pc, #40]	; (23f302c <_ZN7RH_RF954initEv+0xec>)
 23f3004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f3008:	e7d4      	b.n	23f2fb4 <_ZN7RH_RF954initEv+0x74>
    else if (_myInterruptIndex == 2)
 23f300a:	2a02      	cmp	r2, #2
 23f300c:	d19e      	bne.n	23f2f4c <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 23f300e:	9300      	str	r3, [sp, #0]
 23f3010:	2201      	movs	r2, #1
 23f3012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f3016:	4906      	ldr	r1, [pc, #24]	; (23f3030 <_ZN7RH_RF954initEv+0xf0>)
 23f3018:	e7cc      	b.n	23f2fb4 <_ZN7RH_RF954initEv+0x74>
 23f301a:	bf00      	nop
 23f301c:	1007ae88 	.word	0x1007ae88
 23f3020:	1007ae8c 	.word	0x1007ae8c
 23f3024:	023f2da5 	.word	0x023f2da5
 23f3028:	43d90000 	.word	0x43d90000
 23f302c:	023f2db5 	.word	0x023f2db5
 23f3030:	023f2dc5 	.word	0x023f2dc5

023f3034 <_ZN7FatFile8openRootEP9FatVolume.part.0>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 23f3034:	b538      	push	{r3, r4, r5, lr}
 23f3036:	460d      	mov	r5, r1
 23f3038:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 23f303a:	2224      	movs	r2, #36	; 0x24
 23f303c:	2100      	movs	r1, #0
 23f303e:	f009 fd32 	bl	23fcaa6 <memset>

  m_vol = vol;
 23f3042:	60a5      	str	r5, [r4, #8]
  /** \return The number of File Allocation Tables. */
  uint8_t fatCount() const { return 2; }
  /** \return The logical sector number for the start of the first FAT. */
  uint32_t fatStartSector() const { return m_fatStartSector; }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const { return m_fatType; }
 23f3044:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 23f3046:	2b10      	cmp	r3, #16
 23f3048:	d003      	beq.n	23f3052 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 23f304a:	2b20      	cmp	r3, #32
 23f304c:	d006      	beq.n	23f305c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 23f304e:	2000      	movs	r0, #0
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
 23f3050:	bd38      	pop	{r3, r4, r5, pc}
      m_attributes = FILE_ATTR_ROOT_FIXED;
 23f3052:	2340      	movs	r3, #64	; 0x40
  m_flags = FILE_FLAG_READ;
 23f3054:	2001      	movs	r0, #1
      m_attributes = FILE_ATTR_ROOT32;
 23f3056:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f3058:	70a0      	strb	r0, [r4, #2]
  return true;
 23f305a:	e7f9      	b.n	23f3050 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
      m_attributes = FILE_ATTR_ROOT32;
 23f305c:	2380      	movs	r3, #128	; 0x80
 23f305e:	e7f9      	b.n	23f3054 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

023f3060 <_ZN12FatPartition9cacheSyncEv>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
 23f3060:	b510      	push	{r4, lr}
 23f3062:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
 23f3064:	3024      	adds	r0, #36	; 0x24
 23f3066:	f003 f8ee 	bl	23f6246 <_ZN7FsCache4syncEv>
 23f306a:	b148      	cbz	r0, 23f3080 <_ZN12FatPartition9cacheSyncEv+0x20>
 23f306c:	f504 700d 	add.w	r0, r4, #564	; 0x234
 23f3070:	f003 f8e9 	bl	23f6246 <_ZN7FsCache4syncEv>
 23f3074:	b120      	cbz	r0, 23f3080 <_ZN12FatPartition9cacheSyncEv+0x20>
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f3076:	6820      	ldr	r0, [r4, #0]
  }
 23f3078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f307c:	f001 b8b6 	b.w	23f41ec <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f3080:	2000      	movs	r0, #0
 23f3082:	bd10      	pop	{r4, pc}

023f3084 <_ZN7FatFile4copyEPKS_>:
    if (from != this) {
 23f3084:	4281      	cmp	r1, r0
  void copy(const FatFile* from) {
 23f3086:	b530      	push	{r4, r5, lr}
    if (from != this) {
 23f3088:	d007      	beq.n	23f309a <_ZN7FatFile4copyEPKS_+0x16>
      *this = *from;
 23f308a:	4604      	mov	r4, r0
 23f308c:	460d      	mov	r5, r1
 23f308e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f3090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f3092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f3094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f3096:	682b      	ldr	r3, [r5, #0]
 23f3098:	6023      	str	r3, [r4, #0]
  }
 23f309a:	bd30      	pop	{r4, r5, pc}

023f309c <_ZN7FatFile10addClusterEv>:
  uint32_t cc = m_curCluster;
 23f309c:	4602      	mov	r2, r0
bool FatFile::addCluster() {
 23f309e:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
 23f30a0:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
 23f30a4:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
 23f30a6:	4629      	mov	r1, r5
 23f30a8:	6880      	ldr	r0, [r0, #8]
 23f30aa:	f002 febc 	bl	23f5e26 <_ZN12FatPartition15allocateClusterEmPm>
 23f30ae:	b140      	cbz	r0, 23f30c2 <_ZN7FatFile10addClusterEv+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f30b0:	78a3      	ldrb	r3, [r4, #2]
  if (cc == 0) {
 23f30b2:	b93d      	cbnz	r5, 23f30c4 <_ZN7FatFile10addClusterEv+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f30b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f30b8:	70a3      	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f30ba:	78a3      	ldrb	r3, [r4, #2]
 23f30bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f30c0:	70a3      	strb	r3, [r4, #2]
}
 23f30c2:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
 23f30c4:	6922      	ldr	r2, [r4, #16]
 23f30c6:	3501      	adds	r5, #1
 23f30c8:	42aa      	cmp	r2, r5
 23f30ca:	d0f6      	beq.n	23f30ba <_ZN7FatFile10addClusterEv+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f30cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23f30d0:	e7f2      	b.n	23f30b8 <_ZN7FatFile10addClusterEv+0x1c>
	...

023f30d4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 23f30d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
 23f30d6:	7805      	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
 23f30d8:	4604      	mov	r4, r0
  if (isRootFixed()) {
 23f30da:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 23f30de:	d002      	beq.n	23f30e6 <_ZN7FatFile13addDirClusterEv+0x12>
  return false;
 23f30e0:	2600      	movs	r6, #0
}
 23f30e2:	4630      	mov	r0, r6
 23f30e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL * 4095) {
 23f30e6:	6942      	ldr	r2, [r0, #20]
 23f30e8:	4b15      	ldr	r3, [pc, #84]	; (23f3140 <_ZN7FatFile13addDirClusterEv+0x6c>)
 23f30ea:	429a      	cmp	r2, r3
 23f30ec:	d2f8      	bcs.n	23f30e0 <_ZN7FatFile13addDirClusterEv+0xc>
  if (!addCluster()) {
 23f30ee:	f7ff ffd5 	bl	23f309c <_ZN7FatFile10addClusterEv>
 23f30f2:	4606      	mov	r6, r0
 23f30f4:	2800      	cmp	r0, #0
 23f30f6:	d0f3      	beq.n	23f30e0 <_ZN7FatFile13addDirClusterEv+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
 23f30f8:	68a2      	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f30fa:	6923      	ldr	r3, [r4, #16]
 23f30fc:	7991      	ldrb	r1, [r2, #6]
 23f30fe:	6957      	ldr	r7, [r2, #20]
 23f3100:	3b02      	subs	r3, #2
 23f3102:	408b      	lsls	r3, r1
 23f3104:	441f      	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f3106:	68a0      	ldr	r0, [r4, #8]
 23f3108:	b2e9      	uxtb	r1, r5
 23f310a:	7903      	ldrb	r3, [r0, #4]
 23f310c:	428b      	cmp	r3, r1
 23f310e:	d90d      	bls.n	23f312c <_ZN7FatFile13addDirClusterEv+0x58>
    return m_cache.prepare(sector, options);
 23f3110:	2205      	movs	r2, #5
 23f3112:	4439      	add	r1, r7
 23f3114:	3024      	adds	r0, #36	; 0x24
 23f3116:	f003 f8bc 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f311a:	3501      	adds	r5, #1
 23f311c:	2800      	cmp	r0, #0
 23f311e:	d0df      	beq.n	23f30e0 <_ZN7FatFile13addDirClusterEv+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
 23f3120:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f3124:	2100      	movs	r1, #0
 23f3126:	f009 fcbe 	bl	23fcaa6 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f312a:	e7ec      	b.n	23f3106 <_ZN7FatFile13addDirClusterEv+0x32>
    return m_bytesPerSector << m_sectorsPerClusterShift;
 23f312c:	f44f 7300 	mov.w	r3, #512	; 0x200
 23f3130:	7982      	ldrb	r2, [r0, #6]
 23f3132:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
 23f3134:	6962      	ldr	r2, [r4, #20]
 23f3136:	fa12 f383 	uxtah	r3, r2, r3
 23f313a:	6163      	str	r3, [r4, #20]
  return true;
 23f313c:	e7d1      	b.n	23f30e2 <_ZN7FatFile13addDirClusterEv+0xe>
 23f313e:	bf00      	nop
 23f3140:	001ffe00 	.word	0x001ffe00

023f3144 <_ZN7FatFile13cacheDirEntryEh>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
 23f3144:	b510      	push	{r4, lr}
 23f3146:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
 23f3148:	6880      	ldr	r0, [r0, #8]
 23f314a:	460a      	mov	r2, r1
 23f314c:	3024      	adds	r0, #36	; 0x24
 23f314e:	69a1      	ldr	r1, [r4, #24]
 23f3150:	f003 f89f 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f3154:	b120      	cbz	r0, 23f3160 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return dir + (m_dirIndex & 0XF);
 23f3156:	88a3      	ldrh	r3, [r4, #4]
 23f3158:	f003 030f 	and.w	r3, r3, #15
 23f315c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 23f3160:	bd10      	pop	{r4, pc}

023f3162 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 23f3162:	7803      	ldrb	r3, [r0, #0]
 23f3164:	b90b      	cbnz	r3, 23f316a <_ZN7FatFile8openRootEP9FatVolume+0x8>
 23f3166:	f7ff bf65 	b.w	23f3034 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 23f316a:	2000      	movs	r0, #0
 23f316c:	4770      	bx	lr

023f316e <_ZN7FatFile11openClusterEPS_>:
bool FatFile::openCluster(FatFile* file) {
 23f316e:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 23f3170:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
 23f3172:	4604      	mov	r4, r0
 23f3174:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 23f3176:	b923      	cbnz	r3, 23f3182 <_ZN7FatFile11openClusterEPS_+0x14>
}
 23f3178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
 23f317c:	6889      	ldr	r1, [r1, #8]
 23f317e:	f7ff bff0 	b.w	23f3162 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
 23f3182:	2224      	movs	r2, #36	; 0x24
 23f3184:	2100      	movs	r1, #0
 23f3186:	f009 fc8e 	bl	23fcaa6 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
 23f318a:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
 23f318c:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f318e:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f3190:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 23f3192:	68ab      	ldr	r3, [r5, #8]
 23f3194:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 23f3196:	68eb      	ldr	r3, [r5, #12]
 23f3198:	6223      	str	r3, [r4, #32]
}
 23f319a:	bd38      	pop	{r3, r4, r5, pc}

023f319c <_ZN7FatFile4readEPvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 23f319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f31a0:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f31a4:	7883      	ldrb	r3, [r0, #2]
 23f31a6:	4604      	mov	r4, r0
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
 23f31a8:	07d8      	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
 23f31aa:	4688      	mov	r8, r1
 23f31ac:	4615      	mov	r5, r2
 23f31ae:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f31b0:	d56c      	bpl.n	23f328c <_ZN7FatFile4readEPvj+0xf0>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
 23f31b2:	7823      	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 23f31b4:	0719      	lsls	r1, r3, #28
 23f31b6:	d533      	bpl.n	23f3220 <_ZN7FatFile4readEPvj+0x84>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 23f31b8:	69e3      	ldr	r3, [r4, #28]
 23f31ba:	6962      	ldr	r2, [r4, #20]
 23f31bc:	1a9b      	subs	r3, r3, r2
 23f31be:	429d      	cmp	r5, r3
 23f31c0:	bf28      	it	cs
 23f31c2:	461d      	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f31c4:	f104 0310 	add.w	r3, r4, #16
  toRead = nbyte;
 23f31c8:	462e      	mov	r6, r5
  uint8_t sectorOfCluster = 0;
 23f31ca:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f31ce:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f31d2:	2e00      	cmp	r6, #0
 23f31d4:	f000 809f 	beq.w	23f3316 <_ZN7FatFile4readEPvj+0x17a>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
 23f31d8:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f31da:	6967      	ldr	r7, [r4, #20]
    if (isRootFixed()) {
 23f31dc:	0653      	lsls	r3, r2, #25
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f31de:	68a0      	ldr	r0, [r4, #8]
 23f31e0:	f3c7 0b08 	ubfx	fp, r7, #0, #9
               (m_curPosition >> m_vol->bytesPerSectorShift());
 23f31e4:	ea4f 2157 	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
 23f31e8:	d523      	bpl.n	23f3232 <_ZN7FatFile4readEPvj+0x96>
      sector = m_vol->rootDirStart() +
 23f31ea:	6a02      	ldr	r2, [r0, #32]
 23f31ec:	4411      	add	r1, r2
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
 23f31ee:	f8d4 a008 	ldr.w	sl, [r4, #8]
 23f31f2:	f1bb 0f00 	cmp.w	fp, #0
 23f31f6:	d150      	bne.n	23f329a <_ZN7FatFile4readEPvj+0xfe>
 23f31f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f31fc:	d34d      	bcc.n	23f329a <_ZN7FatFile4readEPvj+0xfe>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f31fe:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 23f3202:	4291      	cmp	r1, r2
 23f3204:	d049      	beq.n	23f329a <_ZN7FatFile4readEPvj+0xfe>
        goto fail;
      }
      const uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f3206:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 23f320a:	d25f      	bcs.n	23f32cc <_ZN7FatFile4readEPvj+0x130>
    return m_blockDev->readSector(sector, dst);
 23f320c:	4642      	mov	r2, r8
 23f320e:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f3212:	f001 f94b 	bl	23f44ac <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f3216:	2800      	cmp	r0, #0
 23f3218:	d038      	beq.n	23f328c <_ZN7FatFile4readEPvj+0xf0>
      n = m_vol->bytesPerSector();
 23f321a:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f321e:	e04f      	b.n	23f32c0 <_ZN7FatFile4readEPvj+0x124>
  } else if (isRootFixed()) {
 23f3220:	065a      	lsls	r2, r3, #25
 23f3222:	d5cf      	bpl.n	23f31c4 <_ZN7FatFile4readEPvj+0x28>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 23f3224:	68a3      	ldr	r3, [r4, #8]
 23f3226:	891a      	ldrh	r2, [r3, #8]
 23f3228:	6963      	ldr	r3, [r4, #20]
    uint16_t tmp16 =
 23f322a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 23f322e:	b29b      	uxth	r3, r3
 23f3230:	e7c5      	b.n	23f31be <_ZN7FatFile4readEPvj+0x22>
    return (position >> 9) & m_clusterSectorMask;
 23f3232:	f890 9005 	ldrb.w	r9, [r0, #5]
 23f3236:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
 23f323a:	f1bb 0f00 	cmp.w	fp, #0
 23f323e:	d108      	bne.n	23f3252 <_ZN7FatFile4readEPvj+0xb6>
 23f3240:	f1b9 0f00 	cmp.w	r9, #0
 23f3244:	d105      	bne.n	23f3252 <_ZN7FatFile4readEPvj+0xb6>
        if (m_curPosition == 0) {
 23f3246:	b96f      	cbnz	r7, 23f3264 <_ZN7FatFile4readEPvj+0xc8>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f3248:	0612      	lsls	r2, r2, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f324a:	bf4c      	ite	mi
 23f324c:	6a02      	ldrmi	r2, [r0, #32]
 23f324e:	6a22      	ldrpl	r2, [r4, #32]
 23f3250:	6122      	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f3252:	68a2      	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f3254:	6921      	ldr	r1, [r4, #16]
 23f3256:	7990      	ldrb	r0, [r2, #6]
 23f3258:	3902      	subs	r1, #2
 23f325a:	6952      	ldr	r2, [r2, #20]
 23f325c:	4081      	lsls	r1, r0
 23f325e:	4411      	add	r1, r2
 23f3260:	4449      	add	r1, r9
 23f3262:	e7c4      	b.n	23f31ee <_ZN7FatFile4readEPvj+0x52>
        } else if (isFile() && isContiguous()) {
 23f3264:	0713      	lsls	r3, r2, #28
          m_curCluster++;
 23f3266:	6921      	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
 23f3268:	d505      	bpl.n	23f3276 <_ZN7FatFile4readEPvj+0xda>
 23f326a:	78a2      	ldrb	r2, [r4, #2]
 23f326c:	0657      	lsls	r7, r2, #25
 23f326e:	d502      	bpl.n	23f3276 <_ZN7FatFile4readEPvj+0xda>
          m_curCluster++;
 23f3270:	3101      	adds	r1, #1
 23f3272:	6121      	str	r1, [r4, #16]
 23f3274:	e7ed      	b.n	23f3252 <_ZN7FatFile4readEPvj+0xb6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f3276:	ee18 2a10 	vmov	r2, s16
 23f327a:	f002 fd6f 	bl	23f5d5c <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f327e:	2800      	cmp	r0, #0
 23f3280:	db04      	blt.n	23f328c <_ZN7FatFile4readEPvj+0xf0>
          if (fg == 0) {
 23f3282:	d1e6      	bne.n	23f3252 <_ZN7FatFile4readEPvj+0xb6>
            if (isDir()) {
 23f3284:	7823      	ldrb	r3, [r4, #0]
 23f3286:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f328a:	d144      	bne.n	23f3316 <_ZN7FatFile4readEPvj+0x17a>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 23f328c:	7863      	ldrb	r3, [r4, #1]
  return -1;
 23f328e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f3292:	f043 0302 	orr.w	r3, r3, #2
 23f3296:	7063      	strb	r3, [r4, #1]
  return -1;
 23f3298:	e03e      	b.n	23f3318 <_ZN7FatFile4readEPvj+0x17c>
      n = m_vol->bytesPerSector() - offset;
 23f329a:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f329e:	42b7      	cmp	r7, r6
    return m_cache.prepare(sector, options);
 23f32a0:	f04f 0200 	mov.w	r2, #0
 23f32a4:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f32a8:	bf28      	it	cs
 23f32aa:	4637      	movcs	r7, r6
 23f32ac:	f002 fff1 	bl	23f6292 <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f32b0:	2800      	cmp	r0, #0
 23f32b2:	d0eb      	beq.n	23f328c <_ZN7FatFile4readEPvj+0xf0>
      memcpy(dst, src, n);
 23f32b4:	eb00 010b 	add.w	r1, r0, fp
 23f32b8:	463a      	mov	r2, r7
 23f32ba:	4640      	mov	r0, r8
 23f32bc:	f009 fbe6 	bl	23fca8c <memcpy>
    m_curPosition += n;
 23f32c0:	6963      	ldr	r3, [r4, #20]
    dst += n;
 23f32c2:	44b8      	add	r8, r7
    m_curPosition += n;
 23f32c4:	443b      	add	r3, r7
 23f32c6:	6163      	str	r3, [r4, #20]
    toRead -= n;
 23f32c8:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 23f32ca:	e782      	b.n	23f31d2 <_ZN7FatFile4readEPvj+0x36>
      if (!isRootFixed()) {
 23f32cc:	7820      	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f32ce:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
 23f32d0:	0640      	lsls	r0, r0, #25
 23f32d2:	d406      	bmi.n	23f32e2 <_ZN7FatFile4readEPvj+0x146>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f32d4:	f89a 0004 	ldrb.w	r0, [sl, #4]
 23f32d8:	eba0 0009 	sub.w	r0, r0, r9
 23f32dc:	4283      	cmp	r3, r0
 23f32de:	bf28      	it	cs
 23f32e0:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
 23f32e2:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f32e4:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f32e8:	d907      	bls.n	23f32fa <_ZN7FatFile4readEPvj+0x15e>
    return m_blockDev->readSectors(sector, dst, count);
 23f32ea:	4642      	mov	r2, r8
 23f32ec:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f32f0:	f001 f8b0 	bl	23f4454 <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f32f4:	2800      	cmp	r0, #0
 23f32f6:	d1e3      	bne.n	23f32c0 <_ZN7FatFile4readEPvj+0x124>
 23f32f8:	e7c8      	b.n	23f328c <_ZN7FatFile4readEPvj+0xf0>
    return sector <= m_sector && m_sector < (sector + count);
 23f32fa:	18c8      	adds	r0, r1, r3
 23f32fc:	4282      	cmp	r2, r0
 23f32fe:	d2f4      	bcs.n	23f32ea <_ZN7FatFile4readEPvj+0x14e>
    if (isCached(sector, count) && !sync()) {
 23f3300:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f3304:	e9cd 1300 	strd	r1, r3, [sp]
 23f3308:	f002 ff9d 	bl	23f6246 <_ZN7FsCache4syncEv>
 23f330c:	e9dd 1300 	ldrd	r1, r3, [sp]
 23f3310:	2800      	cmp	r0, #0
 23f3312:	d1ea      	bne.n	23f32ea <_ZN7FatFile4readEPvj+0x14e>
 23f3314:	e7ba      	b.n	23f328c <_ZN7FatFile4readEPvj+0xf0>
  return nbyte - toRead;
 23f3316:	1ba8      	subs	r0, r5, r6
}
 23f3318:	b003      	add	sp, #12
 23f331a:	ecbd 8b02 	vpop	{d8}
 23f331e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f3322 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 23f3322:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f3324:	2201      	movs	r2, #1
  uint32_t saveCurCluster = m_curCluster;
 23f3326:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f332a:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 23f332e:	4604      	mov	r4, r0
 23f3330:	f7ff ff34 	bl	23f319c <_ZN7FatFile4readEPvj>
 23f3334:	2801      	cmp	r0, #1
 23f3336:	bf14      	ite	ne
 23f3338:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f333c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = saveCurCluster;
 23f3340:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
 23f3344:	b002      	add	sp, #8
 23f3346:	bd70      	pop	{r4, r5, r6, pc}

023f3348 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f3348:	b537      	push	{r0, r1, r2, r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f334a:	6943      	ldr	r3, [r0, #20]
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f334c:	4604      	mov	r4, r0

  if (i == 0 || !skipReadOk) {
 23f334e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f3352:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 23f3356:	d000      	beq.n	23f335a <_ZN7FatFile12readDirCacheEb+0x12>
 23f3358:	b999      	cbnz	r1, 23f3382 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 23f335a:	2201      	movs	r2, #1
 23f335c:	4620      	mov	r0, r4
 23f335e:	f10d 0107 	add.w	r1, sp, #7
 23f3362:	f7ff ff1b 	bl	23f319c <_ZN7FatFile4readEPvj>
    if (n != 1) {
 23f3366:	b240      	sxtb	r0, r0
 23f3368:	2801      	cmp	r0, #1
 23f336a:	d002      	beq.n	23f3372 <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
 23f336c:	2000      	movs	r0, #0
}
 23f336e:	b003      	add	sp, #12
 23f3370:	bd30      	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
 23f3372:	6963      	ldr	r3, [r4, #20]
 23f3374:	331f      	adds	r3, #31
  uint8_t* cacheBuffer() { return m_buffer; }
 23f3376:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
 23f3378:	6163      	str	r3, [r4, #20]
 23f337a:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
 23f337c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 23f3380:	e7f5      	b.n	23f336e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += FS_DIR_SIZE;
 23f3382:	3320      	adds	r3, #32
 23f3384:	e7f7      	b.n	23f3376 <_ZN7FatFile12readDirCacheEb+0x2e>

023f3386 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 23f3386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f338a:	460d      	mov	r5, r1
  bool isOpen() const { return m_attributes; }
 23f338c:	7801      	ldrb	r1, [r0, #0]
 23f338e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f3390:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 23f3392:	b181      	cbz	r1, 23f33b6 <_ZN7FatFile7seekSetEm+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f3394:	6940      	ldr	r0, [r0, #20]
 23f3396:	42a8      	cmp	r0, r5
 23f3398:	d006      	beq.n	23f33a8 <_ZN7FatFile7seekSetEm+0x22>
    return true;
  }
  if (pos == 0) {
 23f339a:	b93d      	cbnz	r5, 23f33ac <_ZN7FatFile7seekSetEm+0x26>
    // set position to start of file
    m_curCluster = 0;
 23f339c:	6125      	str	r5, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f339e:	78a3      	ldrb	r3, [r4, #2]
  m_curPosition = pos;
 23f33a0:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f33a2:	f023 0320 	bic.w	r3, r3, #32
 23f33a6:	70a3      	strb	r3, [r4, #2]
    return true;
 23f33a8:	2001      	movs	r0, #1
 23f33aa:	e006      	b.n	23f33ba <_ZN7FatFile7seekSetEm+0x34>
  if (isFile()) {
 23f33ac:	070b      	lsls	r3, r1, #28
 23f33ae:	d506      	bpl.n	23f33be <_ZN7FatFile7seekSetEm+0x38>
    if (pos > m_fileSize) {
 23f33b0:	69e3      	ldr	r3, [r4, #28]
 23f33b2:	42ab      	cmp	r3, r5
 23f33b4:	d20b      	bcs.n	23f33ce <_ZN7FatFile7seekSetEm+0x48>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f33b6:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f33b8:	6127      	str	r7, [r4, #16]
}
 23f33ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 23f33be:	064e      	lsls	r6, r1, #25
 23f33c0:	d505      	bpl.n	23f33ce <_ZN7FatFile7seekSetEm+0x48>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
 23f33c2:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
 23f33c4:	891b      	ldrh	r3, [r3, #8]
 23f33c6:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 23f33ca:	d9e8      	bls.n	23f339e <_ZN7FatFile7seekSetEm+0x18>
 23f33cc:	e7f3      	b.n	23f33b6 <_ZN7FatFile7seekSetEm+0x30>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f33ce:	f8d4 c008 	ldr.w	ip, [r4, #8]
  if (isContiguous()) {
 23f33d2:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
 23f33d4:	f89c 3006 	ldrb.w	r3, [ip, #6]
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f33d8:	1e6e      	subs	r6, r5, #1
 23f33da:	3309      	adds	r3, #9
 23f33dc:	b2db      	uxtb	r3, r3
  if (isContiguous()) {
 23f33de:	0652      	lsls	r2, r2, #25
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f33e0:	fa26 f603 	lsr.w	r6, r6, r3
  if (isContiguous()) {
 23f33e4:	d503      	bpl.n	23f33ee <_ZN7FatFile7seekSetEm+0x68>
    m_curCluster = m_firstCluster + nNew;
 23f33e6:	6a23      	ldr	r3, [r4, #32]
 23f33e8:	4433      	add	r3, r6
 23f33ea:	6123      	str	r3, [r4, #16]
    goto done;
 23f33ec:	e7d7      	b.n	23f339e <_ZN7FatFile7seekSetEm+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
 23f33ee:	1e42      	subs	r2, r0, #1
 23f33f0:	fa22 f303 	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
 23f33f4:	429e      	cmp	r6, r3
 23f33f6:	d300      	bcc.n	23f33fa <_ZN7FatFile7seekSetEm+0x74>
 23f33f8:	b998      	cbnz	r0, 23f3422 <_ZN7FatFile7seekSetEm+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f33fa:	060b      	lsls	r3, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f33fc:	bf4c      	ite	mi
 23f33fe:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 23f3402:	6a23      	ldrpl	r3, [r4, #32]
 23f3404:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f3406:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 23f340a:	2e00      	cmp	r6, #0
 23f340c:	d0c7      	beq.n	23f339e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f340e:	4642      	mov	r2, r8
 23f3410:	6921      	ldr	r1, [r4, #16]
 23f3412:	68a0      	ldr	r0, [r4, #8]
 23f3414:	f002 fca2 	bl	23f5d5c <_ZN12FatPartition6fatGetEmPm>
 23f3418:	2800      	cmp	r0, #0
 23f341a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 23f341e:	dcf4      	bgt.n	23f340a <_ZN7FatFile7seekSetEm+0x84>
 23f3420:	e7c9      	b.n	23f33b6 <_ZN7FatFile7seekSetEm+0x30>
    nNew -= nCur;
 23f3422:	1af6      	subs	r6, r6, r3
 23f3424:	e7ef      	b.n	23f3406 <_ZN7FatFile7seekSetEm+0x80>

023f3426 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
 23f3426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3428:	460f      	mov	r7, r1
 23f342a:	4604      	mov	r4, r0
 23f342c:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
 23f342e:	2100      	movs	r1, #0
 23f3430:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
 23f3432:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
 23f3434:	f009 fb37 	bl	23fcaa6 <memset>
  m_vol = dirFile->m_vol;
 23f3438:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 23f343a:	80a6      	strh	r6, [r4, #4]
  m_vol = dirFile->m_vol;
 23f343c:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 23f343e:	6a3b      	ldr	r3, [r7, #32]
 23f3440:	f100 0234 	add.w	r2, r0, #52	; 0x34
  dir += 0XF & dirIndex;
 23f3444:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
 23f3448:	60e3      	str	r3, [r4, #12]
  dir += 0XF & dirIndex;
 23f344a:	eb02 1246 	add.w	r2, r2, r6, lsl #5

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
 23f344e:	7ad3      	ldrb	r3, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
 23f3450:	0719      	lsls	r1, r3, #28
 23f3452:	d43f      	bmi.n	23f34d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
 23f3454:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f3458:	7023      	strb	r3, [r4, #0]
  if (isFatFile(dir)) {
 23f345a:	7ad1      	ldrb	r1, [r2, #11]
 23f345c:	f011 0f18 	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
 23f3460:	bf04      	itt	eq
 23f3462:	f043 0308 	orreq.w	r3, r3, #8
 23f3466:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
 23f3468:	f89d 3018 	ldrb.w	r3, [sp, #24]
 23f346c:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
 23f346e:	f005 0303 	and.w	r3, r5, #3
 23f3472:	2b01      	cmp	r3, #1
 23f3474:	d028      	beq.n	23f34c8 <_ZN7FatFile15openCachedEntryEPS_tih+0xa2>
 23f3476:	2b02      	cmp	r3, #2
 23f3478:	d024      	beq.n	23f34c4 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
 23f347a:	bb5b      	cbnz	r3, 23f34d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      if (oflag & O_TRUNC) {
 23f347c:	056b      	lsls	r3, r5, #21
 23f347e:	d429      	bmi.n	23f34d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      m_flags = FILE_FLAG_READ;
 23f3480:	2301      	movs	r3, #1
      m_flags = FILE_FLAG_WRITE;
 23f3482:	70a3      	strb	r3, [r4, #2]
  if (m_flags & FILE_FLAG_WRITE) {
 23f3484:	78a1      	ldrb	r1, [r4, #2]
 23f3486:	078f      	lsls	r7, r1, #30
 23f3488:	d507      	bpl.n	23f349a <_ZN7FatFile15openCachedEntryEPS_tih+0x74>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f348a:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 23f348c:	06de      	lsls	r6, r3, #27
 23f348e:	d421      	bmi.n	23f34d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
 23f3490:	07df      	lsls	r7, r3, #31
 23f3492:	d41f      	bmi.n	23f34d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f3494:	f043 0320 	orr.w	r3, r3, #32
 23f3498:	7023      	strb	r3, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
 23f349a:	f005 0308 	and.w	r3, r5, #8
 23f349e:	430b      	orrs	r3, r1
 23f34a0:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
 23f34a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if (oflag & O_TRUNC) {
 23f34a4:	056e      	lsls	r6, r5, #21
  m_dirSector = m_vol->cacheSectorNumber();
 23f34a6:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f34a8:	8a93      	ldrh	r3, [r2, #20]
                 getLe16(dir->firstClusterLow);
 23f34aa:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f34ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
 23f34b0:	d514      	bpl.n	23f34dc <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f34b2:	b959      	cbnz	r1, 23f34cc <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f34b4:	78a3      	ldrb	r3, [r4, #2]
 23f34b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f34ba:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f34bc:	046b      	lsls	r3, r5, #17
 23f34be:	d411      	bmi.n	23f34e4 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  return true;
 23f34c0:	2001      	movs	r0, #1
}
 23f34c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
 23f34c4:	2303      	movs	r3, #3
 23f34c6:	e7dc      	b.n	23f3482 <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
      m_flags = FILE_FLAG_WRITE;
 23f34c8:	2302      	movs	r3, #2
 23f34ca:	e7da      	b.n	23f3482 <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f34cc:	f002 fce6 	bl	23f5e9c <_ZN12FatPartition9freeChainEm>
 23f34d0:	2800      	cmp	r0, #0
 23f34d2:	d1ef      	bne.n	23f34b4 <_ZN7FatFile15openCachedEntryEPS_tih+0x8e>
  m_attributes = FILE_ATTR_CLOSED;
 23f34d4:	2000      	movs	r0, #0
 23f34d6:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
 23f34d8:	70a0      	strb	r0, [r4, #2]
  return false;
 23f34da:	e7f2      	b.n	23f34c2 <_ZN7FatFile15openCachedEntryEPS_tih+0x9c>
    m_firstCluster = firstCluster;
 23f34dc:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
 23f34de:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
 23f34e0:	61e3      	str	r3, [r4, #28]
 23f34e2:	e7eb      	b.n	23f34bc <_ZN7FatFile15openCachedEntryEPS_tih+0x96>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f34e4:	4620      	mov	r0, r4
 23f34e6:	69e1      	ldr	r1, [r4, #28]
 23f34e8:	f7ff ff4d 	bl	23f3386 <_ZN7FatFile7seekSetEm>
 23f34ec:	2800      	cmp	r0, #0
 23f34ee:	d1e7      	bne.n	23f34c0 <_ZN7FatFile15openCachedEntryEPS_tih+0x9a>
 23f34f0:	e7f0      	b.n	23f34d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
	...

023f34f4 <_ZN7FatFile4syncEv>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
 23f34f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
 23f34f6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 23f34f8:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f34fa:	2b00      	cmp	r3, #0
 23f34fc:	d039      	beq.n	23f3572 <_ZN7FatFile4syncEv+0x7e>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f34fe:	f990 3002 	ldrsb.w	r3, [r0, #2]
 23f3502:	2b00      	cmp	r3, #0
 23f3504:	da2f      	bge.n	23f3566 <_ZN7FatFile4syncEv+0x72>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f3506:	2101      	movs	r1, #1
 23f3508:	f7ff fe1c 	bl	23f3144 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f350c:	4605      	mov	r5, r0
 23f350e:	b930      	cbnz	r0, 23f351e <_ZN7FatFile4syncEv+0x2a>
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f3510:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f3512:	7863      	ldrb	r3, [r4, #1]
 23f3514:	f043 0301 	orr.w	r3, r3, #1
 23f3518:	7063      	strb	r3, [r4, #1]
}
 23f351a:	b003      	add	sp, #12
 23f351c:	bd30      	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f351e:	7803      	ldrb	r3, [r0, #0]
 23f3520:	2be5      	cmp	r3, #229	; 0xe5
 23f3522:	d0f5      	beq.n	23f3510 <_ZN7FatFile4syncEv+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
 23f3524:	7823      	ldrb	r3, [r4, #0]
 23f3526:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f352a:	72c3      	strb	r3, [r0, #11]
    if (isFile()) {
 23f352c:	7823      	ldrb	r3, [r4, #0]
 23f352e:	071b      	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
 23f3530:	bf44      	itt	mi
 23f3532:	69e3      	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f3534:	61c3      	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
 23f3536:	6a23      	ldr	r3, [r4, #32]
 23f3538:	8343      	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
 23f353a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 23f353c:	8283      	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
 23f353e:	4b0e      	ldr	r3, [pc, #56]	; (23f3578 <_ZN7FatFile4syncEv+0x84>)
 23f3540:	681b      	ldr	r3, [r3, #0]
 23f3542:	b163      	cbz	r3, 23f355e <_ZN7FatFile4syncEv+0x6a>
      FsDateTime::callback(&date, &time, &ms10);
 23f3544:	f10d 0203 	add.w	r2, sp, #3
 23f3548:	f10d 0106 	add.w	r1, sp, #6
 23f354c:	a801      	add	r0, sp, #4
 23f354e:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
 23f3550:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f3554:	832b      	strh	r3, [r5, #24]
 23f3556:	826b      	strh	r3, [r5, #18]
 23f3558:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f355c:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f355e:	78a3      	ldrb	r3, [r4, #2]
 23f3560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f3564:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 23f3566:	68a0      	ldr	r0, [r4, #8]
 23f3568:	f7ff fd7a 	bl	23f3060 <_ZN12FatPartition9cacheSyncEv>
 23f356c:	2800      	cmp	r0, #0
 23f356e:	d0cf      	beq.n	23f3510 <_ZN7FatFile4syncEv+0x1c>
 23f3570:	e7d3      	b.n	23f351a <_ZN7FatFile4syncEv+0x26>
    return true;
 23f3572:	2001      	movs	r0, #1
 23f3574:	e7d1      	b.n	23f351a <_ZN7FatFile4syncEv+0x26>
 23f3576:	bf00      	nop
 23f3578:	1007aea8 	.word	0x1007aea8

023f357c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 23f357c:	b510      	push	{r4, lr}
 23f357e:	4604      	mov	r4, r0
  bool rtn = sync();
 23f3580:	f7ff ffb8 	bl	23f34f4 <_ZN7FatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f3584:	2300      	movs	r3, #0
 23f3586:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
 23f3588:	70a3      	strb	r3, [r4, #2]
}
 23f358a:	bd10      	pop	{r4, pc}

023f358c <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f358c:	b570      	push	{r4, r5, r6, lr}
 23f358e:	461e      	mov	r6, r3
  FatFile() {}
 23f3590:	2300      	movs	r3, #0
 23f3592:	b094      	sub	sp, #80	; 0x50
 23f3594:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
 23f3596:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f3598:	4605      	mov	r5, r0
 23f359a:	460c      	mov	r4, r1
 23f359c:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f359e:	b113      	cbz	r3, 23f35a6 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
 23f35a0:	2000      	movs	r0, #0
}
 23f35a2:	b014      	add	sp, #80	; 0x50
 23f35a4:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f35a6:	780b      	ldrb	r3, [r1, #0]
 23f35a8:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f35ac:	d0f8      	beq.n	23f35a0 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
 23f35ae:	7813      	ldrb	r3, [r2, #0]
 23f35b0:	2b2f      	cmp	r3, #47	; 0x2f
 23f35b2:	d112      	bne.n	23f35da <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
 23f35b4:	9a01      	ldr	r2, [sp, #4]
 23f35b6:	7813      	ldrb	r3, [r2, #0]
 23f35b8:	2b2f      	cmp	r3, #47	; 0x2f
 23f35ba:	d102      	bne.n	23f35c2 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
 23f35bc:	3201      	adds	r2, #1
 23f35be:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f35c0:	e7f8      	b.n	23f35b4 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
 23f35c2:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 23f35c4:	b91b      	cbnz	r3, 23f35ce <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
 23f35c6:	4628      	mov	r0, r5
 23f35c8:	f7ff fdcb 	bl	23f3162 <_ZN7FatFile8openRootEP9FatVolume>
 23f35cc:	e7e9      	b.n	23f35a2 <_ZN7FatFile4openEPS_PKci+0x16>
  bool isOpen() const { return m_attributes; }
 23f35ce:	a80b      	add	r0, sp, #44	; 0x2c
 23f35d0:	f7ff fd30 	bl	23f3034 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 23f35d4:	2800      	cmp	r0, #0
 23f35d6:	d0e3      	beq.n	23f35a0 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
 23f35d8:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f35da:	4628      	mov	r0, r5
 23f35dc:	9901      	ldr	r1, [sp, #4]
 23f35de:	ab01      	add	r3, sp, #4
 23f35e0:	aa03      	add	r2, sp, #12
 23f35e2:	f000 fc95 	bl	23f3f10 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f35e6:	2800      	cmp	r0, #0
 23f35e8:	d0da      	beq.n	23f35a0 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
 23f35ea:	9b01      	ldr	r3, [sp, #4]
 23f35ec:	781b      	ldrb	r3, [r3, #0]
 23f35ee:	b17b      	cbz	r3, 23f3610 <_ZN7FatFile4openEPS_PKci+0x84>
    if (!open(dirFile, &fname, O_RDONLY)) {
 23f35f0:	2300      	movs	r3, #0
 23f35f2:	4621      	mov	r1, r4
 23f35f4:	4628      	mov	r0, r5
 23f35f6:	aa03      	add	r2, sp, #12
 23f35f8:	f000 fb4a 	bl	23f3c90 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f35fc:	2800      	cmp	r0, #0
 23f35fe:	d0cf      	beq.n	23f35a0 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir.copy(this);
 23f3600:	a80b      	add	r0, sp, #44	; 0x2c
 23f3602:	4629      	mov	r1, r5
 23f3604:	f7ff fd3e 	bl	23f3084 <_ZN7FatFile4copyEPKS_>
    close();
 23f3608:	4628      	mov	r0, r5
 23f360a:	f7ff ffb7 	bl	23f357c <_ZN7FatFile5closeEv>
  while (1) {
 23f360e:	e7e3      	b.n	23f35d8 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
 23f3610:	4633      	mov	r3, r6
 23f3612:	4621      	mov	r1, r4
 23f3614:	4628      	mov	r0, r5
 23f3616:	aa03      	add	r2, sp, #12
 23f3618:	f000 fb3a 	bl	23f3c90 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f361c:	e7c1      	b.n	23f35a2 <_ZN7FatFile4openEPS_PKci+0x16>

023f361e <_ZN7FatFile4openEP9FatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f361e:	b119      	cbz	r1, 23f3628 <_ZN7FatFile4openEP9FatVolumePKci+0xa>
 23f3620:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23f3624:	f7ff bfb2 	b.w	23f358c <_ZN7FatFile4openEPS_PKci>
}
 23f3628:	4608      	mov	r0, r1
 23f362a:	4770      	bx	lr

023f362c <_ZN7FatFile5mkdirEPS_P8FatLfn_t>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f362c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
 23f362e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f3630:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f3632:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f3636:	460e      	mov	r6, r1
 23f3638:	b089      	sub	sp, #36	; 0x24
  if (!parent->isDir()) {
 23f363a:	d102      	bne.n	23f3642 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x16>
  return false;
 23f363c:	2000      	movs	r0, #0
}
 23f363e:	b009      	add	sp, #36	; 0x24
 23f3640:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f3642:	f640 2302 	movw	r3, #2562	; 0xa02
 23f3646:	f000 fb23 	bl	23f3c90 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f364a:	2800      	cmp	r0, #0
 23f364c:	d0f6      	beq.n	23f363c <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_flags = FILE_FLAG_READ;
 23f364e:	2701      	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f3650:	2510      	movs	r5, #16
  if (!addDirCluster()) {
 23f3652:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
 23f3654:	70a7      	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
 23f3656:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
 23f3658:	f7ff fd3c 	bl	23f30d4 <_ZN7FatFile13addDirClusterEv>
 23f365c:	2800      	cmp	r0, #0
 23f365e:	d0ed      	beq.n	23f363c <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_firstCluster = m_curCluster;
 23f3660:	6923      	ldr	r3, [r4, #16]
   *
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0UL); }
 23f3662:	2100      	movs	r1, #0
 23f3664:	4620      	mov	r0, r4
 23f3666:	6223      	str	r3, [r4, #32]
 23f3668:	f7ff fe8d 	bl	23f3386 <_ZN7FatFile7seekSetEm>
  if (!sync()) {
 23f366c:	4620      	mov	r0, r4
 23f366e:	f7ff ff41 	bl	23f34f4 <_ZN7FatFile4syncEv>
 23f3672:	2800      	cmp	r0, #0
 23f3674:	d0e2      	beq.n	23f363c <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f3676:	4639      	mov	r1, r7
 23f3678:	4620      	mov	r0, r4
 23f367a:	f7ff fd63 	bl	23f3144 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f367e:	2800      	cmp	r0, #0
 23f3680:	d0dc      	beq.n	23f363c <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dot, dir, sizeof(dot));
 23f3682:	466a      	mov	r2, sp
  dir->attributes = FS_ATTRIB_DIRECTORY;
 23f3684:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
 23f3686:	4603      	mov	r3, r0
 23f3688:	4615      	mov	r5, r2
 23f368a:	f100 0c20 	add.w	ip, r0, #32
 23f368e:	4617      	mov	r7, r2
 23f3690:	6818      	ldr	r0, [r3, #0]
 23f3692:	6859      	ldr	r1, [r3, #4]
 23f3694:	3308      	adds	r3, #8
 23f3696:	c703      	stmia	r7!, {r0, r1}
 23f3698:	4563      	cmp	r3, ip
 23f369a:	463a      	mov	r2, r7
 23f369c:	d1f7      	bne.n	23f368e <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x62>
    dot.name[i] = ' ';
 23f369e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
 23f36a2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f36a4:	6a21      	ldr	r1, [r4, #32]
    dot.name[i] = ' ';
 23f36a6:	f8cd 3001 	str.w	r3, [sp, #1]
 23f36aa:	f8cd 3005 	str.w	r3, [sp, #5]
 23f36ae:	f8ad 3009 	strh.w	r3, [sp, #9]
 23f36b2:	7983      	ldrb	r3, [r0, #6]
 23f36b4:	3902      	subs	r1, #2
 23f36b6:	4099      	lsls	r1, r3
 23f36b8:	6943      	ldr	r3, [r0, #20]
    return m_cache.prepare(sector, options);
 23f36ba:	2201      	movs	r2, #1
 23f36bc:	4419      	add	r1, r3
 23f36be:	3024      	adds	r0, #36	; 0x24
 23f36c0:	f002 fde7 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f36c4:	4603      	mov	r3, r0
 23f36c6:	2800      	cmp	r0, #0
 23f36c8:	d0b8      	beq.n	23f363c <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
 23f36ca:	222e      	movs	r2, #46	; 0x2e
 23f36cc:	46ac      	mov	ip, r5
 23f36ce:	4607      	mov	r7, r0
 23f36d0:	f88d 2000 	strb.w	r2, [sp]
 23f36d4:	f10d 0e20 	add.w	lr, sp, #32
 23f36d8:	4662      	mov	r2, ip
 23f36da:	ca03      	ldmia	r2!, {r0, r1}
 23f36dc:	4572      	cmp	r2, lr
 23f36de:	6038      	str	r0, [r7, #0]
 23f36e0:	6079      	str	r1, [r7, #4]
 23f36e2:	4694      	mov	ip, r2
 23f36e4:	f107 0708 	add.w	r7, r7, #8
 23f36e8:	d1f6      	bne.n	23f36d8 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xac>
  dot.name[1] = '.';
 23f36ea:	222e      	movs	r2, #46	; 0x2e
 23f36ec:	f88d 2001 	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f36f0:	6a32      	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f36f2:	3320      	adds	r3, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f36f4:	0c11      	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f36f6:	f8ad 201a 	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f36fa:	462a      	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f36fc:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f3700:	ae08      	add	r6, sp, #32
 23f3702:	4615      	mov	r5, r2
 23f3704:	cd03      	ldmia	r5!, {r0, r1}
 23f3706:	42b5      	cmp	r5, r6
 23f3708:	6018      	str	r0, [r3, #0]
 23f370a:	6059      	str	r1, [r3, #4]
 23f370c:	462a      	mov	r2, r5
 23f370e:	f103 0308 	add.w	r3, r3, #8
 23f3712:	d1f6      	bne.n	23f3702 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xd6>
  return m_vol->cacheSync();
 23f3714:	68a0      	ldr	r0, [r4, #8]
 23f3716:	f7ff fca3 	bl	23f3060 <_ZN12FatPartition9cacheSyncEv>
 23f371a:	e790      	b.n	23f363e <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x12>

023f371c <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f371c:	b570      	push	{r4, r5, r6, lr}
 23f371e:	461e      	mov	r6, r3
  FatFile() {}
 23f3720:	2300      	movs	r3, #0
 23f3722:	b094      	sub	sp, #80	; 0x50
 23f3724:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
 23f3726:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f3728:	4605      	mov	r5, r0
 23f372a:	460c      	mov	r4, r1
 23f372c:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f372e:	b113      	cbz	r3, 23f3736 <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
 23f3730:	2000      	movs	r0, #0
}
 23f3732:	b014      	add	sp, #80	; 0x50
 23f3734:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !parent->isDir()) {
 23f3736:	780b      	ldrb	r3, [r1, #0]
 23f3738:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f373c:	d0f8      	beq.n	23f3730 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
 23f373e:	7813      	ldrb	r3, [r2, #0]
 23f3740:	2b2f      	cmp	r3, #47	; 0x2f
 23f3742:	d10d      	bne.n	23f3760 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
 23f3744:	9a01      	ldr	r2, [sp, #4]
 23f3746:	7813      	ldrb	r3, [r2, #0]
 23f3748:	2b2f      	cmp	r3, #47	; 0x2f
 23f374a:	d102      	bne.n	23f3752 <_ZN7FatFile5mkdirEPS_PKcb+0x36>
      path++;
 23f374c:	3201      	adds	r2, #1
 23f374e:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f3750:	e7f8      	b.n	23f3744 <_ZN7FatFile5mkdirEPS_PKcb+0x28>
  bool isOpen() const { return m_attributes; }
 23f3752:	68a1      	ldr	r1, [r4, #8]
 23f3754:	a80b      	add	r0, sp, #44	; 0x2c
 23f3756:	f7ff fc6d 	bl	23f3034 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f375a:	2800      	cmp	r0, #0
 23f375c:	d0e8      	beq.n	23f3730 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
 23f375e:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f3760:	4628      	mov	r0, r5
 23f3762:	9901      	ldr	r1, [sp, #4]
 23f3764:	ab01      	add	r3, sp, #4
 23f3766:	aa03      	add	r2, sp, #12
 23f3768:	f000 fbd2 	bl	23f3f10 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f376c:	2800      	cmp	r0, #0
 23f376e:	d0df      	beq.n	23f3730 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
 23f3770:	9b01      	ldr	r3, [sp, #4]
 23f3772:	781b      	ldrb	r3, [r3, #0]
 23f3774:	b1c3      	cbz	r3, 23f37a8 <_ZN7FatFile5mkdirEPS_PKcb+0x8c>
    if (!open(parent, &fname, O_RDONLY)) {
 23f3776:	2300      	movs	r3, #0
 23f3778:	4621      	mov	r1, r4
 23f377a:	4628      	mov	r0, r5
 23f377c:	aa03      	add	r2, sp, #12
 23f377e:	f000 fa87 	bl	23f3c90 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f3782:	b138      	cbz	r0, 23f3794 <_ZN7FatFile5mkdirEPS_PKcb+0x78>
    tmpDir.copy(this);
 23f3784:	a80b      	add	r0, sp, #44	; 0x2c
 23f3786:	4629      	mov	r1, r5
 23f3788:	f7ff fc7c 	bl	23f3084 <_ZN7FatFile4copyEPKS_>
    close();
 23f378c:	4628      	mov	r0, r5
 23f378e:	f7ff fef5 	bl	23f357c <_ZN7FatFile5closeEv>
  while (1) {
 23f3792:	e7e4      	b.n	23f375e <_ZN7FatFile5mkdirEPS_PKcb+0x42>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f3794:	2e00      	cmp	r6, #0
 23f3796:	d0cb      	beq.n	23f3730 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
 23f3798:	4621      	mov	r1, r4
 23f379a:	4628      	mov	r0, r5
 23f379c:	aa03      	add	r2, sp, #12
 23f379e:	f7ff ff45 	bl	23f362c <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f37a2:	2800      	cmp	r0, #0
 23f37a4:	d1ee      	bne.n	23f3784 <_ZN7FatFile5mkdirEPS_PKcb+0x68>
 23f37a6:	e7c3      	b.n	23f3730 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
 23f37a8:	4621      	mov	r1, r4
 23f37aa:	4628      	mov	r0, r5
 23f37ac:	aa03      	add	r2, sp, #12
 23f37ae:	f7ff ff3d 	bl	23f362c <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f37b2:	e7be      	b.n	23f3732 <_ZN7FatFile5mkdirEPS_PKcb+0x16>

023f37b4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f37b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f37b8:	7883      	ldrb	r3, [r0, #2]
 23f37ba:	4688      	mov	r8, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
 23f37bc:	0799      	lsls	r1, r3, #30
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f37be:	4604      	mov	r4, r0
 23f37c0:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f37c2:	d544      	bpl.n	23f384e <_ZN7FatFile5writeEPKvj+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f37c4:	071a      	lsls	r2, r3, #28
 23f37c6:	d43d      	bmi.n	23f3844 <_ZN7FatFile5writeEPKvj+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 23f37c8:	6963      	ldr	r3, [r4, #20]
 23f37ca:	43db      	mvns	r3, r3
 23f37cc:	454b      	cmp	r3, r9
 23f37ce:	d33e      	bcc.n	23f384e <_ZN7FatFile5writeEPKvj+0x9a>
 23f37d0:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f37d2:	f104 0a10 	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f37d6:	6962      	ldr	r2, [r4, #20]
  while (nToWrite) {
 23f37d8:	2f00      	cmp	r7, #0
 23f37da:	f000 809e 	beq.w	23f391a <_ZN7FatFile5writeEPKvj+0x166>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f37de:	68a0      	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
 23f37e0:	f3c2 0508 	ubfx	r5, r2, #0, #9
    return (position >> 9) & m_clusterSectorMask;
 23f37e4:	7946      	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
 23f37e6:	ea16 2652 	ands.w	r6, r6, r2, lsr #9
 23f37ea:	d10b      	bne.n	23f3804 <_ZN7FatFile5writeEPKvj+0x50>
 23f37ec:	b955      	cbnz	r5, 23f3804 <_ZN7FatFile5writeEPKvj+0x50>
      if (m_curCluster != 0) {
 23f37ee:	6921      	ldr	r1, [r4, #16]
 23f37f0:	2900      	cmp	r1, #0
 23f37f2:	d03f      	beq.n	23f3874 <_ZN7FatFile5writeEPKvj+0xc0>
        if (isContiguous() && m_fileSize > m_curPosition) {
 23f37f4:	78a3      	ldrb	r3, [r4, #2]
 23f37f6:	065b      	lsls	r3, r3, #25
 23f37f8:	d530      	bpl.n	23f385c <_ZN7FatFile5writeEPKvj+0xa8>
 23f37fa:	69e3      	ldr	r3, [r4, #28]
 23f37fc:	4293      	cmp	r3, r2
 23f37fe:	d92d      	bls.n	23f385c <_ZN7FatFile5writeEPKvj+0xa8>
          m_curCluster++;
 23f3800:	3101      	adds	r1, #1
 23f3802:	6121      	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f3804:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f3806:	6921      	ldr	r1, [r4, #16]
 23f3808:	7983      	ldrb	r3, [r0, #6]
 23f380a:	3902      	subs	r1, #2
 23f380c:	4099      	lsls	r1, r3
 23f380e:	6943      	ldr	r3, [r0, #20]
 23f3810:	4419      	add	r1, r3
 23f3812:	4431      	add	r1, r6

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
 23f3814:	2d00      	cmp	r5, #0
 23f3816:	d139      	bne.n	23f388c <_ZN7FatFile5writeEPKvj+0xd8>
 23f3818:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f381c:	d336      	bcc.n	23f388c <_ZN7FatFile5writeEPKvj+0xd8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
 23f381e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f3822:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f3824:	d260      	bcs.n	23f38e8 <_ZN7FatFile5writeEPKvj+0x134>
    if (isCached(sector)) {
 23f3826:	4291      	cmp	r1, r2
    m_sector = 0XFFFFFFFF;
 23f3828:	bf02      	ittt	eq
 23f382a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f382e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f3832:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
 23f3834:	4642      	mov	r2, r8
 23f3836:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f3838:	f000 fe7f 	bl	23f453a <_ZN9SdSpiCard11writeSectorEmPKh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f383c:	b138      	cbz	r0, 23f384e <_ZN7FatFile5writeEPKvj+0x9a>
      n = m_vol->bytesPerSector();
 23f383e:	f44f 7600 	mov.w	r6, #512	; 0x200
 23f3842:	e047      	b.n	23f38d4 <_ZN7FatFile5writeEPKvj+0x120>
    if (!seekSet(m_fileSize)) {
 23f3844:	69c1      	ldr	r1, [r0, #28]
 23f3846:	f7ff fd9e 	bl	23f3386 <_ZN7FatFile7seekSetEm>
 23f384a:	2800      	cmp	r0, #0
 23f384c:	d1bc      	bne.n	23f37c8 <_ZN7FatFile5writeEPKvj+0x14>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f384e:	7863      	ldrb	r3, [r4, #1]
  return 0;
 23f3850:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f3854:	f043 0301 	orr.w	r3, r3, #1
 23f3858:	7063      	strb	r3, [r4, #1]
  return 0;
 23f385a:	e06b      	b.n	23f3934 <_ZN7FatFile5writeEPKvj+0x180>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f385c:	4652      	mov	r2, sl
 23f385e:	f002 fa7d 	bl	23f5d5c <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f3862:	2800      	cmp	r0, #0
 23f3864:	dbf3      	blt.n	23f384e <_ZN7FatFile5writeEPKvj+0x9a>
        if (fg == 0) {
 23f3866:	d1cd      	bne.n	23f3804 <_ZN7FatFile5writeEPKvj+0x50>
          if (!addCluster()) {
 23f3868:	4620      	mov	r0, r4
 23f386a:	f7ff fc17 	bl	23f309c <_ZN7FatFile10addClusterEv>
 23f386e:	2800      	cmp	r0, #0
 23f3870:	d1c8      	bne.n	23f3804 <_ZN7FatFile5writeEPKvj+0x50>
 23f3872:	e7ec      	b.n	23f384e <_ZN7FatFile5writeEPKvj+0x9a>
        if (m_firstCluster == 0) {
 23f3874:	6a23      	ldr	r3, [r4, #32]
 23f3876:	b93b      	cbnz	r3, 23f3888 <_ZN7FatFile5writeEPKvj+0xd4>
          if (!addCluster()) {
 23f3878:	4620      	mov	r0, r4
 23f387a:	f7ff fc0f 	bl	23f309c <_ZN7FatFile10addClusterEv>
 23f387e:	2800      	cmp	r0, #0
 23f3880:	d0e5      	beq.n	23f384e <_ZN7FatFile5writeEPKvj+0x9a>
          m_firstCluster = m_curCluster;
 23f3882:	6923      	ldr	r3, [r4, #16]
 23f3884:	6223      	str	r3, [r4, #32]
 23f3886:	e7bd      	b.n	23f3804 <_ZN7FatFile5writeEPKvj+0x50>
          m_curCluster = m_firstCluster;
 23f3888:	6123      	str	r3, [r4, #16]
 23f388a:	e7bb      	b.n	23f3804 <_ZN7FatFile5writeEPKvj+0x50>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f388c:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      if (n > nToWrite) {
 23f3890:	42be      	cmp	r6, r7
 23f3892:	bf28      	it	cs
 23f3894:	463e      	movcs	r6, r7
      if (sectorOffset == 0 &&
 23f3896:	bb1d      	cbnz	r5, 23f38e0 <_ZN7FatFile5writeEPKvj+0x12c>
 23f3898:	6962      	ldr	r2, [r4, #20]
 23f389a:	69e3      	ldr	r3, [r4, #28]
 23f389c:	429a      	cmp	r2, r3
 23f389e:	d221      	bcs.n	23f38e4 <_ZN7FatFile5writeEPKvj+0x130>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
 23f38a0:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f38a2:	f013 0f20 	tst.w	r3, #32
 23f38a6:	bf0c      	ite	eq
 23f38a8:	2201      	moveq	r2, #1
 23f38aa:	2205      	movne	r2, #5
    return m_cache.prepare(sector, options);
 23f38ac:	3024      	adds	r0, #36	; 0x24
 23f38ae:	f002 fcf0 	bl	23f6292 <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f38b2:	2800      	cmp	r0, #0
 23f38b4:	d0cb      	beq.n	23f384e <_ZN7FatFile5writeEPKvj+0x9a>
      memcpy(dst, src, n);
 23f38b6:	4428      	add	r0, r5
 23f38b8:	4632      	mov	r2, r6
 23f38ba:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f38bc:	4435      	add	r5, r6
      memcpy(dst, src, n);
 23f38be:	f009 f8e5 	bl	23fca8c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f38c2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23f38c6:	d105      	bne.n	23f38d4 <_ZN7FatFile5writeEPKvj+0x120>
  bool cacheSyncData() { return m_cache.sync(); }
 23f38c8:	68a0      	ldr	r0, [r4, #8]
 23f38ca:	3024      	adds	r0, #36	; 0x24
 23f38cc:	f002 fcbb 	bl	23f6246 <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
 23f38d0:	2800      	cmp	r0, #0
 23f38d2:	d0bc      	beq.n	23f384e <_ZN7FatFile5writeEPKvj+0x9a>
    m_curPosition += n;
 23f38d4:	6963      	ldr	r3, [r4, #20]
    src += n;
 23f38d6:	44b0      	add	r8, r6
    m_curPosition += n;
 23f38d8:	4433      	add	r3, r6
 23f38da:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 23f38dc:	1bbf      	subs	r7, r7, r6
  while (nToWrite) {
 23f38de:	e77a      	b.n	23f37d6 <_ZN7FatFile5writeEPKvj+0x22>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f38e0:	2201      	movs	r2, #1
 23f38e2:	e7e3      	b.n	23f38ac <_ZN7FatFile5writeEPKvj+0xf8>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f38e4:	2205      	movs	r2, #5
 23f38e6:	e7e1      	b.n	23f38ac <_ZN7FatFile5writeEPKvj+0xf8>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f38e8:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
 23f38ea:	ea4f 2c57 	mov.w	ip, r7, lsr #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f38ee:	1b9b      	subs	r3, r3, r6
 23f38f0:	4563      	cmp	r3, ip
 23f38f2:	bf28      	it	cs
 23f38f4:	4663      	movcs	r3, ip
    return sector <= m_sector && m_sector < (sector + count);
 23f38f6:	4291      	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
 23f38f8:	ea4f 2643 	mov.w	r6, r3, lsl #9
 23f38fc:	d808      	bhi.n	23f3910 <_ZN7FatFile5writeEPKvj+0x15c>
 23f38fe:	eb01 0c03 	add.w	ip, r1, r3
 23f3902:	4594      	cmp	ip, r2
    m_sector = 0XFFFFFFFF;
 23f3904:	bf82      	ittt	hi
 23f3906:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f390a:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f390e:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
 23f3910:	4642      	mov	r2, r8
 23f3912:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f3914:	f000 fde3 	bl	23f44de <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f3918:	e7da      	b.n	23f38d0 <_ZN7FatFile5writeEPKvj+0x11c>
  if (m_curPosition > m_fileSize) {
 23f391a:	69e3      	ldr	r3, [r4, #28]
 23f391c:	4293      	cmp	r3, r2
 23f391e:	d205      	bcs.n	23f392c <_ZN7FatFile5writeEPKvj+0x178>
    m_fileSize = m_curPosition;
 23f3920:	61e2      	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f3922:	78a3      	ldrb	r3, [r4, #2]
 23f3924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f3928:	70a3      	strb	r3, [r4, #2]
 23f392a:	e003      	b.n	23f3934 <_ZN7FatFile5writeEPKvj+0x180>
  } else if (FsDateTime::callback) {
 23f392c:	4b03      	ldr	r3, [pc, #12]	; (23f393c <_ZN7FatFile5writeEPKvj+0x188>)
 23f392e:	681b      	ldr	r3, [r3, #0]
 23f3930:	2b00      	cmp	r3, #0
 23f3932:	d1f6      	bne.n	23f3922 <_ZN7FatFile5writeEPKvj+0x16e>
}
 23f3934:	4648      	mov	r0, r9
 23f3936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f393a:	bf00      	nop
 23f393c:	1007aea8 	.word	0x1007aea8

023f3940 <_ZN7FatFile11lfnChecksumEPKh.isra.0>:
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(const DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
 23f3940:	1e41      	subs	r1, r0, #1
 23f3942:	f100 030a 	add.w	r3, r0, #10
    uint8_t sum = 0;
 23f3946:	2000      	movs	r0, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f3948:	0842      	lsrs	r2, r0, #1
 23f394a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 23f394e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23f3952:	fa52 f080 	uxtab	r0, r2, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f3956:	428b      	cmp	r3, r1
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f3958:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f395a:	d1f5      	bne.n	23f3948 <_ZN7FatFile11lfnChecksumEPKh.isra.0+0x8>
    }
    return sum;
  }
 23f395c:	4770      	bx	lr

023f395e <_ZN7FatFile8cacheDirEt>:
  DirFat_t* cacheDir(uint16_t index) {
 23f395e:	b510      	push	{r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f3960:	0149      	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
 23f3962:	4604      	mov	r4, r0
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f3964:	f7ff fd0f 	bl	23f3386 <_ZN7FatFile7seekSetEm>
 23f3968:	b128      	cbz	r0, 23f3976 <_ZN7FatFile8cacheDirEt+0x18>
 23f396a:	4620      	mov	r0, r4
  }
 23f396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f3970:	2100      	movs	r1, #0
 23f3972:	f7ff bce9 	b.w	23f3348 <_ZN7FatFile12readDirCacheEb>
  }
 23f3976:	bd10      	pop	{r4, pc}

023f3978 <_ZN7FatFile7cmpNameEtP8FatLfn_th>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f3978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      *this = *from;
 23f397c:	4606      	mov	r6, r0
 23f397e:	b08b      	sub	sp, #44	; 0x2c
 23f3980:	ac01      	add	r4, sp, #4
 23f3982:	4615      	mov	r5, r2
 23f3984:	4607      	mov	r7, r0
 23f3986:	4689      	mov	r9, r1
 23f3988:	469a      	mov	sl, r3
 23f398a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f398c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f398e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f3990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f3992:	6833      	ldr	r3, [r6, #0]
  FatFile dir;
  dir.copy(this);
  const DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3994:	2601      	movs	r6, #1
 23f3996:	6023      	str	r3, [r4, #0]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f3998:	682b      	ldr	r3, [r5, #0]
 23f399a:	606b      	str	r3, [r5, #4]
 23f399c:	4556      	cmp	r6, sl
 23f399e:	d839      	bhi.n	23f3a14 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x9c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f39a0:	eba9 0106 	sub.w	r1, r9, r6
 23f39a4:	b289      	uxth	r1, r1
 23f39a6:	a801      	add	r0, sp, #4
 23f39a8:	f7ff ffd9 	bl	23f395e <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f39ac:	4683      	mov	fp, r0
 23f39ae:	b918      	cbnz	r0, 23f39b8 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x40>
    }
  }
  return true;

fail:
  return false;
 23f39b0:	2000      	movs	r0, #0
}
 23f39b2:	b00b      	add	sp, #44	; 0x2c
 23f39b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f39b8:	f04f 0800 	mov.w	r8, #0
      uint16_t u = getLfnChar(ldir, i);
 23f39bc:	fa5f f288 	uxtb.w	r2, r8
 23f39c0:	4659      	mov	r1, fp
 23f39c2:	4638      	mov	r0, r7
 23f39c4:	f002 f9b6 	bl	23f5d34 <_ZN7FatFile10getLfnCharEPK8DirLfn_th>
      if (fname->atEnd()) {
 23f39c8:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 23f39cc:	4293      	cmp	r3, r2
 23f39ce:	d103      	bne.n	23f39d8 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x60>
        return u == 0;
 23f39d0:	fab0 f080 	clz	r0, r0
 23f39d4:	0940      	lsrs	r0, r0, #5
 23f39d6:	e7ec      	b.n	23f39b2 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f39d8:	287f      	cmp	r0, #127	; 0x7f
 23f39da:	d8e9      	bhi.n	23f39b0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
 23f39dc:	b2c4      	uxtb	r4, r0
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
 23f39de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 23f39e2:	2b19      	cmp	r3, #25
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
 23f39e4:	f102 0301 	add.w	r3, r2, #1
 23f39e8:	606b      	str	r3, [r5, #4]
 23f39ea:	7813      	ldrb	r3, [r2, #0]
 23f39ec:	bf98      	it	ls
 23f39ee:	3c20      	subls	r4, #32
 23f39f0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 23f39f4:	bf98      	it	ls
 23f39f6:	b2e4      	uxtbls	r4, r4
 23f39f8:	2a19      	cmp	r2, #25
 23f39fa:	bf9c      	itt	ls
 23f39fc:	3b20      	subls	r3, #32
 23f39fe:	b2db      	uxtbls	r3, r3
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f3a00:	42a3      	cmp	r3, r4
 23f3a02:	d1d5      	bne.n	23f39b0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
    for (uint8_t i = 0; i < 13; i++) {
 23f3a04:	f108 0801 	add.w	r8, r8, #1
 23f3a08:	f1b8 0f0d 	cmp.w	r8, #13
 23f3a0c:	d1d6      	bne.n	23f39bc <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x44>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3a0e:	3601      	adds	r6, #1
 23f3a10:	b2f6      	uxtb	r6, r6
 23f3a12:	e7c3      	b.n	23f399c <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x24>
  return true;
 23f3a14:	2001      	movs	r0, #1
 23f3a16:	e7cc      	b.n	23f39b2 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>

023f3a18 <_ZN7FatFile9createLFNEtP8FatLfn_th>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f3a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3a1c:	4604      	mov	r4, r0
 23f3a1e:	4616      	mov	r6, r2
 23f3a20:	b08b      	sub	sp, #44	; 0x2c
 23f3a22:	ad01      	add	r5, sp, #4
 23f3a24:	468a      	mov	sl, r1
 23f3a26:	4698      	mov	r8, r3
 23f3a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f3a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f3a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f3a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f3a30:	6823      	ldr	r3, [r4, #0]
  FatFile dir;
  dir.copy(this);
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f3a32:	f106 0012 	add.w	r0, r6, #18
 23f3a36:	602b      	str	r3, [r5, #0]
 23f3a38:	f7ff ff82 	bl	23f3940 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3a3c:	2501      	movs	r5, #1
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f3a3e:	4681      	mov	r9, r0
  uint8_t fc = 0;
 23f3a40:	2700      	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f3a42:	f04f 0b0f 	mov.w	fp, #15
  void reset() { next = begin; }
 23f3a46:	6833      	ldr	r3, [r6, #0]
 23f3a48:	6073      	str	r3, [r6, #4]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3a4a:	4545      	cmp	r5, r8
 23f3a4c:	d841      	bhi.n	23f3ad2 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xba>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f3a4e:	ebaa 0105 	sub.w	r1, sl, r5
 23f3a52:	b289      	uxth	r1, r1
 23f3a54:	a801      	add	r0, sp, #4
 23f3a56:	f7ff ff82 	bl	23f395e <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f3a5a:	2800      	cmp	r0, #0
 23f3a5c:	d03a      	beq.n	23f3ad4 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xbc>
    dir.m_vol->cacheDirty();
 23f3a5e:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f3a60:	4545      	cmp	r5, r8
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f3a62:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 23f3a66:	f100 0401 	add.w	r4, r0, #1
 23f3a6a:	f043 0301 	orr.w	r3, r3, #1
 23f3a6e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    ldir->mustBeZero1 = 0;
 23f3a72:	f04f 0200 	mov.w	r2, #0
 23f3a76:	bf14      	ite	ne
 23f3a78:	462b      	movne	r3, r5
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f3a7a:	f045 0340 	orreq.w	r3, r5, #64	; 0x40
 23f3a7e:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f3a80:	f880 b00b 	strb.w	fp, [r0, #11]
    ldir->mustBeZero1 = 0;
 23f3a84:	7302      	strb	r2, [r0, #12]
    ldir->checksum = checksum;
 23f3a86:	f880 900d 	strb.w	r9, [r0, #13]
 23f3a8a:	8342      	strh	r2, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
 23f3a8c:	e9d6 1301 	ldrd	r1, r3, [r6, #4]
 23f3a90:	4299      	cmp	r1, r3
 23f3a92:	d110      	bne.n	23f3ab6 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x9e>
        cp = fc++ ? 0XFFFF : 0;
 23f3a94:	b19f      	cbz	r7, 23f3abe <_ZN7FatFile9createLFNEtP8FatLfn_th+0xa6>
 23f3a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f3a9a:	3701      	adds	r7, #1
 23f3a9c:	b2ff      	uxtb	r7, r7
  if (i < 5) {
 23f3a9e:	2a04      	cmp	r2, #4
 23f3aa0:	b2d1      	uxtb	r1, r2
 23f3aa2:	d80f      	bhi.n	23f3ac4 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xac>
 23f3aa4:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < 13; i++) {
 23f3aa6:	3201      	adds	r2, #1
 23f3aa8:	2a0d      	cmp	r2, #13
 23f3aaa:	f104 0402 	add.w	r4, r4, #2
 23f3aae:	d1ed      	bne.n	23f3a8c <_ZN7FatFile9createLFNEtP8FatLfn_th+0x74>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3ab0:	3501      	adds	r5, #1
 23f3ab2:	b2ed      	uxtb	r5, r5
 23f3ab4:	e7c9      	b.n	23f3a4a <_ZN7FatFile9createLFNEtP8FatLfn_th+0x32>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f3ab6:	1c4b      	adds	r3, r1, #1
 23f3ab8:	6073      	str	r3, [r6, #4]
 23f3aba:	780b      	ldrb	r3, [r1, #0]
 23f3abc:	e7ef      	b.n	23f3a9e <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
        cp = fc++ ? 0XFFFF : 0;
 23f3abe:	463b      	mov	r3, r7
 23f3ac0:	2701      	movs	r7, #1
 23f3ac2:	e7ec      	b.n	23f3a9e <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
  } else if (i < 11) {
 23f3ac4:	290a      	cmp	r1, #10
 23f3ac6:	bf94      	ite	ls
 23f3ac8:	f8a4 3003 	strhls.w	r3, [r4, #3]
 23f3acc:	f8a4 3005 	strhhi.w	r3, [r4, #5]
}
 23f3ad0:	e7e9      	b.n	23f3aa6 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x8e>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
 23f3ad2:	2001      	movs	r0, #1

fail:
  return false;
}
 23f3ad4:	b00b      	add	sp, #44	; 0x2c
 23f3ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f3ada <_ZN7FatFile7makeSFNEP8FatLfn_t>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
 23f3ada:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 23f3adc:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f3ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* ptr = fname->begin;
 23f3ae4:	f852 3b12 	ldr.w	r3, [r2], #18
  const char* end = fname->end;
 23f3ae8:	6886      	ldr	r6, [r0, #8]
    fname->sfn[k] = ' ';
 23f3aea:	f8c0 1012 	str.w	r1, [r0, #18]
 23f3aee:	6051      	str	r1, [r2, #4]
 23f3af0:	f8c2 1007 	str.w	r1, [r2, #7]
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f3af4:	4605      	mov	r5, r0
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
 23f3af6:	7818      	ldrb	r0, [r3, #0]
 23f3af8:	382e      	subs	r0, #46	; 0x2e
 23f3afa:	bf18      	it	ne
 23f3afc:	2001      	movne	r0, #1
 23f3afe:	461f      	mov	r7, r3
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
 23f3b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f3b04:	2a2e      	cmp	r2, #46	; 0x2e
 23f3b06:	d0fa      	beq.n	23f3afe <_ZN7FatFile7makeSFNEP8FatLfn_t+0x24>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
 23f3b08:	1e72      	subs	r2, r6, #1
 23f3b0a:	42ba      	cmp	r2, r7
 23f3b0c:	4696      	mov	lr, r2
 23f3b0e:	d903      	bls.n	23f3b18 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x3e>
 23f3b10:	f812 3901 	ldrb.w	r3, [r2], #-1
 23f3b14:	2b2e      	cmp	r3, #46	; 0x2e
 23f3b16:	d1f8      	bne.n	23f3b0a <_ZN7FatFile7makeSFNEP8FatLfn_t+0x30>
 23f3b18:	2200      	movs	r2, #0
 23f3b1a:	f04f 0c07 	mov.w	ip, #7
 23f3b1e:	4611      	mov	r1, r2
 23f3b20:	4690      	mov	r8, r2
 23f3b22:	f04f 0908 	mov.w	r9, #8
  }

  for (; ptr < end; ptr++) {
 23f3b26:	42b7      	cmp	r7, r6
 23f3b28:	d251      	bcs.n	23f3bce <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf4>
    c = *ptr;
 23f3b2a:	783b      	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
 23f3b2c:	2b2e      	cmp	r3, #46	; 0x2e
 23f3b2e:	d107      	bne.n	23f3b40 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x66>
 23f3b30:	45be      	cmp	lr, r7
 23f3b32:	d113      	bne.n	23f3b5c <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
      in = 10;                // Max index for full 8.3 name.
 23f3b34:	f04f 0c0a 	mov.w	ip, #10
      i = 8;                  // Place for extension.
 23f3b38:	2408      	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
 23f3b3a:	f04f 0910 	mov.w	r9, #16
 23f3b3e:	e03b      	b.n	23f3bb8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
 23f3b40:	2b22      	cmp	r3, #34	; 0x22
 23f3b42:	d00b      	beq.n	23f3b5c <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f3b44:	2b7c      	cmp	r3, #124	; 0x7c
 23f3b46:	d009      	beq.n	23f3b5c <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f3b48:	f1a3 045b 	sub.w	r4, r3, #91	; 0x5b
 23f3b4c:	2c02      	cmp	r4, #2
 23f3b4e:	d905      	bls.n	23f3b5c <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
 23f3b50:	f1a3 042a 	sub.w	r4, r3, #42	; 0x2a
 23f3b54:	2c05      	cmp	r4, #5
 23f3b56:	d806      	bhi.n	23f3b66 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x8c>
 23f3b58:	2b2d      	cmp	r3, #45	; 0x2d
 23f3b5a:	d013      	beq.n	23f3b84 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
 23f3b5c:	4561      	cmp	r1, ip
 23f3b5e:	d813      	bhi.n	23f3b88 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xae>
        is83 = false;
 23f3b60:	2000      	movs	r0, #0
        c = '_';
 23f3b62:	235f      	movs	r3, #95	; 0x5f
 23f3b64:	e021      	b.n	23f3baa <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
 23f3b66:	f1a3 043a 	sub.w	r4, r3, #58	; 0x3a
 23f3b6a:	2c05      	cmp	r4, #5
 23f3b6c:	d903      	bls.n	23f3b76 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x9c>
      if (sfnReservedChar(c)) {
 23f3b6e:	f1a3 0421 	sub.w	r4, r3, #33	; 0x21
 23f3b72:	2c5d      	cmp	r4, #93	; 0x5d
 23f3b74:	d906      	bls.n	23f3b84 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
 23f3b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 23f3b7a:	2b80      	cmp	r3, #128	; 0x80
 23f3b7c:	d1ee      	bne.n	23f3b5c <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f3b7e:	460c      	mov	r4, r1
        is83 = false;
 23f3b80:	2000      	movs	r0, #0
 23f3b82:	e019      	b.n	23f3bb8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
      if (i > in) {
 23f3b84:	4561      	cmp	r1, ip
 23f3b86:	d907      	bls.n	23f3b98 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xbe>
        is83 = false;
        if (in == 10 || ptr > dot) {
 23f3b88:	f1bc 0f0a 	cmp.w	ip, #10
 23f3b8c:	d01e      	beq.n	23f3bcc <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
 23f3b8e:	45be      	cmp	lr, r7
 23f3b90:	d31c      	bcc.n	23f3bcc <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
          // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
 23f3b92:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
        continue;
 23f3b96:	e7f2      	b.n	23f3b7e <_ZN7FatFile7makeSFNEP8FatLfn_t+0xa4>
      }
      if (isLower(c)) {
 23f3b98:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 23f3b9c:	2c19      	cmp	r4, #25
 23f3b9e:	d80e      	bhi.n	23f3bbe <_ZN7FatFile7makeSFNEP8FatLfn_t+0xe4>
        c += 'A' - 'a';
 23f3ba0:	3b20      	subs	r3, #32
        lc |= bit;
 23f3ba2:	ea49 0202 	orr.w	r2, r9, r2
        c += 'A' - 'a';
 23f3ba6:	b2db      	uxtb	r3, r3
        lc |= bit;
 23f3ba8:	b2d2      	uxtb	r2, r2
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 23f3baa:	1c4c      	adds	r4, r1, #1
 23f3bac:	b2e4      	uxtb	r4, r4
 23f3bae:	4429      	add	r1, r5
      if (i < 7) {
 23f3bb0:	2c06      	cmp	r4, #6
      fname->sfn[i++] = c;
 23f3bb2:	748b      	strb	r3, [r1, #18]
      if (i < 7) {
 23f3bb4:	d800      	bhi.n	23f3bb8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
        fname->seqPos = i;
 23f3bb6:	742c      	strb	r4, [r5, #16]
  for (; ptr < end; ptr++) {
 23f3bb8:	4621      	mov	r1, r4
 23f3bba:	3701      	adds	r7, #1
 23f3bbc:	e7b3      	b.n	23f3b26 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x4c>
      } else if (isUpper(c)) {
 23f3bbe:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 23f3bc2:	2c19      	cmp	r4, #25
        uc |= bit;
 23f3bc4:	bf98      	it	ls
 23f3bc6:	ea49 0808 	orrls.w	r8, r9, r8
 23f3bca:	e7ee      	b.n	23f3baa <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
        is83 = false;
 23f3bcc:	2000      	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 23f3bce:	7cab      	ldrb	r3, [r5, #18]
 23f3bd0:	2b20      	cmp	r3, #32
 23f3bd2:	d011      	beq.n	23f3bf8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x11e>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
 23f3bd4:	b130      	cbz	r0, 23f3be4 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x10a>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
 23f3bd6:	ea18 0f02 	tst.w	r8, r2
 23f3bda:	bf18      	it	ne
 23f3bdc:	2202      	movne	r2, #2
 23f3bde:	746a      	strb	r2, [r5, #17]
  }
  return true;

fail:
  return false;
}
 23f3be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[fname->seqPos] = '~';
 23f3be4:	7c2a      	ldrb	r2, [r5, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f3be6:	2101      	movs	r1, #1
    fname->sfn[fname->seqPos] = '~';
 23f3be8:	18ab      	adds	r3, r5, r2
 23f3bea:	227e      	movs	r2, #126	; 0x7e
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f3bec:	7469      	strb	r1, [r5, #17]
    fname->sfn[fname->seqPos] = '~';
 23f3bee:	749a      	strb	r2, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
 23f3bf0:	2231      	movs	r2, #49	; 0x31
  return true;
 23f3bf2:	4608      	mov	r0, r1
    fname->sfn[fname->seqPos + 1] = '1';
 23f3bf4:	74da      	strb	r2, [r3, #19]
 23f3bf6:	e7f3      	b.n	23f3be0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>
  return false;
 23f3bf8:	2000      	movs	r0, #0
 23f3bfa:	e7f1      	b.n	23f3be0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>

023f3bfc <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
 23f3bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f3c00:	4680      	mov	r8, r0
 23f3c02:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
 23f3c04:	2462      	movs	r4, #98	; 0x62
  const DirFat_t* dir;
  uint16_t hex = 0;
 23f3c06:	2700      	movs	r7, #0
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
 23f3c08:	f04f 097e 	mov.w	r9, #126	; 0x7e
  uint8_t pos = fname->seqPos;
 23f3c0c:	7c0e      	ldrb	r6, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f3c0e:	f101 0a12 	add.w	sl, r1, #18
 23f3c12:	f003 f929 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
 23f3c16:	2e03      	cmp	r6, #3
 23f3c18:	bf28      	it	cs
 23f3c1a:	2603      	movcs	r6, #3
    hex += millis();
 23f3c1c:	4438      	add	r0, r7
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3c1e:	1d33      	adds	r3, r6, #4
    hex += millis();
 23f3c20:	b287      	uxth	r7, r0
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3c22:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
 23f3c24:	f007 020f 	and.w	r2, r7, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3c28:	18e9      	adds	r1, r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3c2a:	3b01      	subs	r3, #1
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3c2c:	2a09      	cmp	r2, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3c2e:	b2db      	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3c30:	bf94      	ite	ls
 23f3c32:	3230      	addls	r2, #48	; 0x30
 23f3c34:	3237      	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3c36:	429e      	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3c38:	748a      	strb	r2, [r1, #18]
      hex >>= 4;
 23f3c3a:	ea4f 1717 	mov.w	r7, r7, lsr #4
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3c3e:	d1f1      	bne.n	23f3c24 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x28>
    fname->sfn[pos] = '~';
 23f3c40:	19ab      	adds	r3, r5, r6
  void rewind() { seekSet(0UL); }
 23f3c42:	2100      	movs	r1, #0
 23f3c44:	4640      	mov	r0, r8
 23f3c46:	f883 9012 	strb.w	r9, [r3, #18]
 23f3c4a:	f7ff fb9c 	bl	23f3386 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 23f3c4e:	2101      	movs	r1, #1
 23f3c50:	4640      	mov	r0, r8
 23f3c52:	f7ff fb79 	bl	23f3348 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 23f3c56:	4601      	mov	r1, r0
 23f3c58:	b930      	cbnz	r0, 23f3c68 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x6c>
        if (!getError()) {
 23f3c5a:	f898 0001 	ldrb.w	r0, [r8, #1]
 23f3c5e:	fab0 f080 	clz	r0, r0
 23f3c62:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 23f3c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
 23f3c68:	7803      	ldrb	r3, [r0, #0]
 23f3c6a:	b173      	cbz	r3, 23f3c8a <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x8e>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f3c6c:	7ac3      	ldrb	r3, [r0, #11]
 23f3c6e:	071b      	lsls	r3, r3, #28
 23f3c70:	d4ed      	bmi.n	23f3c4e <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
 23f3c72:	220b      	movs	r2, #11
 23f3c74:	4650      	mov	r0, sl
 23f3c76:	f008 fef9 	bl	23fca6c <memcmp>
 23f3c7a:	2800      	cmp	r0, #0
 23f3c7c:	d1e7      	bne.n	23f3c4e <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
 23f3c7e:	1e60      	subs	r0, r4, #1
 23f3c80:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 23f3c84:	d1c5      	bne.n	23f3c12 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x16>
  return false;
 23f3c86:	4620      	mov	r0, r4
fail:
 23f3c88:	e7ec      	b.n	23f3c64 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
  return true;
 23f3c8a:	2001      	movs	r0, #1
 23f3c8c:	e7ea      	b.n	23f3c64 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
	...

023f3c90 <_ZN7FatFile4openEPS_P8FatLfn_ti>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f3c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3c94:	ed2d 8b02 	vpush	{d8}
 23f3c98:	b08b      	sub	sp, #44	; 0x2c
 23f3c9a:	9304      	str	r3, [sp, #16]
  uint16_t time;
  DirFat_t* dir;
  const DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
 23f3c9c:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f3c9e:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 23f3ca0:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f3ca4:	4617      	mov	r7, r2
 23f3ca6:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
 23f3ca8:	d105      	bne.n	23f3cb6 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x26>
    goto fail;
  }
  return true;

fail:
  return false;
 23f3caa:	2000      	movs	r0, #0
}
 23f3cac:	b00b      	add	sp, #44	; 0x2c
 23f3cae:	ecbd 8b02 	vpop	{d8}
 23f3cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const { return m_attributes; }
 23f3cb6:	9b07      	ldr	r3, [sp, #28]
 23f3cb8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 23f3cba:	2b00      	cmp	r3, #0
 23f3cbc:	d1f5      	bne.n	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  nameOrd = (fname->len + 12) / 13;
 23f3cbe:	68d3      	ldr	r3, [r2, #12]
 23f3cc0:	220d      	movs	r2, #13
 23f3cc2:	330c      	adds	r3, #12
 23f3cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 23f3cc8:	b2db      	uxtb	r3, r3
 23f3cca:	9306      	str	r3, [sp, #24]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f3ccc:	7c7b      	ldrb	r3, [r7, #17]
  uint8_t checksum = 0;
 23f3cce:	f04f 0a00 	mov.w	sl, #0
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f3cd2:	079a      	lsls	r2, r3, #30
 23f3cd4:	bf0c      	ite	eq
 23f3cd6:	2301      	moveq	r3, #1
 23f3cd8:	9b06      	ldrne	r3, [sp, #24]
  void rewind() { seekSet(0UL); }
 23f3cda:	4628      	mov	r0, r5
 23f3cdc:	bf1c      	itt	ne
 23f3cde:	f103 0901 	addne.w	r9, r3, #1
 23f3ce2:	fa5f f389 	uxtbne.w	r3, r9
 23f3ce6:	9302      	str	r3, [sp, #8]
  auto vol = dirFile->m_vol;
 23f3ce8:	688b      	ldr	r3, [r1, #8]
 23f3cea:	2100      	movs	r1, #0
 23f3cec:	9305      	str	r3, [sp, #20]
 23f3cee:	f7ff fb4a 	bl	23f3386 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f3cf2:	f107 0312 	add.w	r3, r7, #18
  uint8_t order = 0;
 23f3cf6:	46d0      	mov	r8, sl
  uint8_t freeFound = 0;
 23f3cf8:	4654      	mov	r4, sl
  uint8_t lfnOrd = 0;
 23f3cfa:	46d1      	mov	r9, sl
  bool fnameFound = false;
 23f3cfc:	46d3      	mov	fp, sl
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f3cfe:	ee08 3a10 	vmov	s16, r3
  uint16_t freeIndex = 0;
 23f3d02:	f8cd a00c 	str.w	sl, [sp, #12]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f3d06:	696e      	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
 23f3d08:	2100      	movs	r1, #0
 23f3d0a:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f3d0c:	f3c6 164f 	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
 23f3d10:	f7ff fb1a 	bl	23f3348 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f3d14:	2800      	cmp	r0, #0
 23f3d16:	d12f      	bne.n	23f3d78 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe8>
      if (dirFile->getError()) {
 23f3d18:	786b      	ldrb	r3, [r5, #1]
 23f3d1a:	2b00      	cmp	r3, #0
 23f3d1c:	d1c5      	bne.n	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 23f3d1e:	9b04      	ldr	r3, [sp, #16]
 23f3d20:	059a      	lsls	r2, r3, #22
 23f3d22:	d5c2      	bpl.n	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
 23f3d24:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
 23f3d28:	3b01      	subs	r3, #1
 23f3d2a:	2b01      	cmp	r3, #1
 23f3d2c:	d8bd      	bhi.n	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (freeFound == 0) {
 23f3d2e:	9b03      	ldr	r3, [sp, #12]
 23f3d30:	2c00      	cmp	r4, #0
 23f3d32:	bf08      	it	eq
 23f3d34:	4633      	moveq	r3, r6
 23f3d36:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
 23f3d38:	9b02      	ldr	r3, [sp, #8]
 23f3d3a:	429c      	cmp	r4, r3
 23f3d3c:	d209      	bcs.n	23f3d52 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc2>
    dir = dirFile->readDirCache();
 23f3d3e:	2100      	movs	r1, #0
 23f3d40:	4628      	mov	r0, r5
 23f3d42:	f7ff fb01 	bl	23f3348 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f3d46:	2800      	cmp	r0, #0
 23f3d48:	f040 8085 	bne.w	23f3e56 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c6>
      if (dirFile->getError()) {
 23f3d4c:	786b      	ldrb	r3, [r5, #1]
 23f3d4e:	2b00      	cmp	r3, #0
 23f3d50:	d1ab      	bne.n	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  while (freeTotal < freeNeed) {
 23f3d52:	f8bd 6008 	ldrh.w	r6, [sp, #8]
  freeTotal = freeFound;
 23f3d56:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f3d58:	42a6      	cmp	r6, r4
 23f3d5a:	d97f      	bls.n	23f3e5c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1cc>
    if (!dirFile->addDirCluster()) {
 23f3d5c:	4628      	mov	r0, r5
 23f3d5e:	f7ff f9b9 	bl	23f30d4 <_ZN7FatFile13addDirClusterEv>
 23f3d62:	2800      	cmp	r0, #0
 23f3d64:	d0a1      	beq.n	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
 23f3d66:	9b05      	ldr	r3, [sp, #20]
 23f3d68:	791b      	ldrb	r3, [r3, #4]
    freeTotal += vol->dirEntriesPerCluster();
 23f3d6a:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 23f3d6e:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f3d70:	e7f2      	b.n	23f3d58 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc8>
        fnameFound = true;
 23f3d72:	f04f 0b01 	mov.w	fp, #1
 23f3d76:	e7c6      	b.n	23f3d06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
 23f3d78:	7802      	ldrb	r2, [r0, #0]
 23f3d7a:	2ae5      	cmp	r2, #229	; 0xe5
 23f3d7c:	d000      	beq.n	23f3d80 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xf0>
 23f3d7e:	b982      	cbnz	r2, 23f3da2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x112>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f3d80:	9b03      	ldr	r3, [sp, #12]
 23f3d82:	2c00      	cmp	r4, #0
 23f3d84:	bf08      	it	eq
 23f3d86:	4633      	moveq	r3, r6
 23f3d88:	9303      	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
 23f3d8a:	9b02      	ldr	r3, [sp, #8]
 23f3d8c:	429c      	cmp	r4, r3
        freeFound++;
 23f3d8e:	bf3c      	itt	cc
 23f3d90:	3401      	addcc	r4, #1
 23f3d92:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
 23f3d94:	2a00      	cmp	r2, #0
 23f3d96:	d0c2      	beq.n	23f3d1e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x8e>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f3d98:	2ae5      	cmp	r2, #229	; 0xe5
 23f3d9a:	d106      	bne.n	23f3daa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x11a>
      lfnOrd = 0;
 23f3d9c:	f04f 0900 	mov.w	r9, #0
 23f3da0:	e7b1      	b.n	23f3d06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        freeFound = 0;
 23f3da2:	9b02      	ldr	r3, [sp, #8]
 23f3da4:	429c      	cmp	r4, r3
 23f3da6:	bf38      	it	cc
 23f3da8:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f3daa:	2a2e      	cmp	r2, #46	; 0x2e
 23f3dac:	d0f6      	beq.n	23f3d9c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
 23f3dae:	7ac1      	ldrb	r1, [r0, #11]
    } else if (isFatLongName(dir)) {
 23f3db0:	290f      	cmp	r1, #15
 23f3db2:	d126      	bne.n	23f3e02 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x172>
      if (!lfnOrd) {
 23f3db4:	f1b9 0f00 	cmp.w	r9, #0
 23f3db8:	d119      	bne.n	23f3dee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x15e>
        if (order != nameOrd ||
 23f3dba:	9b06      	ldr	r3, [sp, #24]
        order = ldir->order & 0X1F;
 23f3dbc:	f002 081f 	and.w	r8, r2, #31
        if (order != nameOrd ||
 23f3dc0:	4543      	cmp	r3, r8
 23f3dc2:	d1a0      	bne.n	23f3d06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
 23f3dc4:	f012 0940 	ands.w	r9, r2, #64	; 0x40
 23f3dc8:	d09d      	beq.n	23f3d06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        checksum = ldir->checksum;
 23f3dca:	4699      	mov	r9, r3
 23f3dcc:	f890 a00d 	ldrb.w	sl, [r0, #13]
      if (order == 1) {
 23f3dd0:	f1b8 0f01 	cmp.w	r8, #1
 23f3dd4:	d197      	bne.n	23f3d06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
 23f3dd6:	1c71      	adds	r1, r6, #1
 23f3dd8:	464b      	mov	r3, r9
 23f3dda:	463a      	mov	r2, r7
 23f3ddc:	4628      	mov	r0, r5
 23f3dde:	b289      	uxth	r1, r1
 23f3de0:	f7ff fdca 	bl	23f3978 <_ZN7FatFile7cmpNameEtP8FatLfn_th>
          lfnOrd = 0;
 23f3de4:	2800      	cmp	r0, #0
 23f3de6:	bf08      	it	eq
 23f3de8:	f04f 0900 	moveq.w	r9, #0
 23f3dec:	e78b      	b.n	23f3d06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
 23f3dee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23f3df2:	fa5f f888 	uxtb.w	r8, r8
 23f3df6:	4542      	cmp	r2, r8
 23f3df8:	d1d0      	bne.n	23f3d9c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
 23f3dfa:	7b42      	ldrb	r2, [r0, #13]
 23f3dfc:	4552      	cmp	r2, sl
 23f3dfe:	d0e7      	beq.n	23f3dd0 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x140>
 23f3e00:	e7cc      	b.n	23f3d9c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
    } else if (isFatFileOrSubdir(dir)) {
 23f3e02:	070b      	lsls	r3, r1, #28
 23f3e04:	d4ca      	bmi.n	23f3d9c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
      if (lfnOrd) {
 23f3e06:	f1b9 0f00 	cmp.w	r9, #0
 23f3e0a:	d00a      	beq.n	23f3e22 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x192>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
 23f3e0c:	f1b8 0f01 	cmp.w	r8, #1
 23f3e10:	f47f af4b 	bne.w	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f3e14:	f7ff fd94 	bl	23f3940 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
 23f3e18:	4550      	cmp	r0, sl
 23f3e1a:	f47f af46 	bne.w	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f3e1e:	46cb      	mov	fp, r9
 23f3e20:	e00c      	b.n	23f3e3c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1ac>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f3e22:	220b      	movs	r2, #11
 23f3e24:	ee18 1a10 	vmov	r1, s16
 23f3e28:	f008 fe20 	bl	23fca6c <memcmp>
 23f3e2c:	2800      	cmp	r0, #0
 23f3e2e:	f47f af6a 	bne.w	23f3d06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 23f3e32:	f897 b011 	ldrb.w	fp, [r7, #17]
 23f3e36:	f01b 0b01 	ands.w	fp, fp, #1
 23f3e3a:	d19a      	bne.n	23f3d72 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe2>
  if (oflag & O_EXCL) {
 23f3e3c:	9b04      	ldr	r3, [sp, #16]
 23f3e3e:	0519      	lsls	r1, r3, #20
 23f3e40:	f53f af33 	bmi.w	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 23f3e44:	4632      	mov	r2, r6
 23f3e46:	4629      	mov	r1, r5
 23f3e48:	9b04      	ldr	r3, [sp, #16]
 23f3e4a:	9807      	ldr	r0, [sp, #28]
 23f3e4c:	f8cd b000 	str.w	fp, [sp]
 23f3e50:	f7ff fae9 	bl	23f3426 <_ZN7FatFile15openCachedEntryEPS_tih>
 23f3e54:	e72a      	b.n	23f3cac <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c>
    freeFound++;
 23f3e56:	3401      	adds	r4, #1
 23f3e58:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 23f3e5a:	e76d      	b.n	23f3d38 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xa8>
  if (fnameFound) {
 23f3e5c:	f1bb 0f00 	cmp.w	fp, #0
 23f3e60:	d147      	bne.n	23f3ef2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x262>
  lfnOrd = freeNeed - 1;
 23f3e62:	9b02      	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f3e64:	463a      	mov	r2, r7
  lfnOrd = freeNeed - 1;
 23f3e66:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
  curIndex = freeIndex + lfnOrd;
 23f3e6a:	9b03      	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
 23f3e6c:	fa5f fb89 	uxtb.w	fp, r9
  curIndex = freeIndex + lfnOrd;
 23f3e70:	fa53 f989 	uxtab	r9, r3, r9
 23f3e74:	fa1f f689 	uxth.w	r6, r9
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f3e78:	465b      	mov	r3, fp
 23f3e7a:	4631      	mov	r1, r6
 23f3e7c:	4628      	mov	r0, r5
 23f3e7e:	f7ff fdcb 	bl	23f3a18 <_ZN7FatFile9createLFNEtP8FatLfn_th>
 23f3e82:	2800      	cmp	r0, #0
 23f3e84:	f43f af11 	beq.w	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  dir = dirFile->cacheDir(curIndex);
 23f3e88:	4631      	mov	r1, r6
 23f3e8a:	4628      	mov	r0, r5
 23f3e8c:	f7ff fd67 	bl	23f395e <_ZN7FatFile8cacheDirEt>
  if (!dir) {
 23f3e90:	4604      	mov	r4, r0
 23f3e92:	2800      	cmp	r0, #0
 23f3e94:	f43f af09 	beq.w	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  memset(dir, 0, sizeof(DirFat_t));
 23f3e98:	2220      	movs	r2, #32
 23f3e9a:	2100      	movs	r1, #0
 23f3e9c:	f008 fe03 	bl	23fcaa6 <memset>
  memcpy(dir->name, fname->sfn, 11);
 23f3ea0:	f8d7 3012 	ldr.w	r3, [r7, #18]
 23f3ea4:	6023      	str	r3, [r4, #0]
 23f3ea6:	f8d7 3016 	ldr.w	r3, [r7, #22]
 23f3eaa:	6063      	str	r3, [r4, #4]
 23f3eac:	8b7b      	ldrh	r3, [r7, #26]
 23f3eae:	8123      	strh	r3, [r4, #8]
 23f3eb0:	7f3b      	ldrb	r3, [r7, #28]
 23f3eb2:	72a3      	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
 23f3eb4:	7c7b      	ldrb	r3, [r7, #17]
 23f3eb6:	f003 0318 	and.w	r3, r3, #24
 23f3eba:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
 23f3ebc:	4b13      	ldr	r3, [pc, #76]	; (23f3f0c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x27c>)
 23f3ebe:	681b      	ldr	r3, [r3, #0]
 23f3ec0:	b1f3      	cbz	r3, 23f3f00 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x270>
    FsDateTime::callback(&date, &time, &ms10);
 23f3ec2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 23f3ec6:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 23f3eca:	a809      	add	r0, sp, #36	; 0x24
 23f3ecc:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f3ece:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 23f3ed2:	8223      	strh	r3, [r4, #16]
 23f3ed4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 23f3ed8:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
 23f3eda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 23f3ede:	7363      	strb	r3, [r4, #13]
 23f3ee0:	9b05      	ldr	r3, [sp, #20]
 23f3ee2:	9a05      	ldr	r2, [sp, #20]
 23f3ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 23f3ee8:	f043 0301 	orr.w	r3, r3, #1
 23f3eec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
 23f3ef0:	e7a8      	b.n	23f3e44 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1b4>
    if (!dirFile->makeUniqueSfn(fname)) {
 23f3ef2:	4639      	mov	r1, r7
 23f3ef4:	4628      	mov	r0, r5
 23f3ef6:	f7ff fe81 	bl	23f3bfc <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>
 23f3efa:	2800      	cmp	r0, #0
 23f3efc:	d1b1      	bne.n	23f3e62 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1d2>
 23f3efe:	e6d4      	b.n	23f3caa <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f3f00:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f3f04:	8223      	strh	r3, [r4, #16]
 23f3f06:	8323      	strh	r3, [r4, #24]
 23f3f08:	8263      	strh	r3, [r4, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f3f0a:	e7e9      	b.n	23f3ee0 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x250>
 23f3f0c:	1007aea8 	.word	0x1007aea8

023f3f10 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
 23f3f10:	b470      	push	{r4, r5, r6}
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
 23f3f12:	460d      	mov	r5, r1
 23f3f14:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f3f18:	2820      	cmp	r0, #32
 23f3f1a:	d0fa      	beq.n	23f3f12 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x2>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
 23f3f1c:	2100      	movs	r1, #0
 23f3f1e:	4628      	mov	r0, r5
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f3f20:	4e1c      	ldr	r6, [pc, #112]	; (23f3f94 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x84>)
  fname->begin = path;
 23f3f22:	6015      	str	r5, [r2, #0]
  fname->len = 0;
 23f3f24:	60d1      	str	r1, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
 23f3f26:	4604      	mov	r4, r0
 23f3f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f3f2c:	b1f1      	cbz	r1, 23f3f6c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
 23f3f2e:	292f      	cmp	r1, #47	; 0x2f
 23f3f30:	d01c      	beq.n	23f3f6c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f3f32:	f1a1 0020 	sub.w	r0, r1, #32
 23f3f36:	285f      	cmp	r0, #95	; 0x5f
 23f3f38:	d828      	bhi.n	23f3f8c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f3f3a:	f1a1 0022 	sub.w	r0, r1, #34	; 0x22
 23f3f3e:	b2c0      	uxtb	r0, r0
 23f3f40:	281d      	cmp	r0, #29
 23f3f42:	d803      	bhi.n	23f3f4c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x3c>
 23f3f44:	fa26 f000 	lsr.w	r0, r6, r0
 23f3f48:	07c0      	lsls	r0, r0, #31
 23f3f4a:	d41f      	bmi.n	23f3f8c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f3f4c:	f001 00bf 	and.w	r0, r1, #191	; 0xbf
 23f3f50:	283c      	cmp	r0, #60	; 0x3c
 23f3f52:	d01b      	beq.n	23f3f8c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f3f54:	295c      	cmp	r1, #92	; 0x5c
 23f3f56:	d019      	beq.n	23f3f8c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
 23f3f58:	292e      	cmp	r1, #46	; 0x2e
 23f3f5a:	eba4 0005 	sub.w	r0, r4, r5
 23f3f5e:	d003      	beq.n	23f3f68 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
 23f3f60:	2920      	cmp	r1, #32
 23f3f62:	d001      	beq.n	23f3f68 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
 23f3f64:	e9c2 4002 	strd	r4, r0, [r2, #8]
                            const char** ptr) {
 23f3f68:	4620      	mov	r0, r4
 23f3f6a:	e7dc      	b.n	23f3f26 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x16>
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
 23f3f6c:	68d1      	ldr	r1, [r2, #12]
 23f3f6e:	3901      	subs	r1, #1
 23f3f70:	29fe      	cmp	r1, #254	; 0xfe
 23f3f72:	d80b      	bhi.n	23f3f8c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f3f74:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f3f76:	f810 1b01 	ldrb.w	r1, [r0], #1
 23f3f7a:	2920      	cmp	r1, #32
 23f3f7c:	d0fa      	beq.n	23f3f74 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
 23f3f7e:	292f      	cmp	r1, #47	; 0x2f
 23f3f80:	d0f8      	beq.n	23f3f74 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
  }
  *ptr = path;
 23f3f82:	601c      	str	r4, [r3, #0]
  return makeSFN(fname);
 23f3f84:	4610      	mov	r0, r2

fail:
  return false;
}
 23f3f86:	bc70      	pop	{r4, r5, r6}
  return makeSFN(fname);
 23f3f88:	f7ff bda7 	b.w	23f3ada <_ZN7FatFile7makeSFNEP8FatLfn_t>
}
 23f3f8c:	2000      	movs	r0, #0
 23f3f8e:	bc70      	pop	{r4, r5, r6}
 23f3f90:	4770      	bx	lr
 23f3f92:	bf00      	nop
 23f3f94:	31000101 	.word	0x31000101

023f3f98 <_ZN7FatFile6removeEv>:
  FatFile() {}
 23f3f98:	2300      	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::remove() {
 23f3f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f3f9e:	b08a      	sub	sp, #40	; 0x28
 23f3fa0:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
 23f3fa2:	7883      	ldrb	r3, [r0, #2]
bool FatFile::remove() {
 23f3fa4:	4604      	mov	r4, r0
  if (!isWritable()) {
 23f3fa6:	079a      	lsls	r2, r3, #30
 23f3fa8:	d507      	bpl.n	23f3fba <_ZN7FatFile6removeEv+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f3faa:	6a01      	ldr	r1, [r0, #32]
 23f3fac:	b939      	cbnz	r1, 23f3fbe <_ZN7FatFile6removeEv+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f3fae:	2101      	movs	r1, #1
 23f3fb0:	4620      	mov	r0, r4
 23f3fb2:	f7ff f8c7 	bl	23f3144 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f3fb6:	4605      	mov	r5, r0
 23f3fb8:	b938      	cbnz	r0, 23f3fca <_ZN7FatFile6removeEv+0x32>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
 23f3fba:	2000      	movs	r0, #0
 23f3fbc:	e042      	b.n	23f4044 <_ZN7FatFile6removeEv+0xac>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f3fbe:	6880      	ldr	r0, [r0, #8]
 23f3fc0:	f001 ff6c 	bl	23f5e9c <_ZN12FatPartition9freeChainEm>
 23f3fc4:	2800      	cmp	r0, #0
 23f3fc6:	d1f2      	bne.n	23f3fae <_ZN7FatFile6removeEv+0x16>
 23f3fc8:	e7f7      	b.n	23f3fba <_ZN7FatFile6removeEv+0x22>
  dir->name[0] = FAT_NAME_DELETED;
 23f3fca:	27e5      	movs	r7, #229	; 0xe5
  checksum = lfnChecksum(dir->name);
 23f3fcc:	f7ff fcb8 	bl	23f3940 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  m_attributes = FILE_ATTR_CLOSED;
 23f3fd0:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
 23f3fd2:	702f      	strb	r7, [r5, #0]
  checksum = lfnChecksum(dir->name);
 23f3fd4:	4606      	mov	r6, r0
  m_attributes = FILE_ATTR_CLOSED;
 23f3fd6:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
 23f3fd8:	68a0      	ldr	r0, [r4, #8]
  m_flags = 0;
 23f3fda:	70a3      	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
 23f3fdc:	f7ff f840 	bl	23f3060 <_ZN12FatPartition9cacheSyncEv>
 23f3fe0:	2800      	cmp	r0, #0
 23f3fe2:	d0ea      	beq.n	23f3fba <_ZN7FatFile6removeEv+0x22>
  if (!isLFN()) {
 23f3fe4:	78e3      	ldrb	r3, [r4, #3]
 23f3fe6:	b36b      	cbz	r3, 23f4044 <_ZN7FatFile6removeEv+0xac>
  if (!dirFile.openCluster(this)) {
 23f3fe8:	4621      	mov	r1, r4
 23f3fea:	a801      	add	r0, sp, #4
 23f3fec:	f7ff f8bf 	bl	23f316e <_ZN7FatFile11openClusterEPS_>
 23f3ff0:	2800      	cmp	r0, #0
 23f3ff2:	d0e2      	beq.n	23f3fba <_ZN7FatFile6removeEv+0x22>
 23f3ff4:	2501      	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
 23f3ff6:	78e3      	ldrb	r3, [r4, #3]
 23f3ff8:	fa5f f885 	uxtb.w	r8, r5
 23f3ffc:	4543      	cmp	r3, r8
 23f3ffe:	d3dc      	bcc.n	23f3fba <_ZN7FatFile6removeEv+0x22>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
 23f4000:	88a1      	ldrh	r1, [r4, #4]
 23f4002:	a801      	add	r0, sp, #4
 23f4004:	1b49      	subs	r1, r1, r5
 23f4006:	b289      	uxth	r1, r1
 23f4008:	f7ff fca9 	bl	23f395e <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f400c:	2800      	cmp	r0, #0
 23f400e:	d0d4      	beq.n	23f3fba <_ZN7FatFile6removeEv+0x22>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f4010:	7ac3      	ldrb	r3, [r0, #11]
 23f4012:	2b0f      	cmp	r3, #15
 23f4014:	d1d1      	bne.n	23f3fba <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f4016:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f4018:	f002 031f 	and.w	r3, r2, #31
 23f401c:	4543      	cmp	r3, r8
 23f401e:	d1cc      	bne.n	23f3fba <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f4020:	7b43      	ldrb	r3, [r0, #13]
 23f4022:	42b3      	cmp	r3, r6
 23f4024:	d1c9      	bne.n	23f3fba <_ZN7FatFile6removeEv+0x22>
    ldir->order = FAT_NAME_DELETED;
 23f4026:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
 23f4028:	68a1      	ldr	r1, [r4, #8]
    if (last) {
 23f402a:	3501      	adds	r5, #1
 23f402c:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 23f4030:	b2ad      	uxth	r5, r5
 23f4032:	f043 0301 	orr.w	r3, r3, #1
 23f4036:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 23f403a:	0653      	lsls	r3, r2, #25
 23f403c:	d5db      	bpl.n	23f3ff6 <_ZN7FatFile6removeEv+0x5e>
      if (!m_vol->cacheSync()) {
 23f403e:	68a0      	ldr	r0, [r4, #8]
 23f4040:	f7ff f80e 	bl	23f3060 <_ZN12FatPartition9cacheSyncEv>
}
 23f4044:	b00a      	add	sp, #40	; 0x28
 23f4046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f404a <_ZN7Timeout8timedOutEv.isra.0>:
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
 23f404a:	b510      	push	{r4, lr}
 23f404c:	4604      	mov	r4, r0
 23f404e:	f002 ff0b 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
 23f4052:	1a20      	subs	r0, r4, r0
 23f4054:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 23f4058:	bd10      	pop	{r4, pc}

023f405a <_ZN18SdSpiArduinoDriver11setSckSpeedEm>:
 23f405a:	2300      	movs	r3, #0
 23f405c:	7203      	strb	r3, [r0, #8]
 23f405e:	2301      	movs	r3, #1
 23f4060:	60c1      	str	r1, [r0, #12]
 23f4062:	8203      	strh	r3, [r0, #16]
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
  }
 23f4064:	4770      	bx	lr

023f4066 <_ZN9SdSpiCard8spiStartEv>:
  (void)value;
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 23f4066:	b538      	push	{r3, r4, r5, lr}
  SPI_ASSERT_NOT_ACTIVE;
  if (!m_spiActive) {
 23f4068:	7f05      	ldrb	r5, [r0, #28]
void SdSpiCard::spiStart() {
 23f406a:	4604      	mov	r4, r0
  if (!m_spiActive) {
 23f406c:	b96d      	cbnz	r5, 23f408a <_ZN9SdSpiCard8spiStartEv+0x24>
  void spiActivate() { m_spiDriver.activate(); }
 23f406e:	f000 faab 	bl	23f45c8 <_ZN18SdSpiArduinoDriver8activateEv>
    spiActivate();
    m_spiActive = true;
 23f4072:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f4074:	4629      	mov	r1, r5
 23f4076:	7ea0      	ldrb	r0, [r4, #26]
 23f4078:	7723      	strb	r3, [r4, #28]
 23f407a:	f002 f8e2 	bl	23f6242 <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f407e:	4620      	mov	r0, r4
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);
  }
}
 23f4080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f4084:	21ff      	movs	r1, #255	; 0xff
 23f4086:	f000 bae7 	b.w	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
 23f408a:	bd38      	pop	{r3, r4, r5, pc}

023f408c <_ZN9SdSpiCard7spiStopEv>:
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 23f408c:	b510      	push	{r4, lr}
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
 23f408e:	7f03      	ldrb	r3, [r0, #28]
void SdSpiCard::spiStop() {
 23f4090:	4604      	mov	r4, r0
  if (m_spiActive) {
 23f4092:	b163      	cbz	r3, 23f40ae <_ZN9SdSpiCard7spiStopEv+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f4094:	2101      	movs	r1, #1
 23f4096:	7e80      	ldrb	r0, [r0, #26]
 23f4098:	f002 f8d3 	bl	23f6242 <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f409c:	21ff      	movs	r1, #255	; 0xff
 23f409e:	4620      	mov	r0, r4
 23f40a0:	f000 fada 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
  void spiDeactivate() { m_spiDriver.deactivate(); }
 23f40a4:	4620      	mov	r0, r4
 23f40a6:	f000 fab9 	bl	23f461c <_ZN18SdSpiArduinoDriver10deactivateEv>
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 23f40aa:	2300      	movs	r3, #0
 23f40ac:	7723      	strb	r3, [r4, #28]
  }
}
 23f40ae:	bd10      	pop	{r4, pc}

023f40b0 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 23f40b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f40b2:	4604      	mov	r4, r0
 23f40b4:	460e      	mov	r6, r1
 23f40b6:	4617      	mov	r7, r2
 23f40b8:	f002 fed6 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f40bc:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 23f40c0:	b285      	uxth	r5, r0
    return m_spiDriver.receive();
 23f40c2:	4620      	mov	r0, r4
 23f40c4:	f000 faad 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
 23f40c8:	28ff      	cmp	r0, #255	; 0xff
 23f40ca:	77a0      	strb	r0, [r4, #30]
 23f40cc:	d10b      	bne.n	23f40e6 <_ZN9SdSpiCard8readDataEPhj+0x36>
    if (timeout.timedOut()) {
 23f40ce:	4628      	mov	r0, r5
 23f40d0:	f7ff ffbb 	bl	23f404a <_ZN7Timeout8timedOutEv.isra.0>
 23f40d4:	2800      	cmp	r0, #0
 23f40d6:	d0f4      	beq.n	23f40c2 <_ZN9SdSpiCard8readDataEPhj+0x12>
    m_errorCode = code;
 23f40d8:	231e      	movs	r3, #30
  spiStop();
 23f40da:	4620      	mov	r0, r4
 23f40dc:	76e3      	strb	r3, [r4, #27]
 23f40de:	f7ff ffd5 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f40e2:	2000      	movs	r0, #0
}
 23f40e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_SECTOR) {
 23f40e6:	28fe      	cmp	r0, #254	; 0xfe
 23f40e8:	d001      	beq.n	23f40ee <_ZN9SdSpiCard8readDataEPhj+0x3e>
 23f40ea:	2319      	movs	r3, #25
 23f40ec:	e7f5      	b.n	23f40da <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive(buf, n);
 23f40ee:	463a      	mov	r2, r7
 23f40f0:	4631      	mov	r1, r6
 23f40f2:	4620      	mov	r0, r4
 23f40f4:	f000 fa9a 	bl	23f462c <_ZN18SdSpiArduinoDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 23f40f8:	77a0      	strb	r0, [r4, #30]
 23f40fa:	b108      	cbz	r0, 23f4100 <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 23f40fc:	2326      	movs	r3, #38	; 0x26
 23f40fe:	e7ec      	b.n	23f40da <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive();
 23f4100:	4620      	mov	r0, r4
 23f4102:	f000 fa8e 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f4106:	4620      	mov	r0, r4
 23f4108:	f000 fa8b 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
  return true;
 23f410c:	2001      	movs	r0, #1
 23f410e:	e7e9      	b.n	23f40e4 <_ZN9SdSpiCard8readDataEPhj+0x34>

023f4110 <_ZN9SdSpiCard8readDataEPh>:
bool SdSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
 23f4110:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f4114:	f7ff bfcc 	b.w	23f40b0 <_ZN9SdSpiCard8readDataEPhj>

023f4118 <_ZN9SdSpiCard9waitReadyEt>:
    return readStop();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::waitReady(uint16_t ms) {
 23f4118:	b538      	push	{r3, r4, r5, lr}
 23f411a:	460c      	mov	r4, r1
 23f411c:	4605      	mov	r5, r0
 23f411e:	f002 fea3 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f4122:	4404      	add	r4, r0
 23f4124:	b2a4      	uxth	r4, r4
 23f4126:	4628      	mov	r0, r5
 23f4128:	f000 fa7b 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
 23f412c:	28ff      	cmp	r0, #255	; 0xff
 23f412e:	d006      	beq.n	23f413e <_ZN9SdSpiCard9waitReadyEt+0x26>
    if (timeout.timedOut()) {
 23f4130:	4620      	mov	r0, r4
 23f4132:	f7ff ff8a 	bl	23f404a <_ZN7Timeout8timedOutEv.isra.0>
 23f4136:	2800      	cmp	r0, #0
 23f4138:	d0f5      	beq.n	23f4126 <_ZN9SdSpiCard9waitReadyEt+0xe>
      return false;
 23f413a:	2000      	movs	r0, #0
    }
  }
  return true;
}
 23f413c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f413e:	2001      	movs	r0, #1
 23f4140:	e7fc      	b.n	23f413c <_ZN9SdSpiCard9waitReadyEt+0x24>

023f4142 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 23f4142:	b538      	push	{r3, r4, r5, lr}
 23f4144:	4604      	mov	r4, r0
 23f4146:	4615      	mov	r5, r2
    m_spiDriver.send(data);
 23f4148:	f000 fa86 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
    m_spiDriver.send(buf, n);
 23f414c:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f4150:	4629      	mov	r1, r5
 23f4152:	4620      	mov	r0, r4
 23f4154:	f000 fa84 	bl	23f4660 <_ZN18SdSpiArduinoDriver4sendEPKhj>
    m_spiDriver.send(data);
 23f4158:	21ff      	movs	r1, #255	; 0xff
 23f415a:	4620      	mov	r0, r4
 23f415c:	f000 fa7c 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
 23f4160:	21ff      	movs	r1, #255	; 0xff
 23f4162:	4620      	mov	r0, r4
 23f4164:	f000 fa78 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f4168:	4620      	mov	r0, r4
 23f416a:	f000 fa5a 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 23f416e:	77a0      	strb	r0, [r4, #30]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 23f4170:	f000 001f 	and.w	r0, r0, #31
 23f4174:	2805      	cmp	r0, #5
 23f4176:	d006      	beq.n	23f4186 <_ZN9SdSpiCard9writeDataEhPKh+0x44>
    m_errorCode = code;
 23f4178:	2321      	movs	r3, #33	; 0x21
    goto fail;
  }
  return true;

fail:
  spiStop();
 23f417a:	4620      	mov	r0, r4
 23f417c:	76e3      	strb	r3, [r4, #27]
 23f417e:	f7ff ff85 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f4182:	2000      	movs	r0, #0
}
 23f4184:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f4186:	2001      	movs	r0, #1
 23f4188:	e7fc      	b.n	23f4184 <_ZN9SdSpiCard9writeDataEhPKh+0x42>

023f418a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 23f418a:	b513      	push	{r0, r1, r4, lr}
 23f418c:	9101      	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f418e:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeData(const uint8_t* src) {
 23f4192:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f4194:	f7ff ffc0 	bl	23f4118 <_ZN9SdSpiCard9waitReadyEt>
 23f4198:	9a01      	ldr	r2, [sp, #4]
 23f419a:	b930      	cbnz	r0, 23f41aa <_ZN9SdSpiCard9writeDataEPKh+0x20>
 23f419c:	2325      	movs	r3, #37	; 0x25
 23f419e:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f41a0:	4620      	mov	r0, r4
 23f41a2:	f7ff ff73 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f41a6:	2000      	movs	r0, #0
 23f41a8:	e005      	b.n	23f41b6 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 23f41aa:	21fc      	movs	r1, #252	; 0xfc
 23f41ac:	4620      	mov	r0, r4
 23f41ae:	f7ff ffc8 	bl	23f4142 <_ZN9SdSpiCard9writeDataEhPKh>
 23f41b2:	2800      	cmp	r0, #0
 23f41b4:	d0f4      	beq.n	23f41a0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
 23f41b6:	b002      	add	sp, #8
 23f41b8:	bd10      	pop	{r4, pc}

023f41ba <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 23f41ba:	b538      	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f41bc:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeStop() {
 23f41c0:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f41c2:	f7ff ffa9 	bl	23f4118 <_ZN9SdSpiCard9waitReadyEt>
 23f41c6:	4605      	mov	r5, r0
 23f41c8:	b930      	cbnz	r0, 23f41d8 <_ZN9SdSpiCard9writeStopEv+0x1e>
 23f41ca:	231f      	movs	r3, #31
  m_state = IDLE_STATE;
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 23f41cc:	4620      	mov	r0, r4
 23f41ce:	76e3      	strb	r3, [r4, #27]
 23f41d0:	f7ff ff5c 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 23f41d4:	4628      	mov	r0, r5
 23f41d6:	bd38      	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
 23f41d8:	21fd      	movs	r1, #253	; 0xfd
 23f41da:	4620      	mov	r0, r4
 23f41dc:	f000 fa3c 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
  spiStop();
 23f41e0:	4620      	mov	r0, r4
 23f41e2:	f7ff ff53 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  m_state = IDLE_STATE;
 23f41e6:	2300      	movs	r3, #0
 23f41e8:	7763      	strb	r3, [r4, #29]
  return true;
 23f41ea:	e7f3      	b.n	23f41d4 <_ZN9SdSpiCard9writeStopEv+0x1a>

023f41ec <_ZN9SdSpiCard10syncDeviceEv>:
  if (m_state == WRITE_STATE) {
 23f41ec:	7f43      	ldrb	r3, [r0, #29]
 23f41ee:	2b02      	cmp	r3, #2
 23f41f0:	d101      	bne.n	23f41f6 <_ZN9SdSpiCard10syncDeviceEv+0xa>
    return writeStop();
 23f41f2:	f7ff bfe2 	b.w	23f41ba <_ZN9SdSpiCard9writeStopEv>
  if (m_state == READ_STATE) {
 23f41f6:	2b01      	cmp	r3, #1
 23f41f8:	d101      	bne.n	23f41fe <_ZN9SdSpiCard10syncDeviceEv+0x12>
    return readStop();
 23f41fa:	f000 b916 	b.w	23f442a <_ZN9SdSpiCard8readStopEv>
}
 23f41fe:	2001      	movs	r0, #1
 23f4200:	4770      	bx	lr

023f4202 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 23f4202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f4204:	4604      	mov	r4, r0
 23f4206:	460d      	mov	r5, r1
 23f4208:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
 23f420a:	f7ff ffef 	bl	23f41ec <_ZN9SdSpiCard10syncDeviceEv>
 23f420e:	b390      	cbz	r0, 23f4276 <_ZN9SdSpiCard11cardCommandEhm+0x74>
  if (!m_spiActive) {
 23f4210:	7f23      	ldrb	r3, [r4, #28]
 23f4212:	b913      	cbnz	r3, 23f421a <_ZN9SdSpiCard11cardCommandEhm+0x18>
    spiStart();
 23f4214:	4620      	mov	r0, r4
 23f4216:	f7ff ff26 	bl	23f4066 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f421a:	bb1d      	cbnz	r5, 23f4264 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 23f421c:	4620      	mov	r0, r4
 23f421e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 23f4222:	f000 fa19 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
 23f4226:	2603      	movs	r6, #3
    spiSend(pa[i]);
 23f4228:	af01      	add	r7, sp, #4
 23f422a:	5db9      	ldrb	r1, [r7, r6]
 23f422c:	4620      	mov	r0, r4
 23f422e:	f000 fa13 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
 23f4232:	3e01      	subs	r6, #1
 23f4234:	d2f9      	bcs.n	23f422a <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 23f4236:	2d00      	cmp	r5, #0
 23f4238:	bf0c      	ite	eq
 23f423a:	2195      	moveq	r1, #149	; 0x95
 23f423c:	2187      	movne	r1, #135	; 0x87
 23f423e:	4620      	mov	r0, r4
 23f4240:	f000 fa0a 	bl	23f4658 <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f4244:	4620      	mov	r0, r4
 23f4246:	f000 f9ec 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f424a:	250a      	movs	r5, #10
 23f424c:	4620      	mov	r0, r4
 23f424e:	f000 f9e8 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
  } while (m_status & 0X80 && ++n < 10);
 23f4252:	0603      	lsls	r3, r0, #24
    m_status = spiReceive();
 23f4254:	77a0      	strb	r0, [r4, #30]
  } while (m_status & 0X80 && ++n < 10);
 23f4256:	d503      	bpl.n	23f4260 <_ZN9SdSpiCard11cardCommandEhm+0x5e>
 23f4258:	3d01      	subs	r5, #1
 23f425a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f425e:	d1f5      	bne.n	23f424c <_ZN9SdSpiCard11cardCommandEhm+0x4a>
}
 23f4260:	b003      	add	sp, #12
 23f4262:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f4264:	2d0c      	cmp	r5, #12
 23f4266:	d0d9      	beq.n	23f421c <_ZN9SdSpiCard11cardCommandEhm+0x1a>
 23f4268:	f44f 7196 	mov.w	r1, #300	; 0x12c
 23f426c:	4620      	mov	r0, r4
 23f426e:	f7ff ff53 	bl	23f4118 <_ZN9SdSpiCard9waitReadyEt>
 23f4272:	2800      	cmp	r0, #0
 23f4274:	d1d2      	bne.n	23f421c <_ZN9SdSpiCard11cardCommandEhm+0x1a>
    return 0XFF;
 23f4276:	20ff      	movs	r0, #255	; 0xff
 23f4278:	e7f2      	b.n	23f4260 <_ZN9SdSpiCard11cardCommandEhm+0x5e>

023f427a <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 23f427a:	b570      	push	{r4, r5, r6, lr}
 23f427c:	4604      	mov	r4, r0
 23f427e:	460d      	mov	r5, r1
 23f4280:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 23f4282:	2137      	movs	r1, #55	; 0x37
 23f4284:	2200      	movs	r2, #0
 23f4286:	f7ff ffbc 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 23f428a:	4632      	mov	r2, r6
 23f428c:	4629      	mov	r1, r5
 23f428e:	4620      	mov	r0, r4
  }
 23f4290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 23f4294:	f7ff bfb5 	b.w	23f4202 <_ZN9SdSpiCard11cardCommandEhm>

023f4298 <_ZN9SdSpiCard5beginE11SdSpiConfig>:
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
 23f4298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f429c:	b088      	sub	sp, #32
 23f429e:	ad01      	add	r5, sp, #4
 23f42a0:	4604      	mov	r4, r0
 23f42a2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    m_beginCalled = false;
 23f42a6:	2300      	movs	r3, #0
 23f42a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 23f42ac:	7663      	strb	r3, [r4, #25]
  m_errorCode = SD_CARD_ERROR_NONE;
 23f42ae:	76e3      	strb	r3, [r4, #27]
    m_spiActive = false;
 23f42b0:	61e3      	str	r3, [r4, #28]
  m_csPin = spiConfig.csPin;
 23f42b2:	76a0      	strb	r0, [r4, #26]
 23f42b4:	4617      	mov	r7, r2
 23f42b6:	f89d 6005 	ldrb.w	r6, [sp, #5]
  sdCsInit(m_csPin);
 23f42ba:	f001 ffbf 	bl	23f623c <_Z8sdCsInith>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f42be:	2101      	movs	r1, #1
 23f42c0:	7ea0      	ldrb	r0, [r4, #26]
 23f42c2:	f001 ffbe 	bl	23f6242 <_Z9sdCsWritehb>
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f42c6:	4620      	mov	r0, r4
 23f42c8:	494c      	ldr	r1, [pc, #304]	; (23f43fc <_ZN9SdSpiCard5beginE11SdSpiConfig+0x164>)
 23f42ca:	f7ff fec6 	bl	23f405a <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  spiBegin(spiConfig);
 23f42ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  m_beginCalled = true;
 23f42d2:	2501      	movs	r5, #1
 23f42d4:	ab05      	add	r3, sp, #20
 23f42d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
 23f42da:	4620      	mov	r0, r4
 23f42dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 23f42de:	f000 f977 	bl	23f45d0 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>
  spiStart();
 23f42e2:	4620      	mov	r0, r4
  m_beginCalled = true;
 23f42e4:	7665      	strb	r5, [r4, #25]
  spiStart();
 23f42e6:	f7ff febe 	bl	23f4066 <_ZN9SdSpiCard8spiStartEv>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f42ea:	4629      	mov	r1, r5
 23f42ec:	7ea0      	ldrb	r0, [r4, #26]
 23f42ee:	f001 ffa8 	bl	23f6242 <_Z9sdCsWritehb>
 23f42f2:	250a      	movs	r5, #10
    return m_spiDriver.receive();
 23f42f4:	4620      	mov	r0, r4
  for (uint8_t i = 0; i < 10; i++) {
 23f42f6:	3d01      	subs	r5, #1
 23f42f8:	f000 f993 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f42fc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f4300:	d1f8      	bne.n	23f42f4 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x5c>
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f4302:	4629      	mov	r1, r5
 23f4304:	7ea0      	ldrb	r0, [r4, #26]
 23f4306:	f001 ff9c 	bl	23f6242 <_Z9sdCsWritehb>
 23f430a:	f002 fdad 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f430e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 23f4312:	b285      	uxth	r5, r0
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 23f4314:	2200      	movs	r2, #0
 23f4316:	4620      	mov	r0, r4
 23f4318:	4611      	mov	r1, r2
 23f431a:	f7ff ff72 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f431e:	2801      	cmp	r0, #1
 23f4320:	4680      	mov	r8, r0
 23f4322:	d00d      	beq.n	23f4340 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    if (timeout.timedOut()) {
 23f4324:	4628      	mov	r0, r5
 23f4326:	f7ff fe90 	bl	23f404a <_ZN7Timeout8timedOutEv.isra.0>
 23f432a:	2800      	cmp	r0, #0
 23f432c:	d0f2      	beq.n	23f4314 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x7c>
    m_errorCode = code;
 23f432e:	2301      	movs	r3, #1
  spiStop();
 23f4330:	4620      	mov	r0, r4
 23f4332:	76e3      	strb	r3, [r4, #27]
 23f4334:	f7ff feaa 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f4338:	2000      	movs	r0, #0
}
 23f433a:	b008      	add	sp, #32
 23f433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
 23f4340:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 23f4344:	2108      	movs	r1, #8
 23f4346:	4620      	mov	r0, r4
 23f4348:	f7ff ff5b 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f434c:	0743      	lsls	r3, r0, #29
 23f434e:	d413      	bmi.n	23f4378 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe0>
 23f4350:	f04f 0904 	mov.w	r9, #4
    return m_spiDriver.receive();
 23f4354:	4620      	mov	r0, r4
 23f4356:	f000 f964 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 4; i++) {
 23f435a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23f435e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      m_status = spiReceive();
 23f4362:	77a0      	strb	r0, [r4, #30]
    for (uint8_t i = 0; i < 4; i++) {
 23f4364:	d1f6      	bne.n	23f4354 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xbc>
    if (m_status == 0XAA) {
 23f4366:	28aa      	cmp	r0, #170	; 0xaa
 23f4368:	d018      	beq.n	23f439c <_ZN9SdSpiCard5beginE11SdSpiConfig+0x104>
    if (timeout.timedOut()) {
 23f436a:	4628      	mov	r0, r5
 23f436c:	f7ff fe6d 	bl	23f404a <_ZN7Timeout8timedOutEv.isra.0>
 23f4370:	2800      	cmp	r0, #0
 23f4372:	d0e5      	beq.n	23f4340 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    m_errorCode = code;
 23f4374:	2306      	movs	r3, #6
 23f4376:	e7db      	b.n	23f4330 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD1;
 23f4378:	f04f 0901 	mov.w	r9, #1
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f437c:	f04f 0a00 	mov.w	sl, #0
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 23f4380:	4652      	mov	r2, sl
 23f4382:	2129      	movs	r1, #41	; 0x29
 23f4384:	4620      	mov	r0, r4
 23f4386:	f7ff ff78 	bl	23f427a <_ZN9SdSpiCard8cardAcmdEhm>
 23f438a:	4602      	mov	r2, r0
 23f438c:	b158      	cbz	r0, 23f43a6 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x10e>
    if (timeout.timedOut()) {
 23f438e:	4628      	mov	r0, r5
 23f4390:	f7ff fe5b 	bl	23f404a <_ZN7Timeout8timedOutEv.isra.0>
 23f4394:	2800      	cmp	r0, #0
 23f4396:	d0f3      	beq.n	23f4380 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
 23f4398:	2317      	movs	r3, #23
 23f439a:	e7c9      	b.n	23f4330 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD2;
 23f439c:	f04f 0902 	mov.w	r9, #2
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f43a0:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 23f43a4:	e7ec      	b.n	23f4380 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
  if (cardType == SD_CARD_TYPE_SD2) {
 23f43a6:	f1b9 0f02 	cmp.w	r9, #2
 23f43aa:	d119      	bne.n	23f43e0 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x148>
    if (cardCommand(CMD58, 0)) {
 23f43ac:	213a      	movs	r1, #58	; 0x3a
 23f43ae:	4620      	mov	r0, r4
 23f43b0:	f7ff ff27 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f43b4:	b108      	cbz	r0, 23f43ba <_ZN9SdSpiCard5beginE11SdSpiConfig+0x122>
 23f43b6:	2312      	movs	r3, #18
 23f43b8:	e7ba      	b.n	23f4330 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
    return m_spiDriver.receive();
 23f43ba:	4620      	mov	r0, r4
 23f43bc:	f000 f931 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
 23f43c0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
      cardType = SD_CARD_TYPE_SDHC;
 23f43c4:	28c0      	cmp	r0, #192	; 0xc0
 23f43c6:	bf08      	it	eq
 23f43c8:	f04f 0903 	moveq.w	r9, #3
 23f43cc:	4620      	mov	r0, r4
 23f43ce:	f000 f928 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f43d2:	4620      	mov	r0, r4
 23f43d4:	f000 f925 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f43d8:	4620      	mov	r0, r4
 23f43da:	f000 f922 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 3; i++) {
 23f43de:	46c8      	mov	r8, r9
  spiStop();
 23f43e0:	4620      	mov	r0, r4
 23f43e2:	f7ff fe53 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
 23f43e6:	f006 0601 	and.w	r6, r6, #1
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f43ea:	4620      	mov	r0, r4
 23f43ec:	4639      	mov	r1, r7
 23f43ee:	f7ff fe34 	bl	23f405a <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  return true;
 23f43f2:	2001      	movs	r0, #1
  m_type = cardType;
 23f43f4:	f884 801f 	strb.w	r8, [r4, #31]
 23f43f8:	7626      	strb	r6, [r4, #24]
  return true;
 23f43fa:	e79e      	b.n	23f433a <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa2>
 23f43fc:	00061a80 	.word	0x00061a80

023f4400 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t sector) {
 23f4400:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f4402:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::readStart(uint32_t sector) {
 23f4404:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f4406:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f4408:	bf18      	it	ne
 23f440a:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, sector)) {
 23f440c:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t sector) {
 23f440e:	4604      	mov	r4, r0
  if (cardCommand(CMD18, sector)) {
 23f4410:	f7ff fef7 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f4414:	b130      	cbz	r0, 23f4424 <_ZN9SdSpiCard9readStartEm+0x24>
    m_errorCode = code;
 23f4416:	230c      	movs	r3, #12
  spiStop();
 23f4418:	4620      	mov	r0, r4
 23f441a:	76e3      	strb	r3, [r4, #27]
 23f441c:	f7ff fe36 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f4420:	2000      	movs	r0, #0
}
 23f4422:	bd10      	pop	{r4, pc}
  m_state = READ_STATE;
 23f4424:	2001      	movs	r0, #1
 23f4426:	7760      	strb	r0, [r4, #29]
  return true;
 23f4428:	e7fb      	b.n	23f4422 <_ZN9SdSpiCard9readStartEm+0x22>

023f442a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 23f442a:	b538      	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
 23f442c:	2400      	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
 23f442e:	210c      	movs	r1, #12
 23f4430:	4622      	mov	r2, r4
  m_state = IDLE_STATE;
 23f4432:	7744      	strb	r4, [r0, #29]
bool SdSpiCard::readStop() {
 23f4434:	4605      	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
 23f4436:	f7ff fee4 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f443a:	b130      	cbz	r0, 23f444a <_ZN9SdSpiCard8readStopEv+0x20>
 23f443c:	2309      	movs	r3, #9
  spiStop();
 23f443e:	4628      	mov	r0, r5
 23f4440:	76eb      	strb	r3, [r5, #27]
 23f4442:	f7ff fe23 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f4446:	4620      	mov	r0, r4
}
 23f4448:	bd38      	pop	{r3, r4, r5, pc}
  spiStop();
 23f444a:	4628      	mov	r0, r5
 23f444c:	f7ff fe1e 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f4450:	2001      	movs	r0, #1
 23f4452:	e7f9      	b.n	23f4448 <_ZN9SdSpiCard8readStopEv+0x1e>

023f4454 <_ZN9SdSpiCard11readSectorsEmPhj>:
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f4454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f4456:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f4458:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f445a:	4604      	mov	r4, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f445c:	2b01      	cmp	r3, #1
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f445e:	460d      	mov	r5, r1
 23f4460:	4616      	mov	r6, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f4462:	d102      	bne.n	23f446a <_ZN9SdSpiCard11readSectorsEmPhj+0x16>
 23f4464:	6943      	ldr	r3, [r0, #20]
 23f4466:	428b      	cmp	r3, r1
 23f4468:	d007      	beq.n	23f447a <_ZN9SdSpiCard11readSectorsEmPhj+0x26>
    if (!readStart(sector)) {
 23f446a:	4629      	mov	r1, r5
 23f446c:	4620      	mov	r0, r4
 23f446e:	f7ff ffc7 	bl	23f4400 <_ZN9SdSpiCard9readStartEm>
 23f4472:	b908      	cbnz	r0, 23f4478 <_ZN9SdSpiCard11readSectorsEmPhj+0x24>
  return false;
 23f4474:	2000      	movs	r0, #0
}
 23f4476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
 23f4478:	6165      	str	r5, [r4, #20]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f447a:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f447c:	42bd      	cmp	r5, r7
 23f447e:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f4482:	d006      	beq.n	23f4492 <_ZN9SdSpiCard11readSectorsEmPhj+0x3e>
    if (!readData(dst)) {
 23f4484:	4620      	mov	r0, r4
 23f4486:	f7ff fe43 	bl	23f4110 <_ZN9SdSpiCard8readDataEPh>
 23f448a:	2800      	cmp	r0, #0
 23f448c:	d0f2      	beq.n	23f4474 <_ZN9SdSpiCard11readSectorsEmPhj+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f448e:	3501      	adds	r5, #1
 23f4490:	e7f4      	b.n	23f447c <_ZN9SdSpiCard11readSectorsEmPhj+0x28>
  m_curSector += ns;
 23f4492:	6963      	ldr	r3, [r4, #20]
 23f4494:	442b      	add	r3, r5
 23f4496:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : readStop();
 23f4498:	7e23      	ldrb	r3, [r4, #24]
 23f449a:	b92b      	cbnz	r3, 23f44a8 <_ZN9SdSpiCard11readSectorsEmPhj+0x54>
 23f449c:	4620      	mov	r0, r4
 23f449e:	f7ff ffc4 	bl	23f442a <_ZN9SdSpiCard8readStopEv>
 23f44a2:	f000 0001 	and.w	r0, r0, #1
 23f44a6:	e7e6      	b.n	23f4476 <_ZN9SdSpiCard11readSectorsEmPhj+0x22>
 23f44a8:	2001      	movs	r0, #1
 23f44aa:	e7fa      	b.n	23f44a2 <_ZN9SdSpiCard11readSectorsEmPhj+0x4e>

023f44ac <_ZN9SdSpiCard10readSectorEmPh>:
  return readSectors(sector, dst, 1);
 23f44ac:	2301      	movs	r3, #1
 23f44ae:	f7ff bfd1 	b.w	23f4454 <_ZN9SdSpiCard11readSectorsEmPhj>

023f44b2 <_ZN9SdSpiCard10writeStartEm>:
bool SdSpiCard::writeStart(uint32_t sector) {
 23f44b2:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f44b4:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::writeStart(uint32_t sector) {
 23f44b6:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f44b8:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f44ba:	bf18      	it	ne
 23f44bc:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD25, sector)) {
 23f44be:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t sector) {
 23f44c0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, sector)) {
 23f44c2:	f7ff fe9e 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f44c6:	b130      	cbz	r0, 23f44d6 <_ZN9SdSpiCard10writeStartEm+0x24>
 23f44c8:	230e      	movs	r3, #14
  spiStop();
 23f44ca:	4620      	mov	r0, r4
 23f44cc:	76e3      	strb	r3, [r4, #27]
 23f44ce:	f7ff fddd 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f44d2:	2000      	movs	r0, #0
}
 23f44d4:	bd10      	pop	{r4, pc}
  m_state = WRITE_STATE;
 23f44d6:	2302      	movs	r3, #2
  return true;
 23f44d8:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
 23f44da:	7763      	strb	r3, [r4, #29]
  return true;
 23f44dc:	e7fa      	b.n	23f44d4 <_ZN9SdSpiCard10writeStartEm+0x22>

023f44de <_ZN9SdSpiCard12writeSectorsEmPKhj>:
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f44de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f44e0:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f44e2:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f44e4:	4604      	mov	r4, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f44e6:	2b02      	cmp	r3, #2
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f44e8:	460d      	mov	r5, r1
 23f44ea:	4616      	mov	r6, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f44ec:	d102      	bne.n	23f44f4 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x16>
 23f44ee:	6943      	ldr	r3, [r0, #20]
 23f44f0:	428b      	cmp	r3, r1
 23f44f2:	d005      	beq.n	23f4500 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x22>
    if (!writeStart(sector)) {
 23f44f4:	4629      	mov	r1, r5
 23f44f6:	4620      	mov	r0, r4
 23f44f8:	f7ff ffdb 	bl	23f44b2 <_ZN9SdSpiCard10writeStartEm>
 23f44fc:	b1c0      	cbz	r0, 23f4530 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
    m_curSector = sector;
 23f44fe:	6165      	str	r5, [r4, #20]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f4500:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f4502:	42bd      	cmp	r5, r7
 23f4504:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f4508:	d005      	beq.n	23f4516 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x38>
    if (!writeData(src)) {
 23f450a:	4620      	mov	r0, r4
 23f450c:	f7ff fe3d 	bl	23f418a <_ZN9SdSpiCard9writeDataEPKh>
 23f4510:	b170      	cbz	r0, 23f4530 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f4512:	3501      	adds	r5, #1
 23f4514:	e7f5      	b.n	23f4502 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x24>
  m_curSector += ns;
 23f4516:	6963      	ldr	r3, [r4, #20]
 23f4518:	442b      	add	r3, r5
 23f451a:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : writeStop();
 23f451c:	7e23      	ldrb	r3, [r4, #24]
 23f451e:	b92b      	cbnz	r3, 23f452c <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4e>
 23f4520:	4620      	mov	r0, r4
 23f4522:	f7ff fe4a 	bl	23f41ba <_ZN9SdSpiCard9writeStopEv>
 23f4526:	f000 0001 	and.w	r0, r0, #1
}
 23f452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : writeStop();
 23f452c:	2001      	movs	r0, #1
 23f452e:	e7fa      	b.n	23f4526 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x48>
  spiStop();
 23f4530:	4620      	mov	r0, r4
 23f4532:	f7ff fdab 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f4536:	2000      	movs	r0, #0
 23f4538:	e7f7      	b.n	23f452a <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4c>

023f453a <_ZN9SdSpiCard11writeSectorEmPKh>:
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f453a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_dedicatedSpi) {
 23f453e:	7e07      	ldrb	r7, [r0, #24]
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f4540:	4604      	mov	r4, r0
 23f4542:	460b      	mov	r3, r1
 23f4544:	4615      	mov	r5, r2
  if (m_dedicatedSpi) {
 23f4546:	b127      	cbz	r7, 23f4552 <_ZN9SdSpiCard11writeSectorEmPKh+0x18>
}
 23f4548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return writeSectors(sector, src, 1);
 23f454c:	2301      	movs	r3, #1
 23f454e:	f7ff bfc6 	b.w	23f44de <_ZN9SdSpiCard12writeSectorsEmPKhj>
  if (type() != SD_CARD_TYPE_SDHC) {
 23f4552:	7fc2      	ldrb	r2, [r0, #31]
 23f4554:	2a03      	cmp	r2, #3
    sector <<= 9;
 23f4556:	bf18      	it	ne
 23f4558:	024b      	lslne	r3, r1, #9
  if (cardCommand(CMD24, sector)) {
 23f455a:	461a      	mov	r2, r3
 23f455c:	2118      	movs	r1, #24
 23f455e:	f7ff fe50 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f4562:	4606      	mov	r6, r0
 23f4564:	b128      	cbz	r0, 23f4572 <_ZN9SdSpiCard11writeSectorEmPKh+0x38>
 23f4566:	230d      	movs	r3, #13
 23f4568:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f456a:	4620      	mov	r0, r4
 23f456c:	f7ff fd8e 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f4570:	e020      	b.n	23f45b4 <_ZN9SdSpiCard11writeSectorEmPKh+0x7a>
  if (!writeData(DATA_START_SECTOR, src)) {
 23f4572:	462a      	mov	r2, r5
 23f4574:	21fe      	movs	r1, #254	; 0xfe
 23f4576:	4620      	mov	r0, r4
 23f4578:	f7ff fde3 	bl	23f4142 <_ZN9SdSpiCard9writeDataEhPKh>
 23f457c:	2800      	cmp	r0, #0
 23f457e:	d0f4      	beq.n	23f456a <_ZN9SdSpiCard11writeSectorEmPKh+0x30>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f4580:	f44f 7116 	mov.w	r1, #600	; 0x258
 23f4584:	4620      	mov	r0, r4
 23f4586:	f7ff fdc7 	bl	23f4118 <_ZN9SdSpiCard9waitReadyEt>
 23f458a:	4605      	mov	r5, r0
 23f458c:	b908      	cbnz	r0, 23f4592 <_ZN9SdSpiCard11writeSectorEmPKh+0x58>
 23f458e:	2324      	movs	r3, #36	; 0x24
 23f4590:	e7ea      	b.n	23f4568 <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 23f4592:	4632      	mov	r2, r6
 23f4594:	210d      	movs	r1, #13
 23f4596:	4620      	mov	r0, r4
 23f4598:	f7ff fe33 	bl	23f4202 <_ZN9SdSpiCard11cardCommandEhm>
 23f459c:	b108      	cbz	r0, 23f45a2 <_ZN9SdSpiCard11writeSectorEmPKh+0x68>
 23f459e:	230a      	movs	r3, #10
 23f45a0:	e7e2      	b.n	23f4568 <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
    return m_spiDriver.receive();
 23f45a2:	4620      	mov	r0, r4
 23f45a4:	f000 f83d 	bl	23f4622 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f45a8:	2800      	cmp	r0, #0
 23f45aa:	d1f8      	bne.n	23f459e <_ZN9SdSpiCard11writeSectorEmPKh+0x64>
  spiStop();
 23f45ac:	4620      	mov	r0, r4
 23f45ae:	f7ff fd6d 	bl	23f408c <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f45b2:	462f      	mov	r7, r5
}
 23f45b4:	4638      	mov	r0, r7
 23f45b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f45bc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(PLATFORM_ID)
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback() {
  SPI_DMA_TransferCompleted = true;
 23f45bc:	2201      	movs	r2, #1
 23f45be:	4b01      	ldr	r3, [pc, #4]	; (23f45c4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 23f45c0:	701a      	strb	r2, [r3, #0]
}
 23f45c2:	4770      	bx	lr
 23f45c4:	1007ae9c 	.word	0x1007ae9c

023f45c8 <_ZN18SdSpiArduinoDriver8activateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
 23f45c8:	1d01      	adds	r1, r0, #4
 23f45ca:	6800      	ldr	r0, [r0, #0]
 23f45cc:	f004 be48 	b.w	23f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f45d0 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
 23f45d0:	b530      	push	{r4, r5, lr}
 23f45d2:	b085      	sub	sp, #20
 23f45d4:	4604      	mov	r4, r0
 23f45d6:	a804      	add	r0, sp, #16
 23f45d8:	e900 000e 	stmdb	r0, {r1, r2, r3}
  if (spiConfig.spiPort) {
 23f45dc:	b133      	cbz	r3, 23f45ec <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x1c>
    m_spi = spiConfig.spiPort;
  } else {
    m_spi = &SPI;
 23f45de:	6023      	str	r3, [r4, #0]
  }
  m_spi->begin();
 23f45e0:	6820      	ldr	r0, [r4, #0]
}
 23f45e2:	b005      	add	sp, #20
 23f45e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  m_spi->begin();
 23f45e8:	f004 bde6 	b.w	23f91b8 <_ZN8SPIClass5beginEv>
        static SPIClass instance(Interface);
 23f45ec:	4d09      	ldr	r5, [pc, #36]	; (23f4614 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x44>)
 23f45ee:	e8d5 1f8f 	ldab	r1, [r5]
 23f45f2:	f011 0101 	ands.w	r1, r1, #1
 23f45f6:	d10b      	bne.n	23f4610 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f45f8:	4628      	mov	r0, r5
 23f45fa:	9100      	str	r1, [sp, #0]
 23f45fc:	f003 fb26 	bl	23f7c4c <__cxa_guard_acquire>
 23f4600:	9900      	ldr	r1, [sp, #0]
 23f4602:	b128      	cbz	r0, 23f4610 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f4604:	4804      	ldr	r0, [pc, #16]	; (23f4618 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f4606:	f004 fdcd 	bl	23f91a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f460a:	4628      	mov	r0, r5
 23f460c:	f003 fb2c 	bl	23f7c68 <__cxa_guard_release>
    m_spi = &SPI;
 23f4610:	4b01      	ldr	r3, [pc, #4]	; (23f4618 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f4612:	e7e4      	b.n	23f45de <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0xe>
 23f4614:	1006a238 	.word	0x1006a238
 23f4618:	1006a23c 	.word	0x1006a23c

023f461c <_ZN18SdSpiArduinoDriver10deactivateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
 23f461c:	6800      	ldr	r0, [r0, #0]
 23f461e:	f004 be05 	b.w	23f922c <_ZN8SPIClass14endTransactionEv>

023f4622 <_ZN18SdSpiArduinoDriver7receiveEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
 23f4622:	21ff      	movs	r1, #255	; 0xff
 23f4624:	6800      	ldr	r0, [r0, #0]
 23f4626:	f004 be89 	b.w	23f933c <_ZN8SPIClass8transferEh>
	...

023f462c <_ZN18SdSpiArduinoDriver7receiveEPhj>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f462c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f462e:	2500      	movs	r5, #0
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f4630:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f4632:	4a07      	ldr	r2, [pc, #28]	; (23f4650 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 23f4634:	4c07      	ldr	r4, [pc, #28]	; (23f4654 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f4636:	9200      	str	r2, [sp, #0]
 23f4638:	6800      	ldr	r0, [r0, #0]
 23f463a:	460a      	mov	r2, r1
 23f463c:	4629      	mov	r1, r5
  SPI_DMA_TransferCompleted = false;
 23f463e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f4640:	f004 fe82 	bl	23f9348 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {
 23f4644:	7823      	ldrb	r3, [r4, #0]
 23f4646:	2b00      	cmp	r3, #0
 23f4648:	d0fc      	beq.n	23f4644 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x18>
  }
  return 0;
}
 23f464a:	2000      	movs	r0, #0
 23f464c:	b003      	add	sp, #12
 23f464e:	bd30      	pop	{r4, r5, pc}
 23f4650:	023f45bd 	.word	0x023f45bd
 23f4654:	1007ae9c 	.word	0x1007ae9c

023f4658 <_ZN18SdSpiArduinoDriver4sendEh>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
 23f4658:	6800      	ldr	r0, [r0, #0]
 23f465a:	f004 be6f 	b.w	23f933c <_ZN8SPIClass8transferEh>
	...

023f4660 <_ZN18SdSpiArduinoDriver4sendEPKhj>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f4660:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f4662:	2500      	movs	r5, #0
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f4664:	4613      	mov	r3, r2

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f4666:	4a06      	ldr	r2, [pc, #24]	; (23f4680 <_ZN18SdSpiArduinoDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 23f4668:	4c06      	ldr	r4, [pc, #24]	; (23f4684 <_ZN18SdSpiArduinoDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f466a:	9200      	str	r2, [sp, #0]
 23f466c:	6800      	ldr	r0, [r0, #0]
 23f466e:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 23f4670:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f4672:	f004 fe69 	bl	23f9348 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                  SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {
 23f4676:	7823      	ldrb	r3, [r4, #0]
 23f4678:	2b00      	cmp	r3, #0
 23f467a:	d0fc      	beq.n	23f4676 <_ZN18SdSpiArduinoDriver4sendEPKhj+0x16>
  }
}
 23f467c:	b003      	add	sp, #12
 23f467e:	bd30      	pop	{r4, r5, pc}
 23f4680:	023f45bd 	.word	0x023f45bd
 23f4684:	1007ae9c 	.word	0x1007ae9c

023f4688 <_ZN7TwoWire5writeEi.isra.0>:
 23f4688:	6803      	ldr	r3, [r0, #0]
 23f468a:	b2c9      	uxtb	r1, r1
 23f468c:	689b      	ldr	r3, [r3, #8]
 23f468e:	4718      	bx	r3

023f4690 <_ZN5SVCS3C1Ev>:
 */
#include "i2cArduino.h"


SVCS3::SVCS3(){
  addr=0x63;
 23f4690:	2363      	movs	r3, #99	; 0x63
 23f4692:	7103      	strb	r3, [r0, #4]
}
 23f4694:	4770      	bx	lr

023f4696 <_ZN5SVCS34initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVCS3::init(int address){
 23f4696:	b538      	push	{r3, r4, r5, lr}
 23f4698:	4604      	mov	r4, r0
 23f469a:	460d      	mov	r5, r1
  _wire = &Wire;
 23f469c:	f005 fc26 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23f46a0:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f46a2:	f004 f8b3 	bl	23f880c <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f46a6:	2000      	movs	r0, #0
  addr = address;
 23f46a8:	7125      	strb	r5, [r4, #4]
}
 23f46aa:	bd38      	pop	{r3, r4, r5, pc}

023f46ac <_ZN5SVCS38i2cdelayEi>:


bool SVCS3::i2cdelay(int size){
 23f46ac:	b570      	push	{r4, r5, r6, lr}
 23f46ae:	4606      	mov	r6, r0
 23f46b0:	460d      	mov	r5, r1
  int i=0;
 23f46b2:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f46b4:	6830      	ldr	r0, [r6, #0]
 23f46b6:	6803      	ldr	r3, [r0, #0]
 23f46b8:	691b      	ldr	r3, [r3, #16]
 23f46ba:	4798      	blx	r3
 23f46bc:	42a8      	cmp	r0, r5
 23f46be:	da06      	bge.n	23f46ce <_ZN5SVCS38i2cdelayEi+0x22>
 23f46c0:	42ac      	cmp	r4, r5
 23f46c2:	dc09      	bgt.n	23f46d8 <_ZN5SVCS38i2cdelayEi+0x2c>
	  delay(2);
 23f46c4:	2002      	movs	r0, #2
 23f46c6:	f003 fadd 	bl	23f7c84 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f46ca:	3401      	adds	r4, #1
 23f46cc:	e7f2      	b.n	23f46b4 <_ZN5SVCS38i2cdelayEi+0x8>
  }
  if(i>=size){
 23f46ce:	42ac      	cmp	r4, r5
 23f46d0:	bfac      	ite	ge
 23f46d2:	2000      	movge	r0, #0
 23f46d4:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f46d6:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f46d8:	2000      	movs	r0, #0
 23f46da:	e7fc      	b.n	23f46d6 <_ZN5SVCS38i2cdelayEi+0x2a>

023f46dc <_ZN5SVCS38getStateEv>:

int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
 23f46dc:	b510      	push	{r4, lr}
 23f46de:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f46e0:	7901      	ldrb	r1, [r0, #4]
 23f46e2:	2201      	movs	r2, #1
 23f46e4:	6800      	ldr	r0, [r0, #0]
 23f46e6:	f004 f8b8 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f46ea:	2101      	movs	r1, #1
 23f46ec:	4620      	mov	r0, r4
 23f46ee:	f7ff ffdd 	bl	23f46ac <_ZN5SVCS38i2cdelayEi>
 23f46f2:	b128      	cbz	r0, 23f4700 <_ZN5SVCS38getStateEv+0x24>
    return _wire->read();
 23f46f4:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f46f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f46fa:	6803      	ldr	r3, [r0, #0]
 23f46fc:	695b      	ldr	r3, [r3, #20]
 23f46fe:	4718      	bx	r3
}
 23f4700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f4704:	bd10      	pop	{r4, pc}

023f4706 <_ZN5SVCS36getValEh>:

int16_t SVCS3::getVal(byte reg){
 23f4706:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f4708:	4604      	mov	r4, r0
 23f470a:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f470c:	7901      	ldrb	r1, [r0, #4]
 23f470e:	6800      	ldr	r0, [r0, #0]
 23f4710:	f004 f8a6 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f4714:	6820      	ldr	r0, [r4, #0]
 23f4716:	4629      	mov	r1, r5
 23f4718:	6803      	ldr	r3, [r0, #0]
 23f471a:	689b      	ldr	r3, [r3, #8]
 23f471c:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f471e:	6820      	ldr	r0, [r4, #0]
 23f4720:	f004 f8a9 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
 
  _wire->requestFrom(addr, (uint8_t)2);
 23f4724:	7921      	ldrb	r1, [r4, #4]
 23f4726:	2202      	movs	r2, #2
 23f4728:	6820      	ldr	r0, [r4, #0]
 23f472a:	f004 f896 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f472e:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f4730:	2102      	movs	r1, #2
 23f4732:	4620      	mov	r0, r4
  int16_t ret=0;
 23f4734:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f4738:	f7ff ffb8 	bl	23f46ac <_ZN5SVCS38i2cdelayEi>
 23f473c:	b158      	cbz	r0, 23f4756 <_ZN5SVCS36getValEh+0x50>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f473e:	6820      	ldr	r0, [r4, #0]
 23f4740:	6803      	ldr	r3, [r0, #0]
 23f4742:	695b      	ldr	r3, [r3, #20]
 23f4744:	4798      	blx	r3
 23f4746:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f474a:	6820      	ldr	r0, [r4, #0]
 23f474c:	6803      	ldr	r3, [r0, #0]
 23f474e:	695b      	ldr	r3, [r3, #20]
 23f4750:	4798      	blx	r3
 23f4752:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f4756:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f475a:	b003      	add	sp, #12
 23f475c:	bd30      	pop	{r4, r5, pc}

023f475e <_ZN5SVCS310newReadingEv>:
    return 0;
  }
  return 1;
}

int SVCS3::newReading(){
 23f475e:	b510      	push	{r4, lr}
 23f4760:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f4762:	7901      	ldrb	r1, [r0, #4]
 23f4764:	6800      	ldr	r0, [r0, #0]
 23f4766:	f004 f87b 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_START);              // sends one byte
 23f476a:	2101      	movs	r1, #1
 23f476c:	6820      	ldr	r0, [r4, #0]
 23f476e:	f7ff ff8b 	bl	23f4688 <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f4772:	6820      	ldr	r0, [r4, #0]
 23f4774:	f004 f87f 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f4778:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f477c:	f003 fa82 	bl	23f7c84 <delay>
  return getState();
 23f4780:	4620      	mov	r0, r4
}
 23f4782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f4786:	f7ff bfa9 	b.w	23f46dc <_ZN5SVCS38getStateEv>
	...

023f478c <_ZN5SVCS36getE25Ev>:

float SVCS3::getE25()
{
 23f478c:	b508      	push	{r3, lr}
  return getVal(REG_READ_E25)/100.0;
 23f478e:	2102      	movs	r1, #2
 23f4790:	f7ff ffb9 	bl	23f4706 <_ZN5SVCS36getValEh>
 23f4794:	f7ef fe6a 	bl	23e446c <__aeabi_i2d>
 23f4798:	2200      	movs	r2, #0
 23f479a:	4b04      	ldr	r3, [pc, #16]	; (23f47ac <_ZN5SVCS36getE25Ev+0x20>)
 23f479c:	f7ef fffa 	bl	23e4794 <__aeabi_ddiv>
 23f47a0:	f7f0 f9c6 	bl	23e4b30 <__aeabi_d2f>
}
 23f47a4:	ee00 0a10 	vmov	s0, r0
 23f47a8:	bd08      	pop	{r3, pc}
 23f47aa:	bf00      	nop
 23f47ac:	40590000 	.word	0x40590000

023f47b0 <_ZN5SVCS35getECEv>:

float SVCS3::getEC()
{
 23f47b0:	b508      	push	{r3, lr}
  return getVal(REG_READ_EC)/10.0;
 23f47b2:	2103      	movs	r1, #3
 23f47b4:	f7ff ffa7 	bl	23f4706 <_ZN5SVCS36getValEh>
 23f47b8:	f7ef fe58 	bl	23e446c <__aeabi_i2d>
 23f47bc:	2200      	movs	r2, #0
 23f47be:	4b04      	ldr	r3, [pc, #16]	; (23f47d0 <_ZN5SVCS35getECEv+0x20>)
 23f47c0:	f7ef ffe8 	bl	23e4794 <__aeabi_ddiv>
 23f47c4:	f7f0 f9b4 	bl	23e4b30 <__aeabi_d2f>
}
 23f47c8:	ee00 0a10 	vmov	s0, r0
 23f47cc:	bd08      	pop	{r3, pc}
 23f47ce:	bf00      	nop
 23f47d0:	40240000 	.word	0x40240000

023f47d4 <_ZN5SVCS37getTempEv>:

float SVCS3::getTemp()
{
 23f47d4:	b508      	push	{r3, lr}
  return getVal(REG_READ_TEMP)/100.0;
 23f47d6:	2104      	movs	r1, #4
 23f47d8:	f7ff ff95 	bl	23f4706 <_ZN5SVCS36getValEh>
 23f47dc:	f7ef fe46 	bl	23e446c <__aeabi_i2d>
 23f47e0:	2200      	movs	r2, #0
 23f47e2:	4b04      	ldr	r3, [pc, #16]	; (23f47f4 <_ZN5SVCS37getTempEv+0x20>)
 23f47e4:	f7ef ffd6 	bl	23e4794 <__aeabi_ddiv>
 23f47e8:	f7f0 f9a2 	bl	23e4b30 <__aeabi_d2f>
}
 23f47ec:	ee00 0a10 	vmov	s0, r0
 23f47f0:	bd08      	pop	{r3, pc}
 23f47f2:	bf00      	nop
 23f47f4:	40590000 	.word	0x40590000

023f47f8 <_ZN5SVCS36getVWCEv>:

float SVCS3::getVWC()
{
 23f47f8:	b508      	push	{r3, lr}
  return getVal(REG_READ_VWC)/10.0;
 23f47fa:	2105      	movs	r1, #5
 23f47fc:	f7ff ff83 	bl	23f4706 <_ZN5SVCS36getValEh>
 23f4800:	f7ef fe34 	bl	23e446c <__aeabi_i2d>
 23f4804:	2200      	movs	r2, #0
 23f4806:	4b04      	ldr	r3, [pc, #16]	; (23f4818 <_ZN5SVCS36getVWCEv+0x20>)
 23f4808:	f7ef ffc4 	bl	23e4794 <__aeabi_ddiv>
 23f480c:	f7f0 f990 	bl	23e4b30 <__aeabi_d2f>
}
 23f4810:	ee00 0a10 	vmov	s0, r0
 23f4814:	bd08      	pop	{r3, pc}
 23f4816:	bf00      	nop
 23f4818:	40240000 	.word	0x40240000

023f481c <_ZN7SVMULTIC1Ev>:
 */
#include "i2cMultiSm.h"


SVMULTI::SVMULTI(){
  addr=101;
 23f481c:	2365      	movs	r3, #101	; 0x65
 23f481e:	8083      	strh	r3, [r0, #4]
}
 23f4820:	4770      	bx	lr

023f4822 <_ZN7SVMULTI4initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVMULTI::init(int address){
 23f4822:	b538      	push	{r3, r4, r5, lr}
 23f4824:	4604      	mov	r4, r0
 23f4826:	460d      	mov	r5, r1
  _wire = &Wire;
 23f4828:	f005 fb60 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23f482c:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f482e:	f003 ffed 	bl	23f880c <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f4832:	2000      	movs	r0, #0
  addr = address;
 23f4834:	80a5      	strh	r5, [r4, #4]
}
 23f4836:	bd38      	pop	{r3, r4, r5, pc}

023f4838 <_ZN7SVMULTI8i2cdelayEi>:


bool SVMULTI::i2cdelay(int size){
 23f4838:	b570      	push	{r4, r5, r6, lr}
 23f483a:	4606      	mov	r6, r0
 23f483c:	460d      	mov	r5, r1
  int i=0;
 23f483e:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f4840:	6830      	ldr	r0, [r6, #0]
 23f4842:	6803      	ldr	r3, [r0, #0]
 23f4844:	691b      	ldr	r3, [r3, #16]
 23f4846:	4798      	blx	r3
 23f4848:	42a8      	cmp	r0, r5
 23f484a:	da06      	bge.n	23f485a <_ZN7SVMULTI8i2cdelayEi+0x22>
 23f484c:	42ac      	cmp	r4, r5
 23f484e:	dc09      	bgt.n	23f4864 <_ZN7SVMULTI8i2cdelayEi+0x2c>
	  delay(2);
 23f4850:	2002      	movs	r0, #2
 23f4852:	f003 fa17 	bl	23f7c84 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f4856:	3401      	adds	r4, #1
 23f4858:	e7f2      	b.n	23f4840 <_ZN7SVMULTI8i2cdelayEi+0x8>
  }
  if(i>=size){
 23f485a:	42ac      	cmp	r4, r5
 23f485c:	bfac      	ite	ge
 23f485e:	2000      	movge	r0, #0
 23f4860:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f4862:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f4864:	2000      	movs	r0, #0
 23f4866:	e7fc      	b.n	23f4862 <_ZN7SVMULTI8i2cdelayEi+0x2a>

023f4868 <_ZN7SVMULTI8getStateEv>:

int SVMULTI::getState(){ //-1:no data, 0:err, 1:ok
 23f4868:	b510      	push	{r4, lr}
 23f486a:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f486c:	7901      	ldrb	r1, [r0, #4]
 23f486e:	2201      	movs	r2, #1
 23f4870:	6800      	ldr	r0, [r0, #0]
 23f4872:	f003 fff2 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f4876:	2101      	movs	r1, #1
 23f4878:	4620      	mov	r0, r4
 23f487a:	f7ff ffdd 	bl	23f4838 <_ZN7SVMULTI8i2cdelayEi>
 23f487e:	b128      	cbz	r0, 23f488c <_ZN7SVMULTI8getStateEv+0x24>
    return _wire->read();
 23f4880:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f4882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f4886:	6803      	ldr	r3, [r0, #0]
 23f4888:	695b      	ldr	r3, [r3, #20]
 23f488a:	4718      	bx	r3
}
 23f488c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f4890:	bd10      	pop	{r4, pc}

023f4892 <_ZN7SVMULTI10newReadingEv>:
    return 0;
  }
  return 1;
}

int SVMULTI::newReading(){
 23f4892:	b510      	push	{r4, lr}
 23f4894:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f4896:	8881      	ldrh	r1, [r0, #4]
 23f4898:	6800      	ldr	r0, [r0, #0]
 23f489a:	f003 ffe5 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_READ_START);              // sends one byte
 23f489e:	6820      	ldr	r0, [r4, #0]
 23f48a0:	2101      	movs	r1, #1
 23f48a2:	6803      	ldr	r3, [r0, #0]
 23f48a4:	689b      	ldr	r3, [r3, #8]
 23f48a6:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f48a8:	6820      	ldr	r0, [r4, #0]
 23f48aa:	f003 ffe4 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f48ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f48b2:	f003 f9e7 	bl	23f7c84 <delay>
  return getState();
 23f48b6:	4620      	mov	r0, r4
}
 23f48b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f48bc:	f7ff bfd4 	b.w	23f4868 <_ZN7SVMULTI8getStateEv>

023f48c0 <_ZN7SVMULTI6getRawEP6vals_t>:
	}

}


void SVMULTI::getRaw(vals_t *vals){
 23f48c0:	b570      	push	{r4, r5, r6, lr}
 23f48c2:	4604      	mov	r4, r0
 23f48c4:	460d      	mov	r5, r1
  _wire->beginTransmission(addr); // transmit to device
 23f48c6:	8881      	ldrh	r1, [r0, #4]
 23f48c8:	6800      	ldr	r0, [r0, #0]
 23f48ca:	f003 ffcd 	bl	23f8868 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_GET_DATA);              // sends one byte
 23f48ce:	6820      	ldr	r0, [r4, #0]
 23f48d0:	2109      	movs	r1, #9
 23f48d2:	6803      	ldr	r3, [r0, #0]
 23f48d4:	689b      	ldr	r3, [r3, #8]
 23f48d6:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f48d8:	6820      	ldr	r0, [r4, #0]
 23f48da:	f003 ffcc 	bl	23f8876 <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(addr, (uint8_t)14);
 23f48de:	7921      	ldrb	r1, [r4, #4]
 23f48e0:	220e      	movs	r2, #14
 23f48e2:	6820      	ldr	r0, [r4, #0]
 23f48e4:	f003 ffb9 	bl	23f885a <_ZN7TwoWire11requestFromEhj>
   byte *p1 = (byte*)vals;
  if(i2cdelay(14)){
 23f48e8:	210e      	movs	r1, #14
 23f48ea:	4620      	mov	r0, r4
 23f48ec:	f7ff ffa4 	bl	23f4838 <_ZN7SVMULTI8i2cdelayEi>
 23f48f0:	b148      	cbz	r0, 23f4906 <_ZN7SVMULTI6getRawEP6vals_t+0x46>
 23f48f2:	1e6e      	subs	r6, r5, #1
 23f48f4:	350d      	adds	r5, #13
    // Wire.readBytes((byte*)&vals, 14);
	  for(int i = 0; i<14; i++){
		  p1[i] = _wire->read();
 23f48f6:	6820      	ldr	r0, [r4, #0]
 23f48f8:	6803      	ldr	r3, [r0, #0]
 23f48fa:	695b      	ldr	r3, [r3, #20]
 23f48fc:	4798      	blx	r3
 23f48fe:	f806 0f01 	strb.w	r0, [r6, #1]!
	  for(int i = 0; i<14; i++){
 23f4902:	42ae      	cmp	r6, r5
 23f4904:	d1f7      	bne.n	23f48f6 <_ZN7SVMULTI6getRawEP6vals_t+0x36>
	  }
  }
}
 23f4906:	bd70      	pop	{r4, r5, r6, pc}

023f4908 <_ZN7SVMULTI7getDataEP10soil_ret_t>:
void SVMULTI::getData(soil_ret_t *data){
 23f4908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f490c:	ed2d 8b02 	vpush	{d8}
 23f4910:	b085      	sub	sp, #20
 23f4912:	460c      	mov	r4, r1
  getRaw(&vals);
 23f4914:	4669      	mov	r1, sp
 23f4916:	f7ff ffd3 	bl	23f48c0 <_ZN7SVMULTI6getRawEP6vals_t>
 23f491a:	ed9f 8b3b 	vldr	d8, [pc, #236]	; 23f4a08 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x100>
 23f491e:	f10d 0a04 	add.w	sl, sp, #4
 23f4922:	f104 0508 	add.w	r5, r4, #8
 23f4926:	f104 0b1c 	add.w	fp, r4, #28
		  data->dp[a] = vals.dp[a]/100.0;
 23f492a:	f93a 0b02 	ldrsh.w	r0, [sl], #2
 23f492e:	f7ef fd9d 	bl	23e446c <__aeabi_i2d>
 23f4932:	2200      	movs	r2, #0
 23f4934:	4b3e      	ldr	r3, [pc, #248]	; (23f4a30 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f4936:	f7ef ff2d 	bl	23e4794 <__aeabi_ddiv>
 23f493a:	f7f0 f8f9 	bl	23e4b30 <__aeabi_d2f>
 23f493e:	6028      	str	r0, [r5, #0]
 23f4940:	f7ef fda6 	bl	23e4490 <__aeabi_f2d>
 23f4944:	eeb0 1a48 	vmov.f32	s2, s16
 23f4948:	eef0 1a68 	vmov.f32	s3, s17
 23f494c:	ec41 0b10 	vmov	d0, r0, r1
 23f4950:	f005 fe7a 	bl	23fa648 <pow>
 23f4954:	f855 0b04 	ldr.w	r0, [r5], #4
 23f4958:	ec59 8b10 	vmov	r8, r9, d0
 23f495c:	f7ef fd98 	bl	23e4490 <__aeabi_f2d>
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f4960:	a32b      	add	r3, pc, #172	; (adr r3, 23f4a10 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x108>)
 23f4962:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f4966:	4606      	mov	r6, r0
 23f4968:	460f      	mov	r7, r1
 23f496a:	4640      	mov	r0, r8
 23f496c:	4649      	mov	r1, r9
 23f496e:	f7ef fde7 	bl	23e4540 <__aeabi_dmul>
 23f4972:	4632      	mov	r2, r6
 23f4974:	4680      	mov	r8, r0
 23f4976:	4689      	mov	r9, r1
 23f4978:	463b      	mov	r3, r7
 23f497a:	4630      	mov	r0, r6
 23f497c:	4639      	mov	r1, r7
 23f497e:	f7ef fddf 	bl	23e4540 <__aeabi_dmul>
 23f4982:	a325      	add	r3, pc, #148	; (adr r3, 23f4a18 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x110>)
 23f4984:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f4988:	f7ef fdda 	bl	23e4540 <__aeabi_dmul>
 23f498c:	4602      	mov	r2, r0
 23f498e:	460b      	mov	r3, r1
 23f4990:	4640      	mov	r0, r8
 23f4992:	4649      	mov	r1, r9
 23f4994:	f7ef fc1c 	bl	23e41d0 <__aeabi_dsub>
 23f4998:	a321      	add	r3, pc, #132	; (adr r3, 23f4a20 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x118>)
 23f499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f499e:	4680      	mov	r8, r0
 23f49a0:	4689      	mov	r9, r1
 23f49a2:	4630      	mov	r0, r6
 23f49a4:	4639      	mov	r1, r7
 23f49a6:	f7ef fdcb 	bl	23e4540 <__aeabi_dmul>
 23f49aa:	4602      	mov	r2, r0
 23f49ac:	460b      	mov	r3, r1
 23f49ae:	4640      	mov	r0, r8
 23f49b0:	4649      	mov	r1, r9
 23f49b2:	f7ef fc0f 	bl	23e41d4 <__adddf3>
 23f49b6:	a31c      	add	r3, pc, #112	; (adr r3, 23f4a28 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x120>)
 23f49b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f49bc:	f7ef fc08 	bl	23e41d0 <__aeabi_dsub>
 23f49c0:	2200      	movs	r2, #0
 23f49c2:	4b1b      	ldr	r3, [pc, #108]	; (23f4a30 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f49c4:	f7ef fdbc 	bl	23e4540 <__aeabi_dmul>
 23f49c8:	f7f0 f8b2 	bl	23e4b30 <__aeabi_d2f>
  for(int a=0;a<MULTI_ZONES;a++){
 23f49cc:	45ab      	cmp	fp, r5
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f49ce:	6128      	str	r0, [r5, #16]
  for(int a=0;a<MULTI_ZONES;a++){
 23f49d0:	d1ab      	bne.n	23f492a <_ZN7SVMULTI7getDataEP10soil_ret_t+0x22>
		  data->temp[a] = vals.temp[a]/100.0;
 23f49d2:	f9bd 0000 	ldrsh.w	r0, [sp]
 23f49d6:	f7ef fd49 	bl	23e446c <__aeabi_i2d>
 23f49da:	2200      	movs	r2, #0
 23f49dc:	4b14      	ldr	r3, [pc, #80]	; (23f4a30 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f49de:	f7ef fed9 	bl	23e4794 <__aeabi_ddiv>
 23f49e2:	f7f0 f8a5 	bl	23e4b30 <__aeabi_d2f>
 23f49e6:	6020      	str	r0, [r4, #0]
 23f49e8:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 23f49ec:	f7ef fd3e 	bl	23e446c <__aeabi_i2d>
 23f49f0:	2200      	movs	r2, #0
 23f49f2:	4b0f      	ldr	r3, [pc, #60]	; (23f4a30 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f49f4:	f7ef fece 	bl	23e4794 <__aeabi_ddiv>
 23f49f8:	f7f0 f89a 	bl	23e4b30 <__aeabi_d2f>
 23f49fc:	6060      	str	r0, [r4, #4]
}
 23f49fe:	b005      	add	sp, #20
 23f4a00:	ecbd 8b02 	vpop	{d8}
 23f4a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f4a08:	00000000 	.word	0x00000000
 23f4a0c:	40080000 	.word	0x40080000
 23f4a10:	fff6c5c5 	.word	0xfff6c5c5
 23f4a14:	3ed20916 	.word	0x3ed20916
 23f4a18:	01a36e2f 	.word	0x01a36e2f
 23f4a1c:	3f4205bc 	.word	0x3f4205bc
 23f4a20:	d42c3c9f 	.word	0xd42c3c9f
 23f4a24:	3f9de69a 	.word	0x3f9de69a
 23f4a28:	e5604189 	.word	0xe5604189
 23f4a2c:	3fab22d0 	.word	0x3fab22d0
 23f4a30:	40590000 	.word	0x40590000

023f4a34 <_ZN9ExFatFile8dirCacheEhh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f4a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f4a36:	4604      	mov	r4, r0
 23f4a38:	460f      	mov	r7, r1
 23f4a3a:	b085      	sub	sp, #20
  DirPos_t pos = m_dirPos;
 23f4a3c:	ad01      	add	r5, sp, #4
 23f4a3e:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f4a42:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
 23f4a44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 23f4a48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
 23f4a4c:	4629      	mov	r1, r5
 23f4a4e:	6a20      	ldr	r0, [r4, #32]
 23f4a50:	017a      	lsls	r2, r7, #5
 23f4a52:	f001 f888 	bl	23f5b66 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>
 23f4a56:	2801      	cmp	r0, #1
 23f4a58:	d106      	bne.n	23f4a68 <_ZN9ExFatFile8dirCacheEhh+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
 23f4a5a:	4632      	mov	r2, r6
 23f4a5c:	4629      	mov	r1, r5
 23f4a5e:	6a20      	ldr	r0, [r4, #32]
 23f4a60:	f001 f834 	bl	23f5acc <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
}
 23f4a64:	b005      	add	sp, #20
 23f4a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return nullptr;
 23f4a68:	2000      	movs	r0, #0
 23f4a6a:	e7fb      	b.n	23f4a64 <_ZN9ExFatFile8dirCacheEhh+0x30>

023f4a6c <_ZN9ExFatFile5closeEv>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
 23f4a6c:	b510      	push	{r4, lr}
 23f4a6e:	4604      	mov	r4, r0
  bool rtn = sync();
 23f4a70:	f000 fcd2 	bl	23f5418 <_ZN9ExFatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f4a74:	2300      	movs	r3, #0
 23f4a76:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f4a7a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
 23f4a7e:	bd10      	pop	{r4, pc}

023f4a80 <_ZN9ExFatFile8openRootEP11ExFatVolume>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f4a80:	b538      	push	{r3, r4, r5, lr}
 23f4a82:	460d      	mov	r5, r1
  if (isOpen()) {
 23f4a84:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f4a88:	4604      	mov	r4, r0
  if (isOpen()) {
 23f4a8a:	b951      	cbnz	r1, 23f4aa2 <_ZN9ExFatFile8openRootEP11ExFatVolume+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
 23f4a8c:	2238      	movs	r2, #56	; 0x38
 23f4a8e:	f008 f80a 	bl	23fcaa6 <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f4a92:	2340      	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
 23f4a94:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_ROOT;
 23f4a96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
 23f4a9a:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
 23f4a9c:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;

fail:
  return false;
}
 23f4aa0:	bd38      	pop	{r3, r4, r5, pc}
  return false;
 23f4aa2:	2000      	movs	r0, #0
 23f4aa4:	e7fc      	b.n	23f4aa0 <_ZN9ExFatFile8openRootEP11ExFatVolume+0x20>
	...

023f4aa8 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
 23f4aa8:	b4f0      	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
 23f4aaa:	460c      	mov	r4, r1
 23f4aac:	f811 5b01 	ldrb.w	r5, [r1], #1
 23f4ab0:	2d20      	cmp	r5, #32
 23f4ab2:	d0fa      	beq.n	23f4aaa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x2>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f4ab4:	4f18      	ldr	r7, [pc, #96]	; (23f4b18 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x70>)
    path++;
  }
  fname->begin = path;
 23f4ab6:	6014      	str	r4, [r2, #0]
  fname->end = path;
 23f4ab8:	6094      	str	r4, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
 23f4aba:	4626      	mov	r6, r4
 23f4abc:	f816 5b01 	ldrb.w	r5, [r6], #1
 23f4ac0:	b1dd      	cbz	r5, 23f4afa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f4ac2:	2d2f      	cmp	r5, #47	; 0x2f
 23f4ac4:	d019      	beq.n	23f4afa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f4ac6:	f1a5 0120 	sub.w	r1, r5, #32
 23f4aca:	295f      	cmp	r1, #95	; 0x5f
 23f4acc:	d821      	bhi.n	23f4b12 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f4ace:	f1a5 0122 	sub.w	r1, r5, #34	; 0x22
 23f4ad2:	b2c9      	uxtb	r1, r1
 23f4ad4:	291d      	cmp	r1, #29
 23f4ad6:	d803      	bhi.n	23f4ae0 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x38>
 23f4ad8:	fa27 f101 	lsr.w	r1, r7, r1
 23f4adc:	07c9      	lsls	r1, r1, #31
 23f4ade:	d418      	bmi.n	23f4b12 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
 23f4ae0:	f005 01bf 	and.w	r1, r5, #191	; 0xbf
 23f4ae4:	293c      	cmp	r1, #60	; 0x3c
 23f4ae6:	d014      	beq.n	23f4b12 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f4ae8:	2d5c      	cmp	r5, #92	; 0x5c
 23f4aea:	d012      	beq.n	23f4b12 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
 23f4aec:	2d2e      	cmp	r5, #46	; 0x2e
 23f4aee:	d002      	beq.n	23f4af6 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
 23f4af0:	2d20      	cmp	r5, #32
 23f4af2:	d000      	beq.n	23f4af6 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
      // Need to trim trailing dots spaces.
      fname->end = path;
 23f4af4:	6096      	str	r6, [r2, #8]
                              const char** ptr) {
 23f4af6:	4634      	mov	r4, r6
 23f4af8:	e7df      	b.n	23f4aba <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x12>
 23f4afa:	4625      	mov	r5, r4
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f4afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f4b00:	2920      	cmp	r1, #32
 23f4b02:	d0fa      	beq.n	23f4afa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f4b04:	292f      	cmp	r1, #47	; 0x2f
 23f4b06:	d0f8      	beq.n	23f4afa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
  }
  *ptr = path;
 23f4b08:	601d      	str	r5, [r3, #0]
  return hashName(fname);
 23f4b0a:	4611      	mov	r1, r2

fail:
  return false;
}
 23f4b0c:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
 23f4b0e:	f000 bf11 	b.w	23f5934 <_ZN9ExFatFile8hashNameEP8ExName_t>
}
 23f4b12:	2000      	movs	r0, #0
 23f4b14:	bcf0      	pop	{r4, r5, r6, r7}
 23f4b16:	4770      	bx	lr
 23f4b18:	31000101 	.word	0x31000101

023f4b1c <_ZN9ExFatFile4readEPvj>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
 23f4b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4b20:	ed2d 8b02 	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f4b24:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f4b28:	4604      	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
 23f4b2a:	07dd      	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
 23f4b2c:	4689      	mov	r9, r1
 23f4b2e:	4616      	mov	r6, r2
 23f4b30:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f4b32:	d567      	bpl.n	23f4c04 <_ZN9ExFatFile4readEPvj+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
 23f4b34:	0658      	lsls	r0, r3, #25
 23f4b36:	d403      	bmi.n	23f4b40 <_ZN9ExFatFile4readEPvj+0x24>
 23f4b38:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4b3c:	0719      	lsls	r1, r3, #28
 23f4b3e:	d50b      	bpl.n	23f4b58 <_ZN9ExFatFile4readEPvj+0x3c>
    if ((m_curPosition + count) > m_validLength) {
 23f4b40:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f4b44:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 23f4b48:	18f5      	adds	r5, r6, r3
 23f4b4a:	f142 0200 	adc.w	r2, r2, #0
 23f4b4e:	42a9      	cmp	r1, r5
 23f4b50:	eb70 0202 	sbcs.w	r2, r0, r2
      count = toRead = m_validLength - m_curPosition;
 23f4b54:	bf38      	it	cc
 23f4b56:	1ace      	subcc	r6, r1, r3
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4b58:	f104 0318 	add.w	r3, r4, #24
int ExFatFile::read(void* buf, size_t count) {
 23f4b5c:	46b0      	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4b5e:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f4b62:	f1b8 0f00 	cmp.w	r8, #0
 23f4b66:	f000 8098 	beq.w	23f4c9a <_ZN9ExFatFile4readEPvj+0x17e>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f4b6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f4b6e:	6a20      	ldr	r0, [r4, #32]
 23f4b70:	f8d0 5438 	ldr.w	r5, [r0, #1080]	; 0x438
 23f4b74:	ea05 0703 	and.w	r7, r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f4b78:	f3c7 0b08 	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
 23f4b7c:	b94f      	cbnz	r7, 23f4b92 <_ZN9ExFatFile4readEPvj+0x76>
      if (m_curPosition == 0) {
 23f4b7e:	4313      	orrs	r3, r2
 23f4b80:	d12c      	bne.n	23f4bdc <_ZN9ExFatFile4readEPvj+0xc0>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f4b82:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4b86:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f4b88:	bf4c      	ite	mi
 23f4b8a:	f8d0 3434 	ldrmi.w	r3, [r0, #1076]	; 0x434
 23f4b8e:	69e3      	ldrpl	r3, [r4, #28]
        m_curCluster =
 23f4b90:	61a3      	str	r3, [r4, #24]
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f4b92:	f8d4 a020 	ldr.w	sl, [r4, #32]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f4b96:	69a2      	ldr	r2, [r4, #24]
 23f4b98:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
 23f4b9c:	1e95      	subs	r5, r2, #2
 23f4b9e:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
 23f4ba2:	4085      	lsls	r5, r0
 23f4ba4:	eb05 2557 	add.w	r5, r5, r7, lsr #9
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f4ba8:	ea4f 2c57 	mov.w	ip, r7, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f4bac:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
 23f4bae:	f1bb 0f00 	cmp.w	fp, #0
 23f4bb2:	d130      	bne.n	23f4c16 <_ZN9ExFatFile4readEPvj+0xfa>
 23f4bb4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 23f4bb8:	d32d      	bcc.n	23f4c16 <_ZN9ExFatFile4readEPvj+0xfa>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f4bba:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
 23f4bbe:	4295      	cmp	r5, r2
 23f4bc0:	d029      	beq.n	23f4c16 <_ZN9ExFatFile4readEPvj+0xfa>
        goto fail;
      }
      const uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f4bc2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23f4bc6:	d245      	bcs.n	23f4c54 <_ZN9ExFatFile4readEPvj+0x138>
    return m_blockDev->readSector(sector, dst);
 23f4bc8:	464a      	mov	r2, r9
 23f4bca:	4629      	mov	r1, r5
 23f4bcc:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f4bd0:	f7ff fc6c 	bl	23f44ac <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f4bd4:	b1b0      	cbz	r0, 23f4c04 <_ZN9ExFatFile4readEPvj+0xe8>
      n = m_vol->bytesPerSector();
 23f4bd6:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f4bda:	e030      	b.n	23f4c3e <_ZN9ExFatFile4readEPvj+0x122>
      } else if (isContiguous()) {
 23f4bdc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
 23f4be0:	69a1      	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
 23f4be2:	065b      	lsls	r3, r3, #25
 23f4be4:	d502      	bpl.n	23f4bec <_ZN9ExFatFile4readEPvj+0xd0>
        m_curCluster++;
 23f4be6:	3101      	adds	r1, #1
 23f4be8:	61a1      	str	r1, [r4, #24]
 23f4bea:	e7d2      	b.n	23f4b92 <_ZN9ExFatFile4readEPvj+0x76>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4bec:	ee18 2a10 	vmov	r2, s16
 23f4bf0:	f000 ff86 	bl	23f5b00 <_ZN14ExFatPartition6fatGetEmPm>
        if (fg < 0) {
 23f4bf4:	2800      	cmp	r0, #0
 23f4bf6:	db05      	blt.n	23f4c04 <_ZN9ExFatFile4readEPvj+0xe8>
        if (fg == 0) {
 23f4bf8:	d1cb      	bne.n	23f4b92 <_ZN9ExFatFile4readEPvj+0x76>
          if (isDir()) {
 23f4bfa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4bfe:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f4c02:	d14a      	bne.n	23f4c9a <_ZN9ExFatFile4readEPvj+0x17e>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
 23f4c04:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f4c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f4c0c:	f043 0302 	orr.w	r3, r3, #2
 23f4c10:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f4c14:	e043      	b.n	23f4c9e <_ZN9ExFatFile4readEPvj+0x182>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f4c16:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f4c1a:	4547      	cmp	r7, r8
    return m_dataCache.prepare(sector, option);
 23f4c1c:	f04f 0200 	mov.w	r2, #0
 23f4c20:	4629      	mov	r1, r5
 23f4c22:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f4c26:	bf28      	it	cs
 23f4c28:	4647      	movcs	r7, r8
 23f4c2a:	f001 fb32 	bl	23f6292 <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f4c2e:	2800      	cmp	r0, #0
 23f4c30:	d0e8      	beq.n	23f4c04 <_ZN9ExFatFile4readEPvj+0xe8>
      memcpy(dst, src, n);
 23f4c32:	eb00 010b 	add.w	r1, r0, fp
 23f4c36:	463a      	mov	r2, r7
 23f4c38:	4648      	mov	r0, r9
 23f4c3a:	f007 ff27 	bl	23fca8c <memcpy>
    m_curPosition += n;
 23f4c3e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f4c42:	19db      	adds	r3, r3, r7
 23f4c44:	f142 0200 	adc.w	r2, r2, #0
 23f4c48:	e9c4 3200 	strd	r3, r2, [r4]
    dst += n;
 23f4c4c:	44b9      	add	r9, r7
    toRead -= n;
 23f4c4e:	eba8 0807 	sub.w	r8, r8, r7
  while (toRead) {
 23f4c52:	e786      	b.n	23f4b62 <_ZN9ExFatFile4readEPvj+0x46>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f4c54:	2101      	movs	r1, #1
 23f4c56:	fa01 f000 	lsl.w	r0, r1, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f4c5a:	ea4f 2758 	mov.w	r7, r8, lsr #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f4c5e:	eba0 030c 	sub.w	r3, r0, ip
 23f4c62:	42bb      	cmp	r3, r7
 23f4c64:	bf28      	it	cs
 23f4c66:	463b      	movcs	r3, r7
    return sector <= m_sector && m_sector < (sector + count);
 23f4c68:	4295      	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f4c6a:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f4c6e:	d908      	bls.n	23f4c82 <_ZN9ExFatFile4readEPvj+0x166>
    return m_blockDev->readSectors(sector, dst, count);
 23f4c70:	464a      	mov	r2, r9
 23f4c72:	4629      	mov	r1, r5
 23f4c74:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f4c78:	f7ff fbec 	bl	23f4454 <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f4c7c:	2800      	cmp	r0, #0
 23f4c7e:	d1de      	bne.n	23f4c3e <_ZN9ExFatFile4readEPvj+0x122>
 23f4c80:	e7c0      	b.n	23f4c04 <_ZN9ExFatFile4readEPvj+0xe8>
    return sector <= m_sector && m_sector < (sector + count);
 23f4c82:	18e9      	adds	r1, r5, r3
 23f4c84:	428a      	cmp	r2, r1
 23f4c86:	d2f3      	bcs.n	23f4c70 <_ZN9ExFatFile4readEPvj+0x154>
    if (isCached(sector, count) && !sync()) {
 23f4c88:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f4c8c:	9301      	str	r3, [sp, #4]
 23f4c8e:	f001 fada 	bl	23f6246 <_ZN7FsCache4syncEv>
 23f4c92:	9b01      	ldr	r3, [sp, #4]
 23f4c94:	2800      	cmp	r0, #0
 23f4c96:	d1eb      	bne.n	23f4c70 <_ZN9ExFatFile4readEPvj+0x154>
 23f4c98:	e7b4      	b.n	23f4c04 <_ZN9ExFatFile4readEPvj+0xe8>
  return count - toRead;
 23f4c9a:	eba6 0008 	sub.w	r0, r6, r8
}
 23f4c9e:	b003      	add	sp, #12
 23f4ca0:	ecbd 8b02 	vpop	{d8}
 23f4ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f4ca8 <_ZN9ExFatFile4peekEv>:
int ExFatFile::peek() {
 23f4ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f4caa:	2201      	movs	r2, #1
  uint64_t saveCurPosition = m_curPosition;
 23f4cac:	e9d0 6700 	ldrd	r6, r7, [r0]
 23f4cb0:	f10d 0107 	add.w	r1, sp, #7
int ExFatFile::peek() {
 23f4cb4:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
 23f4cb6:	6985      	ldr	r5, [r0, #24]
 23f4cb8:	f7ff ff30 	bl	23f4b1c <_ZN9ExFatFile4readEPvj>
 23f4cbc:	2801      	cmp	r0, #1
 23f4cbe:	bf14      	ite	ne
 23f4cc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f4cc4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curPosition = saveCurPosition;
 23f4cc8:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = saveCurCluster;
 23f4ccc:	61a5      	str	r5, [r4, #24]
}
 23f4cce:	b003      	add	sp, #12
 23f4cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f4cd2 <_ZN9ExFatFile7seekSetEy>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
 23f4cd2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4cd6:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
 23f4cd8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f4cdc:	4604      	mov	r4, r0
 23f4cde:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f4ce0:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
 23f4ce4:	2b00      	cmp	r3, #0
 23f4ce6:	d05b      	beq.n	23f4da0 <_ZN9ExFatFile7seekSetEy+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f4ce8:	e9d0 0c00 	ldrd	r0, ip, [r0]
 23f4cec:	45bc      	cmp	ip, r7
 23f4cee:	bf08      	it	eq
 23f4cf0:	4290      	cmpeq	r0, r2
 23f4cf2:	d006      	beq.n	23f4d02 <_ZN9ExFatFile7seekSetEy+0x30>
    return true;
  }
  if (pos == 0) {
 23f4cf4:	ea56 0207 	orrs.w	r2, r6, r7
 23f4cf8:	d105      	bne.n	23f4d06 <_ZN9ExFatFile7seekSetEy+0x34>
    // set position to start of file
    m_curCluster = 0;
 23f4cfa:	2300      	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
 23f4cfc:	61a3      	str	r3, [r4, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 23f4cfe:	e9c4 6700 	strd	r6, r7, [r4]
    return true;
 23f4d02:	2001      	movs	r0, #1
 23f4d04:	e04f      	b.n	23f4da6 <_ZN9ExFatFile7seekSetEy+0xd4>
  if (isFile()) {
 23f4d06:	071a      	lsls	r2, r3, #28
 23f4d08:	d504      	bpl.n	23f4d14 <_ZN9ExFatFile7seekSetEy+0x42>
    if (pos > m_validLength) {
 23f4d0a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 23f4d0e:	42b1      	cmp	r1, r6
 23f4d10:	41ba      	sbcs	r2, r7
 23f4d12:	d345      	bcc.n	23f4da0 <_ZN9ExFatFile7seekSetEy+0xce>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
 23f4d14:	f8d4 e020 	ldr.w	lr, [r4, #32]
 23f4d18:	1e75      	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f4d1a:	f89e 1445 	ldrb.w	r1, [lr, #1093]	; 0x445
 23f4d1e:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
 23f4d22:	3109      	adds	r1, #9
 23f4d24:	b2c9      	uxtb	r1, r1
 23f4d26:	f1c1 0920 	rsb	r9, r1, #32
 23f4d2a:	fa0a f909 	lsl.w	r9, sl, r9
 23f4d2e:	f1a1 0220 	sub.w	r2, r1, #32
 23f4d32:	40cd      	lsrs	r5, r1
 23f4d34:	fa2a f202 	lsr.w	r2, sl, r2
 23f4d38:	ea45 0509 	orr.w	r5, r5, r9
 23f4d3c:	4315      	orrs	r5, r2
  if (isContiguous()) {
 23f4d3e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 23f4d42:	f1c1 0920 	rsb	r9, r1, #32
 23f4d46:	f012 0f40 	tst.w	r2, #64	; 0x40
 23f4d4a:	f1a1 0a20 	sub.w	sl, r1, #32
 23f4d4e:	d002      	beq.n	23f4d56 <_ZN9ExFatFile7seekSetEy+0x84>
    m_curCluster = m_firstCluster + nNew;
 23f4d50:	69e3      	ldr	r3, [r4, #28]
 23f4d52:	442b      	add	r3, r5
 23f4d54:	e7d2      	b.n	23f4cfc <_ZN9ExFatFile7seekSetEy+0x2a>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
 23f4d56:	f110 3bff 	adds.w	fp, r0, #4294967295	; 0xffffffff
 23f4d5a:	f14c 32ff 	adc.w	r2, ip, #4294967295	; 0xffffffff
 23f4d5e:	fa02 f909 	lsl.w	r9, r2, r9
 23f4d62:	fa2b f101 	lsr.w	r1, fp, r1
 23f4d66:	ea41 0109 	orr.w	r1, r1, r9
 23f4d6a:	fa22 f20a 	lsr.w	r2, r2, sl
 23f4d6e:	4311      	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
 23f4d70:	428d      	cmp	r5, r1
 23f4d72:	d302      	bcc.n	23f4d7a <_ZN9ExFatFile7seekSetEy+0xa8>
 23f4d74:	ea50 020c 	orrs.w	r2, r0, ip
 23f4d78:	d117      	bne.n	23f4daa <_ZN9ExFatFile7seekSetEy+0xd8>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f4d7a:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f4d7c:	bf4c      	ite	mi
 23f4d7e:	f8de 3434 	ldrmi.w	r3, [lr, #1076]	; 0x434
 23f4d82:	69e3      	ldrpl	r3, [r4, #28]
 23f4d84:	61a3      	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f4d86:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
 23f4d8a:	2d00      	cmp	r5, #0
 23f4d8c:	d0b7      	beq.n	23f4cfe <_ZN9ExFatFile7seekSetEy+0x2c>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f4d8e:	464a      	mov	r2, r9
 23f4d90:	69a1      	ldr	r1, [r4, #24]
 23f4d92:	6a20      	ldr	r0, [r4, #32]
 23f4d94:	f000 feb4 	bl	23f5b00 <_ZN14ExFatPartition6fatGetEmPm>
 23f4d98:	2800      	cmp	r0, #0
 23f4d9a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 23f4d9e:	dcf4      	bgt.n	23f4d8a <_ZN9ExFatFile7seekSetEy+0xb8>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f4da0:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f4da2:	f8c4 8018 	str.w	r8, [r4, #24]
}
 23f4da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
 23f4daa:	1a6d      	subs	r5, r5, r1
 23f4dac:	e7eb      	b.n	23f4d86 <_ZN9ExFatFile7seekSetEy+0xb4>
	...

023f4db0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
 23f4db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4db4:	4699      	mov	r9, r3
 23f4db6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f4dba:	4604      	mov	r4, r0
 23f4dbc:	460e      	mov	r6, r1
 23f4dbe:	4615      	mov	r5, r2
 23f4dc0:	b08d      	sub	sp, #52	; 0x34
  if (isOpen() || !dir->isDir()) {
 23f4dc2:	2b00      	cmp	r3, #0
 23f4dc4:	d141      	bne.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f4dc6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f4dca:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f4dce:	d03c      	beq.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  switch (oflag & O_ACCMODE) {
 23f4dd0:	f009 0303 	and.w	r3, r9, #3
 23f4dd4:	2b03      	cmp	r3, #3
 23f4dd6:	d038      	beq.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
 23f4dd8:	f009 0a08 	and.w	sl, r9, #8
 23f4ddc:	3301      	adds	r3, #1
 23f4dde:	ea4a 0a03 	orr.w	sl, sl, r3
  if (fname) {
 23f4de2:	2a00      	cmp	r2, #0
 23f4de4:	d038      	beq.n	23f4e58 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xa8>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
 23f4de6:	230f      	movs	r3, #15
 23f4de8:	68d7      	ldr	r7, [r2, #12]
   *
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
 23f4dea:	4608      	mov	r0, r1
 23f4dec:	370e      	adds	r7, #14
 23f4dee:	fbb7 f7f3 	udiv	r7, r7, r3
 23f4df2:	2200      	movs	r2, #0
 23f4df4:	3702      	adds	r7, #2
 23f4df6:	2300      	movs	r3, #0
 23f4df8:	b2ff      	uxtb	r7, r7
 23f4dfa:	f7ff ff6a 	bl	23f4cd2 <_ZN9ExFatFile7seekSetEy>
      inSet = false;
 23f4dfe:	f04f 0b00 	mov.w	fp, #0
 23f4e02:	46d8      	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
 23f4e04:	2220      	movs	r2, #32
 23f4e06:	4630      	mov	r0, r6
 23f4e08:	a904      	add	r1, sp, #16
 23f4e0a:	f7ff fe87 	bl	23f4b1c <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f4e0e:	2800      	cmp	r0, #0
 23f4e10:	f000 80c6 	beq.w	23f4fa0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
    if (n != FS_DIR_SIZE) {
 23f4e14:	2820      	cmp	r0, #32
 23f4e16:	d118      	bne.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
 23f4e18:	f99d 1010 	ldrsb.w	r1, [sp, #16]
 23f4e1c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 23f4e20:	2900      	cmp	r1, #0
 23f4e22:	db1e      	blt.n	23f4e62 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xb2>
      if (freeCount == 0) {
 23f4e24:	f1bb 0f00 	cmp.w	fp, #0
 23f4e28:	d105      	bne.n	23f4e36 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x86>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f4e2a:	6831      	ldr	r1, [r6, #0]
 23f4e2c:	f1a1 0320 	sub.w	r3, r1, #32
 23f4e30:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f4e32:	69b3      	ldr	r3, [r6, #24]
 23f4e34:	9301      	str	r3, [sp, #4]
      if (freeCount < freeNeed) {
 23f4e36:	45bb      	cmp	fp, r7
        freeCount++;
 23f4e38:	bf3c      	itt	cc
 23f4e3a:	f10b 0301 	addcc.w	r3, fp, #1
 23f4e3e:	fa5f fb83 	uxtbcc.w	fp, r3
      if (buf[0] == EXFAT_TYPE_END_DIR) {
 23f4e42:	b95a      	cbnz	r2, 23f4e5c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
        if (fname) {
 23f4e44:	2d00      	cmp	r5, #0
 23f4e46:	f040 80ab 	bne.w	23f4fa0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
  m_attributes = FILE_ATTR_CLOSED;
 23f4e4a:	f04f 0800 	mov.w	r8, #0
 23f4e4e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
 23f4e52:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return false;
 23f4e56:	e06d      	b.n	23f4f34 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  uint8_t freeNeed = 3;
 23f4e58:	2703      	movs	r7, #3
 23f4e5a:	e7d0      	b.n	23f4dfe <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x4e>
      inSet = false;
 23f4e5c:	2000      	movs	r0, #0
 23f4e5e:	4680      	mov	r8, r0
 23f4e60:	e7d0      	b.n	23f4e04 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x54>
    } else if (!inSet) {
 23f4e62:	f1b8 0f00 	cmp.w	r8, #0
 23f4e66:	d127      	bne.n	23f4eb8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x108>
        freeCount = 0;
 23f4e68:	45bb      	cmp	fp, r7
 23f4e6a:	bf38      	it	cc
 23f4e6c:	f04f 0b00 	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
 23f4e70:	2a85      	cmp	r2, #133	; 0x85
 23f4e72:	d1f3      	bne.n	23f4e5c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      memset(this, 0, sizeof(ExFatFile));
 23f4e74:	2238      	movs	r2, #56	; 0x38
 23f4e76:	4641      	mov	r1, r8
 23f4e78:	4620      	mov	r0, r4
 23f4e7a:	f007 fe14 	bl	23fcaa6 <memset>
      m_setCount = dirFile->setCount;
 23f4e7e:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f4e82:	f89d 1014 	ldrb.w	r1, [sp, #20]
      m_setCount = dirFile->setCount;
 23f4e86:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f4e8a:	f001 0237 	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
 23f4e8e:	06c9      	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
 23f4e90:	bf58      	it	pl
 23f4e92:	f042 0208 	orrpl.w	r2, r2, #8
 23f4e96:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
 23f4e9a:	6a32      	ldr	r2, [r6, #32]
      inSet = true;
 23f4e9c:	2001      	movs	r0, #1
      m_vol = dir->volume();
 23f4e9e:	6222      	str	r2, [r4, #32]
  uint32_t curCluster() const { return m_curCluster; }
 23f4ea0:	69b2      	ldr	r2, [r6, #24]
      m_dirPos.cluster = dir->curCluster();
 23f4ea2:	6262      	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
 23f4ea4:	6832      	ldr	r2, [r6, #0]
 23f4ea6:	3a20      	subs	r2, #32
 23f4ea8:	62a2      	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f4eaa:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
 23f4eae:	f3c2 1280 	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
 23f4eb2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
 23f4eb6:	e7d2      	b.n	23f4e5e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
 23f4eb8:	2ac0      	cmp	r2, #192	; 0xc0
 23f4eba:	d150      	bne.n	23f4f5e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1ae>
      m_validLength = getLe64(dirStream->validLength);
 23f4ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f4ec0:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
 23f4ec4:	f884 a033 	strb.w	sl, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f4ec8:	0793      	lsls	r3, r2, #30
        m_flags |= FILE_FLAG_CONTIGUOUS;
 23f4eca:	bf44      	itt	mi
 23f4ecc:	f04a 0240 	orrmi.w	r2, sl, #64	; 0x40
 23f4ed0:	f884 2033 	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f4ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
      m_validLength = getLe64(dirStream->validLength);
 23f4ed6:	e9c4 0104 	strd	r0, r1, [r4, #16]
      m_dataLength = getLe64(dirStream->dataLength);
 23f4eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f4ede:	61e2      	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
 23f4ee0:	e9c4 0102 	strd	r0, r1, [r4, #8]
      if (!fname) {
 23f4ee4:	bb55      	cbnz	r5, 23f4f3c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x18c>
  if (oflag & O_EXCL) {
 23f4ee6:	f419 6f00 	tst.w	r9, #2048	; 0x800
 23f4eea:	d1ae      	bne.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
 23f4eec:	f419 4f88 	tst.w	r9, #17408	; 0x4400
 23f4ef0:	d103      	bne.n	23f4efa <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x14a>
 23f4ef2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f4ef6:	079d      	lsls	r5, r3, #30
 23f4ef8:	d505      	bpl.n	23f4f06 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x156>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f4efa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
 23f4efe:	06d8      	lsls	r0, r3, #27
 23f4f00:	d4a3      	bmi.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f4f02:	07d9      	lsls	r1, r3, #31
 23f4f04:	d4a1      	bmi.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (oflag & O_TRUNC) {
 23f4f06:	f419 6f80 	tst.w	r9, #1024	; 0x400
 23f4f0a:	d039      	beq.n	23f4f80 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1d0>
    if (!(m_flags & FILE_FLAG_WRITE)) {
 23f4f0c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f4f10:	079a      	lsls	r2, r3, #30
 23f4f12:	d59a      	bpl.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
 23f4f14:	2200      	movs	r2, #0
 23f4f16:	2300      	movs	r3, #0
 23f4f18:	4620      	mov	r0, r4
 23f4f1a:	f7ff feda 	bl	23f4cd2 <_ZN9ExFatFile7seekSetEy>
 23f4f1e:	2800      	cmp	r0, #0
 23f4f20:	d093      	beq.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f4f22:	4620      	mov	r0, r4
 23f4f24:	f000 fb73 	bl	23f560e <_ZN9ExFatFile8truncateEv>
 23f4f28:	2800      	cmp	r0, #0
 23f4f2a:	d08e      	beq.n	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (isWritable()) {
 23f4f2c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f4f30:	079b      	lsls	r3, r3, #30
 23f4f32:	d42e      	bmi.n	23f4f92 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1e2>
}
 23f4f34:	4640      	mov	r0, r8
 23f4f36:	b00d      	add	sp, #52	; 0x34
 23f4f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f4f3c:	682a      	ldr	r2, [r5, #0]
      if (fname->nameLength != dirStream->nameLength ||
 23f4f3e:	68e9      	ldr	r1, [r5, #12]
 23f4f40:	606a      	str	r2, [r5, #4]
 23f4f42:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23f4f46:	4291      	cmp	r1, r2
 23f4f48:	d188      	bne.n	23f4e5c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
 23f4f4a:	8a28      	ldrh	r0, [r5, #16]
 23f4f4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 23f4f50:	eba0 0c02 	sub.w	ip, r0, r2
 23f4f54:	f1dc 0000 	rsbs	r0, ip, #0
 23f4f58:	eb40 000c 	adc.w	r0, r0, ip
 23f4f5c:	e77f      	b.n	23f4e5e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
 23f4f5e:	2ac1      	cmp	r2, #193	; 0xc1
 23f4f60:	f47f af7c 	bne.w	23f4e5c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      if (!cmpName(dirName, fname)) {
 23f4f64:	462a      	mov	r2, r5
 23f4f66:	4620      	mov	r0, r4
 23f4f68:	a904      	add	r1, sp, #16
 23f4f6a:	f000 fcbb 	bl	23f58e4 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>
 23f4f6e:	2800      	cmp	r0, #0
 23f4f70:	f43f af75 	beq.w	23f4e5e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
      if (fname->atEnd()) {
 23f4f74:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 23f4f78:	4291      	cmp	r1, r2
 23f4f7a:	f47f af70 	bne.w	23f4e5e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
 23f4f7e:	e7b2      	b.n	23f4ee6 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x136>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
 23f4f80:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 23f4f84:	d0d2      	beq.n	23f4f2c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x17c>
 23f4f86:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23f4f8a:	4620      	mov	r0, r4
 23f4f8c:	f7ff fea1 	bl	23f4cd2 <_ZN9ExFatFile7seekSetEy>
 23f4f90:	e7ca      	b.n	23f4f28 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x178>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f4f92:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4f96:	f043 0320 	orr.w	r3, r3, #32
 23f4f9a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 23f4f9e:	e7c9      	b.n	23f4f34 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
 23f4fa0:	f419 7f00 	tst.w	r9, #512	; 0x200
 23f4fa4:	f43f af51 	beq.w	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f4fa8:	f01a 0f02 	tst.w	sl, #2
 23f4fac:	f43f af4d 	beq.w	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f4fb0:	2d00      	cmp	r5, #0
 23f4fb2:	f43f af4a 	beq.w	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  while (freeCount < freeNeed) {
 23f4fb6:	45bb      	cmp	fp, r7
 23f4fb8:	d221      	bcs.n	23f4ffe <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x24e>
    n = dir->read(buf, FS_DIR_SIZE);
 23f4fba:	2220      	movs	r2, #32
 23f4fbc:	4630      	mov	r0, r6
 23f4fbe:	a904      	add	r1, sp, #16
 23f4fc0:	f7ff fdac 	bl	23f4b1c <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f4fc4:	b950      	cbnz	r0, 23f4fdc <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x22c>
      if (!dir->addDirCluster()) {
 23f4fc6:	4630      	mov	r0, r6
      uint32_t saveCurCluster = dir->m_curCluster;
 23f4fc8:	f8d6 8018 	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
 23f4fcc:	f000 fa45 	bl	23f545a <_ZN9ExFatFile13addDirClusterEv>
 23f4fd0:	2800      	cmp	r0, #0
 23f4fd2:	f43f af3a 	beq.w	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
      dir->m_curCluster = saveCurCluster;
 23f4fd6:	f8c6 8018 	str.w	r8, [r6, #24]
      continue;
 23f4fda:	e7ec      	b.n	23f4fb6 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
    if (n != FS_DIR_SIZE) {
 23f4fdc:	2820      	cmp	r0, #32
 23f4fde:	f47f af34 	bne.w	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (freeCount == 0) {
 23f4fe2:	f1bb 0f00 	cmp.w	fp, #0
 23f4fe6:	d105      	bne.n	23f4ff4 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x244>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f4fe8:	6832      	ldr	r2, [r6, #0]
 23f4fea:	f1a2 0320 	sub.w	r3, r2, #32
 23f4fee:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f4ff0:	69b3      	ldr	r3, [r6, #24]
 23f4ff2:	9301      	str	r3, [sp, #4]
    freeCount++;
 23f4ff4:	f10b 0301 	add.w	r3, fp, #1
 23f4ff8:	fa5f fb83 	uxtb.w	fp, r3
 23f4ffc:	e7db      	b.n	23f4fb6 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
  memset(this, 0, sizeof(ExFatFile));
 23f4ffe:	2238      	movs	r2, #56	; 0x38
 23f5000:	2100      	movs	r1, #0
 23f5002:	4620      	mov	r0, r4
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f5004:	f896 8033 	ldrb.w	r8, [r6, #51]	; 0x33
 23f5008:	f007 fd4d 	bl	23fcaa6 <memset>
  ExFatVolume* volume() const { return m_vol; }
 23f500c:	6a33      	ldr	r3, [r6, #32]
 23f500e:	f04f 0900 	mov.w	r9, #0
  m_vol = dir->volume();
 23f5012:	6223      	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
 23f5014:	2328      	movs	r3, #40	; 0x28
 23f5016:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_dirPos = freePos;
 23f501a:	9b01      	ldr	r3, [sp, #4]
  freePos.isContiguous = dir->isContiguous();
 23f501c:	f3c8 1880 	ubfx	r8, r8, #6, #1
  m_dirPos = freePos;
 23f5020:	6263      	str	r3, [r4, #36]	; 0x24
 23f5022:	9b00      	ldr	r3, [sp, #0]
 23f5024:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 23f5028:	62a3      	str	r3, [r4, #40]	; 0x28
 23f502a:	682b      	ldr	r3, [r5, #0]
      m_setCount = freeNeed - 1;
 23f502c:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 23f5030:	606b      	str	r3, [r5, #4]
 23f5032:	fa5f f888 	uxtb.w	r8, r8
 23f5036:	fa5f fb89 	uxtb.w	fp, r9
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f503a:	45bb      	cmp	fp, r7
 23f503c:	d255      	bcs.n	23f50ea <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x33a>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
 23f503e:	2201      	movs	r2, #1
 23f5040:	4659      	mov	r1, fp
 23f5042:	4620      	mov	r0, r4
 23f5044:	f7ff fcf6 	bl	23f4a34 <_ZN9ExFatFile8dirCacheEhh>
    if (!cache || (cache[0] & 0x80)) {
 23f5048:	4606      	mov	r6, r0
 23f504a:	2800      	cmp	r0, #0
 23f504c:	f43f aefd 	beq.w	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f5050:	f990 2000 	ldrsb.w	r2, [r0]
 23f5054:	2a00      	cmp	r2, #0
 23f5056:	f6ff aef8 	blt.w	23f4e4a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    memset(cache, 0, FS_DIR_SIZE);
 23f505a:	2220      	movs	r2, #32
 23f505c:	2100      	movs	r1, #0
 23f505e:	f007 fd22 	bl	23fcaa6 <memset>
    if (i == 0) {
 23f5062:	f1bb 0f00 	cmp.w	fp, #0
 23f5066:	d120      	bne.n	23f50aa <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2fa>
      dirFile->type = EXFAT_TYPE_FILE;
 23f5068:	2385      	movs	r3, #133	; 0x85
 23f506a:	7033      	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
 23f506c:	4b21      	ldr	r3, [pc, #132]	; (23f50f4 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x344>)
      m_setCount = freeNeed - 1;
 23f506e:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
 23f5072:	f886 8001 	strb.w	r8, [r6, #1]
      if (FsDateTime::callback) {
 23f5076:	681b      	ldr	r3, [r3, #0]
 23f5078:	b18b      	cbz	r3, 23f509e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2ee>
        FsDateTime::callback(&date, &time, &ms10);
 23f507a:	f10d 020b 	add.w	r2, sp, #11
 23f507e:	f10d 010e 	add.w	r1, sp, #14
 23f5082:	a803      	add	r0, sp, #12
 23f5084:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f5086:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f508a:	8173      	strh	r3, [r6, #10]
 23f508c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23f5090:	8133      	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
 23f5092:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f5096:	7533      	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f5098:	f109 0901 	add.w	r9, r9, #1
 23f509c:	e7cb      	b.n	23f5036 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x286>
 23f509e:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f50a2:	8173      	strh	r3, [r6, #10]
 23f50a4:	81f3      	strh	r3, [r6, #14]
 23f50a6:	8273      	strh	r3, [r6, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f50a8:	e7f6      	b.n	23f5098 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
    } else if (i == 1) {
 23f50aa:	f1bb 0f01 	cmp.w	fp, #1
 23f50ae:	d10c      	bne.n	23f50ca <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x31a>
      dirStream->type = EXFAT_TYPE_STREAM;
 23f50b0:	22c0      	movs	r2, #192	; 0xc0
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f50b2:	f06a 037f 	orn	r3, sl, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
 23f50b6:	7032      	strb	r2, [r6, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
 23f50b8:	f886 b001 	strb.w	fp, [r6, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f50bc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
 23f50c0:	68eb      	ldr	r3, [r5, #12]
 23f50c2:	70f3      	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
 23f50c4:	8a2b      	ldrh	r3, [r5, #16]
 23f50c6:	80b3      	strh	r3, [r6, #4]
}
 23f50c8:	e7e6      	b.n	23f5098 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
      dirName->type = EXFAT_TYPE_NAME;
 23f50ca:	23c1      	movs	r3, #193	; 0xc1
 23f50cc:	f106 021e 	add.w	r2, r6, #30
 23f50d0:	7033      	strb	r3, [r6, #0]
        if (fname->atEnd()) {
 23f50d2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 23f50d6:	428b      	cmp	r3, r1
 23f50d8:	d0de      	beq.n	23f5098 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f50da:	1c59      	adds	r1, r3, #1
 23f50dc:	6069      	str	r1, [r5, #4]
 23f50de:	781b      	ldrb	r3, [r3, #0]
 23f50e0:	f826 3f02 	strh.w	r3, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
 23f50e4:	42b2      	cmp	r2, r6
 23f50e6:	d1f4      	bne.n	23f50d2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x322>
 23f50e8:	e7d6      	b.n	23f5098 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  return sync();
 23f50ea:	4620      	mov	r0, r4
 23f50ec:	f000 f994 	bl	23f5418 <_ZN9ExFatFile4syncEv>
 23f50f0:	4680      	mov	r8, r0
 23f50f2:	e71f      	b.n	23f4f34 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
 23f50f4:	1007aea8 	.word	0x1007aea8

023f50f8 <_ZN9ExFatFile4openEPS_PKci>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f50f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f50fc:	4698      	mov	r8, r3
  ExFatFile() {}
 23f50fe:	2300      	movs	r3, #0
 23f5100:	b096      	sub	sp, #88	; 0x58
 23f5102:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
 23f5104:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f5108:	4605      	mov	r5, r0
 23f510a:	460c      	mov	r4, r1
 23f510c:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f510e:	b11b      	cbz	r3, 23f5118 <_ZN9ExFatFile4openEPS_PKci+0x20>
  return false;
 23f5110:	2000      	movs	r0, #0
}
 23f5112:	b016      	add	sp, #88	; 0x58
 23f5114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f5118:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f511c:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f5120:	d0f6      	beq.n	23f5110 <_ZN9ExFatFile4openEPS_PKci+0x18>
  if (isDirSeparator(*path)) {
 23f5122:	7813      	ldrb	r3, [r2, #0]
 23f5124:	2b2f      	cmp	r3, #47	; 0x2f
 23f5126:	d11a      	bne.n	23f515e <_ZN9ExFatFile4openEPS_PKci+0x66>
    while (isDirSeparator(*path)) {
 23f5128:	9a01      	ldr	r2, [sp, #4]
 23f512a:	7813      	ldrb	r3, [r2, #0]
 23f512c:	2b2f      	cmp	r3, #47	; 0x2f
 23f512e:	d102      	bne.n	23f5136 <_ZN9ExFatFile4openEPS_PKci+0x3e>
      path++;
 23f5130:	3201      	adds	r2, #1
 23f5132:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f5134:	e7f8      	b.n	23f5128 <_ZN9ExFatFile4openEPS_PKci+0x30>
      return openRoot(dirFile->m_vol);
 23f5136:	6a24      	ldr	r4, [r4, #32]
    if (*path == 0) {
 23f5138:	b923      	cbnz	r3, 23f5144 <_ZN9ExFatFile4openEPS_PKci+0x4c>
      return openRoot(dirFile->m_vol);
 23f513a:	4621      	mov	r1, r4
 23f513c:	4628      	mov	r0, r5
 23f513e:	f7ff fc9f 	bl	23f4a80 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f5142:	e7e6      	b.n	23f5112 <_ZN9ExFatFile4openEPS_PKci+0x1a>
  memset(this, 0, sizeof(ExFatFile));
 23f5144:	2238      	movs	r2, #56	; 0x38
 23f5146:	2100      	movs	r1, #0
 23f5148:	a808      	add	r0, sp, #32
 23f514a:	f007 fcac 	bl	23fcaa6 <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f514e:	2340      	movs	r3, #64	; 0x40
 23f5150:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
 23f5154:	2301      	movs	r3, #1
  m_vol = vol;
 23f5156:	9410      	str	r4, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
 23f5158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    dirFile = &tmpDir;
 23f515c:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f515e:	4628      	mov	r0, r5
 23f5160:	9901      	ldr	r1, [sp, #4]
 23f5162:	ab01      	add	r3, sp, #4
 23f5164:	aa03      	add	r2, sp, #12
 23f5166:	f7ff fc9f 	bl	23f4aa8 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f516a:	2800      	cmp	r0, #0
 23f516c:	d0d0      	beq.n	23f5110 <_ZN9ExFatFile4openEPS_PKci+0x18>
    if (*path == 0) {
 23f516e:	9b01      	ldr	r3, [sp, #4]
 23f5170:	781b      	ldrb	r3, [r3, #0]
 23f5172:	b1d3      	cbz	r3, 23f51aa <_ZN9ExFatFile4openEPS_PKci+0xb2>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
 23f5174:	2300      	movs	r3, #0
 23f5176:	4621      	mov	r1, r4
 23f5178:	4628      	mov	r0, r5
 23f517a:	aa03      	add	r2, sp, #12
 23f517c:	f7ff fe18 	bl	23f4db0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f5180:	2800      	cmp	r0, #0
 23f5182:	d0c5      	beq.n	23f5110 <_ZN9ExFatFile4openEPS_PKci+0x18>
      *this = *from;
 23f5184:	ae08      	add	r6, sp, #32
 23f5186:	462a      	mov	r2, r5
 23f5188:	4634      	mov	r4, r6
 23f518a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f518e:	4637      	mov	r7, r6
 23f5190:	6810      	ldr	r0, [r2, #0]
 23f5192:	6851      	ldr	r1, [r2, #4]
 23f5194:	3208      	adds	r2, #8
 23f5196:	c703      	stmia	r7!, {r0, r1}
 23f5198:	429a      	cmp	r2, r3
 23f519a:	463e      	mov	r6, r7
 23f519c:	d1f7      	bne.n	23f518e <_ZN9ExFatFile4openEPS_PKci+0x96>
 23f519e:	6810      	ldr	r0, [r2, #0]
 23f51a0:	6038      	str	r0, [r7, #0]
    close();
 23f51a2:	4628      	mov	r0, r5
 23f51a4:	f7ff fc62 	bl	23f4a6c <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f51a8:	e7d9      	b.n	23f515e <_ZN9ExFatFile4openEPS_PKci+0x66>
  return openPrivate(dirFile, &fname, oflag);
 23f51aa:	4643      	mov	r3, r8
 23f51ac:	4621      	mov	r1, r4
 23f51ae:	4628      	mov	r0, r5
 23f51b0:	aa03      	add	r2, sp, #12
 23f51b2:	f7ff fdfd 	bl	23f4db0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f51b6:	e7ac      	b.n	23f5112 <_ZN9ExFatFile4openEPS_PKci+0x1a>

023f51b8 <_ZN9ExFatFile4openEP11ExFatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f51b8:	b119      	cbz	r1, 23f51c2 <_ZN9ExFatFile4openEP11ExFatVolumePKci+0xa>
 23f51ba:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 23f51be:	f7ff bf9b 	b.w	23f50f8 <_ZN9ExFatFile4openEPS_PKci>
}
 23f51c2:	4608      	mov	r0, r1
 23f51c4:	4770      	bx	lr

023f51c6 <_ZL16exFatDirChecksumPKht>:
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f51c6:	2300      	movs	r3, #0
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
 23f51c8:	b510      	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
 23f51ca:	7804      	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f51cc:	084a      	lsrs	r2, r1, #1
 23f51ce:	ea42 31c1 	orr.w	r1, r2, r1, lsl #15
 23f51d2:	5cc2      	ldrb	r2, [r0, r3]
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f51d4:	2b01      	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f51d6:	fa12 f181 	uxtah	r1, r2, r1
 23f51da:	b289      	uxth	r1, r1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f51dc:	d108      	bne.n	23f51f0 <_ZL16exFatDirChecksumPKht+0x2a>
 23f51de:	2c85      	cmp	r4, #133	; 0x85
 23f51e0:	bf14      	ite	ne
 23f51e2:	2201      	movne	r2, #1
 23f51e4:	2203      	moveq	r2, #3
 23f51e6:	4413      	add	r3, r2
 23f51e8:	2b1f      	cmp	r3, #31
 23f51ea:	d9ef      	bls.n	23f51cc <_ZL16exFatDirChecksumPKht+0x6>
  }
  return checksum;
}
 23f51ec:	4608      	mov	r0, r1
 23f51ee:	bd10      	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f51f0:	2201      	movs	r2, #1
 23f51f2:	e7f8      	b.n	23f51e6 <_ZL16exFatDirChecksumPKht+0x20>

023f51f4 <_ZN14ExFatPartition9cacheSyncEv>:
  bool cacheSync() {
 23f51f4:	b510      	push	{r4, lr}
 23f51f6:	4604      	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
 23f51f8:	f001 f825 	bl	23f6246 <_ZN7FsCache4syncEv>
 23f51fc:	b150      	cbz	r0, 23f5214 <_ZN14ExFatPartition9cacheSyncEv+0x20>
 23f51fe:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f5202:	f001 f820 	bl	23f6246 <_ZN7FsCache4syncEv>
 23f5206:	b128      	cbz	r0, 23f5214 <_ZN14ExFatPartition9cacheSyncEv+0x20>
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f5208:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  }
 23f520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f5210:	f7fe bfec 	b.w	23f41ec <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f5214:	2000      	movs	r0, #0
 23f5216:	bd10      	pop	{r4, pc}

023f5218 <_ZN9ExFatFile10addClusterEv>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
 23f5218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f521a:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f521c:	69a1      	ldr	r1, [r4, #24]
 23f521e:	6a00      	ldr	r0, [r0, #32]
 23f5220:	b101      	cbz	r1, 23f5224 <_ZN9ExFatFile10addClusterEv+0xc>
 23f5222:	3101      	adds	r1, #1
 23f5224:	2201      	movs	r2, #1
 23f5226:	f000 fbac 	bl	23f5982 <_ZN14ExFatPartition10bitmapFindEmm>
  if (find < 2) {
 23f522a:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f522c:	4605      	mov	r5, r0
  if (find < 2) {
 23f522e:	d802      	bhi.n	23f5236 <_ZN9ExFatFile10addClusterEv+0x1e>
done:
  m_curCluster = find;
  return true;

fail:
  return false;
 23f5230:	2600      	movs	r6, #0
}
 23f5232:	4630      	mov	r0, r6
 23f5234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
 23f5236:	2301      	movs	r3, #1
 23f5238:	4601      	mov	r1, r0
 23f523a:	461a      	mov	r2, r3
 23f523c:	6a20      	ldr	r0, [r4, #32]
 23f523e:	f000 fbf5 	bl	23f5a2c <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f5242:	4606      	mov	r6, r0
 23f5244:	2800      	cmp	r0, #0
 23f5246:	d0f3      	beq.n	23f5230 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster == 0) {
 23f5248:	69a2      	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f524a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
 23f524e:	b92a      	cbnz	r2, 23f525c <_ZN9ExFatFile10addClusterEv+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f5250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23f5254:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
 23f5258:	61a5      	str	r5, [r4, #24]
  return true;
 23f525a:	e7ea      	b.n	23f5232 <_ZN9ExFatFile10addClusterEv+0x1a>
  if (isContiguous()) {
 23f525c:	0659      	lsls	r1, r3, #25
 23f525e:	d513      	bpl.n	23f5288 <_ZN9ExFatFile10addClusterEv+0x70>
    if (find == (m_curCluster + 1)) {
 23f5260:	3201      	adds	r2, #1
 23f5262:	42aa      	cmp	r2, r5
 23f5264:	d0f8      	beq.n	23f5258 <_ZN9ExFatFile10addClusterEv+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f5266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f526a:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f526c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f5270:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
 23f5272:	6a20      	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f5274:	428b      	cmp	r3, r1
 23f5276:	d907      	bls.n	23f5288 <_ZN9ExFatFile10addClusterEv+0x70>
      if (!m_vol->fatPut(c, c + 1)) {
 23f5278:	1c4f      	adds	r7, r1, #1
 23f527a:	463a      	mov	r2, r7
 23f527c:	f000 fc93 	bl	23f5ba6 <_ZN14ExFatPartition6fatPutEmm>
 23f5280:	2800      	cmp	r0, #0
 23f5282:	d0d5      	beq.n	23f5230 <_ZN9ExFatFile10addClusterEv+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f5284:	4639      	mov	r1, r7
 23f5286:	e7f3      	b.n	23f5270 <_ZN9ExFatFile10addClusterEv+0x58>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
 23f5288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f528c:	4629      	mov	r1, r5
 23f528e:	6a20      	ldr	r0, [r4, #32]
 23f5290:	f000 fc89 	bl	23f5ba6 <_ZN14ExFatPartition6fatPutEmm>
 23f5294:	2800      	cmp	r0, #0
 23f5296:	d0cb      	beq.n	23f5230 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster) {
 23f5298:	69a1      	ldr	r1, [r4, #24]
 23f529a:	2900      	cmp	r1, #0
 23f529c:	d0dc      	beq.n	23f5258 <_ZN9ExFatFile10addClusterEv+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
 23f529e:	462a      	mov	r2, r5
 23f52a0:	6a20      	ldr	r0, [r4, #32]
 23f52a2:	f000 fc80 	bl	23f5ba6 <_ZN14ExFatPartition6fatPutEmm>
 23f52a6:	2800      	cmp	r0, #0
 23f52a8:	d1d6      	bne.n	23f5258 <_ZN9ExFatFile10addClusterEv+0x40>
 23f52aa:	e7c1      	b.n	23f5230 <_ZN9ExFatFile10addClusterEv+0x18>

023f52ac <_ZN9ExFatFile6removeEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
 23f52ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f52ae:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f52b2:	4604      	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
 23f52b4:	079a      	lsls	r2, r3, #30
 23f52b6:	d401      	bmi.n	23f52bc <_ZN9ExFatFile6removeEv+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
 23f52b8:	2000      	movs	r0, #0
}
 23f52ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
 23f52bc:	69c1      	ldr	r1, [r0, #28]
 23f52be:	b9d1      	cbnz	r1, 23f52f6 <_ZN9ExFatFile6removeEv+0x4a>
bool ExFatFile::remove() {
 23f52c0:	2500      	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
 23f52c2:	2201      	movs	r2, #1
 23f52c4:	4620      	mov	r0, r4
 23f52c6:	b2e9      	uxtb	r1, r5
 23f52c8:	f7ff fbb4 	bl	23f4a34 <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f52cc:	2800      	cmp	r0, #0
 23f52ce:	d0f3      	beq.n	23f52b8 <_ZN9ExFatFile6removeEv+0xc>
    cache[0] &= 0x7F;
 23f52d0:	7803      	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f52d2:	3501      	adds	r5, #1
    cache[0] &= 0x7F;
 23f52d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f52d8:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f52da:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f52de:	b2eb      	uxtb	r3, r5
 23f52e0:	429a      	cmp	r2, r3
 23f52e2:	d2ee      	bcs.n	23f52c2 <_ZN9ExFatFile6removeEv+0x16>
  m_attributes = FILE_ATTR_CLOSED;
 23f52e4:	2300      	movs	r3, #0
  return m_vol->cacheSync();
 23f52e6:	6a20      	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
 23f52e8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f52ec:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
 23f52f0:	f7ff ff80 	bl	23f51f4 <_ZN14ExFatPartition9cacheSyncEv>
 23f52f4:	e7e1      	b.n	23f52ba <_ZN9ExFatFile6removeEv+0xe>
    if (isContiguous()) {
 23f52f6:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f52f8:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
 23f52fa:	d51b      	bpl.n	23f5334 <_ZN9ExFatFile6removeEv+0x88>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f52fc:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f5300:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f5304:	3a01      	subs	r2, #1
 23f5306:	f103 0309 	add.w	r3, r3, #9
 23f530a:	b2db      	uxtb	r3, r3
 23f530c:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
 23f5310:	f1c3 0720 	rsb	r7, r3, #32
 23f5314:	f1a3 0620 	sub.w	r6, r3, #32
 23f5318:	40da      	lsrs	r2, r3
 23f531a:	fa05 f707 	lsl.w	r7, r5, r7
 23f531e:	433a      	orrs	r2, r7
 23f5320:	fa25 f606 	lsr.w	r6, r5, r6
 23f5324:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
 23f5326:	2300      	movs	r3, #0
 23f5328:	3201      	adds	r2, #1
 23f532a:	f000 fb7f 	bl	23f5a2c <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(m_firstCluster)) {
 23f532e:	2800      	cmp	r0, #0
 23f5330:	d1c6      	bne.n	23f52c0 <_ZN9ExFatFile6removeEv+0x14>
 23f5332:	e7c1      	b.n	23f52b8 <_ZN9ExFatFile6removeEv+0xc>
 23f5334:	f000 fc54 	bl	23f5be0 <_ZN14ExFatPartition9freeChainEm>
 23f5338:	e7f9      	b.n	23f532e <_ZN9ExFatFile6removeEv+0x82>
	...

023f533c <_ZN9ExFatFile7syncDirEv>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
 23f533c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f5340:	2700      	movs	r7, #0
 23f5342:	4604      	mov	r4, r0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
 23f5344:	463e      	mov	r6, r7
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
 23f5346:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f5414 <_ZN9ExFatFile7syncDirEv+0xd8>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
 23f534a:	2200      	movs	r2, #0
 23f534c:	4620      	mov	r0, r4
 23f534e:	b2f9      	uxtb	r1, r7
 23f5350:	f7ff fb70 	bl	23f4a34 <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f5354:	4605      	mov	r5, r0
 23f5356:	2800      	cmp	r0, #0
 23f5358:	d03d      	beq.n	23f53d6 <_ZN9ExFatFile7syncDirEv+0x9a>
    switch (cache[0]) {
 23f535a:	7803      	ldrb	r3, [r0, #0]
 23f535c:	2bc0      	cmp	r3, #192	; 0xc0
 23f535e:	d044      	beq.n	23f53ea <_ZN9ExFatFile7syncDirEv+0xae>
 23f5360:	2bc1      	cmp	r3, #193	; 0xc1
 23f5362:	d021      	beq.n	23f53a8 <_ZN9ExFatFile7syncDirEv+0x6c>
 23f5364:	2b85      	cmp	r3, #133	; 0x85
 23f5366:	d136      	bne.n	23f53d6 <_ZN9ExFatFile7syncDirEv+0x9a>
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
 23f5368:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f536c:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f5370:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
 23f5372:	f8d8 3000 	ldr.w	r3, [r8]
 23f5376:	b183      	cbz	r3, 23f539a <_ZN9ExFatFile7syncDirEv+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
 23f5378:	f10d 0203 	add.w	r2, sp, #3
 23f537c:	f10d 0106 	add.w	r1, sp, #6
 23f5380:	a801      	add	r0, sp, #4
 23f5382:	4798      	blx	r3
          df->modifyTimeMs = ms10;
 23f5384:	f89d 3003 	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
 23f5388:	f8bd 2006 	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
 23f538c:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
 23f538e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f5392:	81aa      	strh	r2, [r5, #12]
 23f5394:	81eb      	strh	r3, [r5, #14]
 23f5396:	822a      	strh	r2, [r5, #16]
 23f5398:	826b      	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
 23f539a:	6a22      	ldr	r2, [r4, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f539c:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
 23f53a0:	f043 0301 	orr.w	r3, r3, #1
 23f53a4:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
 23f53a8:	4631      	mov	r1, r6
 23f53aa:	4628      	mov	r0, r5
 23f53ac:	f7ff ff0b 	bl	23f51c6 <_ZL16exFatDirChecksumPKht>
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f53b0:	3701      	adds	r7, #1
 23f53b2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f53b6:	b2fb      	uxtb	r3, r7
 23f53b8:	429a      	cmp	r2, r3
    checksum = exFatDirChecksum(cache, checksum);
 23f53ba:	4606      	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f53bc:	d2c5      	bcs.n	23f534a <_ZN9ExFatFile7syncDirEv+0xe>
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
 23f53be:	2201      	movs	r2, #1
 23f53c0:	6a20      	ldr	r0, [r4, #32]
 23f53c2:	f104 0124 	add.w	r1, r4, #36	; 0x24
 23f53c6:	f000 fb81 	bl	23f5acc <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
  if (!df) {
 23f53ca:	b120      	cbz	r0, 23f53d6 <_ZN9ExFatFile7syncDirEv+0x9a>
 23f53cc:	8046      	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
 23f53ce:	6a20      	ldr	r0, [r4, #32]
 23f53d0:	f7ff ff10 	bl	23f51f4 <_ZN14ExFatPartition9cacheSyncEv>
 23f53d4:	b930      	cbnz	r0, 23f53e4 <_ZN9ExFatFile7syncDirEv+0xa8>
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f53d6:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f53d8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f53dc:	f043 0301 	orr.w	r3, r3, #1
 23f53e0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 23f53e4:	b002      	add	sp, #8
 23f53e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
 23f53ea:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f53ee:	7843      	ldrb	r3, [r0, #1]
        if (isContiguous()) {
 23f53f0:	0652      	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f53f2:	bf4c      	ite	mi
 23f53f4:	f043 0302 	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
 23f53f8:	f003 03fd 	andpl.w	r3, r3, #253	; 0xfd
 23f53fc:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
 23f53fe:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f5402:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
 23f5406:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f5408:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
 23f540a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f540e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 23f5412:	e7c2      	b.n	23f539a <_ZN9ExFatFile7syncDirEv+0x5e>
 23f5414:	1007aea8 	.word	0x1007aea8

023f5418 <_ZN9ExFatFile4syncEv>:
bool ExFatFile::sync() {
 23f5418:	b510      	push	{r4, lr}
  if (!isOpen()) {
 23f541a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
 23f541e:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f5420:	b90b      	cbnz	r3, 23f5426 <_ZN9ExFatFile4syncEv+0xe>
    return true;
 23f5422:	2001      	movs	r0, #1
}
 23f5424:	bd10      	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f5426:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
 23f542a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f542e:	2a00      	cmp	r2, #0
 23f5430:	da07      	bge.n	23f5442 <_ZN9ExFatFile4syncEv+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f5432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f5436:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 23f543a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return syncDir();
 23f543e:	f7ff bf7d 	b.w	23f533c <_ZN9ExFatFile7syncDirEv>
  if (!m_vol->cacheSync()) {
 23f5442:	6a00      	ldr	r0, [r0, #32]
 23f5444:	f7ff fed6 	bl	23f51f4 <_ZN14ExFatPartition9cacheSyncEv>
 23f5448:	2800      	cmp	r0, #0
 23f544a:	d1ea      	bne.n	23f5422 <_ZN9ExFatFile4syncEv+0xa>
  m_error |= WRITE_ERROR;
 23f544c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f5450:	f043 0301 	orr.w	r3, r3, #1
 23f5454:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
 23f5458:	e7e4      	b.n	23f5424 <_ZN9ExFatFile4syncEv+0xc>

023f545a <_ZN9ExFatFile13addDirClusterEv>:
bool ExFatFile::addDirCluster() {
 23f545a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f545c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
 23f5460:	4604      	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f5462:	065a      	lsls	r2, r3, #25
 23f5464:	d52e      	bpl.n	23f54c4 <_ZN9ExFatFile13addDirClusterEv+0x6a>
 23f5466:	6a00      	ldr	r0, [r0, #32]
 23f5468:	f000 fc58 	bl	23f5d1c <_ZN14ExFatPartition10rootLengthEv>
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
 23f546c:	6a23      	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
 23f546e:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 23f5472:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
 23f5474:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 23f5478:	d247      	bcs.n	23f550a <_ZN9ExFatFile13addDirClusterEv+0xb0>
  if (!addCluster()) {
 23f547a:	4620      	mov	r0, r4
 23f547c:	f7ff fecc 	bl	23f5218 <_ZN9ExFatFile10addClusterEv>
 23f5480:	2800      	cmp	r0, #0
 23f5482:	d042      	beq.n	23f550a <_ZN9ExFatFile13addDirClusterEv+0xb0>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f5484:	2600      	movs	r6, #0
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f5486:	2701      	movs	r7, #1
  sector = m_vol->clusterStartSector(m_curCluster);
 23f5488:	6a23      	ldr	r3, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f548a:	69a5      	ldr	r5, [r4, #24]
 23f548c:	f893 2445 	ldrb.w	r2, [r3, #1093]	; 0x445
 23f5490:	3d02      	subs	r5, #2
 23f5492:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 23f5496:	4095      	lsls	r5, r2
 23f5498:	441d      	add	r5, r3
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f549a:	6a20      	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f549c:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f54a0:	fa07 f303 	lsl.w	r3, r7, r3
 23f54a4:	42b3      	cmp	r3, r6
 23f54a6:	d90f      	bls.n	23f54c8 <_ZN9ExFatFile13addDirClusterEv+0x6e>
    return m_dataCache.prepare(sector, option);
 23f54a8:	2205      	movs	r2, #5
 23f54aa:	19a9      	adds	r1, r5, r6
 23f54ac:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f54b0:	f000 feef 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!cache) {
 23f54b4:	b348      	cbz	r0, 23f550a <_ZN9ExFatFile13addDirClusterEv+0xb0>
    memset(cache, 0, m_vol->bytesPerSector());
 23f54b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f54ba:	2100      	movs	r1, #0
 23f54bc:	f007 faf3 	bl	23fcaa6 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f54c0:	3601      	adds	r6, #1
 23f54c2:	e7ea      	b.n	23f549a <_ZN9ExFatFile13addDirClusterEv+0x40>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f54c4:	6880      	ldr	r0, [r0, #8]
 23f54c6:	e7d1      	b.n	23f546c <_ZN9ExFatFile13addDirClusterEv+0x12>
  if (!isRoot()) {
 23f54c8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f54cc:	065b      	lsls	r3, r3, #25
 23f54ce:	d417      	bmi.n	23f5500 <_ZN9ExFatFile13addDirClusterEv+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f54d0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f54d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f54d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
 23f54dc:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f54e0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f54e4:	185b      	adds	r3, r3, r1
 23f54e6:	f142 0200 	adc.w	r2, r2, #0
 23f54ea:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
 23f54ee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23f54f2:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f54f6:	185b      	adds	r3, r3, r1
 23f54f8:	f142 0200 	adc.w	r2, r2, #0
 23f54fc:	e9c4 3204 	strd	r3, r2, [r4, #16]
  return sync();
 23f5500:	4620      	mov	r0, r4
}
 23f5502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
 23f5506:	f7ff bf87 	b.w	23f5418 <_ZN9ExFatFile4syncEv>
}
 23f550a:	2000      	movs	r0, #0
 23f550c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f550e <_ZN9ExFatFile5mkdirEPS_P8ExName_t>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f550e:	b510      	push	{r4, lr}
  if (!parent->isDir()) {
 23f5510:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f5514:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f5516:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f551a:	d01a      	beq.n	23f5552 <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f551c:	f640 2302 	movw	r3, #2562	; 0xa02
 23f5520:	f7ff fc46 	bl	23f4db0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f5524:	b1a8      	cbz	r0, 23f5552 <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f5526:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
 23f5528:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f552a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
 23f552e:	f7ff ff94 	bl	23f545a <_ZN9ExFatFile13addDirClusterEv>
 23f5532:	b170      	cbz	r0, 23f5552 <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_firstCluster = m_curCluster;
 23f5534:	69a3      	ldr	r3, [r4, #24]
  void rewind() { seekSet(0); }
 23f5536:	4620      	mov	r0, r4
 23f5538:	61e3      	str	r3, [r4, #28]
 23f553a:	2200      	movs	r2, #0
 23f553c:	2300      	movs	r3, #0
 23f553e:	f7ff fbc8 	bl	23f4cd2 <_ZN9ExFatFile7seekSetEy>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f5542:	23c1      	movs	r3, #193	; 0xc1
  return sync();
 23f5544:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f5546:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
 23f554a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return sync();
 23f554e:	f7ff bf63 	b.w	23f5418 <_ZN9ExFatFile4syncEv>
}
 23f5552:	2000      	movs	r0, #0
 23f5554:	bd10      	pop	{r4, pc}

023f5556 <_ZN9ExFatFile5mkdirEPS_PKcb>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f5556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f555a:	4698      	mov	r8, r3
  ExFatFile() {}
 23f555c:	2300      	movs	r3, #0
 23f555e:	b096      	sub	sp, #88	; 0x58
 23f5560:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
 23f5562:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f5566:	4605      	mov	r5, r0
 23f5568:	460c      	mov	r4, r1
 23f556a:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f556c:	b11b      	cbz	r3, 23f5576 <_ZN9ExFatFile5mkdirEPS_PKcb+0x20>
  return false;
 23f556e:	2000      	movs	r0, #0
}
 23f5570:	b016      	add	sp, #88	; 0x58
 23f5572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
 23f5576:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f557a:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f557e:	d0f6      	beq.n	23f556e <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  if (isDirSeparator(*path)) {
 23f5580:	7813      	ldrb	r3, [r2, #0]
 23f5582:	2b2f      	cmp	r3, #47	; 0x2f
 23f5584:	d10d      	bne.n	23f55a2 <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
    while (isDirSeparator(*path)) {
 23f5586:	9a01      	ldr	r2, [sp, #4]
 23f5588:	7813      	ldrb	r3, [r2, #0]
 23f558a:	2b2f      	cmp	r3, #47	; 0x2f
 23f558c:	d102      	bne.n	23f5594 <_ZN9ExFatFile5mkdirEPS_PKcb+0x3e>
      path++;
 23f558e:	3201      	adds	r2, #1
 23f5590:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f5592:	e7f8      	b.n	23f5586 <_ZN9ExFatFile5mkdirEPS_PKcb+0x30>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f5594:	6a21      	ldr	r1, [r4, #32]
 23f5596:	a808      	add	r0, sp, #32
 23f5598:	f7ff fa72 	bl	23f4a80 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f559c:	2800      	cmp	r0, #0
 23f559e:	d0e6      	beq.n	23f556e <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    parent = &tmpDir;
 23f55a0:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f55a2:	4628      	mov	r0, r5
 23f55a4:	9901      	ldr	r1, [sp, #4]
 23f55a6:	ab01      	add	r3, sp, #4
 23f55a8:	aa03      	add	r2, sp, #12
 23f55aa:	f7ff fa7d 	bl	23f4aa8 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f55ae:	2800      	cmp	r0, #0
 23f55b0:	d0dd      	beq.n	23f556e <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    if (!*path) {
 23f55b2:	9b01      	ldr	r3, [sp, #4]
 23f55b4:	781b      	ldrb	r3, [r3, #0]
 23f55b6:	b323      	cbz	r3, 23f5602 <_ZN9ExFatFile5mkdirEPS_PKcb+0xac>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
 23f55b8:	2300      	movs	r3, #0
 23f55ba:	4621      	mov	r1, r4
 23f55bc:	4628      	mov	r0, r5
 23f55be:	aa03      	add	r2, sp, #12
 23f55c0:	f7ff fbf6 	bl	23f4db0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f55c4:	b190      	cbz	r0, 23f55ec <_ZN9ExFatFile5mkdirEPS_PKcb+0x96>
      *this = *from;
 23f55c6:	ae08      	add	r6, sp, #32
 23f55c8:	462a      	mov	r2, r5
 23f55ca:	4634      	mov	r4, r6
 23f55cc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f55d0:	4637      	mov	r7, r6
 23f55d2:	6810      	ldr	r0, [r2, #0]
 23f55d4:	6851      	ldr	r1, [r2, #4]
 23f55d6:	3208      	adds	r2, #8
 23f55d8:	c703      	stmia	r7!, {r0, r1}
 23f55da:	429a      	cmp	r2, r3
 23f55dc:	463e      	mov	r6, r7
 23f55de:	d1f7      	bne.n	23f55d0 <_ZN9ExFatFile5mkdirEPS_PKcb+0x7a>
 23f55e0:	6810      	ldr	r0, [r2, #0]
 23f55e2:	6038      	str	r0, [r7, #0]
    close();
 23f55e4:	4628      	mov	r0, r5
 23f55e6:	f7ff fa41 	bl	23f4a6c <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f55ea:	e7da      	b.n	23f55a2 <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f55ec:	f1b8 0f00 	cmp.w	r8, #0
 23f55f0:	d0bd      	beq.n	23f556e <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
 23f55f2:	4621      	mov	r1, r4
 23f55f4:	4628      	mov	r0, r5
 23f55f6:	aa03      	add	r2, sp, #12
 23f55f8:	f7ff ff89 	bl	23f550e <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f55fc:	2800      	cmp	r0, #0
 23f55fe:	d1e2      	bne.n	23f55c6 <_ZN9ExFatFile5mkdirEPS_PKcb+0x70>
 23f5600:	e7b5      	b.n	23f556e <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  return mkdir(parent, &fname);
 23f5602:	4621      	mov	r1, r4
 23f5604:	4628      	mov	r0, r5
 23f5606:	aa03      	add	r2, sp, #12
 23f5608:	f7ff ff81 	bl	23f550e <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f560c:	e7b0      	b.n	23f5570 <_ZN9ExFatFile5mkdirEPS_PKcb+0x1a>

023f560e <_ZN9ExFatFile8truncateEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
 23f560e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f5610:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 23f5614:	4604      	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
 23f5616:	0793      	lsls	r3, r2, #30
 23f5618:	d402      	bmi.n	23f5620 <_ZN9ExFatFile8truncateEv+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
 23f561a:	2000      	movs	r0, #0
}
 23f561c:	b003      	add	sp, #12
 23f561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
 23f5620:	69c3      	ldr	r3, [r0, #28]
 23f5622:	2b00      	cmp	r3, #0
 23f5624:	d056      	beq.n	23f56d4 <_ZN9ExFatFile8truncateEv+0xc6>
  if (isContiguous()) {
 23f5626:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
 23f562a:	6981      	ldr	r1, [r0, #24]
  if (isContiguous()) {
 23f562c:	d037      	beq.n	23f569e <_ZN9ExFatFile8truncateEv+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f562e:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
 23f5632:	6a00      	ldr	r0, [r0, #32]
 23f5634:	3a01      	subs	r2, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f5636:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f563a:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 23f563e:	3509      	adds	r5, #9
 23f5640:	b2ed      	uxtb	r5, r5
 23f5642:	f1c5 0c20 	rsb	ip, r5, #32
 23f5646:	f1a5 0720 	sub.w	r7, r5, #32
 23f564a:	40ea      	lsrs	r2, r5
 23f564c:	fa06 fc0c 	lsl.w	ip, r6, ip
 23f5650:	ea42 020c 	orr.w	r2, r2, ip
 23f5654:	fa26 f707 	lsr.w	r7, r6, r7
 23f5658:	433a      	orrs	r2, r7
 23f565a:	3201      	adds	r2, #1
    if (m_curCluster) {
 23f565c:	b1a9      	cbz	r1, 23f568a <_ZN9ExFatFile8truncateEv+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
 23f565e:	3b01      	subs	r3, #1
      toFree = m_curCluster + 1;
 23f5660:	1c4d      	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
 23f5662:	1a5b      	subs	r3, r3, r1
      toFree = m_curCluster + 1;
 23f5664:	9501      	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
 23f5666:	441a      	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f5668:	b992      	cbnz	r2, 23f5690 <_ZN9ExFatFile8truncateEv+0x82>
  m_dataLength = m_curPosition;
 23f566a:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f566e:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
 23f5672:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f5676:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f567a:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f567c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f5680:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f5684:	f7ff fec8 	bl	23f5418 <_ZN9ExFatFile4syncEv>
 23f5688:	e7c8      	b.n	23f561c <_ZN9ExFatFile8truncateEv+0xe>
      toFree = m_firstCluster;
 23f568a:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f568c:	61e1      	str	r1, [r4, #28]
 23f568e:	e7eb      	b.n	23f5668 <_ZN9ExFatFile8truncateEv+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f5690:	2300      	movs	r3, #0
 23f5692:	9901      	ldr	r1, [sp, #4]
 23f5694:	f000 f9ca 	bl	23f5a2c <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(toFree)) {
 23f5698:	2800      	cmp	r0, #0
 23f569a:	d1e6      	bne.n	23f566a <_ZN9ExFatFile8truncateEv+0x5c>
 23f569c:	e7bd      	b.n	23f561a <_ZN9ExFatFile8truncateEv+0xc>
    if (m_curCluster) {
 23f569e:	b1b1      	cbz	r1, 23f56ce <_ZN9ExFatFile8truncateEv+0xc0>
      toFree = 0;
 23f56a0:	9201      	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
 23f56a2:	6a00      	ldr	r0, [r0, #32]
 23f56a4:	aa01      	add	r2, sp, #4
 23f56a6:	f000 fa2b 	bl	23f5b00 <_ZN14ExFatPartition6fatGetEmPm>
      if (fg < 0) {
 23f56aa:	2800      	cmp	r0, #0
 23f56ac:	dbb5      	blt.n	23f561a <_ZN9ExFatFile8truncateEv+0xc>
      if (fg) {
 23f56ae:	d007      	beq.n	23f56c0 <_ZN9ExFatFile8truncateEv+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
 23f56b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f56b4:	69a1      	ldr	r1, [r4, #24]
 23f56b6:	6a20      	ldr	r0, [r4, #32]
 23f56b8:	f000 fa75 	bl	23f5ba6 <_ZN14ExFatPartition6fatPutEmm>
 23f56bc:	2800      	cmp	r0, #0
 23f56be:	d0ac      	beq.n	23f561a <_ZN9ExFatFile8truncateEv+0xc>
    if (toFree) {
 23f56c0:	9901      	ldr	r1, [sp, #4]
 23f56c2:	2900      	cmp	r1, #0
 23f56c4:	d0d1      	beq.n	23f566a <_ZN9ExFatFile8truncateEv+0x5c>
      if (!m_vol->freeChain(toFree)) {
 23f56c6:	6a20      	ldr	r0, [r4, #32]
 23f56c8:	f000 fa8a 	bl	23f5be0 <_ZN14ExFatPartition9freeChainEm>
 23f56cc:	e7e4      	b.n	23f5698 <_ZN9ExFatFile8truncateEv+0x8a>
      toFree = m_firstCluster;
 23f56ce:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f56d0:	61c1      	str	r1, [r0, #28]
 23f56d2:	e7f5      	b.n	23f56c0 <_ZN9ExFatFile8truncateEv+0xb2>
    return true;
 23f56d4:	2001      	movs	r0, #1
 23f56d6:	e7a1      	b.n	23f561c <_ZN9ExFatFile8truncateEv+0xe>

023f56d8 <_ZN9ExFatFile5writeEPKvj>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f56d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f56dc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f56e0:	4688      	mov	r8, r1

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
 23f56e2:	0799      	lsls	r1, r3, #30
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f56e4:	4604      	mov	r4, r0
 23f56e6:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f56e8:	d566      	bpl.n	23f57b8 <_ZN9ExFatFile5writeEPKvj+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f56ea:	071a      	lsls	r2, r3, #28
 23f56ec:	d45e      	bmi.n	23f57ac <_ZN9ExFatFile5writeEPKvj+0xd4>
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f56ee:	464f      	mov	r7, r9
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f56f0:	f04f 0b01 	mov.w	fp, #1
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f56f4:	f104 0a18 	add.w	sl, r4, #24
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f56f8:	e9d4 5300 	ldrd	r5, r3, [r4]
  while (toWrite) {
 23f56fc:	2f00      	cmp	r7, #0
 23f56fe:	f000 80d9 	beq.w	23f58b4 <_ZN9ExFatFile5writeEPKvj+0x1dc>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f5702:	6a20      	ldr	r0, [r4, #32]
 23f5704:	f8d0 1438 	ldr.w	r1, [r0, #1080]	; 0x438
 23f5708:	400d      	ands	r5, r1
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f570a:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
 23f570e:	bb2d      	cbnz	r5, 23f575c <_ZN9ExFatFile5writeEPKvj+0x84>
      if (m_curCluster != 0) {
 23f5710:	69a1      	ldr	r1, [r4, #24]
 23f5712:	2900      	cmp	r1, #0
 23f5714:	d063      	beq.n	23f57de <_ZN9ExFatFile5writeEPKvj+0x106>
        if (isContiguous()) {
 23f5716:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f571a:	065b      	lsls	r3, r3, #25
 23f571c:	d558      	bpl.n	23f57d0 <_ZN9ExFatFile5writeEPKvj+0xf8>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
 23f571e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f5722:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
 23f5726:	3b01      	subs	r3, #1
 23f5728:	f100 0009 	add.w	r0, r0, #9
 23f572c:	b2c0      	uxtb	r0, r0
 23f572e:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 23f5732:	f1c0 0e20 	rsb	lr, r0, #32
 23f5736:	fa02 fe0e 	lsl.w	lr, r2, lr
 23f573a:	f1a0 0c20 	sub.w	ip, r0, #32
 23f573e:	40c3      	lsrs	r3, r0
 23f5740:	fa22 fc0c 	lsr.w	ip, r2, ip
 23f5744:	ea43 030e 	orr.w	r3, r3, lr
 23f5748:	69e2      	ldr	r2, [r4, #28]
 23f574a:	ea43 030c 	orr.w	r3, r3, ip
 23f574e:	4413      	add	r3, r2
          if (m_curCluster < lc) {
 23f5750:	428b      	cmp	r3, r1
 23f5752:	d83a      	bhi.n	23f57ca <_ZN9ExFatFile5writeEPKvj+0xf2>
          if (!addCluster()) {
 23f5754:	4620      	mov	r0, r4
 23f5756:	f7ff fd5f 	bl	23f5218 <_ZN9ExFatFile10addClusterEv>
 23f575a:	b368      	cbz	r0, 23f57b8 <_ZN9ExFatFile5writeEPKvj+0xe0>
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f575c:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f575e:	69a1      	ldr	r1, [r4, #24]
 23f5760:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
 23f5764:	3902      	subs	r1, #2
 23f5766:	4091      	lsls	r1, r2
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f5768:	ea4f 2e55 	mov.w	lr, r5, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f576c:	eb01 2555 	add.w	r5, r1, r5, lsr #9
 23f5770:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
 23f5774:	4429      	add	r1, r5
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
 23f5776:	2e00      	cmp	r6, #0
 23f5778:	d13d      	bne.n	23f57f6 <_ZN9ExFatFile5writeEPKvj+0x11e>
 23f577a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f577e:	d33a      	bcc.n	23f57f6 <_ZN9ExFatFile5writeEPKvj+0x11e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
 23f5780:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f5784:	f8d0 c218 	ldr.w	ip, [r0, #536]	; 0x218
 23f5788:	d279      	bcs.n	23f587e <_ZN9ExFatFile5writeEPKvj+0x1a6>
    if (isCached(sector)) {
 23f578a:	4561      	cmp	r1, ip
    m_sector = 0XFFFFFFFF;
 23f578c:	bf02      	ittt	eq
 23f578e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f5792:	f880 6210 	strbeq.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f5796:	f8c0 3218 	streq.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
 23f579a:	4642      	mov	r2, r8
 23f579c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f57a0:	f7fe fecb 	bl	23f453a <_ZN9SdSpiCard11writeSectorEmPKh>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f57a4:	b140      	cbz	r0, 23f57b8 <_ZN9ExFatFile5writeEPKvj+0xe0>
      n = m_vol->bytesPerSector();
 23f57a6:	f44f 7500 	mov.w	r5, #512	; 0x200
 23f57aa:	e04d      	b.n	23f5848 <_ZN9ExFatFile5writeEPKvj+0x170>
    if (!seekSet(m_validLength)) {
 23f57ac:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 23f57b0:	f7ff fa8f 	bl	23f4cd2 <_ZN9ExFatFile7seekSetEy>
 23f57b4:	2800      	cmp	r0, #0
 23f57b6:	d19a      	bne.n	23f56ee <_ZN9ExFatFile5writeEPKvj+0x16>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f57b8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f57bc:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f57c0:	f043 0301 	orr.w	r3, r3, #1
 23f57c4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f57c8:	e086      	b.n	23f58d8 <_ZN9ExFatFile5writeEPKvj+0x200>
            m_curCluster++;
 23f57ca:	3101      	adds	r1, #1
 23f57cc:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
 23f57ce:	e7c5      	b.n	23f575c <_ZN9ExFatFile5writeEPKvj+0x84>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f57d0:	4652      	mov	r2, sl
 23f57d2:	f000 f995 	bl	23f5b00 <_ZN14ExFatPartition6fatGetEmPm>
          if (fg < 0) {
 23f57d6:	2800      	cmp	r0, #0
 23f57d8:	dbee      	blt.n	23f57b8 <_ZN9ExFatFile5writeEPKvj+0xe0>
        if (fg == 0) {
 23f57da:	d0bb      	beq.n	23f5754 <_ZN9ExFatFile5writeEPKvj+0x7c>
 23f57dc:	e7be      	b.n	23f575c <_ZN9ExFatFile5writeEPKvj+0x84>
        if (m_firstCluster == 0) {
 23f57de:	69e3      	ldr	r3, [r4, #28]
 23f57e0:	b93b      	cbnz	r3, 23f57f2 <_ZN9ExFatFile5writeEPKvj+0x11a>
          if (!addCluster()) {
 23f57e2:	4620      	mov	r0, r4
 23f57e4:	f7ff fd18 	bl	23f5218 <_ZN9ExFatFile10addClusterEv>
 23f57e8:	2800      	cmp	r0, #0
 23f57ea:	d0e5      	beq.n	23f57b8 <_ZN9ExFatFile5writeEPKvj+0xe0>
          m_firstCluster = m_curCluster;
 23f57ec:	69a3      	ldr	r3, [r4, #24]
 23f57ee:	61e3      	str	r3, [r4, #28]
 23f57f0:	e7b4      	b.n	23f575c <_ZN9ExFatFile5writeEPKvj+0x84>
          m_curCluster = m_firstCluster;
 23f57f2:	61a3      	str	r3, [r4, #24]
 23f57f4:	e7b2      	b.n	23f575c <_ZN9ExFatFile5writeEPKvj+0x84>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f57f6:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
      if (n > toWrite) {
 23f57fa:	42bd      	cmp	r5, r7
 23f57fc:	bf28      	it	cs
 23f57fe:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
 23f5800:	2e00      	cmp	r6, #0
 23f5802:	d13a      	bne.n	23f587a <_ZN9ExFatFile5writeEPKvj+0x1a2>
 23f5804:	6963      	ldr	r3, [r4, #20]
 23f5806:	6862      	ldr	r2, [r4, #4]
 23f5808:	9301      	str	r3, [sp, #4]
 23f580a:	6823      	ldr	r3, [r4, #0]
 23f580c:	469c      	mov	ip, r3
 23f580e:	6923      	ldr	r3, [r4, #16]
 23f5810:	459c      	cmp	ip, r3
 23f5812:	9b01      	ldr	r3, [sp, #4]
 23f5814:	eb72 0303 	sbcs.w	r3, r2, r3
 23f5818:	d32f      	bcc.n	23f587a <_ZN9ExFatFile5writeEPKvj+0x1a2>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f581a:	2205      	movs	r2, #5
    return m_dataCache.prepare(sector, option);
 23f581c:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f5820:	f000 fd37 	bl	23f6292 <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f5824:	2800      	cmp	r0, #0
 23f5826:	d0c7      	beq.n	23f57b8 <_ZN9ExFatFile5writeEPKvj+0xe0>
      memcpy(dst, src, n);
 23f5828:	4430      	add	r0, r6
 23f582a:	462a      	mov	r2, r5
 23f582c:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f582e:	442e      	add	r6, r5
      memcpy(dst, src, n);
 23f5830:	f007 f92c 	bl	23fca8c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f5834:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f5838:	d106      	bne.n	23f5848 <_ZN9ExFatFile5writeEPKvj+0x170>
  bool dataCacheSync() { return m_dataCache.sync(); }
 23f583a:	6a20      	ldr	r0, [r4, #32]
 23f583c:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f5840:	f000 fd01 	bl	23f6246 <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
 23f5844:	2800      	cmp	r0, #0
 23f5846:	d0b7      	beq.n	23f57b8 <_ZN9ExFatFile5writeEPKvj+0xe0>
    m_curPosition += n;
 23f5848:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
 23f584c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
 23f5850:	18eb      	adds	r3, r5, r3
 23f5852:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
 23f5856:	4298      	cmp	r0, r3
 23f5858:	4191      	sbcs	r1, r2
    m_curPosition += n;
 23f585a:	e9c4 3200 	strd	r3, r2, [r4]
    src += n;
 23f585e:	44a8      	add	r8, r5
    toWrite -= n;
 23f5860:	eba7 0705 	sub.w	r7, r7, r5
    if (m_curPosition > m_validLength) {
 23f5864:	f4bf af48 	bcs.w	23f56f8 <_ZN9ExFatFile5writeEPKvj+0x20>
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f5868:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f586c:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f5870:	f061 017f 	orn	r1, r1, #127	; 0x7f
 23f5874:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f5878:	e73e      	b.n	23f56f8 <_ZN9ExFatFile5writeEPKvj+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f587a:	2201      	movs	r2, #1
 23f587c:	e7ce      	b.n	23f581c <_ZN9ExFatFile5writeEPKvj+0x144>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f587e:	fa0b f302 	lsl.w	r3, fp, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
 23f5882:	0a7d      	lsrs	r5, r7, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f5884:	eba3 030e 	sub.w	r3, r3, lr
 23f5888:	42ab      	cmp	r3, r5
 23f588a:	bf28      	it	cs
 23f588c:	462b      	movcs	r3, r5
    return sector <= m_sector && m_sector < (sector + count);
 23f588e:	4561      	cmp	r1, ip
      n = ns << m_vol->bytesPerSectorShift();
 23f5890:	ea4f 2543 	mov.w	r5, r3, lsl #9
 23f5894:	d808      	bhi.n	23f58a8 <_ZN9ExFatFile5writeEPKvj+0x1d0>
 23f5896:	18ca      	adds	r2, r1, r3
 23f5898:	4562      	cmp	r2, ip
    m_sector = 0XFFFFFFFF;
 23f589a:	bf82      	ittt	hi
 23f589c:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f58a0:	f880 6210 	strbhi.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f58a4:	f8c0 2218 	strhi.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
 23f58a8:	4642      	mov	r2, r8
 23f58aa:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f58ae:	f7fe fe16 	bl	23f44de <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f58b2:	e7c7      	b.n	23f5844 <_ZN9ExFatFile5writeEPKvj+0x16c>
  if (m_curPosition > m_dataLength) {
 23f58b4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 23f58b8:	42a9      	cmp	r1, r5
 23f58ba:	419a      	sbcs	r2, r3
 23f58bc:	d208      	bcs.n	23f58d0 <_ZN9ExFatFile5writeEPKvj+0x1f8>
    m_dataLength = m_curPosition;
 23f58be:	e9c4 5302 	strd	r5, r3, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f58c2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f58c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f58ca:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f58ce:	e003      	b.n	23f58d8 <_ZN9ExFatFile5writeEPKvj+0x200>
  } else if (FsDateTime::callback) {
 23f58d0:	4b03      	ldr	r3, [pc, #12]	; (23f58e0 <_ZN9ExFatFile5writeEPKvj+0x208>)
 23f58d2:	681b      	ldr	r3, [r3, #0]
 23f58d4:	2b00      	cmp	r3, #0
 23f58d6:	d1f4      	bne.n	23f58c2 <_ZN9ExFatFile5writeEPKvj+0x1ea>
}
 23f58d8:	4648      	mov	r0, r9
 23f58da:	b003      	add	sp, #12
 23f58dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f58e0:	1007aea8 	.word	0x1007aea8

023f58e4 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
 23f58e4:	b570      	push	{r4, r5, r6, lr}
  bool atEnd() { return next == end; }
 23f58e6:	6895      	ldr	r5, [r2, #8]
 23f58e8:	f101 041e 	add.w	r4, r1, #30
 23f58ec:	6853      	ldr	r3, [r2, #4]
  return *reinterpret_cast<const uint16_t*>(src);
 23f58ee:	f831 0f02 	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
 23f58f2:	429d      	cmp	r5, r3
 23f58f4:	d103      	bne.n	23f58fe <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x1a>
      return u == 0;
 23f58f6:	fab0 f080 	clz	r0, r0
 23f58fa:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
 23f58fc:	bd70      	pop	{r4, r5, r6, pc}
  char getch() { return atEnd() ? 0 : *next++; }
 23f58fe:	1c5e      	adds	r6, r3, #1
 23f5900:	6056      	str	r6, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f5902:	287e      	cmp	r0, #126	; 0x7e
 23f5904:	781b      	ldrb	r3, [r3, #0]
 23f5906:	d813      	bhi.n	23f5930 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f5908:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
 23f590c:	2e19      	cmp	r6, #25
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f590e:	b2c0      	uxtb	r0, r0
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f5910:	bf98      	it	ls
 23f5912:	3b20      	subls	r3, #32
 23f5914:	f1a0 0661 	sub.w	r6, r0, #97	; 0x61
 23f5918:	bf98      	it	ls
 23f591a:	b2db      	uxtbls	r3, r3
 23f591c:	2e19      	cmp	r6, #25
 23f591e:	bf9c      	itt	ls
 23f5920:	3820      	subls	r0, #32
 23f5922:	b2c0      	uxtbls	r0, r0
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f5924:	4298      	cmp	r0, r3
 23f5926:	d103      	bne.n	23f5930 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
  for (uint8_t i = 0; i < 15; i++) {
 23f5928:	42a1      	cmp	r1, r4
 23f592a:	d1df      	bne.n	23f58ec <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x8>
  return true;
 23f592c:	2001      	movs	r0, #1
 23f592e:	e7e5      	b.n	23f58fc <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>
      return false;
 23f5930:	2000      	movs	r0, #0
 23f5932:	e7e3      	b.n	23f58fc <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>

023f5934 <_ZN9ExFatFile8hashNameEP8ExName_t>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
 23f5934:	b530      	push	{r4, r5, lr}
  uint16_t hash = 0;
 23f5936:	2400      	movs	r4, #0
  void reset() { next = begin; }
 23f5938:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
 23f593a:	6888      	ldr	r0, [r1, #8]
  void reset() { next = begin; }
 23f593c:	604d      	str	r5, [r1, #4]
  bool atEnd() { return next == end; }
 23f593e:	684b      	ldr	r3, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
 23f5940:	4283      	cmp	r3, r0
 23f5942:	d015      	beq.n	23f5970 <_ZN9ExFatFile8hashNameEP8ExName_t+0x3c>
  char getch() { return atEnd() ? 0 : *next++; }
 23f5944:	1c5a      	adds	r2, r3, #1
 23f5946:	604a      	str	r2, [r1, #4]
 23f5948:	781a      	ldrb	r2, [r3, #0]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f594a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 23f594e:	2b19      	cmp	r3, #25
 23f5950:	bf98      	it	ls
 23f5952:	3a20      	subls	r2, #32
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f5954:	ea4f 0354 	mov.w	r3, r4, lsr #1
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f5958:	bf98      	it	ls
 23f595a:	b2d2      	uxtbls	r2, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f595c:	ea43 33c4 	orr.w	r3, r3, r4, lsl #15
 23f5960:	4413      	add	r3, r2
 23f5962:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1));
 23f5964:	f3c3 034e 	ubfx	r3, r3, #1, #15
 23f5968:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 23f596c:	b29c      	uxth	r4, r3
  while (!fname->atEnd()) {
 23f596e:	e7e6      	b.n	23f593e <_ZN9ExFatFile8hashNameEP8ExName_t+0xa>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
 23f5970:	1b40      	subs	r0, r0, r5
 23f5972:	60c8      	str	r0, [r1, #12]
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
 23f5974:	3801      	subs	r0, #1
  }
  return true;

fail:
  return false;
}
 23f5976:	28fe      	cmp	r0, #254	; 0xfe
 23f5978:	bf8c      	ite	hi
 23f597a:	2000      	movhi	r0, #0
 23f597c:	2001      	movls	r0, #1
  fname->nameHash = hash;
 23f597e:	820c      	strh	r4, [r1, #16]
}
 23f5980:	bd30      	pop	{r4, r5, pc}

023f5982 <_ZN14ExFatPartition10bitmapFindEmm>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
 23f5982:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5986:	4607      	mov	r7, r0
 23f5988:	4693      	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f598a:	468a      	mov	sl, r1
 23f598c:	b369      	cbz	r1, 23f59ea <_ZN14ExFatPartition10bitmapFindEmm+0x68>
 23f598e:	1e8d      	subs	r5, r1, #2
  if (start >= m_clusterCount) {
 23f5990:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  const uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
 23f5994:	2401      	movs	r4, #1
    start = 0;
 23f5996:	42ab      	cmp	r3, r5
 23f5998:	bf98      	it	ls
 23f599a:	2500      	movls	r5, #0
  uint32_t bgnAlloc = start;
 23f599c:	46a8      	mov	r8, r5
  uint32_t endAlloc = start;
 23f599e:	462e      	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
 23f59a0:	f005 0307 	and.w	r3, r5, #7
 23f59a4:	409c      	lsls	r4, r3
  size_t i = (start >> 3) & (sectorSize - 1);
 23f59a6:	f3c5 09c8 	ubfx	r9, r5, #3, #9
  uint8_t mask = 1 << (start & 7);
 23f59aa:	b2e4      	uxtb	r4, r4
  while (true) {
    uint32_t sector =
 23f59ac:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
 23f59b0:	2200      	movs	r2, #0
 23f59b2:	4638      	mov	r0, r7
 23f59b4:	eb01 3116 	add.w	r1, r1, r6, lsr #12
 23f59b8:	f000 fc6b 	bl	23f6292 <_ZN7FsCache7prepareEmh>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
 23f59bc:	b198      	cbz	r0, 23f59e6 <_ZN14ExFatPartition10bitmapFindEmm+0x64>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
 23f59be:	f810 3009 	ldrb.w	r3, [r0, r9]
 23f59c2:	4223      	tst	r3, r4
        endAlloc++;
 23f59c4:	f106 0601 	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
 23f59c8:	d112      	bne.n	23f59f0 <_ZN14ExFatPartition10bitmapFindEmm+0x6e>
          if ((endAlloc - bgnAlloc) == count) {
 23f59ca:	eba6 0208 	sub.w	r2, r6, r8
 23f59ce:	455a      	cmp	r2, fp
 23f59d0:	d10f      	bne.n	23f59f2 <_ZN14ExFatPartition10bitmapFindEmm+0x70>
            if (cluster == 0 && count == 1) {
 23f59d2:	f1ba 0f00 	cmp.w	sl, #0
 23f59d6:	d104      	bne.n	23f59e2 <_ZN14ExFatPartition10bitmapFindEmm+0x60>
 23f59d8:	f1bb 0f01 	cmp.w	fp, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
 23f59dc:	bf08      	it	eq
 23f59de:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            }
            return bgnAlloc + 2;
 23f59e2:	f108 0002 	add.w	r0, r8, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
 23f59e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f59ea:	f8d0 5420 	ldr.w	r5, [r0, #1056]	; 0x420
 23f59ee:	e7cf      	b.n	23f5990 <_ZN14ExFatPartition10bitmapFindEmm+0xe>
        endAlloc++;
 23f59f0:	46b0      	mov	r8, r6
        if (endAlloc == start) {
 23f59f2:	42b5      	cmp	r5, r6
 23f59f4:	d018      	beq.n	23f5a28 <_ZN14ExFatPartition10bitmapFindEmm+0xa6>
        if (endAlloc >= m_clusterCount) {
 23f59f6:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 23f59fa:	42b2      	cmp	r2, r6
 23f59fc:	d90e      	bls.n	23f5a1c <_ZN14ExFatPartition10bitmapFindEmm+0x9a>
      for (; mask; mask <<= 1) {
 23f59fe:	0064      	lsls	r4, r4, #1
 23f5a00:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23f5a04:	d1dd      	bne.n	23f59c2 <_ZN14ExFatPartition10bitmapFindEmm+0x40>
    for (; i < sectorSize; i++) {
 23f5a06:	f109 0301 	add.w	r3, r9, #1
 23f5a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    i = 0;
 23f5a0e:	f04f 0900 	mov.w	r9, #0
 23f5a12:	f04f 0401 	mov.w	r4, #1
    for (; i < sectorSize; i++) {
 23f5a16:	d2c9      	bcs.n	23f59ac <_ZN14ExFatPartition10bitmapFindEmm+0x2a>
 23f5a18:	4699      	mov	r9, r3
 23f5a1a:	e7d0      	b.n	23f59be <_ZN14ExFatPartition10bitmapFindEmm+0x3c>
          endAlloc = bgnAlloc = 0;
 23f5a1c:	f04f 0800 	mov.w	r8, #0
          i = sectorSize;
 23f5a20:	f44f 7900 	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
 23f5a24:	4646      	mov	r6, r8
 23f5a26:	e7ee      	b.n	23f5a06 <_ZN14ExFatPartition10bitmapFindEmm+0x84>
          return 1;
 23f5a28:	2001      	movs	r0, #1
 23f5a2a:	e7dc      	b.n	23f59e6 <_ZN14ExFatPartition10bitmapFindEmm+0x64>

023f5a2c <_ZN14ExFatPartition12bitmapModifyEmmb>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
 23f5a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
 23f5a30:	3902      	subs	r1, #2
                                  bool value) {
 23f5a32:	4605      	mov	r5, r0
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
 23f5a34:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
                                  bool value) {
 23f5a38:	461f      	mov	r7, r3
  if ((start + count) > m_clusterCount) {
 23f5a3a:	188b      	adds	r3, r1, r2
 23f5a3c:	4283      	cmp	r3, r0
                                  bool value) {
 23f5a3e:	4616      	mov	r6, r2
  if ((start + count) > m_clusterCount) {
 23f5a40:	d83f      	bhi.n	23f5ac2 <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f5a42:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
 23f5a46:	b3bf      	cbz	r7, 23f5ab8 <_ZN14ExFatPartition12bitmapModifyEmmb+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f5a48:	4291      	cmp	r1, r2
 23f5a4a:	d806      	bhi.n	23f5a5a <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
 23f5a4c:	4293      	cmp	r3, r2
 23f5a4e:	d904      	bls.n	23f5a5a <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
 23f5a50:	4283      	cmp	r3, r0
 23f5a52:	bf28      	it	cs
 23f5a54:	2300      	movcs	r3, #0
 23f5a56:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
 23f5a5a:	f04f 0901 	mov.w	r9, #1
 23f5a5e:	f001 0307 	and.w	r3, r1, #7
 23f5a62:	fa09 f903 	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f5a66:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
 23f5a6a:	fa5f f989 	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f5a6e:	eb03 3811 	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
 23f5a72:	f3c1 04c8 	ubfx	r4, r1, #3, #9
 23f5a76:	2201      	movs	r2, #1
 23f5a78:	4641      	mov	r1, r8
 23f5a7a:	4628      	mov	r0, r5
 23f5a7c:	4490      	add	r8, r2
 23f5a7e:	f000 fc08 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
 23f5a82:	b1f0      	cbz	r0, 23f5ac2 <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
 23f5a84:	4649      	mov	r1, r9
 23f5a86:	1903      	adds	r3, r0, r4
 23f5a88:	f500 7000 	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
 23f5a8c:	781a      	ldrb	r2, [r3, #0]
 23f5a8e:	420a      	tst	r2, r1
 23f5a90:	bf14      	ite	ne
 23f5a92:	2401      	movne	r4, #1
 23f5a94:	2400      	moveq	r4, #0
 23f5a96:	42bc      	cmp	r4, r7
 23f5a98:	d013      	beq.n	23f5ac2 <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
 23f5a9a:	404a      	eors	r2, r1
        if (--count == 0) {
 23f5a9c:	3e01      	subs	r6, #1
        cache[i] ^= mask;
 23f5a9e:	701a      	strb	r2, [r3, #0]
        if (--count == 0) {
 23f5aa0:	d012      	beq.n	23f5ac8 <_ZN14ExFatPartition12bitmapModifyEmmb+0x9c>
      for (; mask; mask <<= 1) {
 23f5aa2:	0049      	lsls	r1, r1, #1
 23f5aa4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 23f5aa8:	d1f0      	bne.n	23f5a8c <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
 23f5aaa:	460c      	mov	r4, r1
 23f5aac:	2101      	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
 23f5aae:	3301      	adds	r3, #1
 23f5ab0:	4298      	cmp	r0, r3
      mask = 1;
 23f5ab2:	4689      	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
 23f5ab4:	d1ea      	bne.n	23f5a8c <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
 23f5ab6:	e7de      	b.n	23f5a76 <_ZN14ExFatPartition12bitmapModifyEmmb+0x4a>
    if (start < m_bitmapStart) {
 23f5ab8:	4291      	cmp	r1, r2
      m_bitmapStart = start;
 23f5aba:	bf38      	it	cc
 23f5abc:	f8c5 1420 	strcc.w	r1, [r5, #1056]	; 0x420
 23f5ac0:	e7cb      	b.n	23f5a5a <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
  }

fail:
  return false;
 23f5ac2:	2000      	movs	r0, #0
}
 23f5ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
 23f5ac8:	2001      	movs	r0, #1
 23f5aca:	e7fb      	b.n	23f5ac4 <_ZN14ExFatPartition12bitmapModifyEmmb+0x98>

023f5acc <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(const DirPos_t* pos, uint8_t options) {
 23f5acc:	b538      	push	{r3, r4, r5, lr}
 23f5ace:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
 23f5ad0:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
 23f5ad4:	6849      	ldr	r1, [r1, #4]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f5ad6:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f5ada:	4019      	ands	r1, r3
 23f5adc:	6823      	ldr	r3, [r4, #0]
    return m_dataCache.prepare(sector, option);
 23f5ade:	f500 7004 	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f5ae2:	3b02      	subs	r3, #2
 23f5ae4:	40ab      	lsls	r3, r5
 23f5ae6:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 23f5aea:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
 23f5aee:	4419      	add	r1, r3
 23f5af0:	f000 fbcf 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
 23f5af4:	b118      	cbz	r0, 23f5afe <_ZN14ExFatPartition8dirCacheEPK8DirPos_th+0x32>
 23f5af6:	6863      	ldr	r3, [r4, #4]
 23f5af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f5afc:	4418      	add	r0, r3
}
 23f5afe:	bd38      	pop	{r3, r4, r5, pc}

023f5b00 <_ZN14ExFatPartition6fatGetEmPm>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f5b00:	b538      	push	{r3, r4, r5, lr}
  const uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
 23f5b02:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f5b06:	460c      	mov	r4, r1
  if (cluster > (m_clusterCount + 1)) {
 23f5b08:	3301      	adds	r3, #1
 23f5b0a:	428b      	cmp	r3, r1
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f5b0c:	4615      	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
 23f5b0e:	d202      	bcs.n	23f5b16 <_ZN14ExFatPartition6fatGetEmPm+0x16>
    DBG_FAIL_MACRO;
    return -1;
 23f5b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
 23f5b14:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f5b16:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
 23f5b1a:	2200      	movs	r2, #0
 23f5b1c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f5b20:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f5b24:	f000 fbb5 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f5b28:	2800      	cmp	r0, #0
 23f5b2a:	d0f1      	beq.n	23f5b10 <_ZN14ExFatPartition6fatGetEmPm+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
 23f5b2c:	00a4      	lsls	r4, r4, #2
 23f5b2e:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
 23f5b32:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
 23f5b34:	1c5a      	adds	r2, r3, #1
  return 1;
 23f5b36:	bf16      	itet	ne
 23f5b38:	2001      	movne	r0, #1
    return 0;
 23f5b3a:	2000      	moveq	r0, #0
  *value = next;
 23f5b3c:	602b      	strne	r3, [r5, #0]
  return 1;
 23f5b3e:	e7e9      	b.n	23f5b14 <_ZN14ExFatPartition6fatGetEmPm+0x14>

023f5b40 <_ZN14ExFatPartition9chainSizeEm>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f5b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f5b42:	4605      	mov	r5, r0
  uint32_t n = 0;
 23f5b44:	2400      	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f5b46:	9101      	str	r1, [sp, #4]
    status = fatGet(cluster, &cluster);
 23f5b48:	4628      	mov	r0, r5
 23f5b4a:	9901      	ldr	r1, [sp, #4]
 23f5b4c:	aa01      	add	r2, sp, #4
 23f5b4e:	f7ff ffd7 	bl	23f5b00 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) return 0;
 23f5b52:	2800      	cmp	r0, #0
 23f5b54:	db05      	blt.n	23f5b62 <_ZN14ExFatPartition9chainSizeEm+0x22>
    n++;
 23f5b56:	f104 0401 	add.w	r4, r4, #1
  } while (status);
 23f5b5a:	d1f5      	bne.n	23f5b48 <_ZN14ExFatPartition9chainSizeEm+0x8>
}
 23f5b5c:	4620      	mov	r0, r4
 23f5b5e:	b003      	add	sp, #12
 23f5b60:	bd30      	pop	{r4, r5, pc}
    if (status < 0) return 0;
 23f5b62:	2400      	movs	r4, #0
 23f5b64:	e7fa      	b.n	23f5b5c <_ZN14ExFatPartition9chainSizeEm+0x1c>

023f5b66 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
 23f5b66:	b570      	push	{r4, r5, r6, lr}
 23f5b68:	4606      	mov	r6, r0
 23f5b6a:	460d      	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f5b6c:	684b      	ldr	r3, [r1, #4]
 23f5b6e:	f8d0 4438 	ldr.w	r4, [r0, #1080]	; 0x438
 23f5b72:	401c      	ands	r4, r3
  pos->position += offset;
 23f5b74:	4413      	add	r3, r2
 23f5b76:	604b      	str	r3, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f5b78:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f5b7c:	4414      	add	r4, r2
 23f5b7e:	3309      	adds	r3, #9
  tmp >>= bytesPerClusterShift();
 23f5b80:	b2db      	uxtb	r3, r3
 23f5b82:	40dc      	lsrs	r4, r3
  while (tmp--) {
 23f5b84:	b16c      	cbz	r4, 23f5ba2 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3c>
    if (pos->isContiguous) {
 23f5b86:	7a2b      	ldrb	r3, [r5, #8]
      pos->cluster++;
 23f5b88:	6829      	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
 23f5b8a:	b11b      	cbz	r3, 23f5b94 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2e>
      pos->cluster++;
 23f5b8c:	3101      	adds	r1, #1
 23f5b8e:	6029      	str	r1, [r5, #0]
 23f5b90:	3c01      	subs	r4, #1
 23f5b92:	e7f7      	b.n	23f5b84 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
 23f5b94:	462a      	mov	r2, r5
 23f5b96:	4630      	mov	r0, r6
 23f5b98:	f7ff ffb2 	bl	23f5b00 <_ZN14ExFatPartition6fatGetEmPm>
      if (status != 1) {
 23f5b9c:	2801      	cmp	r0, #1
 23f5b9e:	d0f7      	beq.n	23f5b90 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2a>
}
 23f5ba0:	bd70      	pop	{r4, r5, r6, pc}
  return 1;
 23f5ba2:	2001      	movs	r0, #1
 23f5ba4:	e7fc      	b.n	23f5ba0 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3a>

023f5ba6 <_ZN14ExFatPartition6fatPutEmm>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f5ba6:	2901      	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f5ba8:	b538      	push	{r3, r4, r5, lr}
 23f5baa:	460c      	mov	r4, r1
 23f5bac:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f5bae:	d801      	bhi.n	23f5bb4 <_ZN14ExFatPartition6fatPutEmm+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
 23f5bb0:	2000      	movs	r0, #0
}
 23f5bb2:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f5bb4:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
 23f5bb8:	3301      	adds	r3, #1
 23f5bba:	428b      	cmp	r3, r1
 23f5bbc:	d3f8      	bcc.n	23f5bb0 <_ZN14ExFatPartition6fatPutEmm+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f5bbe:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
 23f5bc2:	2201      	movs	r2, #1
 23f5bc4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f5bc8:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f5bcc:	f000 fb61 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f5bd0:	2800      	cmp	r0, #0
 23f5bd2:	d0ed      	beq.n	23f5bb0 <_ZN14ExFatPartition6fatPutEmm+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
 23f5bd4:	00a4      	lsls	r4, r4, #2
 23f5bd6:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f5bda:	5105      	str	r5, [r0, r4]
  return true;
 23f5bdc:	2001      	movs	r0, #1
 23f5bde:	e7e8      	b.n	23f5bb2 <_ZN14ExFatPartition6fatPutEmm+0xc>

023f5be0 <_ZN14ExFatPartition9freeChainEm>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
 23f5be0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f5be4:	4607      	mov	r7, r0
 23f5be6:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
 23f5be8:	4688      	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
 23f5bea:	4621      	mov	r1, r4
 23f5bec:	4638      	mov	r0, r7
 23f5bee:	aa01      	add	r2, sp, #4
 23f5bf0:	f7ff ff86 	bl	23f5b00 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) {
 23f5bf4:	1e06      	subs	r6, r0, #0
 23f5bf6:	da04      	bge.n	23f5c02 <_ZN14ExFatPartition9freeChainEm+0x22>
  } while (status);

  return true;

fail:
  return false;
 23f5bf8:	2500      	movs	r5, #0
}
 23f5bfa:	4628      	mov	r0, r5
 23f5bfc:	b002      	add	sp, #8
 23f5bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
 23f5c02:	2200      	movs	r2, #0
 23f5c04:	4621      	mov	r1, r4
 23f5c06:	4638      	mov	r0, r7
 23f5c08:	f7ff ffcd 	bl	23f5ba6 <_ZN14ExFatPartition6fatPutEmm>
 23f5c0c:	4605      	mov	r5, r0
 23f5c0e:	2800      	cmp	r0, #0
 23f5c10:	d0f2      	beq.n	23f5bf8 <_ZN14ExFatPartition9freeChainEm+0x18>
    if (status == 0 || (cluster + 1) != next) {
 23f5c12:	1c62      	adds	r2, r4, #1
 23f5c14:	b116      	cbz	r6, 23f5c1c <_ZN14ExFatPartition9freeChainEm+0x3c>
 23f5c16:	9b01      	ldr	r3, [sp, #4]
 23f5c18:	4293      	cmp	r3, r2
 23f5c1a:	d00a      	beq.n	23f5c32 <_ZN14ExFatPartition9freeChainEm+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
 23f5c1c:	2300      	movs	r3, #0
 23f5c1e:	4641      	mov	r1, r8
 23f5c20:	4638      	mov	r0, r7
 23f5c22:	eba2 0208 	sub.w	r2, r2, r8
 23f5c26:	f7ff ff01 	bl	23f5a2c <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f5c2a:	2800      	cmp	r0, #0
 23f5c2c:	d0e4      	beq.n	23f5bf8 <_ZN14ExFatPartition9freeChainEm+0x18>
      start = next;
 23f5c2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    cluster = next;
 23f5c32:	9c01      	ldr	r4, [sp, #4]
  } while (status);
 23f5c34:	2e00      	cmp	r6, #0
 23f5c36:	d1d8      	bne.n	23f5bea <_ZN14ExFatPartition9freeChainEm+0xa>
 23f5c38:	e7df      	b.n	23f5bfa <_ZN14ExFatPartition9freeChainEm+0x1a>
	...

023f5c3c <_ZN14ExFatPartition4initEP9SdSpiCardhm>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f5c3c:	b570      	push	{r4, r5, r6, lr}
 23f5c3e:	461e      	mov	r6, r3
  pbs_t* pbs;
  const BpbExFat_t* bpb;
  const MbrSector_t* mbr;
  m_fatType = 0;
 23f5c40:	2300      	movs	r3, #0
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f5c42:	4604      	mov	r4, r0
  m_fatType = 0;
 23f5c44:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
  m_blockDev = dev;
 23f5c48:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
 23f5c4c:	6041      	str	r1, [r0, #4]
    m_status = 0;
 23f5c4e:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f5c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f5c54:	4615      	mov	r5, r2
 23f5c56:	60a0      	str	r0, [r4, #8]
    m_blockDev = blockDev;
 23f5c58:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
    m_status = 0;
 23f5c5c:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f5c60:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 23f5c64:	b1d2      	cbz	r2, 23f5c9c <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x60>
    if (part > 4) {
 23f5c66:	2a04      	cmp	r2, #4
 23f5c68:	d901      	bls.n	23f5c6e <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x32>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
 23f5c6a:	2000      	movs	r0, #0
}
 23f5c6c:	bd70      	pop	{r4, r5, r6, pc}
 23f5c6e:	461a      	mov	r2, r3
 23f5c70:	4619      	mov	r1, r3
 23f5c72:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f5c76:	f000 fb0c 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f5c7a:	2800      	cmp	r0, #0
 23f5c7c:	d0f5      	beq.n	23f5c6a <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f5c7e:	f105 5280 	add.w	r2, r5, #268435456	; 0x10000000
 23f5c82:	3a01      	subs	r2, #1
 23f5c84:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f5c88:	0113      	lsls	r3, r2, #4
 23f5c8a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f5c8e:	7911      	ldrb	r1, [r2, #4]
 23f5c90:	2900      	cmp	r1, #0
 23f5c92:	d0ea      	beq.n	23f5c6a <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
 23f5c94:	5cc3      	ldrb	r3, [r0, r3]
 23f5c96:	065b      	lsls	r3, r3, #25
 23f5c98:	d1e7      	bne.n	23f5c6a <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  return *reinterpret_cast<const uint32_t*>(src);
 23f5c9a:	6896      	ldr	r6, [r2, #8]
 23f5c9c:	2200      	movs	r2, #0
 23f5c9e:	4631      	mov	r1, r6
 23f5ca0:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f5ca4:	f000 faf5 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f5ca8:	4605      	mov	r5, r0
 23f5caa:	2800      	cmp	r0, #0
 23f5cac:	d0dd      	beq.n	23f5c6a <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
 23f5cae:	491a      	ldr	r1, [pc, #104]	; (23f5d18 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0xdc>)
 23f5cb0:	2205      	movs	r2, #5
 23f5cb2:	3003      	adds	r0, #3
 23f5cb4:	f006 ff91 	bl	23fcbda <strncmp>
 23f5cb8:	4601      	mov	r1, r0
 23f5cba:	2800      	cmp	r0, #0
 23f5cbc:	d1d5      	bne.n	23f5c6a <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
 23f5cbe:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 23f5cc2:	2b09      	cmp	r3, #9
 23f5cc4:	d1d1      	bne.n	23f5c6a <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
 23f5cc6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 23f5cc8:	4433      	add	r3, r6
 23f5cca:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
 23f5cce:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
 23f5cd0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
 23f5cd4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 23f5cd6:	4433      	add	r3, r6
 23f5cd8:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
 23f5cdc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
 23f5cde:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
 23f5ce2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
 23f5ce4:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f5ce8:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f5cec:	2501      	movs	r5, #1
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f5cee:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f5cf2:	3309      	adds	r3, #9
 23f5cf4:	fa05 f303 	lsl.w	r3, r5, r3
 23f5cf8:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
 23f5cfc:	3b01      	subs	r3, #1
 23f5cfe:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  m_bitmapStart = 0;
 23f5d02:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
 23f5d06:	462a      	mov	r2, r5
 23f5d08:	4620      	mov	r0, r4
 23f5d0a:	f7ff fe3a 	bl	23f5982 <_ZN14ExFatPartition10bitmapFindEmm>
  m_fatType = FAT_TYPE_EXFAT;
 23f5d0e:	2340      	movs	r3, #64	; 0x40
  return true;
 23f5d10:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
 23f5d12:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
 23f5d16:	e7a9      	b.n	23f5c6c <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x30>
 23f5d18:	023ff6b4 	.word	0x023ff6b4

023f5d1c <_ZN14ExFatPartition10rootLengthEv>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
 23f5d1c:	b510      	push	{r4, lr}
 23f5d1e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
 23f5d20:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
 23f5d24:	f7ff ff0c 	bl	23f5b40 <_ZN14ExFatPartition9chainSizeEm>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f5d28:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 23f5d2c:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
 23f5d2e:	b2db      	uxtb	r3, r3
}
 23f5d30:	4098      	lsls	r0, r3
 23f5d32:	bd10      	pop	{r4, pc}

023f5d34 <_ZN7FatFile10getLfnCharEPK8DirLfn_th>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(const DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
 23f5d34:	2a04      	cmp	r2, #4
 23f5d36:	d804      	bhi.n	23f5d42 <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
 23f5d38:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 23f5d3c:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
 23f5d40:	4770      	bx	lr
  } else if (i < 11) {
 23f5d42:	2a0a      	cmp	r2, #10
 23f5d44:	d803      	bhi.n	23f5d4e <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0x1a>
 23f5d46:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 23f5d4a:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
 23f5d4c:	4770      	bx	lr
  } else if (i < 13) {
 23f5d4e:	2a0c      	cmp	r2, #12
 23f5d50:	bf9a      	itte	ls
 23f5d52:	eb01 0142 	addls.w	r1, r1, r2, lsl #1
 23f5d56:	88c8      	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
  }
  DBG_HALT_IF(i >= 13);
  return 0;
 23f5d58:	2000      	movhi	r0, #0
}
 23f5d5a:	4770      	bx	lr

023f5d5c <_ZN12FatPartition6fatGetEmPm>:
  uint32_t sector;
  uint32_t next;
  const uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5d5c:	2901      	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f5d5e:	b570      	push	{r4, r5, r6, lr}
 23f5d60:	4605      	mov	r5, r0
 23f5d62:	460c      	mov	r4, r1
 23f5d64:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5d66:	d802      	bhi.n	23f5d6e <_ZN12FatPartition6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 23f5d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f5d6c:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5d6e:	69c3      	ldr	r3, [r0, #28]
 23f5d70:	428b      	cmp	r3, r1
 23f5d72:	d3f9      	bcc.n	23f5d68 <_ZN12FatPartition6fatGetEmPm+0xc>
  uint8_t fatType() const { return m_fatType; }
 23f5d74:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f5d76:	2b20      	cmp	r3, #32
 23f5d78:	d114      	bne.n	23f5da4 <_ZN12FatPartition6fatGetEmPm+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f5d7a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f5d7c:	2202      	movs	r2, #2
 23f5d7e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f5d82:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f5d86:	f000 fa84 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f5d8a:	2800      	cmp	r0, #0
 23f5d8c:	d0ec      	beq.n	23f5d68 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f5d8e:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
 23f5d90:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
 23f5d94:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
 23f5d96:	69ea      	ldr	r2, [r5, #28]
 23f5d98:	429a      	cmp	r2, r3
  return 1;
 23f5d9a:	bf2a      	itet	cs
 23f5d9c:	2001      	movcs	r0, #1
    return 0;
 23f5d9e:	2000      	movcc	r0, #0
  *value = next;
 23f5da0:	6033      	strcs	r3, [r6, #0]
  return 1;
 23f5da2:	e7e3      	b.n	23f5d6c <_ZN12FatPartition6fatGetEmPm+0x10>
  } else if (fatType() == 16) {
 23f5da4:	2b10      	cmp	r3, #16
 23f5da6:	d1df      	bne.n	23f5d68 <_ZN12FatPartition6fatGetEmPm+0xc>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f5da8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f5dac:	6981      	ldr	r1, [r0, #24]
 23f5dae:	2202      	movs	r2, #2
 23f5db0:	4419      	add	r1, r3
 23f5db2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f5db6:	f000 fa6c 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f5dba:	2800      	cmp	r0, #0
 23f5dbc:	d0d4      	beq.n	23f5d68 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f5dbe:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
 23f5dc0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f5dc4:	5b03      	ldrh	r3, [r0, r4]
 23f5dc6:	e7e6      	b.n	23f5d96 <_ZN12FatPartition6fatGetEmPm+0x3a>

023f5dc8 <_ZN12FatPartition6fatPutEmm>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5dc8:	2901      	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f5dca:	b538      	push	{r3, r4, r5, lr}
 23f5dcc:	460c      	mov	r4, r1
 23f5dce:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5dd0:	d801      	bhi.n	23f5dd6 <_ZN12FatPartition6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 23f5dd2:	2000      	movs	r0, #0
}
 23f5dd4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5dd6:	69c3      	ldr	r3, [r0, #28]
 23f5dd8:	428b      	cmp	r3, r1
 23f5dda:	d3fa      	bcc.n	23f5dd2 <_ZN12FatPartition6fatPutEmm+0xa>
  uint8_t fatType() const { return m_fatType; }
 23f5ddc:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f5dde:	2b20      	cmp	r3, #32
 23f5de0:	d10f      	bne.n	23f5e02 <_ZN12FatPartition6fatPutEmm+0x3a>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f5de2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f5de4:	2203      	movs	r2, #3
 23f5de6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f5dea:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f5dee:	f000 fa50 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f5df2:	2800      	cmp	r0, #0
 23f5df4:	d0ed      	beq.n	23f5dd2 <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f5df6:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
 23f5df8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f5dfc:	5105      	str	r5, [r0, r4]
    return true;
 23f5dfe:	2001      	movs	r0, #1
 23f5e00:	e7e8      	b.n	23f5dd4 <_ZN12FatPartition6fatPutEmm+0xc>
  if (fatType() == 16) {
 23f5e02:	2b10      	cmp	r3, #16
 23f5e04:	d1e5      	bne.n	23f5dd2 <_ZN12FatPartition6fatPutEmm+0xa>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f5e06:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f5e0a:	6981      	ldr	r1, [r0, #24]
 23f5e0c:	2203      	movs	r2, #3
 23f5e0e:	4419      	add	r1, r3
 23f5e10:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f5e14:	f000 fa3d 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f5e18:	2800      	cmp	r0, #0
 23f5e1a:	d0da      	beq.n	23f5dd2 <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f5e1c:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
 23f5e1e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f5e22:	5305      	strh	r5, [r0, r4]
 23f5e24:	e7eb      	b.n	23f5dfe <_ZN12FatPartition6fatPutEmm+0x36>

023f5e26 <_ZN12FatPartition15allocateClusterEmPm>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f5e26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
 23f5e2a:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f5e2c:	4605      	mov	r5, r0
  if (m_allocSearchStart < current) {
 23f5e2e:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f5e30:	460e      	mov	r6, r1
 23f5e32:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
 23f5e34:	d301      	bcc.n	23f5e3a <_ZN12FatPartition15allocateClusterEmPm+0x14>
      setStart = true;
 23f5e36:	2701      	movs	r7, #1
 23f5e38:	e001      	b.n	23f5e3e <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f5e3a:	460c      	mov	r4, r1
    setStart = false;
 23f5e3c:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
 23f5e3e:	69eb      	ldr	r3, [r5, #28]
    find++;
 23f5e40:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 23f5e42:	42a3      	cmp	r3, r4
 23f5e44:	d202      	bcs.n	23f5e4c <_ZN12FatPartition15allocateClusterEmPm+0x26>
      if (setStart) {
 23f5e46:	b9c7      	cbnz	r7, 23f5e7a <_ZN12FatPartition15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
 23f5e48:	68ec      	ldr	r4, [r5, #12]
 23f5e4a:	e7f4      	b.n	23f5e36 <_ZN12FatPartition15allocateClusterEmPm+0x10>
    if (find == current) {
 23f5e4c:	42a6      	cmp	r6, r4
 23f5e4e:	d014      	beq.n	23f5e7a <_ZN12FatPartition15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
 23f5e50:	4621      	mov	r1, r4
 23f5e52:	4628      	mov	r0, r5
 23f5e54:	aa01      	add	r2, sp, #4
 23f5e56:	f7ff ff81 	bl	23f5d5c <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f5e5a:	2800      	cmp	r0, #0
 23f5e5c:	db0d      	blt.n	23f5e7a <_ZN12FatPartition15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
 23f5e5e:	d0ee      	beq.n	23f5e3e <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f5e60:	9b01      	ldr	r3, [sp, #4]
 23f5e62:	2b00      	cmp	r3, #0
 23f5e64:	d1eb      	bne.n	23f5e3e <_ZN12FatPartition15allocateClusterEmPm+0x18>
  if (setStart) {
 23f5e66:	b107      	cbz	r7, 23f5e6a <_ZN12FatPartition15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
 23f5e68:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
 23f5e6a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 23f5e6e:	4621      	mov	r1, r4
 23f5e70:	4628      	mov	r0, r5
 23f5e72:	f7ff ffa9 	bl	23f5dc8 <_ZN12FatPartition6fatPutEmm>
  if (!fatPutEOC(find)) {
 23f5e76:	4607      	mov	r7, r0
 23f5e78:	b920      	cbnz	r0, 23f5e84 <_ZN12FatPartition15allocateClusterEmPm+0x5e>
  return false;
 23f5e7a:	2700      	movs	r7, #0
}
 23f5e7c:	4638      	mov	r0, r7
 23f5e7e:	b002      	add	sp, #8
 23f5e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
 23f5e84:	b916      	cbnz	r6, 23f5e8c <_ZN12FatPartition15allocateClusterEmPm+0x66>
  *next = find;
 23f5e86:	f8c8 4000 	str.w	r4, [r8]
  return true;
 23f5e8a:	e7f7      	b.n	23f5e7c <_ZN12FatPartition15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
 23f5e8c:	4622      	mov	r2, r4
 23f5e8e:	4631      	mov	r1, r6
 23f5e90:	4628      	mov	r0, r5
 23f5e92:	f7ff ff99 	bl	23f5dc8 <_ZN12FatPartition6fatPutEmm>
 23f5e96:	2800      	cmp	r0, #0
 23f5e98:	d1f5      	bne.n	23f5e86 <_ZN12FatPartition15allocateClusterEmPm+0x60>
 23f5e9a:	e7ee      	b.n	23f5e7a <_ZN12FatPartition15allocateClusterEmPm+0x54>

023f5e9c <_ZN12FatPartition9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
 23f5e9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f5e9e:	4605      	mov	r5, r0
 23f5ea0:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 23f5ea2:	4621      	mov	r1, r4
 23f5ea4:	4628      	mov	r0, r5
 23f5ea6:	aa01      	add	r2, sp, #4
 23f5ea8:	f7ff ff58 	bl	23f5d5c <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f5eac:	1e06      	subs	r6, r0, #0
 23f5eae:	db10      	blt.n	23f5ed2 <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 23f5eb0:	2200      	movs	r2, #0
 23f5eb2:	4621      	mov	r1, r4
 23f5eb4:	4628      	mov	r0, r5
 23f5eb6:	f7ff ff87 	bl	23f5dc8 <_ZN12FatPartition6fatPutEmm>
 23f5eba:	b150      	cbz	r0, 23f5ed2 <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
 23f5ebc:	68eb      	ldr	r3, [r5, #12]
 23f5ebe:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
 23f5ec0:	bf84      	itt	hi
 23f5ec2:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 23f5ec6:	60ec      	strhi	r4, [r5, #12]
    }
    cluster = next;
 23f5ec8:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
 23f5eca:	2e00      	cmp	r6, #0
 23f5ecc:	d1e9      	bne.n	23f5ea2 <_ZN12FatPartition9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 23f5ece:	b002      	add	sp, #8
 23f5ed0:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 23f5ed2:	2000      	movs	r0, #0
 23f5ed4:	e7fb      	b.n	23f5ece <_ZN12FatPartition9freeChainEm+0x32>

023f5ed6 <_ZN12FatPartition4initEP9SdSpiCardhm>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f5ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5ed8:	461d      	mov	r5, r3
  m_blockDev = dev;
  pbs_t* pbs;
  const BpbFat32_t* bpb;
  const MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
 23f5eda:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f5edc:	4604      	mov	r4, r0
  m_blockDev = dev;
 23f5ede:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
 23f5ee0:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
 23f5ee2:	2001      	movs	r0, #1
 23f5ee4:	60e0      	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
 23f5ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f5eea:	4616      	mov	r6, r2
  m_cache.init(dev);
 23f5eec:	f104 0724 	add.w	r7, r4, #36	; 0x24
    m_blockDev = blockDev;
 23f5ef0:	62a1      	str	r1, [r4, #40]	; 0x28
    m_status = 0;
 23f5ef2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f5ef6:	62e0      	str	r0, [r4, #44]	; 0x2c
    m_blockDev = blockDev;
 23f5ef8:	f8c4 1238 	str.w	r1, [r4, #568]	; 0x238
    m_status = 0;
 23f5efc:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f5f00:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
  if (part) {
 23f5f04:	b1ca      	cbz	r2, 23f5f3a <_ZN12FatPartition4initEP9SdSpiCardhm+0x64>
    if (part > 4) {
 23f5f06:	2a04      	cmp	r2, #4
 23f5f08:	d901      	bls.n	23f5f0e <_ZN12FatPartition4initEP9SdSpiCardhm+0x38>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
 23f5f0a:	2000      	movs	r0, #0
}
 23f5f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
 23f5f0e:	461a      	mov	r2, r3
 23f5f10:	4619      	mov	r1, r3
 23f5f12:	4638      	mov	r0, r7
 23f5f14:	f000 f9bd 	bl	23f6292 <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f5f18:	2800      	cmp	r0, #0
 23f5f1a:	d0f6      	beq.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f5f1c:	f106 5280 	add.w	r2, r6, #268435456	; 0x10000000
 23f5f20:	3a01      	subs	r2, #1
 23f5f22:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f5f26:	0113      	lsls	r3, r2, #4
 23f5f28:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f5f2c:	7911      	ldrb	r1, [r2, #4]
 23f5f2e:	2900      	cmp	r1, #0
 23f5f30:	d0eb      	beq.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f5f32:	5cc3      	ldrb	r3, [r0, r3]
 23f5f34:	065b      	lsls	r3, r3, #25
 23f5f36:	d1e8      	bne.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  return *reinterpret_cast<const uint32_t*>(src);
 23f5f38:	6895      	ldr	r5, [r2, #8]
 23f5f3a:	2200      	movs	r2, #0
 23f5f3c:	4629      	mov	r1, r5
 23f5f3e:	4638      	mov	r0, r7
 23f5f40:	f000 f9a7 	bl	23f6292 <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f5f44:	2800      	cmp	r0, #0
 23f5f46:	d0e0      	beq.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
 23f5f48:	7c03      	ldrb	r3, [r0, #16]
 23f5f4a:	2b02      	cmp	r3, #2
 23f5f4c:	d1dd      	bne.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f5f4e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 23f5f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 23f5f56:	d1d8      	bne.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f5f58:	7b41      	ldrb	r1, [r0, #13]
  m_sectorsPerClusterShift = 0;
 23f5f5a:	2609      	movs	r6, #9
  m_clusterSectorMask = m_sectorsPerCluster - 1;
 23f5f5c:	1e4b      	subs	r3, r1, #1
 23f5f5e:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
 23f5f60:	2300      	movs	r3, #0
 23f5f62:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f5f64:	2301      	movs	r3, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f5f66:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f5f68:	4299      	cmp	r1, r3
 23f5f6a:	d007      	beq.n	23f5f7c <_ZN12FatPartition4initEP9SdSpiCardhm+0xa6>
    if (tmp == 0) {
 23f5f6c:	3e01      	subs	r6, #1
 23f5f6e:	d0cc      	beq.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    m_sectorsPerClusterShift++;
 23f5f70:	79a2      	ldrb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f5f72:	005b      	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
 23f5f74:	3201      	adds	r2, #1
 23f5f76:	71a2      	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f5f78:	b2db      	uxtb	r3, r3
 23f5f7a:	e7f5      	b.n	23f5f68 <_ZN12FatPartition4initEP9SdSpiCardhm+0x92>
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
 23f5f7c:	8ac3      	ldrh	r3, [r0, #22]
 23f5f7e:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
 23f5f80:	b90b      	cbnz	r3, 23f5f86 <_ZN12FatPartition4initEP9SdSpiCardhm+0xb0>
 23f5f82:	6a43      	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
 23f5f84:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f5f86:	89c1      	ldrh	r1, [r0, #14]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f5f88:	6922      	ldr	r2, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f5f8a:	4429      	add	r1, r5
 23f5f8c:	61a1      	str	r1, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
 23f5f8e:	f8b0 3011 	ldrh.w	r3, [r0, #17]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f5f92:	eb01 0142 	add.w	r1, r1, r2, lsl #1
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
 23f5f96:	8123      	strh	r3, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
 23f5f98:	015b      	lsls	r3, r3, #5
 23f5f9a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f5f9e:	6221      	str	r1, [r4, #32]
      m_rootDirStart +
 23f5fa0:	eb01 2153 	add.w	r1, r1, r3, lsr #9
  m_dataStartSector =
 23f5fa4:	6161      	str	r1, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
 23f5fa6:	f8b0 3013 	ldrh.w	r3, [r0, #19]
  if (totalSectors == 0) {
 23f5faa:	b903      	cbnz	r3, 23f5fae <_ZN12FatPartition4initEP9SdSpiCardhm+0xd8>
  return *reinterpret_cast<const uint32_t*>(src);
 23f5fac:	6a03      	ldr	r3, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f5fae:	1a6d      	subs	r5, r5, r1
  countOfClusters >>= m_sectorsPerClusterShift;
 23f5fb0:	79a1      	ldrb	r1, [r4, #6]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f5fb2:	441d      	add	r5, r3
  countOfClusters >>= m_sectorsPerClusterShift;
 23f5fb4:	40cd      	lsrs	r5, r1
  m_lastCluster = countOfClusters + 1;
 23f5fb6:	1c6b      	adds	r3, r5, #1
 23f5fb8:	61e3      	str	r3, [r4, #28]
  if (countOfClusters < 4085) {
 23f5fba:	f640 73f4 	movw	r3, #4084	; 0xff4
 23f5fbe:	429d      	cmp	r5, r3
 23f5fc0:	d802      	bhi.n	23f5fc8 <_ZN12FatPartition4initEP9SdSpiCardhm+0xf2>
    m_fatType = 12;
 23f5fc2:	230c      	movs	r3, #12
 23f5fc4:	71e3      	strb	r3, [r4, #7]
 23f5fc6:	e7a0      	b.n	23f5f0a <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  } else if (countOfClusters < 65525) {
 23f5fc8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 23f5fcc:	429d      	cmp	r5, r3
 23f5fce:	bf89      	itett	hi
 23f5fd0:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 23f5fd2:	2310      	movls	r3, #16
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
 23f5fd4:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 23f5fd6:	2320      	movhi	r3, #32
  return true;
 23f5fd8:	2001      	movs	r0, #1
    m_fatType = 32;
 23f5fda:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
 23f5fdc:	6322      	str	r2, [r4, #48]	; 0x30
 23f5fde:	f8c4 2240 	str.w	r2, [r4, #576]	; 0x240
  return true;
 23f5fe2:	e793      	b.n	23f5f0c <_ZN12FatPartition4initEP9SdSpiCardhm+0x36>

023f5fe4 <_ZN10FsBaseFile4copyEPKS_>:
  return *this;
}
#endif  // FILE_COPY_CONSTRUCTOR_SELECT
//------------------------------------------------------------------------------
void FsBaseFile::copy(const FsBaseFile* from) {
  if (from != this) {
 23f5fe4:	4281      	cmp	r1, r0
void FsBaseFile::copy(const FsBaseFile* from) {
 23f5fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5fe8:	4605      	mov	r5, r0
 23f5fea:	460e      	mov	r6, r1
  if (from != this) {
 23f5fec:	d016      	beq.n	23f601c <_ZN10FsBaseFile4copyEPKS_+0x38>
    m_fFile = nullptr;
 23f5fee:	2700      	movs	r7, #0
    m_xFile = nullptr;
 23f5ff0:	e9c0 770e 	strd	r7, r7, [r0, #56]	; 0x38
    if (from->m_fFile) {
 23f5ff4:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 23f5ff6:	b194      	cbz	r4, 23f601e <_ZN10FsBaseFile4copyEPKS_+0x3a>
      m_fFile = new (m_fileMem) FatFile;
 23f5ff8:	4601      	mov	r1, r0
 23f5ffa:	2024      	movs	r0, #36	; 0x24
 23f5ffc:	f000 f887 	bl	23f610e <_ZnwjPm>
 23f6000:	4604      	mov	r4, r0
 23f6002:	b108      	cbz	r0, 23f6008 <_ZN10FsBaseFile4copyEPKS_+0x24>
 23f6004:	8007      	strh	r7, [r0, #0]
 23f6006:	7087      	strb	r7, [r0, #2]
 23f6008:	63ac      	str	r4, [r5, #56]	; 0x38
      m_fFile->copy(from->m_fFile);
 23f600a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    if (from != this) {
 23f600c:	42a5      	cmp	r5, r4
 23f600e:	d005      	beq.n	23f601c <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f6010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f6012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f6014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f6016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f6018:	682b      	ldr	r3, [r5, #0]
 23f601a:	6023      	str	r3, [r4, #0]
    } else if (from->m_xFile) {
      m_xFile = new (m_fileMem) ExFatFile;
      m_xFile->copy(from->m_xFile);
    }
  }
}
 23f601c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (from->m_xFile) {
 23f601e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 23f6020:	2b00      	cmp	r3, #0
 23f6022:	d0fb      	beq.n	23f601c <_ZN10FsBaseFile4copyEPKS_+0x38>
      m_xFile = new (m_fileMem) ExFatFile;
 23f6024:	4601      	mov	r1, r0
 23f6026:	2038      	movs	r0, #56	; 0x38
 23f6028:	f000 f871 	bl	23f610e <_ZnwjPm>
 23f602c:	b110      	cbz	r0, 23f6034 <_ZN10FsBaseFile4copyEPKS_+0x50>
  ExFatFile() {}
 23f602e:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
 23f6032:	8644      	strh	r4, [r0, #50]	; 0x32
 23f6034:	63e8      	str	r0, [r5, #60]	; 0x3c
      m_xFile->copy(from->m_xFile);
 23f6036:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    if (from != this) {
 23f6038:	4283      	cmp	r3, r0
 23f603a:	d0ef      	beq.n	23f601c <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f603c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 23f6040:	f853 1b04 	ldr.w	r1, [r3], #4
 23f6044:	4293      	cmp	r3, r2
 23f6046:	f840 1b04 	str.w	r1, [r0], #4
 23f604a:	d1f9      	bne.n	23f6040 <_ZN10FsBaseFile4copyEPKS_+0x5c>
 23f604c:	e7e6      	b.n	23f601c <_ZN10FsBaseFile4copyEPKS_+0x38>

023f604e <_ZN10FsBaseFile4moveEPS_>:
//------------------------------------------------------------------------------
void FsBaseFile::move(FsBaseFile* from) {
  if (from != this) {
 23f604e:	4281      	cmp	r1, r0
void FsBaseFile::move(FsBaseFile* from) {
 23f6050:	b510      	push	{r4, lr}
 23f6052:	460c      	mov	r4, r1
  if (from != this) {
 23f6054:	d004      	beq.n	23f6060 <_ZN10FsBaseFile4moveEPS_+0x12>
    copy(from);
 23f6056:	f7ff ffc5 	bl	23f5fe4 <_ZN10FsBaseFile4copyEPKS_>
    from->m_fFile = nullptr;
 23f605a:	2300      	movs	r3, #0
    from->m_xFile = nullptr;
 23f605c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  }
}
 23f6060:	bd10      	pop	{r4, pc}

023f6062 <_ZN10FsBaseFile5closeEv>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
 23f6062:	b510      	push	{r4, lr}
 23f6064:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f6066:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f6068:	b138      	cbz	r0, 23f607a <_ZN10FsBaseFile5closeEv+0x18>
 23f606a:	f7fd fa87 	bl	23f357c <_ZN7FatFile5closeEv>
  m_fFile = nullptr;
 23f606e:	2300      	movs	r3, #0
  m_xFile = nullptr;
  return rtn;
}
 23f6070:	f000 0001 	and.w	r0, r0, #1
  m_xFile = nullptr;
 23f6074:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
 23f6078:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f607a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f607c:	b110      	cbz	r0, 23f6084 <_ZN10FsBaseFile5closeEv+0x22>
 23f607e:	f7fe fcf5 	bl	23f4a6c <_ZN9ExFatFile5closeEv>
 23f6082:	e7f4      	b.n	23f606e <_ZN10FsBaseFile5closeEv+0xc>
 23f6084:	2001      	movs	r0, #1
 23f6086:	e7f2      	b.n	23f606e <_ZN10FsBaseFile5closeEv+0xc>

023f6088 <_ZN10FsBaseFile4openEP8FsVolumePKci>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
 23f6088:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f608a:	4604      	mov	r4, r0
  if (!vol) {
 23f608c:	460d      	mov	r5, r1
 23f608e:	b911      	cbnz	r1, 23f6096 <_ZN10FsBaseFile4openEP8FsVolumePKci+0xe>
    return false;
 23f6090:	2000      	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
 23f6092:	b002      	add	sp, #8
 23f6094:	bd70      	pop	{r4, r5, r6, pc}
 23f6096:	e9cd 2300 	strd	r2, r3, [sp]
  close();
 23f609a:	f7ff ffe2 	bl	23f6062 <_ZN10FsBaseFile5closeEv>
  if (vol->m_fVol) {
 23f609e:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f60a2:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
 23f60a6:	b1b6      	cbz	r6, 23f60d6 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4e>
    m_fFile = new (m_fileMem) FatFile;
 23f60a8:	4621      	mov	r1, r4
 23f60aa:	2024      	movs	r0, #36	; 0x24
 23f60ac:	f000 f82f 	bl	23f610e <_ZnwjPm>
 23f60b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f60b4:	b110      	cbz	r0, 23f60bc <_ZN10FsBaseFile4openEP8FsVolumePKci+0x34>
  FatFile() {}
 23f60b6:	2100      	movs	r1, #0
 23f60b8:	8001      	strh	r1, [r0, #0]
 23f60ba:	7081      	strb	r1, [r0, #2]
 23f60bc:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f60be:	b910      	cbnz	r0, 23f60c6 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x3e>
    m_fFile = nullptr;
 23f60c0:	2000      	movs	r0, #0
 23f60c2:	63a0      	str	r0, [r4, #56]	; 0x38
 23f60c4:	e7e5      	b.n	23f6092 <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f60c6:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
 23f60ca:	f7fd faa8 	bl	23f361e <_ZN7FatFile4openEP9FatVolumePKci>
 23f60ce:	2800      	cmp	r0, #0
 23f60d0:	d0f6      	beq.n	23f60c0 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x38>
      return true;
 23f60d2:	2001      	movs	r0, #1
 23f60d4:	e7dd      	b.n	23f6092 <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
  } else if (vol->m_xVol) {
 23f60d6:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f60da:	e9cd 2300 	strd	r2, r3, [sp]
 23f60de:	2900      	cmp	r1, #0
 23f60e0:	d0d6      	beq.n	23f6090 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
 23f60e2:	4621      	mov	r1, r4
 23f60e4:	2038      	movs	r0, #56	; 0x38
 23f60e6:	f000 f812 	bl	23f610e <_ZnwjPm>
 23f60ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f60ee:	b110      	cbz	r0, 23f60f6 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x6e>
  ExFatFile() {}
 23f60f0:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
 23f60f4:	8646      	strh	r6, [r0, #50]	; 0x32
 23f60f6:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f60f8:	b910      	cbnz	r0, 23f6100 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x78>
    m_xFile = nullptr;
 23f60fa:	2000      	movs	r0, #0
 23f60fc:	63e0      	str	r0, [r4, #60]	; 0x3c
 23f60fe:	e7c8      	b.n	23f6092 <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f6100:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f6104:	f7ff f858 	bl	23f51b8 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23f6108:	2800      	cmp	r0, #0
 23f610a:	d0f6      	beq.n	23f60fa <_ZN10FsBaseFile4openEP8FsVolumePKci+0x72>
 23f610c:	e7e1      	b.n	23f60d2 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4a>

023f610e <_ZnwjPm>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
 23f610e:	4608      	mov	r0, r1
 23f6110:	4770      	bx	lr
	...

023f6114 <_ZN8FsVolume5beginEP9SdSpiCardbhm>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
 23f6114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
 23f6118:	2600      	movs	r6, #0
                     uint32_t volStart) {
 23f611a:	4605      	mov	r5, r0
  m_fVol = nullptr;
 23f611c:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
                     uint32_t volStart) {
 23f6120:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
 23f6122:	4601      	mov	r1, r0
 23f6124:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
 23f6128:	4690      	mov	r8, r2
 23f612a:	469a      	mov	sl, r3
 23f612c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  m_xVol = new (m_volMem) ExFatVolume;
 23f6130:	f7ff ffed 	bl	23f610e <_ZnwjPm>
 23f6134:	4604      	mov	r4, r0
 23f6136:	b180      	cbz	r0, 23f615a <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x46>
 23f6138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_blockDev = blockDev;
 23f613c:	6046      	str	r6, [r0, #4]
    m_status = 0;
 23f613e:	7006      	strb	r6, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f6140:	6083      	str	r3, [r0, #8]
    m_blockDev = blockDev;
 23f6142:	f8c0 6214 	str.w	r6, [r0, #532]	; 0x214
    m_status = 0;
 23f6146:	f880 6210 	strb.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f614a:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
  ExFatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f614e:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
 23f6152:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
 23f6156:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
 23f615a:	f8c5 4484 	str.w	r4, [r5, #1156]	; 0x484
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
 23f615e:	b1ec      	cbz	r4, 23f619c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (!init(dev, part, volStart)) {
 23f6160:	464b      	mov	r3, r9
 23f6162:	4652      	mov	r2, sl
 23f6164:	4639      	mov	r1, r7
 23f6166:	4620      	mov	r0, r4
 23f6168:	f7ff fd68 	bl	23f5c3c <_ZN14ExFatPartition4initEP9SdSpiCardhm>
 23f616c:	b1b0      	cbz	r0, 23f619c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    m_vwd.close();
 23f616e:	f504 6689 	add.w	r6, r4, #1096	; 0x448
 23f6172:	4630      	mov	r0, r6
 23f6174:	f7fe fc7a 	bl	23f4a6c <_ZN9ExFatFile5closeEv>
    return m_vwd.openRoot(this);
 23f6178:	4621      	mov	r1, r4
 23f617a:	4630      	mov	r0, r6
 23f617c:	f7fe fc80 	bl	23f4a80 <_ZN9ExFatFile8openRootEP11ExFatVolume>
    if (!chdir()) {
 23f6180:	b160      	cbz	r0, 23f619c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (setCwv || !m_cwv) {
 23f6182:	4b21      	ldr	r3, [pc, #132]	; (23f6208 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf4>)
    if (setCwv || !m_cwv) {
 23f6184:	681a      	ldr	r2, [r3, #0]
 23f6186:	b902      	cbnz	r2, 23f618a <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x76>
      m_cwv = this;
 23f6188:	601c      	str	r4, [r3, #0]
  }
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
 23f618a:	4b20      	ldr	r3, [pc, #128]	; (23f620c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf8>)
 23f618c:	f1b8 0f00 	cmp.w	r8, #0
 23f6190:	d101      	bne.n	23f6196 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x82>
 23f6192:	681a      	ldr	r2, [r3, #0]
 23f6194:	b902      	cbnz	r2, 23f6198 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x84>
    m_cwv = this;
 23f6196:	601d      	str	r5, [r3, #0]
  }
  return true;
 23f6198:	2001      	movs	r0, #1
 23f619a:	e033      	b.n	23f6204 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf0>
  m_xVol = nullptr;
 23f619c:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
 23f619e:	4629      	mov	r1, r5
 23f61a0:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
 23f61a4:	f8c5 6484 	str.w	r6, [r5, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
 23f61a8:	f7ff ffb1 	bl	23f610e <_ZnwjPm>
 23f61ac:	4604      	mov	r4, r0
 23f61ae:	b180      	cbz	r0, 23f61d2 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xbe>
 23f61b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  FatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f61b4:	71c6      	strb	r6, [r0, #7]
    m_blockDev = blockDev;
 23f61b6:	6286      	str	r6, [r0, #40]	; 0x28
    m_status = 0;
 23f61b8:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f61bc:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_blockDev = blockDev;
 23f61be:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
    m_status = 0;
 23f61c2:	f880 6234 	strb.w	r6, [r0, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f61c6:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 23f61ca:	f8a0 6444 	strh.w	r6, [r0, #1092]	; 0x444
 23f61ce:	f880 6446 	strb.w	r6, [r0, #1094]	; 0x446
 23f61d2:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
 23f61d6:	b194      	cbz	r4, 23f61fe <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (!init(dev, part, volStart)) {
 23f61d8:	464b      	mov	r3, r9
 23f61da:	4652      	mov	r2, sl
 23f61dc:	4639      	mov	r1, r7
 23f61de:	4620      	mov	r0, r4
 23f61e0:	f7ff fe79 	bl	23f5ed6 <_ZN12FatPartition4initEP9SdSpiCardhm>
 23f61e4:	b158      	cbz	r0, 23f61fe <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    m_vwd.close();
 23f61e6:	f204 4644 	addw	r6, r4, #1092	; 0x444
 23f61ea:	4630      	mov	r0, r6
 23f61ec:	f7fd f9c6 	bl	23f357c <_ZN7FatFile5closeEv>
    return m_vwd.openRoot(this);
 23f61f0:	4621      	mov	r1, r4
 23f61f2:	4630      	mov	r0, r6
 23f61f4:	f7fc ffb5 	bl	23f3162 <_ZN7FatFile8openRootEP9FatVolume>
    if (!chdir()) {
 23f61f8:	b108      	cbz	r0, 23f61fe <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (setCwv || !m_cwv) {
 23f61fa:	4b05      	ldr	r3, [pc, #20]	; (23f6210 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xfc>)
 23f61fc:	e7c2      	b.n	23f6184 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x70>
  m_fVol = nullptr;
 23f61fe:	2000      	movs	r0, #0
 23f6200:	f8c5 0480 	str.w	r0, [r5, #1152]	; 0x480
}
 23f6204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f6208:	1007aea0 	.word	0x1007aea0
 23f620c:	1007aea4 	.word	0x1007aea4
 23f6210:	1007ae98 	.word	0x1007ae98

023f6214 <_ZN8FsVolume4openEPKci>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
 23f6214:	b538      	push	{r3, r4, r5, lr}
 23f6216:	4604      	mov	r4, r0
    Stream() {_timeout=1000;}
 23f6218:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 23f621c:	2000      	movs	r0, #0
 23f621e:	e9c4 0501 	strd	r0, r5, [r4, #4]
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23f6222:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23f6226:	4620      	mov	r0, r4
 23f6228:	4d03      	ldr	r5, [pc, #12]	; (23f6238 <_ZN8FsVolume4openEPKci+0x24>)
 23f622a:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
 23f622e:	f7ff ff2b 	bl	23f6088 <_ZN10FsBaseFile4openEP8FsVolumePKci>
  return tmpFile;
}
 23f6232:	4620      	mov	r0, r4
 23f6234:	bd38      	pop	{r3, r4, r5, pc}
 23f6236:	bf00      	nop
 23f6238:	023fe7b4 	.word	0x023fe7b4

023f623c <_Z8sdCsInith>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
 23f623c:	2101      	movs	r1, #1
 23f623e:	f003 bdd1 	b.w	23f9de4 <pinMode>

023f6242 <_Z9sdCsWritehb>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level ? HIGH : LOW);
 23f6242:	f003 bde0 	b.w	23f9e06 <digitalWrite>

023f6246 <_ZN7FsCache4syncEv>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
 23f6246:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 23f6248:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
 23f624a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 23f624c:	07da      	lsls	r2, r3, #31
 23f624e:	d51e      	bpl.n	23f628e <_ZN7FsCache4syncEv+0x48>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
 23f6250:	f100 0210 	add.w	r2, r0, #16
 23f6254:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 23f6258:	9201      	str	r2, [sp, #4]
 23f625a:	f7fe f96e 	bl	23f453a <_ZN9SdSpiCard11writeSectorEmPKh>
 23f625e:	9a01      	ldr	r2, [sp, #4]
 23f6260:	4605      	mov	r5, r0
 23f6262:	b918      	cbnz	r0, 23f626c <_ZN7FsCache4syncEv+0x26>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 23f6264:	2500      	movs	r5, #0
}
 23f6266:	4628      	mov	r0, r5
 23f6268:	b003      	add	sp, #12
 23f626a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 23f626c:	7823      	ldrb	r3, [r4, #0]
 23f626e:	079b      	lsls	r3, r3, #30
 23f6270:	d404      	bmi.n	23f627c <_ZN7FsCache4syncEv+0x36>
    m_status &= ~CACHE_STATUS_DIRTY;
 23f6272:	7823      	ldrb	r3, [r4, #0]
 23f6274:	f023 0301 	bic.w	r3, r3, #1
 23f6278:	7023      	strb	r3, [r4, #0]
 23f627a:	e7f4      	b.n	23f6266 <_ZN7FsCache4syncEv+0x20>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
 23f627c:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 23f6280:	6860      	ldr	r0, [r4, #4]
 23f6282:	4419      	add	r1, r3
 23f6284:	f7fe f959 	bl	23f453a <_ZN9SdSpiCard11writeSectorEmPKh>
 23f6288:	2800      	cmp	r0, #0
 23f628a:	d1f2      	bne.n	23f6272 <_ZN7FsCache4syncEv+0x2c>
 23f628c:	e7ea      	b.n	23f6264 <_ZN7FsCache4syncEv+0x1e>
  return true;
 23f628e:	2501      	movs	r5, #1
 23f6290:	e7e9      	b.n	23f6266 <_ZN7FsCache4syncEv+0x20>

023f6292 <_ZN7FsCache7prepareEmh>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f6292:	b570      	push	{r4, r5, r6, lr}
  if (!m_blockDev) {
 23f6294:	6843      	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f6296:	4604      	mov	r4, r0
 23f6298:	460e      	mov	r6, r1
 23f629a:	4615      	mov	r5, r2
  if (!m_blockDev) {
 23f629c:	b90b      	cbnz	r3, 23f62a2 <_ZN7FsCache7prepareEmh+0x10>
  return nullptr;
 23f629e:	2000      	movs	r0, #0
}
 23f62a0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
 23f62a2:	6883      	ldr	r3, [r0, #8]
 23f62a4:	428b      	cmp	r3, r1
 23f62a6:	d008      	beq.n	23f62ba <_ZN7FsCache7prepareEmh+0x28>
    if (!sync()) {
 23f62a8:	f7ff ffcd 	bl	23f6246 <_ZN7FsCache4syncEv>
 23f62ac:	2800      	cmp	r0, #0
 23f62ae:	d0f6      	beq.n	23f629e <_ZN7FsCache7prepareEmh+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
 23f62b0:	076b      	lsls	r3, r5, #29
 23f62b2:	d50a      	bpl.n	23f62ca <_ZN7FsCache7prepareEmh+0x38>
    m_status = 0;
 23f62b4:	2300      	movs	r3, #0
    m_sector = sector;
 23f62b6:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 23f62b8:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 23f62ba:	4620      	mov	r0, r4
 23f62bc:	7822      	ldrb	r2, [r4, #0]
 23f62be:	f005 0503 	and.w	r5, r5, #3
 23f62c2:	4315      	orrs	r5, r2
 23f62c4:	f800 5b10 	strb.w	r5, [r0], #16
  return m_buffer;
 23f62c8:	e7ea      	b.n	23f62a0 <_ZN7FsCache7prepareEmh+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
 23f62ca:	4631      	mov	r1, r6
 23f62cc:	6860      	ldr	r0, [r4, #4]
 23f62ce:	f104 0210 	add.w	r2, r4, #16
 23f62d2:	f7fe f8eb 	bl	23f44ac <_ZN9SdSpiCard10readSectorEmPh>
 23f62d6:	2800      	cmp	r0, #0
 23f62d8:	d1ec      	bne.n	23f62b4 <_ZN7FsCache7prepareEmh+0x22>
 23f62da:	e7e0      	b.n	23f629e <_ZN7FsCache7prepareEmh+0xc>

023f62dc <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
 23f62dc:	4770      	bx	lr

023f62de <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
 23f62de:	b510      	push	{r4, lr}
 23f62e0:	4604      	mov	r4, r0
}
 23f62e2:	2120      	movs	r1, #32
 23f62e4:	f7ee ff95 	bl	23e5212 <_ZdlPvj>
 23f62e8:	4620      	mov	r0, r4
 23f62ea:	bd10      	pop	{r4, pc}

023f62ec <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23f62ec:	b530      	push	{r4, r5, lr}
 23f62ee:	b085      	sub	sp, #20
 23f62f0:	4604      	mov	r4, r0
 23f62f2:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23f62f4:	b160      	cbz	r0, 23f6310 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23f62f6:	6840      	ldr	r0, [r0, #4]
 23f62f8:	b150      	cbz	r0, 23f6310 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23f62fa:	6885      	ldr	r5, [r0, #8]
 23f62fc:	b145      	cbz	r5, 23f6310 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23f62fe:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23f6302:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6306:	68c4      	ldr	r4, [r0, #12]
 23f6308:	466a      	mov	r2, sp
 23f630a:	ab01      	add	r3, sp, #4
 23f630c:	a902      	add	r1, sp, #8
 23f630e:	47a0      	blx	r4
    }
 23f6310:	b005      	add	sp, #20
 23f6312:	bd30      	pop	{r4, r5, pc}

023f6314 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f6314:	b530      	push	{r4, r5, lr}
 23f6316:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23f6318:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f631a:	b085      	sub	sp, #20
 23f631c:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f631e:	6883      	ldr	r3, [r0, #8]
 23f6320:	e9d1 4500 	ldrd	r4, r5, [r1]
 23f6324:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23f6328:	b90b      	cbnz	r3, 23f632e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23f632a:	f003 fe95 	bl	23fa058 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f632e:	68c3      	ldr	r3, [r0, #12]
 23f6330:	aa01      	add	r2, sp, #4
 23f6332:	a902      	add	r1, sp, #8
 23f6334:	4798      	blx	r3
      }
 23f6336:	b005      	add	sp, #20
 23f6338:	bd30      	pop	{r4, r5, pc}

023f633a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f633a:	2a01      	cmp	r2, #1
 23f633c:	d102      	bne.n	23f6344 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f633e:	6001      	str	r1, [r0, #0]
      }
 23f6340:	2000      	movs	r0, #0
 23f6342:	4770      	bx	lr
	  switch (__op)
 23f6344:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f6346:	bf04      	itt	eq
 23f6348:	680b      	ldreq	r3, [r1, #0]
 23f634a:	6003      	streq	r3, [r0, #0]
	      break;
 23f634c:	e7f8      	b.n	23f6340 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f634e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f634e:	6803      	ldr	r3, [r0, #0]
 23f6350:	6812      	ldr	r2, [r2, #0]
 23f6352:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f6356:	4718      	bx	r3

023f6358 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f6358:	b510      	push	{r4, lr}
      if (_M_manager)
 23f635a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f635c:	4604      	mov	r4, r0
      if (_M_manager)
 23f635e:	b113      	cbz	r3, 23f6366 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f6360:	2203      	movs	r2, #3
 23f6362:	4601      	mov	r1, r0
 23f6364:	4798      	blx	r3
    }
 23f6366:	4620      	mov	r0, r4
 23f6368:	bd10      	pop	{r4, pc}

023f636a <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23f636a:	b510      	push	{r4, lr}
            delete callableWrapper;
 23f636c:	4604      	mov	r4, r0
 23f636e:	b138      	cbz	r0, 23f6380 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23f6370:	f7ff fff2 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
 23f6374:	4620      	mov	r0, r4
        };
 23f6376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23f637a:	2110      	movs	r1, #16
 23f637c:	f7ee bf49 	b.w	23e5212 <_ZdlPvj>
        };
 23f6380:	bd10      	pop	{r4, pc}

023f6382 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6382:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f6384:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f6388:	4604      	mov	r4, r0
 23f638a:	4608      	mov	r0, r1
    attr.flags = 0;
 23f638c:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f638e:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f6390:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23f6394:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f6398:	460b      	mov	r3, r1
 23f639a:	aa02      	add	r2, sp, #8
 23f639c:	6821      	ldr	r1, [r4, #0]
 23f639e:	f001 f90d 	bl	23f75bc <log_message_v>
}
 23f63a2:	b00a      	add	sp, #40	; 0x28
 23f63a4:	bd10      	pop	{r4, pc}

023f63a6 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f63a6:	b40e      	push	{r1, r2, r3}
 23f63a8:	b503      	push	{r0, r1, lr}
 23f63aa:	ab03      	add	r3, sp, #12
 23f63ac:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23f63b0:	211e      	movs	r1, #30
    va_start(args, fmt);
 23f63b2:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23f63b4:	f7ff ffe5 	bl	23f6382 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f63b8:	b002      	add	sp, #8
 23f63ba:	f85d eb04 	ldr.w	lr, [sp], #4
 23f63be:	b003      	add	sp, #12
 23f63c0:	4770      	bx	lr

023f63c2 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f63c2:	b40e      	push	{r1, r2, r3}
 23f63c4:	b503      	push	{r0, r1, lr}
 23f63c6:	ab03      	add	r3, sp, #12
 23f63c8:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23f63cc:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23f63ce:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23f63d0:	f7ff ffd7 	bl	23f6382 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f63d4:	b002      	add	sp, #8
 23f63d6:	f85d eb04 	ldr.w	lr, [sp], #4
 23f63da:	b003      	add	sp, #12
 23f63dc:	4770      	bx	lr

023f63de <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
 23f63de:	b40e      	push	{r1, r2, r3}
 23f63e0:	b503      	push	{r0, r1, lr}
 23f63e2:	ab03      	add	r3, sp, #12
 23f63e4:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_TRACE, fmt, args);
 23f63e8:	2101      	movs	r1, #1
    va_start(args, fmt);
 23f63ea:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
 23f63ec:	f7ff ffc9 	bl	23f6382 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f63f0:	b002      	add	sp, #8
 23f63f2:	f85d eb04 	ldr.w	lr, [sp], #4
 23f63f6:	b003      	add	sp, #12
 23f63f8:	4770      	bx	lr
	...

023f63fc <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f63fc:	7202      	strb	r2, [r0, #8]
 23f63fe:	22ff      	movs	r2, #255	; 0xff
 23f6400:	8142      	strh	r2, [r0, #10]
 23f6402:	2200      	movs	r2, #0
 23f6404:	b510      	push	{r4, lr}
 23f6406:	e9c0 2203 	strd	r2, r2, [r0, #12]
 23f640a:	6142      	str	r2, [r0, #20]
 23f640c:	7602      	strb	r2, [r0, #24]
 23f640e:	61c2      	str	r2, [r0, #28]
    instance = this;
 23f6410:	4a02      	ldr	r2, [pc, #8]	; (23f641c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f6412:	4c03      	ldr	r4, [pc, #12]	; (23f6420 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
 23f6414:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f6416:	e9c0 4100 	strd	r4, r1, [r0]
}
 23f641a:	bd10      	pop	{r4, pc}
 23f641c:	1007aeb0 	.word	0x1007aeb0
 23f6420:	023ff890 	.word	0x023ff890

023f6424 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
 23f6424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f6428:	f89d 8020 	ldrb.w	r8, [sp, #32]
 23f642c:	4604      	mov	r4, r0
 23f642e:	4689      	mov	r9, r1
 23f6430:	4616      	mov	r6, r2
 23f6432:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
 23f6434:	f1b8 0f00 	cmp.w	r8, #0
 23f6438:	d002      	beq.n	23f6440 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
 23f643a:	6840      	ldr	r0, [r0, #4]
 23f643c:	f002 fa1e 	bl	23f887c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
 23f6440:	7a21      	ldrb	r1, [r4, #8]
 23f6442:	6860      	ldr	r0, [r4, #4]
 23f6444:	f002 fa0c 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
 23f6448:	6860      	ldr	r0, [r4, #4]
 23f644a:	4649      	mov	r1, r9
 23f644c:	6803      	ldr	r3, [r0, #0]
 23f644e:	689b      	ldr	r3, [r3, #8]
 23f6450:	4798      	blx	r3
    int stat = wire.endTransmission(false);
 23f6452:	2100      	movs	r1, #0
 23f6454:	6860      	ldr	r0, [r4, #4]
 23f6456:	f002 fa0a 	bl	23f886e <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
 23f645a:	4605      	mov	r5, r0
 23f645c:	bb00      	cbnz	r0, 23f64a0 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
 23f645e:	2301      	movs	r3, #1
 23f6460:	463a      	mov	r2, r7
 23f6462:	7a21      	ldrb	r1, [r4, #8]
 23f6464:	6860      	ldr	r0, [r4, #4]
 23f6466:	f002 f9e4 	bl	23f8832 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
 23f646a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
 23f646c:	4603      	mov	r3, r0
        if (count == num) {
 23f646e:	d109      	bne.n	23f6484 <_ZN6AB180513readRegistersEhPhjb+0x60>
 23f6470:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
 23f6472:	42be      	cmp	r6, r7
 23f6474:	d01c      	beq.n	23f64b0 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
 23f6476:	6860      	ldr	r0, [r4, #4]
 23f6478:	6803      	ldr	r3, [r0, #0]
 23f647a:	695b      	ldr	r3, [r3, #20]
 23f647c:	4798      	blx	r3
 23f647e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
 23f6482:	e7f6      	b.n	23f6472 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
 23f6484:	464a      	mov	r2, r9
 23f6486:	490b      	ldr	r1, [pc, #44]	; (23f64b4 <_ZN6AB180513readRegistersEhPhjb+0x90>)
 23f6488:	480b      	ldr	r0, [pc, #44]	; (23f64b8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
 23f648a:	f7ff ff9a 	bl	23f63c2 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
 23f648e:	f1b8 0f00 	cmp.w	r8, #0
 23f6492:	d002      	beq.n	23f649a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
 23f6494:	6860      	ldr	r0, [r4, #4]
 23f6496:	f002 f9fa 	bl	23f888e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
 23f649a:	4628      	mov	r0, r5
 23f649c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
 23f64a0:	4603      	mov	r3, r0
 23f64a2:	464a      	mov	r2, r9
 23f64a4:	4905      	ldr	r1, [pc, #20]	; (23f64bc <_ZN6AB180513readRegistersEhPhjb+0x98>)
 23f64a6:	4804      	ldr	r0, [pc, #16]	; (23f64b8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
 23f64a8:	f7ff ff8b 	bl	23f63c2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
 23f64ac:	2500      	movs	r5, #0
 23f64ae:	e7ee      	b.n	23f648e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
 23f64b0:	2501      	movs	r5, #1
 23f64b2:	e7ec      	b.n	23f648e <_ZN6AB180513readRegistersEhPhjb+0x6a>
 23f64b4:	023ff6ba 	.word	0x023ff6ba
 23f64b8:	1007aeac 	.word	0x1007aeac
 23f64bc:	023ff6df 	.word	0x023ff6df

023f64c0 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
 23f64c0:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
 23f64c2:	9300      	str	r3, [sp, #0]
 23f64c4:	2301      	movs	r3, #1
 23f64c6:	f7ff ffad 	bl	23f6424 <_ZN6AB180513readRegistersEhPhjb>
}
 23f64ca:	b003      	add	sp, #12
 23f64cc:	f85d fb04 	ldr.w	pc, [sp], #4

023f64d0 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
 23f64d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
 23f64d2:	8943      	ldrh	r3, [r0, #10]
bool AB1805::detectChip() {
 23f64d4:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
 23f64d6:	2bff      	cmp	r3, #255	; 0xff
 23f64d8:	d010      	beq.n	23f64fc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
 23f64da:	4e19      	ldr	r6, [pc, #100]	; (23f6540 <_ZN6AB180510detectChipEv+0x70>)
 23f64dc:	4d19      	ldr	r5, [pc, #100]	; (23f6544 <_ZN6AB180510detectChipEv+0x74>)
 23f64de:	f000 fcc3 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
 23f64e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23f64e6:	d209      	bcs.n	23f64fc <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
 23f64e8:	8960      	ldrh	r0, [r4, #10]
 23f64ea:	f003 fca5 	bl	23f9e38 <digitalRead>
 23f64ee:	2801      	cmp	r0, #1
 23f64f0:	d004      	beq.n	23f64fc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
 23f64f2:	4631      	mov	r1, r6
 23f64f4:	4628      	mov	r0, r5
 23f64f6:	f7ff ff56 	bl	23f63a6 <_ZNK5spark6Logger4infoEPKcz>
 23f64fa:	e7f0      	b.n	23f64de <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
 23f64fc:	2301      	movs	r3, #1
 23f64fe:	2128      	movs	r1, #40	; 0x28
 23f6500:	4620      	mov	r0, r4
 23f6502:	f10d 0207 	add.w	r2, sp, #7
 23f6506:	f7ff ffdb 	bl	23f64c0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
 23f650a:	b930      	cbnz	r0, 23f651a <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
 23f650c:	480d      	ldr	r0, [pc, #52]	; (23f6544 <_ZN6AB180510detectChipEv+0x74>)
 23f650e:	490e      	ldr	r1, [pc, #56]	; (23f6548 <_ZN6AB180510detectChipEv+0x78>)
 23f6510:	f7ff ff49 	bl	23f63a6 <_ZNK5spark6Logger4infoEPKcz>
 23f6514:	2000      	movs	r0, #0
}
 23f6516:	b002      	add	sp, #8
 23f6518:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
 23f651a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f651e:	2b18      	cmp	r3, #24
 23f6520:	d1f4      	bne.n	23f650c <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
 23f6522:	2301      	movs	r3, #1
 23f6524:	2129      	movs	r1, #41	; 0x29
 23f6526:	4620      	mov	r0, r4
 23f6528:	f10d 0207 	add.w	r2, sp, #7
 23f652c:	f7ff ffc8 	bl	23f64c0 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
 23f6530:	2800      	cmp	r0, #0
 23f6532:	d0eb      	beq.n	23f650c <_ZN6AB180510detectChipEv+0x3c>
 23f6534:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f6538:	2b05      	cmp	r3, #5
 23f653a:	d1e7      	bne.n	23f650c <_ZN6AB180510detectChipEv+0x3c>
 23f653c:	e7eb      	b.n	23f6516 <_ZN6AB180510detectChipEv+0x46>
 23f653e:	bf00      	nop
 23f6540:	023ff703 	.word	0x023ff703
 23f6544:	1007aeac 	.word	0x1007aeac
 23f6548:	023ff718 	.word	0x023ff718

023f654c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
 23f654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f6550:	f89d 8018 	ldrb.w	r8, [sp, #24]
 23f6554:	4604      	mov	r4, r0
 23f6556:	460f      	mov	r7, r1
 23f6558:	4615      	mov	r5, r2
 23f655a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
 23f655c:	f1b8 0f00 	cmp.w	r8, #0
 23f6560:	d002      	beq.n	23f6568 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
 23f6562:	6840      	ldr	r0, [r0, #4]
 23f6564:	f002 f98a 	bl	23f887c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
 23f6568:	7a21      	ldrb	r1, [r4, #8]
 23f656a:	6860      	ldr	r0, [r4, #4]
 23f656c:	f002 f978 	bl	23f8860 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
 23f6570:	6860      	ldr	r0, [r4, #4]
 23f6572:	4639      	mov	r1, r7
 23f6574:	6803      	ldr	r3, [r0, #0]
 23f6576:	442e      	add	r6, r5
 23f6578:	689b      	ldr	r3, [r3, #8]
 23f657a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
 23f657c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
 23f657e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
 23f6580:	d005      	beq.n	23f658e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
 23f6582:	6803      	ldr	r3, [r0, #0]
 23f6584:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f6588:	689b      	ldr	r3, [r3, #8]
 23f658a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
 23f658c:	e7f6      	b.n	23f657c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
 23f658e:	2101      	movs	r1, #1
 23f6590:	f002 f96d 	bl	23f886e <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
 23f6594:	4603      	mov	r3, r0
 23f6596:	b170      	cbz	r0, 23f65b6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
 23f6598:	463a      	mov	r2, r7
 23f659a:	4908      	ldr	r1, [pc, #32]	; (23f65bc <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
 23f659c:	4808      	ldr	r0, [pc, #32]	; (23f65c0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
 23f659e:	f7ff ff10 	bl	23f63c2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
 23f65a2:	2500      	movs	r5, #0
    }

    if (lock) {
 23f65a4:	f1b8 0f00 	cmp.w	r8, #0
 23f65a8:	d002      	beq.n	23f65b0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
 23f65aa:	6860      	ldr	r0, [r4, #4]
 23f65ac:	f002 f96f 	bl	23f888e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
 23f65b0:	4628      	mov	r0, r5
 23f65b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
 23f65b6:	2501      	movs	r5, #1
 23f65b8:	e7f4      	b.n	23f65a4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
 23f65ba:	bf00      	nop
 23f65bc:	023ff725 	.word	0x023ff725
 23f65c0:	1007aeac 	.word	0x1007aeac

023f65c4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
 23f65c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f65c6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
 23f65ca:	9300      	str	r3, [sp, #0]
 23f65cc:	f10d 020f 	add.w	r2, sp, #15
 23f65d0:	2301      	movs	r3, #1
 23f65d2:	f7ff ffbb 	bl	23f654c <_ZN6AB180514writeRegistersEhPKhjb>
}
 23f65d6:	b005      	add	sp, #20
 23f65d8:	f85d fb04 	ldr.w	pc, [sp], #4

023f65dc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
 23f65dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f65de:	460c      	mov	r4, r1
 23f65e0:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
 23f65e2:	460a      	mov	r2, r1
 23f65e4:	481a      	ldr	r0, [pc, #104]	; (23f6650 <_ZN6AB18056setWDTEi+0x74>)
 23f65e6:	491b      	ldr	r1, [pc, #108]	; (23f6654 <_ZN6AB18056setWDTEi+0x78>)
 23f65e8:	f7ff fedd 	bl	23f63a6 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
 23f65ec:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
 23f65ee:	bfb8      	it	lt
 23f65f0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
 23f65f2:	b97c      	cbnz	r4, 23f6614 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
 23f65f4:	2301      	movs	r3, #1
 23f65f6:	4622      	mov	r2, r4
 23f65f8:	211b      	movs	r1, #27
 23f65fa:	4628      	mov	r0, r5
 23f65fc:	f7ff ffe2 	bl	23f65c4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
 23f6600:	4915      	ldr	r1, [pc, #84]	; (23f6658 <_ZN6AB18056setWDTEi+0x7c>)
 23f6602:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
 23f6604:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
 23f6606:	4812      	ldr	r0, [pc, #72]	; (23f6650 <_ZN6AB18056setWDTEi+0x74>)
 23f6608:	f7ff fee9 	bl	23f63de <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
 23f660c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
 23f660e:	616c      	str	r4, [r5, #20]
}
 23f6610:	4630      	mov	r0, r6
 23f6612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
 23f6614:	2c03      	cmp	r4, #3
 23f6616:	dd19      	ble.n	23f664c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
 23f6618:	10a7      	asrs	r7, r4, #2
 23f661a:	2f1f      	cmp	r7, #31
 23f661c:	bfa8      	it	ge
 23f661e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 23f6620:	00ba      	lsls	r2, r7, #2
 23f6622:	f062 027c 	orn	r2, r2, #124	; 0x7c
 23f6626:	2301      	movs	r3, #1
 23f6628:	211b      	movs	r1, #27
 23f662a:	b2d2      	uxtb	r2, r2
 23f662c:	4628      	mov	r0, r5
 23f662e:	f7ff ffc9 	bl	23f65c4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
 23f6632:	463a      	mov	r2, r7
 23f6634:	4603      	mov	r3, r0
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 23f6636:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
 23f6638:	4908      	ldr	r1, [pc, #32]	; (23f665c <_ZN6AB18056setWDTEi+0x80>)
 23f663a:	4805      	ldr	r0, [pc, #20]	; (23f6650 <_ZN6AB18056setWDTEi+0x74>)
 23f663c:	f7ff fecf 	bl	23f63de <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
 23f6640:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f6644:	435f      	muls	r7, r3
        watchdogSecs = seconds;
 23f6646:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
 23f6648:	616f      	str	r7, [r5, #20]
 23f664a:	e7e1      	b.n	23f6610 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
 23f664c:	2701      	movs	r7, #1
 23f664e:	e7e7      	b.n	23f6620 <_ZN6AB18056setWDTEi+0x44>
 23f6650:	1007aeac 	.word	0x1007aeac
 23f6654:	023ff74a 	.word	0x023ff74a
 23f6658:	023ff754 	.word	0x023ff754
 23f665c:	023ff770 	.word	0x023ff770

023f6660 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
 23f6660:	4b06      	ldr	r3, [pc, #24]	; (23f667c <_ZN6AB180517systemEventStaticEyi+0x1c>)
 23f6662:	681a      	ldr	r2, [r3, #0]
 23f6664:	b14a      	cbz	r2, 23f667a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
 23f6666:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 23f666a:	430b      	orrs	r3, r1
 23f666c:	d105      	bne.n	23f667a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
 23f666e:	68d3      	ldr	r3, [r2, #12]
 23f6670:	b11b      	cbz	r3, 23f667a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
 23f6672:	2100      	movs	r1, #0
 23f6674:	4610      	mov	r0, r2
 23f6676:	f7ff bfb1 	b.w	23f65dc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
 23f667a:	4770      	bx	lr
 23f667c:	1007aeb0 	.word	0x1007aeb0

023f6680 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
 23f6680:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f6684:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 23f6688:	4605      	mov	r5, r0
 23f668a:	4616      	mov	r6, r2
 23f668c:	461f      	mov	r7, r3
    if (lock) {
 23f668e:	f1b8 0f00 	cmp.w	r8, #0
 23f6692:	d004      	beq.n	23f669e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
 23f6694:	6840      	ldr	r0, [r0, #4]
 23f6696:	9101      	str	r1, [sp, #4]
 23f6698:	f002 f8f0 	bl	23f887c <_ZN7TwoWire4lockEv>
 23f669c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
 23f669e:	2300      	movs	r3, #0
 23f66a0:	4628      	mov	r0, r5
 23f66a2:	f10d 020f 	add.w	r2, sp, #15
 23f66a6:	9101      	str	r1, [sp, #4]
 23f66a8:	f7ff ff0a 	bl	23f64c0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
 23f66ac:	4604      	mov	r4, r0
 23f66ae:	b160      	cbz	r0, 23f66ca <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
 23f66b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 23f66b4:	ea03 0206 	and.w	r2, r3, r6
 23f66b8:	433a      	orrs	r2, r7
        if (newValue != value) {
 23f66ba:	4293      	cmp	r3, r2
 23f66bc:	d005      	beq.n	23f66ca <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
 23f66be:	2300      	movs	r3, #0
 23f66c0:	4628      	mov	r0, r5
 23f66c2:	9901      	ldr	r1, [sp, #4]
 23f66c4:	f7ff ff7e 	bl	23f65c4 <_ZN6AB180513writeRegisterEhhb>
 23f66c8:	4604      	mov	r4, r0
    if (lock) {
 23f66ca:	f1b8 0f00 	cmp.w	r8, #0
 23f66ce:	d002      	beq.n	23f66d6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
 23f66d0:	6868      	ldr	r0, [r5, #4]
 23f66d2:	f002 f8dc 	bl	23f888e <_ZN7TwoWire6unlockEv>
}
 23f66d6:	4620      	mov	r0, r4
 23f66d8:	b004      	add	sp, #16
 23f66da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f66de <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f66de:	b513      	push	{r0, r1, r4, lr}
 23f66e0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
 23f66e2:	f10d 0207 	add.w	r2, sp, #7
 23f66e6:	f7ff feeb 	bl	23f64c0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
 23f66ea:	b128      	cbz	r0, 23f66f8 <_ZN6AB180510isBitClearEhhb+0x1a>
 23f66ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f66f0:	421c      	tst	r4, r3
 23f66f2:	bf0c      	ite	eq
 23f66f4:	2001      	moveq	r0, #1
 23f66f6:	2000      	movne	r0, #0
}
 23f66f8:	b002      	add	sp, #8
 23f66fa:	bd10      	pop	{r4, pc}

023f66fc <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f66fc:	b513      	push	{r0, r1, r4, lr}
 23f66fe:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
 23f6700:	f10d 0207 	add.w	r2, sp, #7
 23f6704:	f7ff fedc 	bl	23f64c0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
 23f6708:	b128      	cbz	r0, 23f6716 <_ZN6AB18058isBitSetEhhb+0x1a>
 23f670a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f670e:	421c      	tst	r4, r3
 23f6710:	bf14      	ite	ne
 23f6712:	2001      	movne	r0, #1
 23f6714:	2000      	moveq	r0, #0
}
 23f6716:	b002      	add	sp, #8
 23f6718:	bd10      	pop	{r4, pc}

023f671a <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f671a:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
 23f671c:	43d2      	mvns	r2, r2
 23f671e:	9300      	str	r3, [sp, #0]
 23f6720:	b2d2      	uxtb	r2, r2
 23f6722:	2300      	movs	r3, #0
 23f6724:	f7ff ffac 	bl	23f6680 <_ZN6AB180512maskRegisterEhhhb>
}
 23f6728:	b003      	add	sp, #12
 23f672a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f6730 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
 23f6730:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
 23f6732:	2301      	movs	r3, #1
 23f6734:	210f      	movs	r1, #15
 23f6736:	f10d 0207 	add.w	r2, sp, #7
bool AB1805::updateWakeReason() {
 23f673a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
 23f673c:	f7ff fec0 	bl	23f64c0 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
 23f6740:	4605      	mov	r5, r0
 23f6742:	b938      	cbnz	r0, 23f6754 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
 23f6744:	22af      	movs	r2, #175	; 0xaf
 23f6746:	491e      	ldr	r1, [pc, #120]	; (23f67c0 <_ZN6AB180516updateWakeReasonEv+0x90>)
 23f6748:	481e      	ldr	r0, [pc, #120]	; (23f67c4 <_ZN6AB180516updateWakeReasonEv+0x94>)
 23f674a:	f7ff fe3a 	bl	23f63c2 <_ZNK5spark6Logger5errorEPKcz>
}
 23f674e:	4628      	mov	r0, r5
 23f6750:	b003      	add	sp, #12
 23f6752:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
 23f6754:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f6758:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
 23f675c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
 23f6760:	d00b      	beq.n	23f677a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
 23f6762:	2220      	movs	r2, #32
 23f6764:	210f      	movs	r1, #15
 23f6766:	4620      	mov	r0, r4
        wakeReason = WakeReason::WATCHDOG;
 23f6768:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
 23f676a:	f7ff ffd6 	bl	23f671a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
 23f676e:	4a16      	ldr	r2, [pc, #88]	; (23f67c8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
 23f6770:	4916      	ldr	r1, [pc, #88]	; (23f67cc <_ZN6AB180516updateWakeReasonEv+0x9c>)
 23f6772:	4814      	ldr	r0, [pc, #80]	; (23f67c4 <_ZN6AB180516updateWakeReasonEv+0x94>)
 23f6774:	f7ff fe17 	bl	23f63a6 <_ZNK5spark6Logger4infoEPKcz>
 23f6778:	e7e9      	b.n	23f674e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
 23f677a:	2208      	movs	r2, #8
 23f677c:	2117      	movs	r1, #23
 23f677e:	4620      	mov	r0, r4
 23f6780:	f7ff ffbc 	bl	23f66fc <_ZN6AB18058isBitSetEhhb>
 23f6784:	b118      	cbz	r0, 23f678e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
 23f6786:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
 23f6788:	4a11      	ldr	r2, [pc, #68]	; (23f67d0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
 23f678a:	61e3      	str	r3, [r4, #28]
 23f678c:	e7f0      	b.n	23f6770 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
 23f678e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f6792:	071a      	lsls	r2, r3, #28
 23f6794:	d509      	bpl.n	23f67aa <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
 23f6796:	2303      	movs	r3, #3
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
 23f6798:	2208      	movs	r2, #8
        wakeReason = WakeReason::COUNTDOWN_TIMER;
 23f679a:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
 23f679c:	210f      	movs	r1, #15
 23f679e:	2301      	movs	r3, #1
 23f67a0:	4620      	mov	r0, r4
 23f67a2:	f7ff ffba 	bl	23f671a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
 23f67a6:	4a0b      	ldr	r2, [pc, #44]	; (23f67d4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
 23f67a8:	e7e2      	b.n	23f6770 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
 23f67aa:	075b      	lsls	r3, r3, #29
 23f67ac:	d5cf      	bpl.n	23f674e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
 23f67ae:	2204      	movs	r2, #4
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
 23f67b0:	2301      	movs	r3, #1
        wakeReason = WakeReason::ALARM;
 23f67b2:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
 23f67b4:	210f      	movs	r1, #15
 23f67b6:	4620      	mov	r0, r4
 23f67b8:	f7ff ffaf 	bl	23f671a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
 23f67bc:	4a06      	ldr	r2, [pc, #24]	; (23f67d8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
 23f67be:	e7d7      	b.n	23f6770 <_ZN6AB180516updateWakeReasonEv+0x40>
 23f67c0:	023ff7c3 	.word	0x023ff7c3
 23f67c4:	1007aeac 	.word	0x1007aeac
 23f67c8:	023ff794 	.word	0x023ff794
 23f67cc:	023ff7e2 	.word	0x023ff7e2
 23f67d0:	023ff79d 	.word	0x023ff79d
 23f67d4:	023ff7ad 	.word	0x023ff7ad
 23f67d8:	023ff7bd 	.word	0x023ff7bd

023f67dc <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f67dc:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
 23f67de:	9300      	str	r3, [sp, #0]
 23f67e0:	4613      	mov	r3, r2
 23f67e2:	22ff      	movs	r2, #255	; 0xff
 23f67e4:	f7ff ff4c 	bl	23f6680 <_ZN6AB180512maskRegisterEhhhb>
}
 23f67e8:	b003      	add	sp, #12
 23f67ea:	f85d fb04 	ldr.w	pc, [sp], #4

023f67ee <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
 23f67ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f67f2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 23f67f6:	4605      	mov	r5, r0
 23f67f8:	460c      	mov	r4, r1
 23f67fa:	4691      	mov	r9, r2
 23f67fc:	461f      	mov	r7, r3
    if (lock) {
 23f67fe:	f1ba 0f00 	cmp.w	sl, #0
 23f6802:	d002      	beq.n	23f680a <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
 23f6804:	6840      	ldr	r0, [r0, #4]
 23f6806:	f002 f839 	bl	23f887c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
 23f680a:	b307      	cbz	r7, 23f684e <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
 23f680c:	2f20      	cmp	r7, #32
 23f680e:	463e      	mov	r6, r7
 23f6810:	bf28      	it	cs
 23f6812:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
 23f6814:	2c7f      	cmp	r4, #127	; 0x7f
 23f6816:	d826      	bhi.n	23f6866 <_ZN6AB18057readRamEjPhjb+0x78>
 23f6818:	1933      	adds	r3, r6, r4
 23f681a:	2b80      	cmp	r3, #128	; 0x80
 23f681c:	d901      	bls.n	23f6822 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
 23f681e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f6822:	2301      	movs	r3, #1
 23f6824:	2204      	movs	r2, #4
 23f6826:	213f      	movs	r1, #63	; 0x3f
 23f6828:	4628      	mov	r0, r5
 23f682a:	f7ff ff76 	bl	23f671a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
 23f682e:	2300      	movs	r3, #0
 23f6830:	f064 017f 	orn	r1, r4, #127	; 0x7f
 23f6834:	9300      	str	r3, [sp, #0]
 23f6836:	464a      	mov	r2, r9
 23f6838:	4633      	mov	r3, r6
 23f683a:	4628      	mov	r0, r5
 23f683c:	b2c9      	uxtb	r1, r1
 23f683e:	f7ff fdf1 	bl	23f6424 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
 23f6842:	4680      	mov	r8, r0
 23f6844:	b128      	cbz	r0, 23f6852 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
 23f6846:	4434      	add	r4, r6
        dataLen -= count;
 23f6848:	1bbf      	subs	r7, r7, r6
        data += count;
 23f684a:	44b1      	add	r9, r6
    while(dataLen > 0) {
 23f684c:	e7dd      	b.n	23f680a <_ZN6AB18057readRamEjPhjb+0x1c>
 23f684e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
 23f6852:	f1ba 0f00 	cmp.w	sl, #0
 23f6856:	d002      	beq.n	23f685e <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
 23f6858:	6868      	ldr	r0, [r5, #4]
 23f685a:	f002 f818 	bl	23f888e <_ZN7TwoWire6unlockEv>
}
 23f685e:	4640      	mov	r0, r8
 23f6860:	b002      	add	sp, #8
 23f6862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f6866:	2301      	movs	r3, #1
 23f6868:	2204      	movs	r2, #4
 23f686a:	213f      	movs	r1, #63	; 0x3f
 23f686c:	4628      	mov	r0, r5
 23f686e:	f7ff ffb5 	bl	23f67dc <_ZN6AB180514setRegisterBitEhhb>
 23f6872:	e7dc      	b.n	23f682e <_ZN6AB18057readRamEjPhjb+0x40>

023f6874 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
 23f6874:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f6878:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 23f687c:	4605      	mov	r5, r0
 23f687e:	460c      	mov	r4, r1
 23f6880:	4691      	mov	r9, r2
 23f6882:	461f      	mov	r7, r3
    if (lock) {
 23f6884:	f1ba 0f00 	cmp.w	sl, #0
 23f6888:	d002      	beq.n	23f6890 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
 23f688a:	6840      	ldr	r0, [r0, #4]
 23f688c:	f001 fff6 	bl	23f887c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
 23f6890:	b307      	cbz	r7, 23f68d4 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
 23f6892:	2f1f      	cmp	r7, #31
 23f6894:	463e      	mov	r6, r7
 23f6896:	bf28      	it	cs
 23f6898:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
 23f689a:	2c7f      	cmp	r4, #127	; 0x7f
 23f689c:	d826      	bhi.n	23f68ec <_ZN6AB18058writeRamEjPKhjb+0x78>
 23f689e:	1933      	adds	r3, r6, r4
 23f68a0:	2b80      	cmp	r3, #128	; 0x80
 23f68a2:	d901      	bls.n	23f68a8 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
 23f68a4:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f68a8:	2301      	movs	r3, #1
 23f68aa:	2204      	movs	r2, #4
 23f68ac:	213f      	movs	r1, #63	; 0x3f
 23f68ae:	4628      	mov	r0, r5
 23f68b0:	f7ff ff33 	bl	23f671a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
 23f68b4:	2300      	movs	r3, #0
 23f68b6:	f064 017f 	orn	r1, r4, #127	; 0x7f
 23f68ba:	9300      	str	r3, [sp, #0]
 23f68bc:	464a      	mov	r2, r9
 23f68be:	4633      	mov	r3, r6
 23f68c0:	4628      	mov	r0, r5
 23f68c2:	b2c9      	uxtb	r1, r1
 23f68c4:	f7ff fe42 	bl	23f654c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
 23f68c8:	4680      	mov	r8, r0
 23f68ca:	b128      	cbz	r0, 23f68d8 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
 23f68cc:	4434      	add	r4, r6
        dataLen -= count;
 23f68ce:	1bbf      	subs	r7, r7, r6
        data += count;
 23f68d0:	44b1      	add	r9, r6
    while(dataLen > 0) {
 23f68d2:	e7dd      	b.n	23f6890 <_ZN6AB18058writeRamEjPKhjb+0x1c>
 23f68d4:	f04f 0801 	mov.w	r8, #1
    if (lock) {
 23f68d8:	f1ba 0f00 	cmp.w	sl, #0
 23f68dc:	d002      	beq.n	23f68e4 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
 23f68de:	6868      	ldr	r0, [r5, #4]
 23f68e0:	f001 ffd5 	bl	23f888e <_ZN7TwoWire6unlockEv>
}
 23f68e4:	4640      	mov	r0, r8
 23f68e6:	b002      	add	sp, #8
 23f68e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f68ec:	2301      	movs	r3, #1
 23f68ee:	2204      	movs	r2, #4
 23f68f0:	213f      	movs	r1, #63	; 0x3f
 23f68f2:	4628      	mov	r0, r5
 23f68f4:	f7ff ff72 	bl	23f67dc <_ZN6AB180514setRegisterBitEhhb>
 23f68f8:	e7dc      	b.n	23f68b4 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

023f68fc <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
 23f68fc:	b530      	push	{r4, r5, lr}
 23f68fe:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
 23f6900:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
 23f6904:	680d      	ldr	r5, [r1, #0]
String AB1805::tmToString(const struct tm *timeptr) {
 23f6906:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
 23f6908:	9503      	str	r5, [sp, #12]
 23f690a:	684d      	ldr	r5, [r1, #4]
 23f690c:	3301      	adds	r3, #1
 23f690e:	9502      	str	r5, [sp, #8]
 23f6910:	688d      	ldr	r5, [r1, #8]
 23f6912:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 23f6916:	9501      	str	r5, [sp, #4]
 23f6918:	68c9      	ldr	r1, [r1, #12]
 23f691a:	9100      	str	r1, [sp, #0]
 23f691c:	4902      	ldr	r1, [pc, #8]	; (23f6928 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
 23f691e:	f002 fde3 	bl	23f94e8 <_ZN6String6formatEPKcz>
}
 23f6922:	4620      	mov	r0, r4
 23f6924:	b005      	add	sp, #20
 23f6926:	bd30      	pop	{r4, r5, pc}
 23f6928:	023ff7f3 	.word	0x023ff7f3

023f692c <_ZN6AB180510bcdToValueEh>:
}
 23f692c:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
 23f692e:	0903      	lsrs	r3, r0, #4
 23f6930:	f000 000f 	and.w	r0, r0, #15
}
 23f6934:	fb02 0003 	mla	r0, r2, r3, r0
 23f6938:	4770      	bx	lr

023f693a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
 23f693a:	b538      	push	{r3, r4, r5, lr}
 23f693c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
 23f693e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
 23f6940:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
 23f6942:	f7ff fff3 	bl	23f692c <_ZN6AB180510bcdToValueEh>
 23f6946:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
 23f6948:	7860      	ldrb	r0, [r4, #1]
 23f694a:	f7ff ffef 	bl	23f692c <_ZN6AB180510bcdToValueEh>
 23f694e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
 23f6950:	78a0      	ldrb	r0, [r4, #2]
 23f6952:	f7ff ffeb 	bl	23f692c <_ZN6AB180510bcdToValueEh>
 23f6956:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
 23f6958:	78e0      	ldrb	r0, [r4, #3]
 23f695a:	f7ff ffe7 	bl	23f692c <_ZN6AB180510bcdToValueEh>
 23f695e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
 23f6960:	7920      	ldrb	r0, [r4, #4]
 23f6962:	f7ff ffe3 	bl	23f692c <_ZN6AB180510bcdToValueEh>
 23f6966:	3801      	subs	r0, #1
 23f6968:	6108      	str	r0, [r1, #16]
    if (includeYear) {
 23f696a:	b92d      	cbnz	r5, 23f6978 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
 23f696c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
 23f696e:	7828      	ldrb	r0, [r5, #0]
 23f6970:	f7ff ffdc 	bl	23f692c <_ZN6AB180510bcdToValueEh>
 23f6974:	6188      	str	r0, [r1, #24]
}
 23f6976:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
 23f6978:	7960      	ldrb	r0, [r4, #5]
 23f697a:	f7ff ffd7 	bl	23f692c <_ZN6AB180510bcdToValueEh>
 23f697e:	3064      	adds	r0, #100	; 0x64
 23f6980:	1da5      	adds	r5, r4, #6
 23f6982:	6148      	str	r0, [r1, #20]
 23f6984:	e7f3      	b.n	23f696e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

023f6988 <_ZN6AB180510getRtcAsTmEP2tm>:
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f6988:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f698a:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f698c:	461a      	mov	r2, r3
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f698e:	460d      	mov	r5, r1
 23f6990:	b088      	sub	sp, #32
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f6992:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f6994:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f6996:	f7ff fea2 	bl	23f66de <_ZN6AB180510isBitClearEhhb>
 23f699a:	b1f0      	cbz	r0, 23f69da <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
 23f699c:	2308      	movs	r3, #8
 23f699e:	2601      	movs	r6, #1
 23f69a0:	4620      	mov	r0, r4
 23f69a2:	2100      	movs	r1, #0
 23f69a4:	9600      	str	r6, [sp, #0]
 23f69a6:	eb0d 0203 	add.w	r2, sp, r3
 23f69aa:	f7ff fd3b 	bl	23f6424 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
 23f69ae:	4604      	mov	r4, r0
 23f69b0:	b198      	cbz	r0, 23f69da <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
 23f69b2:	4632      	mov	r2, r6
 23f69b4:	4629      	mov	r1, r5
 23f69b6:	f10d 0009 	add.w	r0, sp, #9
 23f69ba:	f7ff ffbe 	bl	23f693a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
 23f69be:	a804      	add	r0, sp, #16
 23f69c0:	f7ff ff9c 	bl	23f68fc <_ZN6AB180510tmToStringEPK2tm>
 23f69c4:	4808      	ldr	r0, [pc, #32]	; (23f69e8 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
 23f69c6:	9a04      	ldr	r2, [sp, #16]
 23f69c8:	4908      	ldr	r1, [pc, #32]	; (23f69ec <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
 23f69ca:	f7ff fcec 	bl	23f63a6 <_ZNK5spark6Logger4infoEPKcz>
 23f69ce:	a804      	add	r0, sp, #16
 23f69d0:	f002 fd11 	bl	23f93f6 <_ZN6StringD1Ev>
}
 23f69d4:	4620      	mov	r0, r4
 23f69d6:	b008      	add	sp, #32
 23f69d8:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
 23f69da:	2224      	movs	r2, #36	; 0x24
 23f69dc:	2100      	movs	r1, #0
 23f69de:	4628      	mov	r0, r5
 23f69e0:	f006 f861 	bl	23fcaa6 <memset>
 23f69e4:	2400      	movs	r4, #0
 23f69e6:	e7f5      	b.n	23f69d4 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
 23f69e8:	1007aeac 	.word	0x1007aeac
 23f69ec:	023ff811 	.word	0x023ff811

023f69f0 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
 23f69f0:	b530      	push	{r4, r5, lr}
 23f69f2:	b08b      	sub	sp, #44	; 0x2c
 23f69f4:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
 23f69f6:	a901      	add	r1, sp, #4
 23f69f8:	f7ff ffc6 	bl	23f6988 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
 23f69fc:	4604      	mov	r4, r0
 23f69fe:	b120      	cbz	r0, 23f6a0a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
 23f6a00:	a801      	add	r0, sp, #4
 23f6a02:	f001 f915 	bl	23f7c30 <mktime>
 23f6a06:	e9c5 0100 	strd	r0, r1, [r5]
}
 23f6a0a:	4620      	mov	r0, r4
 23f6a0c:	b00b      	add	sp, #44	; 0x2c
 23f6a0e:	bd30      	pop	{r4, r5, pc}

023f6a10 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
 23f6a10:	230a      	movs	r3, #10
 23f6a12:	fb90 f1f3 	sdiv	r1, r0, r3
 23f6a16:	fb91 f2f3 	sdiv	r2, r1, r3
    int ones = value % 10;
 23f6a1a:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
 23f6a1e:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
 23f6a22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 23f6a26:	b2c0      	uxtb	r0, r0
 23f6a28:	4770      	bx	lr

023f6a2a <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
 23f6a2a:	b570      	push	{r4, r5, r6, lr}
 23f6a2c:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
 23f6a2e:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
 23f6a30:	460c      	mov	r4, r1
 23f6a32:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
 23f6a34:	f7ff ffec 	bl	23f6a10 <_ZN6AB180510valueToBcdEi>
 23f6a38:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
 23f6a3a:	6868      	ldr	r0, [r5, #4]
 23f6a3c:	f7ff ffe8 	bl	23f6a10 <_ZN6AB180510valueToBcdEi>
 23f6a40:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
 23f6a42:	68a8      	ldr	r0, [r5, #8]
 23f6a44:	f7ff ffe4 	bl	23f6a10 <_ZN6AB180510valueToBcdEi>
 23f6a48:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
 23f6a4a:	68e8      	ldr	r0, [r5, #12]
 23f6a4c:	f7ff ffe0 	bl	23f6a10 <_ZN6AB180510valueToBcdEi>
 23f6a50:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
 23f6a52:	6928      	ldr	r0, [r5, #16]
 23f6a54:	3001      	adds	r0, #1
 23f6a56:	f7ff ffdb 	bl	23f6a10 <_ZN6AB180510valueToBcdEi>
 23f6a5a:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
 23f6a5c:	b92e      	cbnz	r6, 23f6a6a <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
 23f6a5e:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
 23f6a60:	69a8      	ldr	r0, [r5, #24]
 23f6a62:	f7ff ffd5 	bl	23f6a10 <_ZN6AB180510valueToBcdEi>
 23f6a66:	7030      	strb	r0, [r6, #0]
}
 23f6a68:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
 23f6a6a:	2364      	movs	r3, #100	; 0x64
 23f6a6c:	696a      	ldr	r2, [r5, #20]
 23f6a6e:	1da6      	adds	r6, r4, #6
 23f6a70:	fb92 f0f3 	sdiv	r0, r2, r3
 23f6a74:	fb03 2010 	mls	r0, r3, r0, r2
 23f6a78:	f7ff ffca 	bl	23f6a10 <_ZN6AB180510valueToBcdEi>
 23f6a7c:	7160      	strb	r0, [r4, #5]
 23f6a7e:	e7ef      	b.n	23f6a60 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

023f6a80 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
 23f6a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6a82:	4616      	mov	r6, r2
 23f6a84:	b087      	sub	sp, #28
 23f6a86:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
 23f6a88:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
 23f6a8a:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
 23f6a8c:	f7ff ff36 	bl	23f68fc <_ZN6AB180510tmToStringEPK2tm>
 23f6a90:	481e      	ldr	r0, [pc, #120]	; (23f6b0c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
 23f6a92:	9a02      	ldr	r2, [sp, #8]
 23f6a94:	491e      	ldr	r1, [pc, #120]	; (23f6b10 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
 23f6a96:	f7ff fc86 	bl	23f63a6 <_ZNK5spark6Logger4infoEPKcz>
 23f6a9a:	a802      	add	r0, sp, #8
 23f6a9c:	f002 fcab 	bl	23f93f6 <_ZN6StringD1Ev>
    if (lock) {
 23f6aa0:	b116      	cbz	r6, 23f6aa8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
 23f6aa2:	6868      	ldr	r0, [r5, #4]
 23f6aa4:	f001 feea 	bl	23f887c <_ZN7TwoWire4lockEv>
    array[0] = 0x00; // hundredths
 23f6aa8:	2700      	movs	r7, #0
    tmToRegisters(timeptr, &array[1], true);
 23f6aaa:	4620      	mov	r0, r4
 23f6aac:	2201      	movs	r2, #1
 23f6aae:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
 23f6ab2:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
 23f6ab6:	f7ff ffb8 	bl	23f6a2a <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
 23f6aba:	2301      	movs	r3, #1
 23f6abc:	2110      	movs	r1, #16
 23f6abe:	461a      	mov	r2, r3
 23f6ac0:	4628      	mov	r0, r5
 23f6ac2:	f7ff fe8b 	bl	23f67dc <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
 23f6ac6:	4604      	mov	r4, r0
 23f6ac8:	b1e8      	cbz	r0, 23f6b06 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
 23f6aca:	2308      	movs	r3, #8
 23f6acc:	4639      	mov	r1, r7
 23f6ace:	4628      	mov	r0, r5
 23f6ad0:	9700      	str	r7, [sp, #0]
 23f6ad2:	eb0d 0203 	add.w	r2, sp, r3
 23f6ad6:	f7ff fd39 	bl	23f654c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
 23f6ada:	4604      	mov	r4, r0
 23f6adc:	b160      	cbz	r0, 23f6af8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
 23f6ade:	2301      	movs	r3, #1
 23f6ae0:	2110      	movs	r1, #16
 23f6ae2:	461a      	mov	r2, r3
 23f6ae4:	4628      	mov	r0, r5
 23f6ae6:	f7ff fe18 	bl	23f671a <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
 23f6aea:	b116      	cbz	r6, 23f6af2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
 23f6aec:	6868      	ldr	r0, [r5, #4]
 23f6aee:	f001 fece 	bl	23f888e <_ZN7TwoWire6unlockEv>
}
 23f6af2:	4620      	mov	r0, r4
 23f6af4:	b007      	add	sp, #28
 23f6af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
 23f6af8:	f44f 728e 	mov.w	r2, #284	; 0x11c
        _log.error(errorMsg, __LINE__);
 23f6afc:	4905      	ldr	r1, [pc, #20]	; (23f6b14 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
 23f6afe:	4803      	ldr	r0, [pc, #12]	; (23f6b0c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
 23f6b00:	f7ff fc5f 	bl	23f63c2 <_ZNK5spark6Logger5errorEPKcz>
 23f6b04:	e7f1      	b.n	23f6aea <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
 23f6b06:	f44f 7290 	mov.w	r2, #288	; 0x120
 23f6b0a:	e7f7      	b.n	23f6afc <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
 23f6b0c:	1007aeac 	.word	0x1007aeac
 23f6b10:	023ff81f 	.word	0x023ff81f
 23f6b14:	023ff82d 	.word	0x023ff82d

023f6b18 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
 23f6b18:	b513      	push	{r0, r1, r4, lr}
 23f6b1a:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
 23f6b1c:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
 23f6b1e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
 23f6b22:	f005 ff7d 	bl	23fca20 <gmtime>
    return setRtcFromTm(tm, lock);
 23f6b26:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
 23f6b2a:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
 23f6b2c:	4620      	mov	r0, r4
 23f6b2e:	f7ff ffa7 	bl	23f6a80 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
 23f6b32:	b002      	add	sp, #8
 23f6b34:	bd10      	pop	{r4, pc}

023f6b36 <_ZN6AB180516setRtcFromSystemEv>:
bool AB1805::setRtcFromSystem() {
 23f6b36:	b513      	push	{r0, r1, r4, lr}
 23f6b38:	4604      	mov	r4, r0
    if (Time.isValid()) {
 23f6b3a:	f002 fea5 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23f6b3e:	b140      	cbz	r0, 23f6b52 <_ZN6AB180516setRtcFromSystemEv+0x1c>
        return setRtcFromTime(Time.now());
 23f6b40:	f002 febf 	bl	23f98c2 <_ZN9TimeClass3nowEv>
 23f6b44:	2301      	movs	r3, #1
 23f6b46:	4602      	mov	r2, r0
 23f6b48:	9300      	str	r3, [sp, #0]
 23f6b4a:	17c3      	asrs	r3, r0, #31
 23f6b4c:	4620      	mov	r0, r4
 23f6b4e:	f7ff ffe3 	bl	23f6b18 <_ZN6AB180514setRtcFromTimeExb>
}
 23f6b52:	b002      	add	sp, #8
 23f6b54:	bd10      	pop	{r4, pc}

023f6b56 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23f6b56:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f6b58:	2300      	movs	r3, #0
 23f6b5a:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f6b5c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f6b5e:	4604      	mov	r4, r0
 23f6b60:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f6b62:	b12b      	cbz	r3, 23f6b70 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f6b64:	2202      	movs	r2, #2
 23f6b66:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f6b68:	68eb      	ldr	r3, [r5, #12]
 23f6b6a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f6b6c:	68ab      	ldr	r3, [r5, #8]
 23f6b6e:	60a3      	str	r3, [r4, #8]
    }
 23f6b70:	4620      	mov	r0, r4
 23f6b72:	bd38      	pop	{r3, r4, r5, pc}

023f6b74 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f6b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f6b78:	f04f 0900 	mov.w	r9, #0
 23f6b7c:	b095      	sub	sp, #84	; 0x54
        };
 23f6b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f6b80:	4605      	mov	r5, r0
        };
 23f6b82:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f6b84:	4690      	mov	r8, r2
 23f6b86:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f6b88:	ae0c      	add	r6, sp, #48	; 0x30
        };
 23f6b8a:	f7ff ffe4 	bl	23f6b56 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f6b8e:	a904      	add	r1, sp, #16
 23f6b90:	a808      	add	r0, sp, #32
 23f6b92:	f7ff ffe0 	bl	23f6b56 <_ZNSt8functionIFvyiEEC1ERKS1_>
 23f6b96:	a908      	add	r1, sp, #32
 23f6b98:	4630      	mov	r0, r6
 23f6b9a:	f7ff ffdc 	bl	23f6b56 <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f6b9e:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23f6ba0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f6ba4:	f7ee fb31 	bl	23e520a <_Znwj>
 23f6ba8:	4604      	mov	r4, r0
 23f6baa:	b1a0      	cbz	r0, 23f6bd6 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6bac:	e896 0003 	ldmia.w	r6, {r0, r1}
 23f6bb0:	ab01      	add	r3, sp, #4
 23f6bb2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f6bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f6bba:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f6bbe:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 23f6bc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f6bc6:	60a3      	str	r3, [r4, #8]
 23f6bc8:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f6bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
 23f6bce:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 23f6bd2:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 23f6bd4:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 23f6bd6:	4b24      	ldr	r3, [pc, #144]	; (23f6c68 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
              callable_(callable) {
 23f6bd8:	2200      	movs	r2, #0
 23f6bda:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
 23f6bdc:	4b23      	ldr	r3, [pc, #140]	; (23f6c6c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
 23f6bde:	f04f 0900 	mov.w	r9, #0
 23f6be2:	9312      	str	r3, [sp, #72]	; 0x48
 23f6be4:	2300      	movs	r3, #0
 23f6be6:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
 23f6bea:	4b21      	ldr	r3, [pc, #132]	; (23f6c70 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f6bec:	2010      	movs	r0, #16
              callable_(callable) {
 23f6bee:	f8c5 9008 	str.w	r9, [r5, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f6bf2:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
 23f6bf4:	e9cd 3901 	strd	r3, r9, [sp, #4]
 23f6bf8:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f6bfc:	f7ee fb05 	bl	23e520a <_Znwj>
 23f6c00:	4604      	mov	r4, r0
 23f6c02:	b1d8      	cbz	r0, 23f6c3c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
 23f6c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
 23f6c06:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
 23f6c0a:	b133      	cbz	r3, 23f6c1a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f6c0c:	2202      	movs	r2, #2
 23f6c0e:	a910      	add	r1, sp, #64	; 0x40
 23f6c10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f6c12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f6c14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f6c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23f6c18:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23f6c1a:	4b16      	ldr	r3, [pc, #88]	; (23f6c74 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f6c1c:	4640      	mov	r0, r8
        context.destructor = [](void* callable) -> void {
 23f6c1e:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f6c20:	4639      	mov	r1, r7
 23f6c22:	4a15      	ldr	r2, [pc, #84]	; (23f6c78 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
 23f6c24:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23f6c26:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f6c28:	f000 fd1c 	bl	23f7664 <system_subscribe_event>
        if (r) {
 23f6c2c:	b1b0      	cbz	r0, 23f6c5c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
 23f6c2e:	4620      	mov	r0, r4
 23f6c30:	f7ff fb92 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23f6c34:	2110      	movs	r1, #16
 23f6c36:	4620      	mov	r0, r4
 23f6c38:	f7ee faeb 	bl	23e5212 <_ZdlPvj>
 23f6c3c:	a810      	add	r0, sp, #64	; 0x40
 23f6c3e:	f7ff fb8b 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
 23f6c42:	4630      	mov	r0, r6
 23f6c44:	f7ff fb88 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
 23f6c48:	a808      	add	r0, sp, #32
 23f6c4a:	f7ff fb85 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
 23f6c4e:	a804      	add	r0, sp, #16
 23f6c50:	f7ff fb82 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
    }
 23f6c54:	4628      	mov	r0, r5
 23f6c56:	b015      	add	sp, #84	; 0x54
 23f6c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
 23f6c5c:	9b02      	ldr	r3, [sp, #8]
 23f6c5e:	e9c5 8700 	strd	r8, r7, [r5]
 23f6c62:	60ab      	str	r3, [r5, #8]
 23f6c64:	e7ea      	b.n	23f6c3c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
 23f6c66:	bf00      	nop
 23f6c68:	023f6315 	.word	0x023f6315
 23f6c6c:	023f6d31 	.word	0x023f6d31
 23f6c70:	000c0002 	.word	0x000c0002
 23f6c74:	023f636b 	.word	0x023f636b
 23f6c78:	023f62ed 	.word	0x023f62ed

023f6c7c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
 23f6c7c:	b530      	push	{r4, r5, lr}
 23f6c7e:	4604      	mov	r4, r0
 23f6c80:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
 23f6c82:	b111      	cbz	r1, 23f6c8a <_ZN6AB18055setupEb+0xe>
        wire.begin();
 23f6c84:	6840      	ldr	r0, [r0, #4]
 23f6c86:	f001 fdc1 	bl	23f880c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
 23f6c8a:	4620      	mov	r0, r4
 23f6c8c:	f7ff fc20 	bl	23f64d0 <_ZN6AB180510detectChipEv>
 23f6c90:	ad06      	add	r5, sp, #24
 23f6c92:	2800      	cmp	r0, #0
 23f6c94:	d037      	beq.n	23f6d06 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
 23f6c96:	4620      	mov	r0, r4
 23f6c98:	f7ff fd4a 	bl	23f6730 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
 23f6c9c:	2301      	movs	r3, #1
 23f6c9e:	2110      	movs	r1, #16
 23f6ca0:	461a      	mov	r2, r3
 23f6ca2:	4620      	mov	r0, r4
 23f6ca4:	f7ff fd1b 	bl	23f66de <_ZN6AB180510isBitClearEhhb>
 23f6ca8:	b1d8      	cbz	r0, 23f6ce2 <_ZN6AB18055setupEb+0x66>
 23f6caa:	f002 fded 	bl	23f9888 <_ZN9TimeClass7isValidEv>
 23f6cae:	b9c0      	cbnz	r0, 23f6ce2 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
 23f6cb0:	a902      	add	r1, sp, #8
 23f6cb2:	4620      	mov	r0, r4
 23f6cb4:	f7ff fe9c 	bl	23f69f0 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
 23f6cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23f6cbc:	f002 fce8 	bl	23f9690 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
 23f6cc0:	4b13      	ldr	r3, [pc, #76]	; (23f6d10 <_ZN6AB18055setupEb+0x94>)
 23f6cc2:	4628      	mov	r0, r5
 23f6cc4:	681b      	ldr	r3, [r3, #0]
 23f6cc6:	4913      	ldr	r1, [pc, #76]	; (23f6d14 <_ZN6AB18055setupEb+0x98>)
 23f6cc8:	9300      	str	r3, [sp, #0]
 23f6cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f6cce:	f002 fd99 	bl	23f9804 <_ZN9TimeClass6formatExPKc>
 23f6cd2:	4811      	ldr	r0, [pc, #68]	; (23f6d18 <_ZN6AB18055setupEb+0x9c>)
 23f6cd4:	9a06      	ldr	r2, [sp, #24]
 23f6cd6:	4911      	ldr	r1, [pc, #68]	; (23f6d1c <_ZN6AB18055setupEb+0xa0>)
 23f6cd8:	f7ff fb65 	bl	23f63a6 <_ZNK5spark6Logger4infoEPKcz>
 23f6cdc:	4628      	mov	r0, r5
 23f6cde:	f002 fb8a 	bl	23f93f6 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f6ce2:	4b0f      	ldr	r3, [pc, #60]	; (23f6d20 <_ZN6AB18055setupEb+0xa4>)
    System.on(reset, systemEventStatic);
 23f6ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 23f6ce8:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
 23f6cea:	4b0e      	ldr	r3, [pc, #56]	; (23f6d24 <_ZN6AB18055setupEb+0xa8>)
 23f6cec:	a802      	add	r0, sp, #8
 23f6cee:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23f6cf0:	4b0d      	ldr	r3, [pc, #52]	; (23f6d28 <_ZN6AB18055setupEb+0xac>)
 23f6cf2:	9500      	str	r5, [sp, #0]
 23f6cf4:	9308      	str	r3, [sp, #32]
 23f6cf6:	2300      	movs	r3, #0
 23f6cf8:	f7ff ff3c 	bl	23f6b74 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
 23f6cfc:	4628      	mov	r0, r5
 23f6cfe:	f7ff fb2b 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
}
 23f6d02:	b00b      	add	sp, #44	; 0x2c
 23f6d04:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
 23f6d06:	4909      	ldr	r1, [pc, #36]	; (23f6d2c <_ZN6AB18055setupEb+0xb0>)
 23f6d08:	4803      	ldr	r0, [pc, #12]	; (23f6d18 <_ZN6AB18055setupEb+0x9c>)
 23f6d0a:	f7ff fb5a 	bl	23f63c2 <_ZNK5spark6Logger5errorEPKcz>
 23f6d0e:	e7e8      	b.n	23f6ce2 <_ZN6AB18055setupEb+0x66>
 23f6d10:	1006a1c4 	.word	0x1006a1c4
 23f6d14:	1007af3c 	.word	0x1007af3c
 23f6d18:	1007aeac 	.word	0x1007aeac
 23f6d1c:	023ff848 	.word	0x023ff848
 23f6d20:	023f6661 	.word	0x023f6661
 23f6d24:	023f634f 	.word	0x023f634f
 23f6d28:	023f633b 	.word	0x023f633b
 23f6d2c:	023ff865 	.word	0x023ff865

023f6d30 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23f6d30:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f6d32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6d34:	4604      	mov	r4, r0
	switch (__op)
 23f6d36:	d104      	bne.n	23f6d42 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23f6d38:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6d3a:	6003      	str	r3, [r0, #0]
      }
 23f6d3c:	2000      	movs	r0, #0
 23f6d3e:	b003      	add	sp, #12
 23f6d40:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23f6d42:	2a02      	cmp	r2, #2
 23f6d44:	d00c      	beq.n	23f6d60 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23f6d46:	2a03      	cmp	r2, #3
 23f6d48:	d1f8      	bne.n	23f6d3c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f6d4a:	6804      	ldr	r4, [r0, #0]
 23f6d4c:	2c00      	cmp	r4, #0
 23f6d4e:	d0f5      	beq.n	23f6d3c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f6d50:	4620      	mov	r0, r4
 23f6d52:	f7ff fb01 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f6d56:	2110      	movs	r1, #16
 23f6d58:	4620      	mov	r0, r4
 23f6d5a:	f7ee fa5a 	bl	23e5212 <_ZdlPvj>
 23f6d5e:	e7ed      	b.n	23f6d3c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23f6d60:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f6d62:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23f6d64:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f6d66:	f7ee fa50 	bl	23e520a <_Znwj>
 23f6d6a:	4605      	mov	r5, r0
 23f6d6c:	b110      	cbz	r0, 23f6d74 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f6d6e:	9901      	ldr	r1, [sp, #4]
 23f6d70:	f7ff fef1 	bl	23f6b56 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23f6d74:	6025      	str	r5, [r4, #0]
	}
 23f6d76:	e7e1      	b.n	23f6d3c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023f6d78 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
 23f6d78:	4b01      	ldr	r3, [pc, #4]	; (23f6d80 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
 23f6d7a:	4a02      	ldr	r2, [pc, #8]	; (23f6d84 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
 23f6d7c:	601a      	str	r2, [r3, #0]
}
 23f6d7e:	4770      	bx	lr
 23f6d80:	1007aeac 	.word	0x1007aeac
 23f6d84:	023ff87d 	.word	0x023ff87d

023f6d88 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
 23f6d88:	b509      	push	{r0, r3, lr}
 23f6d8a:	4804      	ldr	r0, [pc, #16]	; (23f6d9c <cellular_signal+0x14>)
 23f6d8c:	6800      	ldr	r0, [r0, #0]
 23f6d8e:	4b04      	ldr	r3, [pc, #16]	; (23f6da0 <cellular_signal+0x18>)
 23f6d90:	4403      	add	r3, r0
 23f6d92:	681b      	ldr	r3, [r3, #0]
 23f6d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6d96:	9302      	str	r3, [sp, #8]
 23f6d98:	bd09      	pop	{r0, r3, pc}
 23f6d9a:	0000      	.short	0x0000
 23f6d9c:	1006a0f8 	.word	0x1006a0f8
 23f6da0:	0000006c 	.word	0x0000006c

023f6da4 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 23f6da4:	b509      	push	{r0, r3, lr}
 23f6da6:	4804      	ldr	r0, [pc, #16]	; (23f6db8 <cellular_command+0x14>)
 23f6da8:	6800      	ldr	r0, [r0, #0]
 23f6daa:	4b04      	ldr	r3, [pc, #16]	; (23f6dbc <cellular_command+0x18>)
 23f6dac:	4403      	add	r3, r0
 23f6dae:	681b      	ldr	r3, [r3, #0]
 23f6db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f6db2:	9302      	str	r3, [sp, #8]
 23f6db4:	bd09      	pop	{r0, r3, pc}
 23f6db6:	0000      	.short	0x0000
 23f6db8:	1006a0f8 	.word	0x1006a0f8
 23f6dbc:	0000006c 	.word	0x0000006c

023f6dc0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f6dc0:	b509      	push	{r0, r3, lr}
 23f6dc2:	4804      	ldr	r0, [pc, #16]	; (23f6dd4 <os_mutex_recursive_create+0x14>)
 23f6dc4:	6800      	ldr	r0, [r0, #0]
 23f6dc6:	4b04      	ldr	r3, [pc, #16]	; (23f6dd8 <os_mutex_recursive_create+0x18>)
 23f6dc8:	4403      	add	r3, r0
 23f6dca:	681b      	ldr	r3, [r3, #0]
 23f6dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6dce:	9302      	str	r3, [sp, #8]
 23f6dd0:	bd09      	pop	{r0, r3, pc}
 23f6dd2:	0000      	.short	0x0000
 23f6dd4:	1006a0f8 	.word	0x1006a0f8
 23f6dd8:	00000030 	.word	0x00000030

023f6ddc <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f6ddc:	b509      	push	{r0, r3, lr}
 23f6dde:	4804      	ldr	r0, [pc, #16]	; (23f6df0 <HAL_Core_Runtime_Info+0x14>)
 23f6de0:	6800      	ldr	r0, [r0, #0]
 23f6de2:	4b04      	ldr	r3, [pc, #16]	; (23f6df4 <HAL_Core_Runtime_Info+0x18>)
 23f6de4:	4403      	add	r3, r0
 23f6de6:	681b      	ldr	r3, [r3, #0]
 23f6de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f6dea:	9302      	str	r3, [sp, #8]
 23f6dec:	bd09      	pop	{r0, r3, pc}
 23f6dee:	0000      	.short	0x0000
 23f6df0:	1006a0f8 	.word	0x1006a0f8
 23f6df4:	0000001c 	.word	0x0000001c

023f6df8 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 23f6df8:	b509      	push	{r0, r3, lr}
 23f6dfa:	4804      	ldr	r0, [pc, #16]	; (23f6e0c <HAL_Feature_Set+0x14>)
 23f6dfc:	6800      	ldr	r0, [r0, #0]
 23f6dfe:	4b04      	ldr	r3, [pc, #16]	; (23f6e10 <HAL_Feature_Set+0x18>)
 23f6e00:	4403      	add	r3, r0
 23f6e02:	681b      	ldr	r3, [r3, #0]
 23f6e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f6e06:	9302      	str	r3, [sp, #8]
 23f6e08:	bd09      	pop	{r0, r3, pc}
 23f6e0a:	0000      	.short	0x0000
 23f6e0c:	1006a0f8 	.word	0x1006a0f8
 23f6e10:	0000001c 	.word	0x0000001c

023f6e14 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 23f6e14:	b509      	push	{r0, r3, lr}
 23f6e16:	4804      	ldr	r0, [pc, #16]	; (23f6e28 <HAL_Core_Get_Last_Reset_Info+0x14>)
 23f6e18:	6800      	ldr	r0, [r0, #0]
 23f6e1a:	4b04      	ldr	r3, [pc, #16]	; (23f6e2c <HAL_Core_Get_Last_Reset_Info+0x18>)
 23f6e1c:	4403      	add	r3, r0
 23f6e1e:	681b      	ldr	r3, [r3, #0]
 23f6e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f6e22:	9302      	str	r3, [sp, #8]
 23f6e24:	bd09      	pop	{r0, r3, pc}
 23f6e26:	0000      	.short	0x0000
 23f6e28:	1006a0f8 	.word	0x1006a0f8
 23f6e2c:	0000001c 	.word	0x0000001c

023f6e30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f6e30:	b509      	push	{r0, r3, lr}
 23f6e32:	4804      	ldr	r0, [pc, #16]	; (23f6e44 <HAL_RNG_GetRandomNumber+0x14>)
 23f6e34:	6800      	ldr	r0, [r0, #0]
 23f6e36:	4b04      	ldr	r3, [pc, #16]	; (23f6e48 <HAL_RNG_GetRandomNumber+0x18>)
 23f6e38:	4403      	add	r3, r0
 23f6e3a:	681b      	ldr	r3, [r3, #0]
 23f6e3c:	685b      	ldr	r3, [r3, #4]
 23f6e3e:	9302      	str	r3, [sp, #8]
 23f6e40:	bd09      	pop	{r0, r3, pc}
 23f6e42:	0000      	.short	0x0000
 23f6e44:	1006a0f8 	.word	0x1006a0f8
 23f6e48:	00000000 	.word	0x00000000

023f6e4c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f6e4c:	b509      	push	{r0, r3, lr}
 23f6e4e:	4804      	ldr	r0, [pc, #16]	; (23f6e60 <HAL_Delay_Microseconds+0x14>)
 23f6e50:	6800      	ldr	r0, [r0, #0]
 23f6e52:	4b04      	ldr	r3, [pc, #16]	; (23f6e64 <HAL_Delay_Microseconds+0x18>)
 23f6e54:	4403      	add	r3, r0
 23f6e56:	681b      	ldr	r3, [r3, #0]
 23f6e58:	68db      	ldr	r3, [r3, #12]
 23f6e5a:	9302      	str	r3, [sp, #8]
 23f6e5c:	bd09      	pop	{r0, r3, pc}
 23f6e5e:	0000      	.short	0x0000
 23f6e60:	1006a0f8 	.word	0x1006a0f8
 23f6e64:	00000000 	.word	0x00000000

023f6e68 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f6e68:	b509      	push	{r0, r3, lr}
 23f6e6a:	4804      	ldr	r0, [pc, #16]	; (23f6e7c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f6e6c:	6800      	ldr	r0, [r0, #0]
 23f6e6e:	4b04      	ldr	r3, [pc, #16]	; (23f6e80 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f6e70:	4403      	add	r3, r0
 23f6e72:	681b      	ldr	r3, [r3, #0]
 23f6e74:	695b      	ldr	r3, [r3, #20]
 23f6e76:	9302      	str	r3, [sp, #8]
 23f6e78:	bd09      	pop	{r0, r3, pc}
 23f6e7a:	0000      	.short	0x0000
 23f6e7c:	1006a0f8 	.word	0x1006a0f8
 23f6e80:	00000000 	.word	0x00000000

023f6e84 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f6e84:	b509      	push	{r0, r3, lr}
 23f6e86:	4804      	ldr	r0, [pc, #16]	; (23f6e98 <HAL_EEPROM_Init+0x14>)
 23f6e88:	6800      	ldr	r0, [r0, #0]
 23f6e8a:	4b04      	ldr	r3, [pc, #16]	; (23f6e9c <HAL_EEPROM_Init+0x18>)
 23f6e8c:	4403      	add	r3, r0
 23f6e8e:	681b      	ldr	r3, [r3, #0]
 23f6e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6e92:	9302      	str	r3, [sp, #8]
 23f6e94:	bd09      	pop	{r0, r3, pc}
 23f6e96:	0000      	.short	0x0000
 23f6e98:	1006a0f8 	.word	0x1006a0f8
 23f6e9c:	00000000 	.word	0x00000000

023f6ea0 <HAL_EEPROM_Length>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))
 23f6ea0:	b509      	push	{r0, r3, lr}
 23f6ea2:	4804      	ldr	r0, [pc, #16]	; (23f6eb4 <HAL_EEPROM_Length+0x14>)
 23f6ea4:	6800      	ldr	r0, [r0, #0]
 23f6ea6:	4b04      	ldr	r3, [pc, #16]	; (23f6eb8 <HAL_EEPROM_Length+0x18>)
 23f6ea8:	4403      	add	r3, r0
 23f6eaa:	681b      	ldr	r3, [r3, #0]
 23f6eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f6eae:	9302      	str	r3, [sp, #8]
 23f6eb0:	bd09      	pop	{r0, r3, pc}
 23f6eb2:	0000      	.short	0x0000
 23f6eb4:	1006a0f8 	.word	0x1006a0f8
 23f6eb8:	00000000 	.word	0x00000000

023f6ebc <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f6ebc:	b509      	push	{r0, r3, lr}
 23f6ebe:	4804      	ldr	r0, [pc, #16]	; (23f6ed0 <HAL_EEPROM_Get+0x14>)
 23f6ec0:	6800      	ldr	r0, [r0, #0]
 23f6ec2:	4b04      	ldr	r3, [pc, #16]	; (23f6ed4 <HAL_EEPROM_Get+0x18>)
 23f6ec4:	4403      	add	r3, r0
 23f6ec6:	681b      	ldr	r3, [r3, #0]
 23f6ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6eca:	9302      	str	r3, [sp, #8]
 23f6ecc:	bd09      	pop	{r0, r3, pc}
 23f6ece:	0000      	.short	0x0000
 23f6ed0:	1006a0f8 	.word	0x1006a0f8
 23f6ed4:	00000000 	.word	0x00000000

023f6ed8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f6ed8:	b509      	push	{r0, r3, lr}
 23f6eda:	4804      	ldr	r0, [pc, #16]	; (23f6eec <HAL_EEPROM_Put+0x14>)
 23f6edc:	6800      	ldr	r0, [r0, #0]
 23f6ede:	4b04      	ldr	r3, [pc, #16]	; (23f6ef0 <HAL_EEPROM_Put+0x18>)
 23f6ee0:	4403      	add	r3, r0
 23f6ee2:	681b      	ldr	r3, [r3, #0]
 23f6ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f6ee6:	9302      	str	r3, [sp, #8]
 23f6ee8:	bd09      	pop	{r0, r3, pc}
 23f6eea:	0000      	.short	0x0000
 23f6eec:	1006a0f8 	.word	0x1006a0f8
 23f6ef0:	00000000 	.word	0x00000000

023f6ef4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f6ef4:	b509      	push	{r0, r3, lr}
 23f6ef6:	4804      	ldr	r0, [pc, #16]	; (23f6f08 <hal_rtc_time_is_valid+0x14>)
 23f6ef8:	6800      	ldr	r0, [r0, #0]
 23f6efa:	4b04      	ldr	r3, [pc, #16]	; (23f6f0c <hal_rtc_time_is_valid+0x18>)
 23f6efc:	4403      	add	r3, r0
 23f6efe:	681b      	ldr	r3, [r3, #0]
 23f6f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f6f02:	9302      	str	r3, [sp, #8]
 23f6f04:	bd09      	pop	{r0, r3, pc}
 23f6f06:	0000      	.short	0x0000
 23f6f08:	1006a0f8 	.word	0x1006a0f8
 23f6f0c:	00000000 	.word	0x00000000

023f6f10 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f6f10:	b509      	push	{r0, r3, lr}
 23f6f12:	4804      	ldr	r0, [pc, #16]	; (23f6f24 <hal_timer_millis+0x14>)
 23f6f14:	6800      	ldr	r0, [r0, #0]
 23f6f16:	4b04      	ldr	r3, [pc, #16]	; (23f6f28 <hal_timer_millis+0x18>)
 23f6f18:	4403      	add	r3, r0
 23f6f1a:	681b      	ldr	r3, [r3, #0]
 23f6f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f6f1e:	9302      	str	r3, [sp, #8]
 23f6f20:	bd09      	pop	{r0, r3, pc}
 23f6f22:	0000      	.short	0x0000
 23f6f24:	1006a0f8 	.word	0x1006a0f8
 23f6f28:	00000000 	.word	0x00000000

023f6f2c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f6f2c:	b509      	push	{r0, r3, lr}
 23f6f2e:	4804      	ldr	r0, [pc, #16]	; (23f6f40 <hal_rtc_get_time+0x14>)
 23f6f30:	6800      	ldr	r0, [r0, #0]
 23f6f32:	4b04      	ldr	r3, [pc, #16]	; (23f6f44 <hal_rtc_get_time+0x18>)
 23f6f34:	4403      	add	r3, r0
 23f6f36:	681b      	ldr	r3, [r3, #0]
 23f6f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f6f3a:	9302      	str	r3, [sp, #8]
 23f6f3c:	bd09      	pop	{r0, r3, pc}
 23f6f3e:	0000      	.short	0x0000
 23f6f40:	1006a0f8 	.word	0x1006a0f8
 23f6f44:	00000000 	.word	0x00000000

023f6f48 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 23f6f48:	b509      	push	{r0, r3, lr}
 23f6f4a:	4804      	ldr	r0, [pc, #16]	; (23f6f5c <hal_rtc_set_time+0x14>)
 23f6f4c:	6800      	ldr	r0, [r0, #0]
 23f6f4e:	4b04      	ldr	r3, [pc, #16]	; (23f6f60 <hal_rtc_set_time+0x18>)
 23f6f50:	4403      	add	r3, r0
 23f6f52:	681b      	ldr	r3, [r3, #0]
 23f6f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23f6f56:	9302      	str	r3, [sp, #8]
 23f6f58:	bd09      	pop	{r0, r3, pc}
 23f6f5a:	0000      	.short	0x0000
 23f6f5c:	1006a0f8 	.word	0x1006a0f8
 23f6f60:	00000000 	.word	0x00000000

023f6f64 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23f6f64:	b509      	push	{r0, r3, lr}
 23f6f66:	4804      	ldr	r0, [pc, #16]	; (23f6f78 <hal_pin_map+0x14>)
 23f6f68:	6800      	ldr	r0, [r0, #0]
 23f6f6a:	4b04      	ldr	r3, [pc, #16]	; (23f6f7c <hal_pin_map+0x18>)
 23f6f6c:	4403      	add	r3, r0
 23f6f6e:	681b      	ldr	r3, [r3, #0]
 23f6f70:	681b      	ldr	r3, [r3, #0]
 23f6f72:	9302      	str	r3, [sp, #8]
 23f6f74:	bd09      	pop	{r0, r3, pc}
 23f6f76:	0000      	.short	0x0000
 23f6f78:	1006a0f8 	.word	0x1006a0f8
 23f6f7c:	00000014 	.word	0x00000014

023f6f80 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23f6f80:	b509      	push	{r0, r3, lr}
 23f6f82:	4804      	ldr	r0, [pc, #16]	; (23f6f94 <hal_pin_validate_function+0x14>)
 23f6f84:	6800      	ldr	r0, [r0, #0]
 23f6f86:	4b04      	ldr	r3, [pc, #16]	; (23f6f98 <hal_pin_validate_function+0x18>)
 23f6f88:	4403      	add	r3, r0
 23f6f8a:	681b      	ldr	r3, [r3, #0]
 23f6f8c:	685b      	ldr	r3, [r3, #4]
 23f6f8e:	9302      	str	r3, [sp, #8]
 23f6f90:	bd09      	pop	{r0, r3, pc}
 23f6f92:	0000      	.short	0x0000
 23f6f94:	1006a0f8 	.word	0x1006a0f8
 23f6f98:	00000014 	.word	0x00000014

023f6f9c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f6f9c:	b509      	push	{r0, r3, lr}
 23f6f9e:	4804      	ldr	r0, [pc, #16]	; (23f6fb0 <hal_gpio_mode+0x14>)
 23f6fa0:	6800      	ldr	r0, [r0, #0]
 23f6fa2:	4b04      	ldr	r3, [pc, #16]	; (23f6fb4 <hal_gpio_mode+0x18>)
 23f6fa4:	4403      	add	r3, r0
 23f6fa6:	681b      	ldr	r3, [r3, #0]
 23f6fa8:	689b      	ldr	r3, [r3, #8]
 23f6faa:	9302      	str	r3, [sp, #8]
 23f6fac:	bd09      	pop	{r0, r3, pc}
 23f6fae:	0000      	.short	0x0000
 23f6fb0:	1006a0f8 	.word	0x1006a0f8
 23f6fb4:	00000014 	.word	0x00000014

023f6fb8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f6fb8:	b509      	push	{r0, r3, lr}
 23f6fba:	4804      	ldr	r0, [pc, #16]	; (23f6fcc <hal_gpio_get_mode+0x14>)
 23f6fbc:	6800      	ldr	r0, [r0, #0]
 23f6fbe:	4b04      	ldr	r3, [pc, #16]	; (23f6fd0 <hal_gpio_get_mode+0x18>)
 23f6fc0:	4403      	add	r3, r0
 23f6fc2:	681b      	ldr	r3, [r3, #0]
 23f6fc4:	68db      	ldr	r3, [r3, #12]
 23f6fc6:	9302      	str	r3, [sp, #8]
 23f6fc8:	bd09      	pop	{r0, r3, pc}
 23f6fca:	0000      	.short	0x0000
 23f6fcc:	1006a0f8 	.word	0x1006a0f8
 23f6fd0:	00000014 	.word	0x00000014

023f6fd4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f6fd4:	b509      	push	{r0, r3, lr}
 23f6fd6:	4804      	ldr	r0, [pc, #16]	; (23f6fe8 <hal_gpio_write+0x14>)
 23f6fd8:	6800      	ldr	r0, [r0, #0]
 23f6fda:	4b04      	ldr	r3, [pc, #16]	; (23f6fec <hal_gpio_write+0x18>)
 23f6fdc:	4403      	add	r3, r0
 23f6fde:	681b      	ldr	r3, [r3, #0]
 23f6fe0:	691b      	ldr	r3, [r3, #16]
 23f6fe2:	9302      	str	r3, [sp, #8]
 23f6fe4:	bd09      	pop	{r0, r3, pc}
 23f6fe6:	0000      	.short	0x0000
 23f6fe8:	1006a0f8 	.word	0x1006a0f8
 23f6fec:	00000014 	.word	0x00000014

023f6ff0 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23f6ff0:	b509      	push	{r0, r3, lr}
 23f6ff2:	4804      	ldr	r0, [pc, #16]	; (23f7004 <hal_gpio_read+0x14>)
 23f6ff4:	6800      	ldr	r0, [r0, #0]
 23f6ff6:	4b04      	ldr	r3, [pc, #16]	; (23f7008 <hal_gpio_read+0x18>)
 23f6ff8:	4403      	add	r3, r0
 23f6ffa:	681b      	ldr	r3, [r3, #0]
 23f6ffc:	695b      	ldr	r3, [r3, #20]
 23f6ffe:	9302      	str	r3, [sp, #8]
 23f7000:	bd09      	pop	{r0, r3, pc}
 23f7002:	0000      	.short	0x0000
 23f7004:	1006a0f8 	.word	0x1006a0f8
 23f7008:	00000014 	.word	0x00000014

023f700c <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
 23f700c:	b509      	push	{r0, r3, lr}
 23f700e:	4804      	ldr	r0, [pc, #16]	; (23f7020 <hal_interrupt_attach+0x14>)
 23f7010:	6800      	ldr	r0, [r0, #0]
 23f7012:	4b04      	ldr	r3, [pc, #16]	; (23f7024 <hal_interrupt_attach+0x18>)
 23f7014:	4403      	add	r3, r0
 23f7016:	681b      	ldr	r3, [r3, #0]
 23f7018:	699b      	ldr	r3, [r3, #24]
 23f701a:	9302      	str	r3, [sp, #8]
 23f701c:	bd09      	pop	{r0, r3, pc}
 23f701e:	0000      	.short	0x0000
 23f7020:	1006a0f8 	.word	0x1006a0f8
 23f7024:	00000014 	.word	0x00000014

023f7028 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
 23f7028:	b509      	push	{r0, r3, lr}
 23f702a:	4804      	ldr	r0, [pc, #16]	; (23f703c <hal_interrupt_detach+0x14>)
 23f702c:	6800      	ldr	r0, [r0, #0]
 23f702e:	4b04      	ldr	r3, [pc, #16]	; (23f7040 <hal_interrupt_detach+0x18>)
 23f7030:	4403      	add	r3, r0
 23f7032:	681b      	ldr	r3, [r3, #0]
 23f7034:	69db      	ldr	r3, [r3, #28]
 23f7036:	9302      	str	r3, [sp, #8]
 23f7038:	bd09      	pop	{r0, r3, pc}
 23f703a:	0000      	.short	0x0000
 23f703c:	1006a0f8 	.word	0x1006a0f8
 23f7040:	00000014 	.word	0x00000014

023f7044 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23f7044:	b509      	push	{r0, r3, lr}
 23f7046:	4804      	ldr	r0, [pc, #16]	; (23f7058 <hal_adc_read+0x14>)
 23f7048:	6800      	ldr	r0, [r0, #0]
 23f704a:	4b04      	ldr	r3, [pc, #16]	; (23f705c <hal_adc_read+0x18>)
 23f704c:	4403      	add	r3, r0
 23f704e:	681b      	ldr	r3, [r3, #0]
 23f7050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7052:	9302      	str	r3, [sp, #8]
 23f7054:	bd09      	pop	{r0, r3, pc}
 23f7056:	0000      	.short	0x0000
 23f7058:	1006a0f8 	.word	0x1006a0f8
 23f705c:	00000014 	.word	0x00000014

023f7060 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23f7060:	b509      	push	{r0, r3, lr}
 23f7062:	4804      	ldr	r0, [pc, #16]	; (23f7074 <hal_i2c_set_speed+0x14>)
 23f7064:	6800      	ldr	r0, [r0, #0]
 23f7066:	4b04      	ldr	r3, [pc, #16]	; (23f7078 <hal_i2c_set_speed+0x18>)
 23f7068:	4403      	add	r3, r0
 23f706a:	681b      	ldr	r3, [r3, #0]
 23f706c:	681b      	ldr	r3, [r3, #0]
 23f706e:	9302      	str	r3, [sp, #8]
 23f7070:	bd09      	pop	{r0, r3, pc}
 23f7072:	0000      	.short	0x0000
 23f7074:	1006a0f8 	.word	0x1006a0f8
 23f7078:	00000010 	.word	0x00000010

023f707c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23f707c:	b509      	push	{r0, r3, lr}
 23f707e:	4804      	ldr	r0, [pc, #16]	; (23f7090 <hal_i2c_begin+0x14>)
 23f7080:	6800      	ldr	r0, [r0, #0]
 23f7082:	4b04      	ldr	r3, [pc, #16]	; (23f7094 <hal_i2c_begin+0x18>)
 23f7084:	4403      	add	r3, r0
 23f7086:	681b      	ldr	r3, [r3, #0]
 23f7088:	68db      	ldr	r3, [r3, #12]
 23f708a:	9302      	str	r3, [sp, #8]
 23f708c:	bd09      	pop	{r0, r3, pc}
 23f708e:	0000      	.short	0x0000
 23f7090:	1006a0f8 	.word	0x1006a0f8
 23f7094:	00000010 	.word	0x00000010

023f7098 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23f7098:	b509      	push	{r0, r3, lr}
 23f709a:	4804      	ldr	r0, [pc, #16]	; (23f70ac <hal_i2c_begin_transmission+0x14>)
 23f709c:	6800      	ldr	r0, [r0, #0]
 23f709e:	4b04      	ldr	r3, [pc, #16]	; (23f70b0 <hal_i2c_begin_transmission+0x18>)
 23f70a0:	4403      	add	r3, r0
 23f70a2:	681b      	ldr	r3, [r3, #0]
 23f70a4:	699b      	ldr	r3, [r3, #24]
 23f70a6:	9302      	str	r3, [sp, #8]
 23f70a8:	bd09      	pop	{r0, r3, pc}
 23f70aa:	0000      	.short	0x0000
 23f70ac:	1006a0f8 	.word	0x1006a0f8
 23f70b0:	00000010 	.word	0x00000010

023f70b4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23f70b4:	b509      	push	{r0, r3, lr}
 23f70b6:	4804      	ldr	r0, [pc, #16]	; (23f70c8 <hal_i2c_end_transmission+0x14>)
 23f70b8:	6800      	ldr	r0, [r0, #0]
 23f70ba:	4b04      	ldr	r3, [pc, #16]	; (23f70cc <hal_i2c_end_transmission+0x18>)
 23f70bc:	4403      	add	r3, r0
 23f70be:	681b      	ldr	r3, [r3, #0]
 23f70c0:	69db      	ldr	r3, [r3, #28]
 23f70c2:	9302      	str	r3, [sp, #8]
 23f70c4:	bd09      	pop	{r0, r3, pc}
 23f70c6:	0000      	.short	0x0000
 23f70c8:	1006a0f8 	.word	0x1006a0f8
 23f70cc:	00000010 	.word	0x00000010

023f70d0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f70d0:	b509      	push	{r0, r3, lr}
 23f70d2:	4804      	ldr	r0, [pc, #16]	; (23f70e4 <hal_i2c_write+0x14>)
 23f70d4:	6800      	ldr	r0, [r0, #0]
 23f70d6:	4b04      	ldr	r3, [pc, #16]	; (23f70e8 <hal_i2c_write+0x18>)
 23f70d8:	4403      	add	r3, r0
 23f70da:	681b      	ldr	r3, [r3, #0]
 23f70dc:	6a1b      	ldr	r3, [r3, #32]
 23f70de:	9302      	str	r3, [sp, #8]
 23f70e0:	bd09      	pop	{r0, r3, pc}
 23f70e2:	0000      	.short	0x0000
 23f70e4:	1006a0f8 	.word	0x1006a0f8
 23f70e8:	00000010 	.word	0x00000010

023f70ec <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f70ec:	b509      	push	{r0, r3, lr}
 23f70ee:	4804      	ldr	r0, [pc, #16]	; (23f7100 <hal_i2c_available+0x14>)
 23f70f0:	6800      	ldr	r0, [r0, #0]
 23f70f2:	4b04      	ldr	r3, [pc, #16]	; (23f7104 <hal_i2c_available+0x18>)
 23f70f4:	4403      	add	r3, r0
 23f70f6:	681b      	ldr	r3, [r3, #0]
 23f70f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f70fa:	9302      	str	r3, [sp, #8]
 23f70fc:	bd09      	pop	{r0, r3, pc}
 23f70fe:	0000      	.short	0x0000
 23f7100:	1006a0f8 	.word	0x1006a0f8
 23f7104:	00000010 	.word	0x00000010

023f7108 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f7108:	b509      	push	{r0, r3, lr}
 23f710a:	4804      	ldr	r0, [pc, #16]	; (23f711c <hal_i2c_read+0x14>)
 23f710c:	6800      	ldr	r0, [r0, #0]
 23f710e:	4b04      	ldr	r3, [pc, #16]	; (23f7120 <hal_i2c_read+0x18>)
 23f7110:	4403      	add	r3, r0
 23f7112:	681b      	ldr	r3, [r3, #0]
 23f7114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7116:	9302      	str	r3, [sp, #8]
 23f7118:	bd09      	pop	{r0, r3, pc}
 23f711a:	0000      	.short	0x0000
 23f711c:	1006a0f8 	.word	0x1006a0f8
 23f7120:	00000010 	.word	0x00000010

023f7124 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f7124:	b509      	push	{r0, r3, lr}
 23f7126:	4804      	ldr	r0, [pc, #16]	; (23f7138 <hal_i2c_peek+0x14>)
 23f7128:	6800      	ldr	r0, [r0, #0]
 23f712a:	4b04      	ldr	r3, [pc, #16]	; (23f713c <hal_i2c_peek+0x18>)
 23f712c:	4403      	add	r3, r0
 23f712e:	681b      	ldr	r3, [r3, #0]
 23f7130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7132:	9302      	str	r3, [sp, #8]
 23f7134:	bd09      	pop	{r0, r3, pc}
 23f7136:	0000      	.short	0x0000
 23f7138:	1006a0f8 	.word	0x1006a0f8
 23f713c:	00000010 	.word	0x00000010

023f7140 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f7140:	b509      	push	{r0, r3, lr}
 23f7142:	4804      	ldr	r0, [pc, #16]	; (23f7154 <hal_i2c_flush+0x14>)
 23f7144:	6800      	ldr	r0, [r0, #0]
 23f7146:	4b04      	ldr	r3, [pc, #16]	; (23f7158 <hal_i2c_flush+0x18>)
 23f7148:	4403      	add	r3, r0
 23f714a:	681b      	ldr	r3, [r3, #0]
 23f714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f714e:	9302      	str	r3, [sp, #8]
 23f7150:	bd09      	pop	{r0, r3, pc}
 23f7152:	0000      	.short	0x0000
 23f7154:	1006a0f8 	.word	0x1006a0f8
 23f7158:	00000010 	.word	0x00000010

023f715c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f715c:	b509      	push	{r0, r3, lr}
 23f715e:	4804      	ldr	r0, [pc, #16]	; (23f7170 <hal_i2c_is_enabled+0x14>)
 23f7160:	6800      	ldr	r0, [r0, #0]
 23f7162:	4b04      	ldr	r3, [pc, #16]	; (23f7174 <hal_i2c_is_enabled+0x18>)
 23f7164:	4403      	add	r3, r0
 23f7166:	681b      	ldr	r3, [r3, #0]
 23f7168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f716a:	9302      	str	r3, [sp, #8]
 23f716c:	bd09      	pop	{r0, r3, pc}
 23f716e:	0000      	.short	0x0000
 23f7170:	1006a0f8 	.word	0x1006a0f8
 23f7174:	00000010 	.word	0x00000010

023f7178 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f7178:	b509      	push	{r0, r3, lr}
 23f717a:	4804      	ldr	r0, [pc, #16]	; (23f718c <hal_i2c_init+0x14>)
 23f717c:	6800      	ldr	r0, [r0, #0]
 23f717e:	4b04      	ldr	r3, [pc, #16]	; (23f7190 <hal_i2c_init+0x18>)
 23f7180:	4403      	add	r3, r0
 23f7182:	681b      	ldr	r3, [r3, #0]
 23f7184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7186:	9302      	str	r3, [sp, #8]
 23f7188:	bd09      	pop	{r0, r3, pc}
 23f718a:	0000      	.short	0x0000
 23f718c:	1006a0f8 	.word	0x1006a0f8
 23f7190:	00000010 	.word	0x00000010

023f7194 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 23f7194:	b509      	push	{r0, r3, lr}
 23f7196:	4804      	ldr	r0, [pc, #16]	; (23f71a8 <hal_i2c_lock+0x14>)
 23f7198:	6800      	ldr	r0, [r0, #0]
 23f719a:	4b04      	ldr	r3, [pc, #16]	; (23f71ac <hal_i2c_lock+0x18>)
 23f719c:	4403      	add	r3, r0
 23f719e:	681b      	ldr	r3, [r3, #0]
 23f71a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f71a2:	9302      	str	r3, [sp, #8]
 23f71a4:	bd09      	pop	{r0, r3, pc}
 23f71a6:	0000      	.short	0x0000
 23f71a8:	1006a0f8 	.word	0x1006a0f8
 23f71ac:	00000010 	.word	0x00000010

023f71b0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 23f71b0:	b509      	push	{r0, r3, lr}
 23f71b2:	4804      	ldr	r0, [pc, #16]	; (23f71c4 <hal_i2c_unlock+0x14>)
 23f71b4:	6800      	ldr	r0, [r0, #0]
 23f71b6:	4b04      	ldr	r3, [pc, #16]	; (23f71c8 <hal_i2c_unlock+0x18>)
 23f71b8:	4403      	add	r3, r0
 23f71ba:	681b      	ldr	r3, [r3, #0]
 23f71bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f71be:	9302      	str	r3, [sp, #8]
 23f71c0:	bd09      	pop	{r0, r3, pc}
 23f71c2:	0000      	.short	0x0000
 23f71c4:	1006a0f8 	.word	0x1006a0f8
 23f71c8:	00000010 	.word	0x00000010

023f71cc <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23f71cc:	b509      	push	{r0, r3, lr}
 23f71ce:	4804      	ldr	r0, [pc, #16]	; (23f71e0 <hal_i2c_request_ex+0x14>)
 23f71d0:	6800      	ldr	r0, [r0, #0]
 23f71d2:	4b04      	ldr	r3, [pc, #16]	; (23f71e4 <hal_i2c_request_ex+0x18>)
 23f71d4:	4403      	add	r3, r0
 23f71d6:	681b      	ldr	r3, [r3, #0]
 23f71d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f71da:	9302      	str	r3, [sp, #8]
 23f71dc:	bd09      	pop	{r0, r3, pc}
 23f71de:	0000      	.short	0x0000
 23f71e0:	1006a0f8 	.word	0x1006a0f8
 23f71e4:	00000010 	.word	0x00000010

023f71e8 <hal_i2c_transaction>:
DYNALIB_FN(21, hal_i2c, hal_i2c_sleep, int(hal_i2c_interface_t i2c, bool sleep, void* reserved))
DYNALIB_FN(22, hal_i2c, hal_i2c_end_transmission_ext, int(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(23, hal_i2c, hal_i2c_transaction, int(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, const hal_i2c_transmission_config_t*, void*))
 23f71e8:	b509      	push	{r0, r3, lr}
 23f71ea:	4804      	ldr	r0, [pc, #16]	; (23f71fc <hal_i2c_transaction+0x14>)
 23f71ec:	6800      	ldr	r0, [r0, #0]
 23f71ee:	4b04      	ldr	r3, [pc, #16]	; (23f7200 <hal_i2c_transaction+0x18>)
 23f71f0:	4403      	add	r3, r0
 23f71f2:	681b      	ldr	r3, [r3, #0]
 23f71f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f71f6:	9302      	str	r3, [sp, #8]
 23f71f8:	bd09      	pop	{r0, r3, pc}
 23f71fa:	0000      	.short	0x0000
 23f71fc:	1006a0f8 	.word	0x1006a0f8
 23f7200:	00000010 	.word	0x00000010

023f7204 <if_get_by_index>:
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
 23f7204:	b509      	push	{r0, r3, lr}
 23f7206:	4804      	ldr	r0, [pc, #16]	; (23f7218 <if_get_by_index+0x14>)
 23f7208:	6800      	ldr	r0, [r0, #0]
 23f720a:	4b04      	ldr	r3, [pc, #16]	; (23f721c <if_get_by_index+0x18>)
 23f720c:	4403      	add	r3, r0
 23f720e:	681b      	ldr	r3, [r3, #0]
 23f7210:	699b      	ldr	r3, [r3, #24]
 23f7212:	9302      	str	r3, [sp, #8]
 23f7214:	bd09      	pop	{r0, r3, pc}
 23f7216:	0000      	.short	0x0000
 23f7218:	1006a0f8 	.word	0x1006a0f8
 23f721c:	00000054 	.word	0x00000054

023f7220 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f7220:	b509      	push	{r0, r3, lr}
 23f7222:	4804      	ldr	r0, [pc, #16]	; (23f7234 <inet_inet_ntop+0x14>)
 23f7224:	6800      	ldr	r0, [r0, #0]
 23f7226:	4b04      	ldr	r3, [pc, #16]	; (23f7238 <inet_inet_ntop+0x18>)
 23f7228:	4403      	add	r3, r0
 23f722a:	681b      	ldr	r3, [r3, #0]
 23f722c:	695b      	ldr	r3, [r3, #20]
 23f722e:	9302      	str	r3, [sp, #8]
 23f7230:	bd09      	pop	{r0, r3, pc}
 23f7232:	0000      	.short	0x0000
 23f7234:	1006a0f8 	.word	0x1006a0f8
 23f7238:	0000004c 	.word	0x0000004c

023f723c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f723c:	b509      	push	{r0, r3, lr}
 23f723e:	4804      	ldr	r0, [pc, #16]	; (23f7250 <netdb_freeaddrinfo+0x14>)
 23f7240:	6800      	ldr	r0, [r0, #0]
 23f7242:	4b04      	ldr	r3, [pc, #16]	; (23f7254 <netdb_freeaddrinfo+0x18>)
 23f7244:	4403      	add	r3, r0
 23f7246:	681b      	ldr	r3, [r3, #0]
 23f7248:	689b      	ldr	r3, [r3, #8]
 23f724a:	9302      	str	r3, [sp, #8]
 23f724c:	bd09      	pop	{r0, r3, pc}
 23f724e:	0000      	.short	0x0000
 23f7250:	1006a0f8 	.word	0x1006a0f8
 23f7254:	00000050 	.word	0x00000050

023f7258 <netdb_getaddrinfo_ex>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
DYNALIB_FN(4, hal_netdb, netdb_getnameinfo, int(const struct sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int))
DYNALIB_FN(5, hal_netdb, netdb_getaddrinfo_ex, int(const char*, const char*, const struct addrinfo*, struct addrinfo**, if_t))
 23f7258:	b509      	push	{r0, r3, lr}
 23f725a:	4804      	ldr	r0, [pc, #16]	; (23f726c <netdb_getaddrinfo_ex+0x14>)
 23f725c:	6800      	ldr	r0, [r0, #0]
 23f725e:	4b04      	ldr	r3, [pc, #16]	; (23f7270 <netdb_getaddrinfo_ex+0x18>)
 23f7260:	4403      	add	r3, r0
 23f7262:	681b      	ldr	r3, [r3, #0]
 23f7264:	695b      	ldr	r3, [r3, #20]
 23f7266:	9302      	str	r3, [sp, #8]
 23f7268:	bd09      	pop	{r0, r3, pc}
 23f726a:	0000      	.short	0x0000
 23f726c:	1006a0f8 	.word	0x1006a0f8
 23f7270:	00000050 	.word	0x00000050

023f7274 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23f7274:	b509      	push	{r0, r3, lr}
 23f7276:	4804      	ldr	r0, [pc, #16]	; (23f7288 <hal_spi_begin+0x14>)
 23f7278:	6800      	ldr	r0, [r0, #0]
 23f727a:	4b04      	ldr	r3, [pc, #16]	; (23f728c <hal_spi_begin+0x18>)
 23f727c:	4403      	add	r3, r0
 23f727e:	681b      	ldr	r3, [r3, #0]
 23f7280:	681b      	ldr	r3, [r3, #0]
 23f7282:	9302      	str	r3, [sp, #8]
 23f7284:	bd09      	pop	{r0, r3, pc}
 23f7286:	0000      	.short	0x0000
 23f7288:	1006a0f8 	.word	0x1006a0f8
 23f728c:	00000018 	.word	0x00000018

023f7290 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 23f7290:	b509      	push	{r0, r3, lr}
 23f7292:	4804      	ldr	r0, [pc, #16]	; (23f72a4 <hal_spi_end+0x14>)
 23f7294:	6800      	ldr	r0, [r0, #0]
 23f7296:	4b04      	ldr	r3, [pc, #16]	; (23f72a8 <hal_spi_end+0x18>)
 23f7298:	4403      	add	r3, r0
 23f729a:	681b      	ldr	r3, [r3, #0]
 23f729c:	685b      	ldr	r3, [r3, #4]
 23f729e:	9302      	str	r3, [sp, #8]
 23f72a0:	bd09      	pop	{r0, r3, pc}
 23f72a2:	0000      	.short	0x0000
 23f72a4:	1006a0f8 	.word	0x1006a0f8
 23f72a8:	00000018 	.word	0x00000018

023f72ac <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23f72ac:	b509      	push	{r0, r3, lr}
 23f72ae:	4804      	ldr	r0, [pc, #16]	; (23f72c0 <hal_spi_transfer+0x14>)
 23f72b0:	6800      	ldr	r0, [r0, #0]
 23f72b2:	4b04      	ldr	r3, [pc, #16]	; (23f72c4 <hal_spi_transfer+0x18>)
 23f72b4:	4403      	add	r3, r0
 23f72b6:	681b      	ldr	r3, [r3, #0]
 23f72b8:	695b      	ldr	r3, [r3, #20]
 23f72ba:	9302      	str	r3, [sp, #8]
 23f72bc:	bd09      	pop	{r0, r3, pc}
 23f72be:	0000      	.short	0x0000
 23f72c0:	1006a0f8 	.word	0x1006a0f8
 23f72c4:	00000018 	.word	0x00000018

023f72c8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f72c8:	b509      	push	{r0, r3, lr}
 23f72ca:	4804      	ldr	r0, [pc, #16]	; (23f72dc <hal_spi_init+0x14>)
 23f72cc:	6800      	ldr	r0, [r0, #0]
 23f72ce:	4b04      	ldr	r3, [pc, #16]	; (23f72e0 <hal_spi_init+0x18>)
 23f72d0:	4403      	add	r3, r0
 23f72d2:	681b      	ldr	r3, [r3, #0]
 23f72d4:	69db      	ldr	r3, [r3, #28]
 23f72d6:	9302      	str	r3, [sp, #8]
 23f72d8:	bd09      	pop	{r0, r3, pc}
 23f72da:	0000      	.short	0x0000
 23f72dc:	1006a0f8 	.word	0x1006a0f8
 23f72e0:	00000018 	.word	0x00000018

023f72e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f72e4:	b509      	push	{r0, r3, lr}
 23f72e6:	4804      	ldr	r0, [pc, #16]	; (23f72f8 <hal_spi_is_enabled+0x14>)
 23f72e8:	6800      	ldr	r0, [r0, #0]
 23f72ea:	4b04      	ldr	r3, [pc, #16]	; (23f72fc <hal_spi_is_enabled+0x18>)
 23f72ec:	4403      	add	r3, r0
 23f72ee:	681b      	ldr	r3, [r3, #0]
 23f72f0:	6a1b      	ldr	r3, [r3, #32]
 23f72f2:	9302      	str	r3, [sp, #8]
 23f72f4:	bd09      	pop	{r0, r3, pc}
 23f72f6:	0000      	.short	0x0000
 23f72f8:	1006a0f8 	.word	0x1006a0f8
 23f72fc:	00000018 	.word	0x00000018

023f7300 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23f7300:	b509      	push	{r0, r3, lr}
 23f7302:	4804      	ldr	r0, [pc, #16]	; (23f7314 <hal_spi_info+0x14>)
 23f7304:	6800      	ldr	r0, [r0, #0]
 23f7306:	4b04      	ldr	r3, [pc, #16]	; (23f7318 <hal_spi_info+0x18>)
 23f7308:	4403      	add	r3, r0
 23f730a:	681b      	ldr	r3, [r3, #0]
 23f730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f730e:	9302      	str	r3, [sp, #8]
 23f7310:	bd09      	pop	{r0, r3, pc}
 23f7312:	0000      	.short	0x0000
 23f7314:	1006a0f8 	.word	0x1006a0f8
 23f7318:	00000018 	.word	0x00000018

023f731c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23f731c:	b509      	push	{r0, r3, lr}
 23f731e:	4804      	ldr	r0, [pc, #16]	; (23f7330 <hal_spi_transfer_dma+0x14>)
 23f7320:	6800      	ldr	r0, [r0, #0]
 23f7322:	4b04      	ldr	r3, [pc, #16]	; (23f7334 <hal_spi_transfer_dma+0x18>)
 23f7324:	4403      	add	r3, r0
 23f7326:	681b      	ldr	r3, [r3, #0]
 23f7328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f732a:	9302      	str	r3, [sp, #8]
 23f732c:	bd09      	pop	{r0, r3, pc}
 23f732e:	0000      	.short	0x0000
 23f7330:	1006a0f8 	.word	0x1006a0f8
 23f7334:	00000018 	.word	0x00000018

023f7338 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23f7338:	b509      	push	{r0, r3, lr}
 23f733a:	4804      	ldr	r0, [pc, #16]	; (23f734c <hal_spi_transfer_dma_status+0x14>)
 23f733c:	6800      	ldr	r0, [r0, #0]
 23f733e:	4b04      	ldr	r3, [pc, #16]	; (23f7350 <hal_spi_transfer_dma_status+0x18>)
 23f7340:	4403      	add	r3, r0
 23f7342:	681b      	ldr	r3, [r3, #0]
 23f7344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f7346:	9302      	str	r3, [sp, #8]
 23f7348:	bd09      	pop	{r0, r3, pc}
 23f734a:	0000      	.short	0x0000
 23f734c:	1006a0f8 	.word	0x1006a0f8
 23f7350:	00000018 	.word	0x00000018

023f7354 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23f7354:	b509      	push	{r0, r3, lr}
 23f7356:	4804      	ldr	r0, [pc, #16]	; (23f7368 <hal_spi_set_settings+0x14>)
 23f7358:	6800      	ldr	r0, [r0, #0]
 23f735a:	4b04      	ldr	r3, [pc, #16]	; (23f736c <hal_spi_set_settings+0x18>)
 23f735c:	4403      	add	r3, r0
 23f735e:	681b      	ldr	r3, [r3, #0]
 23f7360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7362:	9302      	str	r3, [sp, #8]
 23f7364:	bd09      	pop	{r0, r3, pc}
 23f7366:	0000      	.short	0x0000
 23f7368:	1006a0f8 	.word	0x1006a0f8
 23f736c:	00000018 	.word	0x00000018

023f7370 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23f7370:	b509      	push	{r0, r3, lr}
 23f7372:	4804      	ldr	r0, [pc, #16]	; (23f7384 <hal_spi_acquire+0x14>)
 23f7374:	6800      	ldr	r0, [r0, #0]
 23f7376:	4b04      	ldr	r3, [pc, #16]	; (23f7388 <hal_spi_acquire+0x18>)
 23f7378:	4403      	add	r3, r0
 23f737a:	681b      	ldr	r3, [r3, #0]
 23f737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f737e:	9302      	str	r3, [sp, #8]
 23f7380:	bd09      	pop	{r0, r3, pc}
 23f7382:	0000      	.short	0x0000
 23f7384:	1006a0f8 	.word	0x1006a0f8
 23f7388:	00000018 	.word	0x00000018

023f738c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23f738c:	b509      	push	{r0, r3, lr}
 23f738e:	4804      	ldr	r0, [pc, #16]	; (23f73a0 <hal_spi_release+0x14>)
 23f7390:	6800      	ldr	r0, [r0, #0]
 23f7392:	4b04      	ldr	r3, [pc, #16]	; (23f73a4 <hal_spi_release+0x18>)
 23f7394:	4403      	add	r3, r0
 23f7396:	681b      	ldr	r3, [r3, #0]
 23f7398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f739a:	9302      	str	r3, [sp, #8]
 23f739c:	bd09      	pop	{r0, r3, pc}
 23f739e:	0000      	.short	0x0000
 23f73a0:	1006a0f8 	.word	0x1006a0f8
 23f73a4:	00000018 	.word	0x00000018

023f73a8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f73a8:	b509      	push	{r0, r3, lr}
 23f73aa:	4804      	ldr	r0, [pc, #16]	; (23f73bc <hal_usart_write+0x14>)
 23f73ac:	6800      	ldr	r0, [r0, #0]
 23f73ae:	4b04      	ldr	r3, [pc, #16]	; (23f73c0 <hal_usart_write+0x18>)
 23f73b0:	4403      	add	r3, r0
 23f73b2:	681b      	ldr	r3, [r3, #0]
 23f73b4:	68db      	ldr	r3, [r3, #12]
 23f73b6:	9302      	str	r3, [sp, #8]
 23f73b8:	bd09      	pop	{r0, r3, pc}
 23f73ba:	0000      	.short	0x0000
 23f73bc:	1006a0f8 	.word	0x1006a0f8
 23f73c0:	00000024 	.word	0x00000024

023f73c4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f73c4:	b509      	push	{r0, r3, lr}
 23f73c6:	4804      	ldr	r0, [pc, #16]	; (23f73d8 <hal_usart_available+0x14>)
 23f73c8:	6800      	ldr	r0, [r0, #0]
 23f73ca:	4b04      	ldr	r3, [pc, #16]	; (23f73dc <hal_usart_available+0x18>)
 23f73cc:	4403      	add	r3, r0
 23f73ce:	681b      	ldr	r3, [r3, #0]
 23f73d0:	691b      	ldr	r3, [r3, #16]
 23f73d2:	9302      	str	r3, [sp, #8]
 23f73d4:	bd09      	pop	{r0, r3, pc}
 23f73d6:	0000      	.short	0x0000
 23f73d8:	1006a0f8 	.word	0x1006a0f8
 23f73dc:	00000024 	.word	0x00000024

023f73e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f73e0:	b509      	push	{r0, r3, lr}
 23f73e2:	4804      	ldr	r0, [pc, #16]	; (23f73f4 <hal_usart_read+0x14>)
 23f73e4:	6800      	ldr	r0, [r0, #0]
 23f73e6:	4b04      	ldr	r3, [pc, #16]	; (23f73f8 <hal_usart_read+0x18>)
 23f73e8:	4403      	add	r3, r0
 23f73ea:	681b      	ldr	r3, [r3, #0]
 23f73ec:	695b      	ldr	r3, [r3, #20]
 23f73ee:	9302      	str	r3, [sp, #8]
 23f73f0:	bd09      	pop	{r0, r3, pc}
 23f73f2:	0000      	.short	0x0000
 23f73f4:	1006a0f8 	.word	0x1006a0f8
 23f73f8:	00000024 	.word	0x00000024

023f73fc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f73fc:	b509      	push	{r0, r3, lr}
 23f73fe:	4804      	ldr	r0, [pc, #16]	; (23f7410 <hal_usart_peek+0x14>)
 23f7400:	6800      	ldr	r0, [r0, #0]
 23f7402:	4b04      	ldr	r3, [pc, #16]	; (23f7414 <hal_usart_peek+0x18>)
 23f7404:	4403      	add	r3, r0
 23f7406:	681b      	ldr	r3, [r3, #0]
 23f7408:	699b      	ldr	r3, [r3, #24]
 23f740a:	9302      	str	r3, [sp, #8]
 23f740c:	bd09      	pop	{r0, r3, pc}
 23f740e:	0000      	.short	0x0000
 23f7410:	1006a0f8 	.word	0x1006a0f8
 23f7414:	00000024 	.word	0x00000024

023f7418 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f7418:	b509      	push	{r0, r3, lr}
 23f741a:	4804      	ldr	r0, [pc, #16]	; (23f742c <hal_usart_flush+0x14>)
 23f741c:	6800      	ldr	r0, [r0, #0]
 23f741e:	4b04      	ldr	r3, [pc, #16]	; (23f7430 <hal_usart_flush+0x18>)
 23f7420:	4403      	add	r3, r0
 23f7422:	681b      	ldr	r3, [r3, #0]
 23f7424:	69db      	ldr	r3, [r3, #28]
 23f7426:	9302      	str	r3, [sp, #8]
 23f7428:	bd09      	pop	{r0, r3, pc}
 23f742a:	0000      	.short	0x0000
 23f742c:	1006a0f8 	.word	0x1006a0f8
 23f7430:	00000024 	.word	0x00000024

023f7434 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f7434:	b509      	push	{r0, r3, lr}
 23f7436:	4804      	ldr	r0, [pc, #16]	; (23f7448 <hal_usart_is_enabled+0x14>)
 23f7438:	6800      	ldr	r0, [r0, #0]
 23f743a:	4b04      	ldr	r3, [pc, #16]	; (23f744c <hal_usart_is_enabled+0x18>)
 23f743c:	4403      	add	r3, r0
 23f743e:	681b      	ldr	r3, [r3, #0]
 23f7440:	6a1b      	ldr	r3, [r3, #32]
 23f7442:	9302      	str	r3, [sp, #8]
 23f7444:	bd09      	pop	{r0, r3, pc}
 23f7446:	0000      	.short	0x0000
 23f7448:	1006a0f8 	.word	0x1006a0f8
 23f744c:	00000024 	.word	0x00000024

023f7450 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f7450:	b509      	push	{r0, r3, lr}
 23f7452:	4804      	ldr	r0, [pc, #16]	; (23f7464 <hal_usart_available_data_for_write+0x14>)
 23f7454:	6800      	ldr	r0, [r0, #0]
 23f7456:	4b04      	ldr	r3, [pc, #16]	; (23f7468 <hal_usart_available_data_for_write+0x18>)
 23f7458:	4403      	add	r3, r0
 23f745a:	681b      	ldr	r3, [r3, #0]
 23f745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f745e:	9302      	str	r3, [sp, #8]
 23f7460:	bd09      	pop	{r0, r3, pc}
 23f7462:	0000      	.short	0x0000
 23f7464:	1006a0f8 	.word	0x1006a0f8
 23f7468:	00000024 	.word	0x00000024

023f746c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f746c:	b509      	push	{r0, r3, lr}
 23f746e:	4804      	ldr	r0, [pc, #16]	; (23f7480 <hal_usart_init_ex+0x14>)
 23f7470:	6800      	ldr	r0, [r0, #0]
 23f7472:	4b04      	ldr	r3, [pc, #16]	; (23f7484 <hal_usart_init_ex+0x18>)
 23f7474:	4403      	add	r3, r0
 23f7476:	681b      	ldr	r3, [r3, #0]
 23f7478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f747a:	9302      	str	r3, [sp, #8]
 23f747c:	bd09      	pop	{r0, r3, pc}
 23f747e:	0000      	.short	0x0000
 23f7480:	1006a0f8 	.word	0x1006a0f8
 23f7484:	00000024 	.word	0x00000024

023f7488 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f7488:	b509      	push	{r0, r3, lr}
 23f748a:	4804      	ldr	r0, [pc, #16]	; (23f749c <HAL_USB_USART_Init+0x14>)
 23f748c:	6800      	ldr	r0, [r0, #0]
 23f748e:	4b04      	ldr	r3, [pc, #16]	; (23f74a0 <HAL_USB_USART_Init+0x18>)
 23f7490:	4403      	add	r3, r0
 23f7492:	681b      	ldr	r3, [r3, #0]
 23f7494:	681b      	ldr	r3, [r3, #0]
 23f7496:	9302      	str	r3, [sp, #8]
 23f7498:	bd09      	pop	{r0, r3, pc}
 23f749a:	0000      	.short	0x0000
 23f749c:	1006a0f8 	.word	0x1006a0f8
 23f74a0:	00000034 	.word	0x00000034

023f74a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f74a4:	b509      	push	{r0, r3, lr}
 23f74a6:	4804      	ldr	r0, [pc, #16]	; (23f74b8 <HAL_USB_USART_Begin+0x14>)
 23f74a8:	6800      	ldr	r0, [r0, #0]
 23f74aa:	4b04      	ldr	r3, [pc, #16]	; (23f74bc <HAL_USB_USART_Begin+0x18>)
 23f74ac:	4403      	add	r3, r0
 23f74ae:	681b      	ldr	r3, [r3, #0]
 23f74b0:	685b      	ldr	r3, [r3, #4]
 23f74b2:	9302      	str	r3, [sp, #8]
 23f74b4:	bd09      	pop	{r0, r3, pc}
 23f74b6:	0000      	.short	0x0000
 23f74b8:	1006a0f8 	.word	0x1006a0f8
 23f74bc:	00000034 	.word	0x00000034

023f74c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f74c0:	b509      	push	{r0, r3, lr}
 23f74c2:	4804      	ldr	r0, [pc, #16]	; (23f74d4 <HAL_USB_USART_Available_Data+0x14>)
 23f74c4:	6800      	ldr	r0, [r0, #0]
 23f74c6:	4b04      	ldr	r3, [pc, #16]	; (23f74d8 <HAL_USB_USART_Available_Data+0x18>)
 23f74c8:	4403      	add	r3, r0
 23f74ca:	681b      	ldr	r3, [r3, #0]
 23f74cc:	691b      	ldr	r3, [r3, #16]
 23f74ce:	9302      	str	r3, [sp, #8]
 23f74d0:	bd09      	pop	{r0, r3, pc}
 23f74d2:	0000      	.short	0x0000
 23f74d4:	1006a0f8 	.word	0x1006a0f8
 23f74d8:	00000034 	.word	0x00000034

023f74dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f74dc:	b509      	push	{r0, r3, lr}
 23f74de:	4804      	ldr	r0, [pc, #16]	; (23f74f0 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f74e0:	6800      	ldr	r0, [r0, #0]
 23f74e2:	4b04      	ldr	r3, [pc, #16]	; (23f74f4 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f74e4:	4403      	add	r3, r0
 23f74e6:	681b      	ldr	r3, [r3, #0]
 23f74e8:	695b      	ldr	r3, [r3, #20]
 23f74ea:	9302      	str	r3, [sp, #8]
 23f74ec:	bd09      	pop	{r0, r3, pc}
 23f74ee:	0000      	.short	0x0000
 23f74f0:	1006a0f8 	.word	0x1006a0f8
 23f74f4:	00000034 	.word	0x00000034

023f74f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f74f8:	b509      	push	{r0, r3, lr}
 23f74fa:	4804      	ldr	r0, [pc, #16]	; (23f750c <HAL_USB_USART_Receive_Data+0x14>)
 23f74fc:	6800      	ldr	r0, [r0, #0]
 23f74fe:	4b04      	ldr	r3, [pc, #16]	; (23f7510 <HAL_USB_USART_Receive_Data+0x18>)
 23f7500:	4403      	add	r3, r0
 23f7502:	681b      	ldr	r3, [r3, #0]
 23f7504:	699b      	ldr	r3, [r3, #24]
 23f7506:	9302      	str	r3, [sp, #8]
 23f7508:	bd09      	pop	{r0, r3, pc}
 23f750a:	0000      	.short	0x0000
 23f750c:	1006a0f8 	.word	0x1006a0f8
 23f7510:	00000034 	.word	0x00000034

023f7514 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f7514:	b509      	push	{r0, r3, lr}
 23f7516:	4804      	ldr	r0, [pc, #16]	; (23f7528 <HAL_USB_USART_Send_Data+0x14>)
 23f7518:	6800      	ldr	r0, [r0, #0]
 23f751a:	4b04      	ldr	r3, [pc, #16]	; (23f752c <HAL_USB_USART_Send_Data+0x18>)
 23f751c:	4403      	add	r3, r0
 23f751e:	681b      	ldr	r3, [r3, #0]
 23f7520:	69db      	ldr	r3, [r3, #28]
 23f7522:	9302      	str	r3, [sp, #8]
 23f7524:	bd09      	pop	{r0, r3, pc}
 23f7526:	0000      	.short	0x0000
 23f7528:	1006a0f8 	.word	0x1006a0f8
 23f752c:	00000034 	.word	0x00000034

023f7530 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f7530:	b509      	push	{r0, r3, lr}
 23f7532:	4804      	ldr	r0, [pc, #16]	; (23f7544 <HAL_USB_USART_Flush_Data+0x14>)
 23f7534:	6800      	ldr	r0, [r0, #0]
 23f7536:	4b04      	ldr	r3, [pc, #16]	; (23f7548 <HAL_USB_USART_Flush_Data+0x18>)
 23f7538:	4403      	add	r3, r0
 23f753a:	681b      	ldr	r3, [r3, #0]
 23f753c:	6a1b      	ldr	r3, [r3, #32]
 23f753e:	9302      	str	r3, [sp, #8]
 23f7540:	bd09      	pop	{r0, r3, pc}
 23f7542:	0000      	.short	0x0000
 23f7544:	1006a0f8 	.word	0x1006a0f8
 23f7548:	00000034 	.word	0x00000034

023f754c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f754c:	b509      	push	{r0, r3, lr}
 23f754e:	4804      	ldr	r0, [pc, #16]	; (23f7560 <HAL_USB_USART_Is_Connected+0x14>)
 23f7550:	6800      	ldr	r0, [r0, #0]
 23f7552:	4b04      	ldr	r3, [pc, #16]	; (23f7564 <HAL_USB_USART_Is_Connected+0x18>)
 23f7554:	4403      	add	r3, r0
 23f7556:	681b      	ldr	r3, [r3, #0]
 23f7558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f755a:	9302      	str	r3, [sp, #8]
 23f755c:	bd09      	pop	{r0, r3, pc}
 23f755e:	0000      	.short	0x0000
 23f7560:	1006a0f8 	.word	0x1006a0f8
 23f7564:	00000034 	.word	0x00000034

023f7568 <hal_watchdog_set_config>:

#if HAL_PLATFORM_HW_WATCHDOG

DYNALIB_BEGIN(hal_watchdog)

DYNALIB_FN(0, hal_watchdog, hal_watchdog_set_config, int(hal_watchdog_instance_t, const hal_watchdog_config_t*, void*))
 23f7568:	b509      	push	{r0, r3, lr}
 23f756a:	4804      	ldr	r0, [pc, #16]	; (23f757c <hal_watchdog_set_config+0x14>)
 23f756c:	6800      	ldr	r0, [r0, #0]
 23f756e:	4b04      	ldr	r3, [pc, #16]	; (23f7580 <hal_watchdog_set_config+0x18>)
 23f7570:	4403      	add	r3, r0
 23f7572:	681b      	ldr	r3, [r3, #0]
 23f7574:	681b      	ldr	r3, [r3, #0]
 23f7576:	9302      	str	r3, [sp, #8]
 23f7578:	bd09      	pop	{r0, r3, pc}
 23f757a:	0000      	.short	0x0000
 23f757c:	1006a0f8 	.word	0x1006a0f8
 23f7580:	00000070 	.word	0x00000070

023f7584 <hal_watchdog_start>:
DYNALIB_FN(1, hal_watchdog, hal_watchdog_on_expired_callback, int(hal_watchdog_instance_t, hal_watchdog_on_expired_callback_t, void*, void*))
DYNALIB_FN(2, hal_watchdog, hal_watchdog_start, int(hal_watchdog_instance_t, void*))
 23f7584:	b509      	push	{r0, r3, lr}
 23f7586:	4804      	ldr	r0, [pc, #16]	; (23f7598 <hal_watchdog_start+0x14>)
 23f7588:	6800      	ldr	r0, [r0, #0]
 23f758a:	4b04      	ldr	r3, [pc, #16]	; (23f759c <hal_watchdog_start+0x18>)
 23f758c:	4403      	add	r3, r0
 23f758e:	681b      	ldr	r3, [r3, #0]
 23f7590:	689b      	ldr	r3, [r3, #8]
 23f7592:	9302      	str	r3, [sp, #8]
 23f7594:	bd09      	pop	{r0, r3, pc}
 23f7596:	0000      	.short	0x0000
 23f7598:	1006a0f8 	.word	0x1006a0f8
 23f759c:	00000070 	.word	0x00000070

023f75a0 <hal_watchdog_refresh>:
DYNALIB_FN(3, hal_watchdog, hal_watchdog_stop, int(hal_watchdog_instance_t, void*))
DYNALIB_FN(4, hal_watchdog, hal_watchdog_refresh, int(hal_watchdog_instance_t, void*))
 23f75a0:	b509      	push	{r0, r3, lr}
 23f75a2:	4804      	ldr	r0, [pc, #16]	; (23f75b4 <hal_watchdog_refresh+0x14>)
 23f75a4:	6800      	ldr	r0, [r0, #0]
 23f75a6:	4b04      	ldr	r3, [pc, #16]	; (23f75b8 <hal_watchdog_refresh+0x18>)
 23f75a8:	4403      	add	r3, r0
 23f75aa:	681b      	ldr	r3, [r3, #0]
 23f75ac:	691b      	ldr	r3, [r3, #16]
 23f75ae:	9302      	str	r3, [sp, #8]
 23f75b0:	bd09      	pop	{r0, r3, pc}
 23f75b2:	0000      	.short	0x0000
 23f75b4:	1006a0f8 	.word	0x1006a0f8
 23f75b8:	00000070 	.word	0x00000070

023f75bc <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f75bc:	b509      	push	{r0, r3, lr}
 23f75be:	4804      	ldr	r0, [pc, #16]	; (23f75d0 <log_message_v+0x14>)
 23f75c0:	6800      	ldr	r0, [r0, #0]
 23f75c2:	4b04      	ldr	r3, [pc, #16]	; (23f75d4 <log_message_v+0x18>)
 23f75c4:	4403      	add	r3, r0
 23f75c6:	681b      	ldr	r3, [r3, #0]
 23f75c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f75ca:	9302      	str	r3, [sp, #8]
 23f75cc:	bd09      	pop	{r0, r3, pc}
 23f75ce:	0000      	.short	0x0000
 23f75d0:	1006a0f8 	.word	0x1006a0f8
 23f75d4:	00000048 	.word	0x00000048

023f75d8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 23f75d8:	b509      	push	{r0, r3, lr}
 23f75da:	4804      	ldr	r0, [pc, #16]	; (23f75ec <diag_get_source+0x14>)
 23f75dc:	6800      	ldr	r0, [r0, #0]
 23f75de:	4b04      	ldr	r3, [pc, #16]	; (23f75f0 <diag_get_source+0x18>)
 23f75e0:	4403      	add	r3, r0
 23f75e2:	681b      	ldr	r3, [r3, #0]
 23f75e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f75e8:	9302      	str	r3, [sp, #8]
 23f75ea:	bd09      	pop	{r0, r3, pc}
 23f75ec:	1006a0f8 	.word	0x1006a0f8
 23f75f0:	00000048 	.word	0x00000048

023f75f4 <panic_ext>:
DYNALIB_FN(48, services, devicetree_tree_lock, int(void*))
DYNALIB_FN(49, services, devicetree_tree_get, int(void*, uint32_t, void*))
DYNALIB_FN(50, services, devicetree_string_dictionary_lookup, const char*(uint32_t, void*))
DYNALIB_FN(51, services, devicetree_hash_string, uint32_t(const char*, size_t))
DYNALIB_FN(52, services, security_mode_get, int(void*))
DYNALIB_FN(53, services, panic_ext, void(const PanicData*, void*))
 23f75f4:	b509      	push	{r0, r3, lr}
 23f75f6:	4804      	ldr	r0, [pc, #16]	; (23f7608 <panic_ext+0x14>)
 23f75f8:	6800      	ldr	r0, [r0, #0]
 23f75fa:	4b04      	ldr	r3, [pc, #16]	; (23f760c <panic_ext+0x18>)
 23f75fc:	4403      	add	r3, r0
 23f75fe:	681b      	ldr	r3, [r3, #0]
 23f7600:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 23f7604:	9302      	str	r3, [sp, #8]
 23f7606:	bd09      	pop	{r0, r3, pc}
 23f7608:	1006a0f8 	.word	0x1006a0f8
 23f760c:	00000048 	.word	0x00000048

023f7610 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f7610:	b509      	push	{r0, r3, lr}
 23f7612:	4804      	ldr	r0, [pc, #16]	; (23f7624 <system_mode+0x14>)
 23f7614:	6800      	ldr	r0, [r0, #0]
 23f7616:	4b04      	ldr	r3, [pc, #16]	; (23f7628 <system_mode+0x18>)
 23f7618:	4403      	add	r3, r0
 23f761a:	681b      	ldr	r3, [r3, #0]
 23f761c:	681b      	ldr	r3, [r3, #0]
 23f761e:	9302      	str	r3, [sp, #8]
 23f7620:	bd09      	pop	{r0, r3, pc}
 23f7622:	0000      	.short	0x0000
 23f7624:	1006a0f8 	.word	0x1006a0f8
 23f7628:	00000008 	.word	0x00000008

023f762c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f762c:	b509      	push	{r0, r3, lr}
 23f762e:	4804      	ldr	r0, [pc, #16]	; (23f7640 <set_system_mode+0x14>)
 23f7630:	6800      	ldr	r0, [r0, #0]
 23f7632:	4b04      	ldr	r3, [pc, #16]	; (23f7644 <set_system_mode+0x18>)
 23f7634:	4403      	add	r3, r0
 23f7636:	681b      	ldr	r3, [r3, #0]
 23f7638:	685b      	ldr	r3, [r3, #4]
 23f763a:	9302      	str	r3, [sp, #8]
 23f763c:	bd09      	pop	{r0, r3, pc}
 23f763e:	0000      	.short	0x0000
 23f7640:	1006a0f8 	.word	0x1006a0f8
 23f7644:	00000008 	.word	0x00000008

023f7648 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f7648:	b509      	push	{r0, r3, lr}
 23f764a:	4804      	ldr	r0, [pc, #16]	; (23f765c <system_delay_ms+0x14>)
 23f764c:	6800      	ldr	r0, [r0, #0]
 23f764e:	4b04      	ldr	r3, [pc, #16]	; (23f7660 <system_delay_ms+0x18>)
 23f7650:	4403      	add	r3, r0
 23f7652:	681b      	ldr	r3, [r3, #0]
 23f7654:	695b      	ldr	r3, [r3, #20]
 23f7656:	9302      	str	r3, [sp, #8]
 23f7658:	bd09      	pop	{r0, r3, pc}
 23f765a:	0000      	.short	0x0000
 23f765c:	1006a0f8 	.word	0x1006a0f8
 23f7660:	00000008 	.word	0x00000008

023f7664 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23f7664:	b509      	push	{r0, r3, lr}
 23f7666:	4804      	ldr	r0, [pc, #16]	; (23f7678 <system_subscribe_event+0x14>)
 23f7668:	6800      	ldr	r0, [r0, #0]
 23f766a:	4b04      	ldr	r3, [pc, #16]	; (23f767c <system_subscribe_event+0x18>)
 23f766c:	4403      	add	r3, r0
 23f766e:	681b      	ldr	r3, [r3, #0]
 23f7670:	6a1b      	ldr	r3, [r3, #32]
 23f7672:	9302      	str	r3, [sp, #8]
 23f7674:	bd09      	pop	{r0, r3, pc}
 23f7676:	0000      	.short	0x0000
 23f7678:	1006a0f8 	.word	0x1006a0f8
 23f767c:	00000008 	.word	0x00000008

023f7680 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f7680:	b509      	push	{r0, r3, lr}
 23f7682:	4804      	ldr	r0, [pc, #16]	; (23f7694 <system_thread_set_state+0x14>)
 23f7684:	6800      	ldr	r0, [r0, #0]
 23f7686:	4b04      	ldr	r3, [pc, #16]	; (23f7698 <system_thread_set_state+0x18>)
 23f7688:	4403      	add	r3, r0
 23f768a:	681b      	ldr	r3, [r3, #0]
 23f768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f768e:	9302      	str	r3, [sp, #8]
 23f7690:	bd09      	pop	{r0, r3, pc}
 23f7692:	0000      	.short	0x0000
 23f7694:	1006a0f8 	.word	0x1006a0f8
 23f7698:	00000008 	.word	0x00000008

023f769c <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 23f769c:	b509      	push	{r0, r3, lr}
 23f769e:	4804      	ldr	r0, [pc, #16]	; (23f76b0 <system_version_info+0x14>)
 23f76a0:	6800      	ldr	r0, [r0, #0]
 23f76a2:	4b04      	ldr	r3, [pc, #16]	; (23f76b4 <system_version_info+0x18>)
 23f76a4:	4403      	add	r3, r0
 23f76a6:	681b      	ldr	r3, [r3, #0]
 23f76a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f76aa:	9302      	str	r3, [sp, #8]
 23f76ac:	bd09      	pop	{r0, r3, pc}
 23f76ae:	0000      	.short	0x0000
 23f76b0:	1006a0f8 	.word	0x1006a0f8
 23f76b4:	00000008 	.word	0x00000008

023f76b8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23f76b8:	b509      	push	{r0, r3, lr}
 23f76ba:	4804      	ldr	r0, [pc, #16]	; (23f76cc <application_thread_current+0x14>)
 23f76bc:	6800      	ldr	r0, [r0, #0]
 23f76be:	4b04      	ldr	r3, [pc, #16]	; (23f76d0 <application_thread_current+0x18>)
 23f76c0:	4403      	add	r3, r0
 23f76c2:	681b      	ldr	r3, [r3, #0]
 23f76c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f76c6:	9302      	str	r3, [sp, #8]
 23f76c8:	bd09      	pop	{r0, r3, pc}
 23f76ca:	0000      	.short	0x0000
 23f76cc:	1006a0f8 	.word	0x1006a0f8
 23f76d0:	00000008 	.word	0x00000008

023f76d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23f76d4:	b509      	push	{r0, r3, lr}
 23f76d6:	4804      	ldr	r0, [pc, #16]	; (23f76e8 <application_thread_invoke+0x14>)
 23f76d8:	6800      	ldr	r0, [r0, #0]
 23f76da:	4b04      	ldr	r3, [pc, #16]	; (23f76ec <application_thread_invoke+0x18>)
 23f76dc:	4403      	add	r3, r0
 23f76de:	681b      	ldr	r3, [r3, #0]
 23f76e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f76e2:	9302      	str	r3, [sp, #8]
 23f76e4:	bd09      	pop	{r0, r3, pc}
 23f76e6:	0000      	.short	0x0000
 23f76e8:	1006a0f8 	.word	0x1006a0f8
 23f76ec:	00000008 	.word	0x00000008

023f76f0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f76f0:	b509      	push	{r0, r3, lr}
 23f76f2:	4804      	ldr	r0, [pc, #16]	; (23f7704 <system_thread_get_state+0x14>)
 23f76f4:	6800      	ldr	r0, [r0, #0]
 23f76f6:	4b04      	ldr	r3, [pc, #16]	; (23f7708 <system_thread_get_state+0x18>)
 23f76f8:	4403      	add	r3, r0
 23f76fa:	681b      	ldr	r3, [r3, #0]
 23f76fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f76fe:	9302      	str	r3, [sp, #8]
 23f7700:	bd09      	pop	{r0, r3, pc}
 23f7702:	0000      	.short	0x0000
 23f7704:	1006a0f8 	.word	0x1006a0f8
 23f7708:	00000008 	.word	0x00000008

023f770c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 23f770c:	b509      	push	{r0, r3, lr}
 23f770e:	4804      	ldr	r0, [pc, #16]	; (23f7720 <system_notify_time_changed+0x14>)
 23f7710:	6800      	ldr	r0, [r0, #0]
 23f7712:	4b04      	ldr	r3, [pc, #16]	; (23f7724 <system_notify_time_changed+0x18>)
 23f7714:	4403      	add	r3, r0
 23f7716:	681b      	ldr	r3, [r3, #0]
 23f7718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f771a:	9302      	str	r3, [sp, #8]
 23f771c:	bd09      	pop	{r0, r3, pc}
 23f771e:	0000      	.short	0x0000
 23f7720:	1006a0f8 	.word	0x1006a0f8
 23f7724:	00000008 	.word	0x00000008

023f7728 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f7728:	b509      	push	{r0, r3, lr}
 23f772a:	4804      	ldr	r0, [pc, #16]	; (23f773c <system_ctrl_set_app_request_handler+0x14>)
 23f772c:	6800      	ldr	r0, [r0, #0]
 23f772e:	4b04      	ldr	r3, [pc, #16]	; (23f7740 <system_ctrl_set_app_request_handler+0x18>)
 23f7730:	4403      	add	r3, r0
 23f7732:	681b      	ldr	r3, [r3, #0]
 23f7734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f7738:	9302      	str	r3, [sp, #8]
 23f773a:	bd09      	pop	{r0, r3, pc}
 23f773c:	1006a0f8 	.word	0x1006a0f8
 23f7740:	00000008 	.word	0x00000008

023f7744 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f7744:	b509      	push	{r0, r3, lr}
 23f7746:	4804      	ldr	r0, [pc, #16]	; (23f7758 <system_ctrl_set_result+0x14>)
 23f7748:	6800      	ldr	r0, [r0, #0]
 23f774a:	4b04      	ldr	r3, [pc, #16]	; (23f775c <system_ctrl_set_result+0x18>)
 23f774c:	4403      	add	r3, r0
 23f774e:	681b      	ldr	r3, [r3, #0]
 23f7750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f7754:	9302      	str	r3, [sp, #8]
 23f7756:	bd09      	pop	{r0, r3, pc}
 23f7758:	1006a0f8 	.word	0x1006a0f8
 23f775c:	00000008 	.word	0x00000008

023f7760 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 23f7760:	b509      	push	{r0, r3, lr}
 23f7762:	4804      	ldr	r0, [pc, #16]	; (23f7774 <system_power_management_set_config+0x14>)
 23f7764:	6800      	ldr	r0, [r0, #0]
 23f7766:	4b04      	ldr	r3, [pc, #16]	; (23f7778 <system_power_management_set_config+0x18>)
 23f7768:	4403      	add	r3, r0
 23f776a:	681b      	ldr	r3, [r3, #0]
 23f776c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23f7770:	9302      	str	r3, [sp, #8]
 23f7772:	bd09      	pop	{r0, r3, pc}
 23f7774:	1006a0f8 	.word	0x1006a0f8
 23f7778:	00000008 	.word	0x00000008

023f777c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f777c:	b509      	push	{r0, r3, lr}
 23f777e:	4804      	ldr	r0, [pc, #16]	; (23f7790 <system_reset+0x14>)
 23f7780:	6800      	ldr	r0, [r0, #0]
 23f7782:	4b04      	ldr	r3, [pc, #16]	; (23f7794 <system_reset+0x18>)
 23f7784:	4403      	add	r3, r0
 23f7786:	681b      	ldr	r3, [r3, #0]
 23f7788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 23f778c:	9302      	str	r3, [sp, #8]
 23f778e:	bd09      	pop	{r0, r3, pc}
 23f7790:	1006a0f8 	.word	0x1006a0f8
 23f7794:	00000008 	.word	0x00000008

023f7798 <system_power_management_get_config>:

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
 23f7798:	b509      	push	{r0, r3, lr}
 23f779a:	4804      	ldr	r0, [pc, #16]	; (23f77ac <system_power_management_get_config+0x14>)
 23f779c:	6800      	ldr	r0, [r0, #0]
 23f779e:	4b04      	ldr	r3, [pc, #16]	; (23f77b0 <system_power_management_get_config+0x18>)
 23f77a0:	4403      	add	r3, r0
 23f77a2:	681b      	ldr	r3, [r3, #0]
 23f77a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23f77a8:	9302      	str	r3, [sp, #8]
 23f77aa:	bd09      	pop	{r0, r3, pc}
 23f77ac:	1006a0f8 	.word	0x1006a0f8
 23f77b0:	00000008 	.word	0x00000008

023f77b4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f77b4:	b509      	push	{r0, r3, lr}
 23f77b6:	4804      	ldr	r0, [pc, #16]	; (23f77c8 <spark_function+0x14>)
 23f77b8:	6800      	ldr	r0, [r0, #0]
 23f77ba:	4b04      	ldr	r3, [pc, #16]	; (23f77cc <spark_function+0x18>)
 23f77bc:	4403      	add	r3, r0
 23f77be:	681b      	ldr	r3, [r3, #0]
 23f77c0:	685b      	ldr	r3, [r3, #4]
 23f77c2:	9302      	str	r3, [sp, #8]
 23f77c4:	bd09      	pop	{r0, r3, pc}
 23f77c6:	0000      	.short	0x0000
 23f77c8:	1006a0f8 	.word	0x1006a0f8
 23f77cc:	0000002c 	.word	0x0000002c

023f77d0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f77d0:	b509      	push	{r0, r3, lr}
 23f77d2:	4804      	ldr	r0, [pc, #16]	; (23f77e4 <spark_process+0x14>)
 23f77d4:	6800      	ldr	r0, [r0, #0]
 23f77d6:	4b04      	ldr	r3, [pc, #16]	; (23f77e8 <spark_process+0x18>)
 23f77d8:	4403      	add	r3, r0
 23f77da:	681b      	ldr	r3, [r3, #0]
 23f77dc:	689b      	ldr	r3, [r3, #8]
 23f77de:	9302      	str	r3, [sp, #8]
 23f77e0:	bd09      	pop	{r0, r3, pc}
 23f77e2:	0000      	.short	0x0000
 23f77e4:	1006a0f8 	.word	0x1006a0f8
 23f77e8:	0000002c 	.word	0x0000002c

023f77ec <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23f77ec:	b509      	push	{r0, r3, lr}
 23f77ee:	4804      	ldr	r0, [pc, #16]	; (23f7800 <spark_cloud_flag_connect+0x14>)
 23f77f0:	6800      	ldr	r0, [r0, #0]
 23f77f2:	4b04      	ldr	r3, [pc, #16]	; (23f7804 <spark_cloud_flag_connect+0x18>)
 23f77f4:	4403      	add	r3, r0
 23f77f6:	681b      	ldr	r3, [r3, #0]
 23f77f8:	68db      	ldr	r3, [r3, #12]
 23f77fa:	9302      	str	r3, [sp, #8]
 23f77fc:	bd09      	pop	{r0, r3, pc}
 23f77fe:	0000      	.short	0x0000
 23f7800:	1006a0f8 	.word	0x1006a0f8
 23f7804:	0000002c 	.word	0x0000002c

023f7808 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f7808:	b509      	push	{r0, r3, lr}
 23f780a:	4804      	ldr	r0, [pc, #16]	; (23f781c <spark_cloud_flag_connected+0x14>)
 23f780c:	6800      	ldr	r0, [r0, #0]
 23f780e:	4b04      	ldr	r3, [pc, #16]	; (23f7820 <spark_cloud_flag_connected+0x18>)
 23f7810:	4403      	add	r3, r0
 23f7812:	681b      	ldr	r3, [r3, #0]
 23f7814:	695b      	ldr	r3, [r3, #20]
 23f7816:	9302      	str	r3, [sp, #8]
 23f7818:	bd09      	pop	{r0, r3, pc}
 23f781a:	0000      	.short	0x0000
 23f781c:	1006a0f8 	.word	0x1006a0f8
 23f7820:	0000002c 	.word	0x0000002c

023f7824 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 23f7824:	b509      	push	{r0, r3, lr}
 23f7826:	4804      	ldr	r0, [pc, #16]	; (23f7838 <spark_deviceID+0x14>)
 23f7828:	6800      	ldr	r0, [r0, #0]
 23f782a:	4b04      	ldr	r3, [pc, #16]	; (23f783c <spark_deviceID+0x18>)
 23f782c:	4403      	add	r3, r0
 23f782e:	681b      	ldr	r3, [r3, #0]
 23f7830:	69db      	ldr	r3, [r3, #28]
 23f7832:	9302      	str	r3, [sp, #8]
 23f7834:	bd09      	pop	{r0, r3, pc}
 23f7836:	0000      	.short	0x0000
 23f7838:	1006a0f8 	.word	0x1006a0f8
 23f783c:	0000002c 	.word	0x0000002c

023f7840 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23f7840:	b509      	push	{r0, r3, lr}
 23f7842:	4804      	ldr	r0, [pc, #16]	; (23f7854 <spark_send_event+0x14>)
 23f7844:	6800      	ldr	r0, [r0, #0]
 23f7846:	4b04      	ldr	r3, [pc, #16]	; (23f7858 <spark_send_event+0x18>)
 23f7848:	4403      	add	r3, r0
 23f784a:	681b      	ldr	r3, [r3, #0]
 23f784c:	6a1b      	ldr	r3, [r3, #32]
 23f784e:	9302      	str	r3, [sp, #8]
 23f7850:	bd09      	pop	{r0, r3, pc}
 23f7852:	0000      	.short	0x0000
 23f7854:	1006a0f8 	.word	0x1006a0f8
 23f7858:	0000002c 	.word	0x0000002c

023f785c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, spark_subscribe_param*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 23f785c:	b509      	push	{r0, r3, lr}
 23f785e:	4804      	ldr	r0, [pc, #16]	; (23f7870 <spark_sync_time+0x14>)
 23f7860:	6800      	ldr	r0, [r0, #0]
 23f7862:	4b04      	ldr	r3, [pc, #16]	; (23f7874 <spark_sync_time+0x18>)
 23f7864:	4403      	add	r3, r0
 23f7866:	681b      	ldr	r3, [r3, #0]
 23f7868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f786a:	9302      	str	r3, [sp, #8]
 23f786c:	bd09      	pop	{r0, r3, pc}
 23f786e:	0000      	.short	0x0000
 23f7870:	1006a0f8 	.word	0x1006a0f8
 23f7874:	0000002c 	.word	0x0000002c

023f7878 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f7878:	b509      	push	{r0, r3, lr}
 23f787a:	4804      	ldr	r0, [pc, #16]	; (23f788c <spark_sync_time_pending+0x14>)
 23f787c:	6800      	ldr	r0, [r0, #0]
 23f787e:	4b04      	ldr	r3, [pc, #16]	; (23f7890 <spark_sync_time_pending+0x18>)
 23f7880:	4403      	add	r3, r0
 23f7882:	681b      	ldr	r3, [r3, #0]
 23f7884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7886:	9302      	str	r3, [sp, #8]
 23f7888:	bd09      	pop	{r0, r3, pc}
 23f788a:	0000      	.short	0x0000
 23f788c:	1006a0f8 	.word	0x1006a0f8
 23f7890:	0000002c 	.word	0x0000002c

023f7894 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 23f7894:	b509      	push	{r0, r3, lr}
 23f7896:	4804      	ldr	r0, [pc, #16]	; (23f78a8 <spark_set_connection_property+0x14>)
 23f7898:	6800      	ldr	r0, [r0, #0]
 23f789a:	4b04      	ldr	r3, [pc, #16]	; (23f78ac <spark_set_connection_property+0x18>)
 23f789c:	4403      	add	r3, r0
 23f789e:	681b      	ldr	r3, [r3, #0]
 23f78a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f78a2:	9302      	str	r3, [sp, #8]
 23f78a4:	bd09      	pop	{r0, r3, pc}
 23f78a6:	0000      	.short	0x0000
 23f78a8:	1006a0f8 	.word	0x1006a0f8
 23f78ac:	0000002c 	.word	0x0000002c

023f78b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f78b0:	b509      	push	{r0, r3, lr}
 23f78b2:	4804      	ldr	r0, [pc, #16]	; (23f78c4 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f78b4:	6800      	ldr	r0, [r0, #0]
 23f78b6:	4b04      	ldr	r3, [pc, #16]	; (23f78c8 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f78b8:	4403      	add	r3, r0
 23f78ba:	681b      	ldr	r3, [r3, #0]
 23f78bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f78be:	9302      	str	r3, [sp, #8]
 23f78c0:	bd09      	pop	{r0, r3, pc}
 23f78c2:	0000      	.short	0x0000
 23f78c4:	1006a0f8 	.word	0x1006a0f8
 23f78c8:	0000002c 	.word	0x0000002c

023f78cc <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23f78cc:	b509      	push	{r0, r3, lr}
 23f78ce:	4804      	ldr	r0, [pc, #16]	; (23f78e0 <spark_cloud_disconnect+0x14>)
 23f78d0:	6800      	ldr	r0, [r0, #0]
 23f78d2:	4b04      	ldr	r3, [pc, #16]	; (23f78e4 <spark_cloud_disconnect+0x18>)
 23f78d4:	4403      	add	r3, r0
 23f78d6:	681b      	ldr	r3, [r3, #0]
 23f78d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f78da:	9302      	str	r3, [sp, #8]
 23f78dc:	bd09      	pop	{r0, r3, pc}
 23f78de:	0000      	.short	0x0000
 23f78e0:	1006a0f8 	.word	0x1006a0f8
 23f78e4:	0000002c 	.word	0x0000002c

023f78e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f78e8:	b509      	push	{r0, r3, lr}
 23f78ea:	4804      	ldr	r0, [pc, #16]	; (23f78fc <network_connect+0x14>)
 23f78ec:	6800      	ldr	r0, [r0, #0]
 23f78ee:	4b04      	ldr	r3, [pc, #16]	; (23f7900 <network_connect+0x18>)
 23f78f0:	4403      	add	r3, r0
 23f78f2:	681b      	ldr	r3, [r3, #0]
 23f78f4:	685b      	ldr	r3, [r3, #4]
 23f78f6:	9302      	str	r3, [sp, #8]
 23f78f8:	bd09      	pop	{r0, r3, pc}
 23f78fa:	0000      	.short	0x0000
 23f78fc:	1006a0f8 	.word	0x1006a0f8
 23f7900:	00000028 	.word	0x00000028

023f7904 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f7904:	b509      	push	{r0, r3, lr}
 23f7906:	4804      	ldr	r0, [pc, #16]	; (23f7918 <network_connecting+0x14>)
 23f7908:	6800      	ldr	r0, [r0, #0]
 23f790a:	4b04      	ldr	r3, [pc, #16]	; (23f791c <network_connecting+0x18>)
 23f790c:	4403      	add	r3, r0
 23f790e:	681b      	ldr	r3, [r3, #0]
 23f7910:	689b      	ldr	r3, [r3, #8]
 23f7912:	9302      	str	r3, [sp, #8]
 23f7914:	bd09      	pop	{r0, r3, pc}
 23f7916:	0000      	.short	0x0000
 23f7918:	1006a0f8 	.word	0x1006a0f8
 23f791c:	00000028 	.word	0x00000028

023f7920 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f7920:	b509      	push	{r0, r3, lr}
 23f7922:	4804      	ldr	r0, [pc, #16]	; (23f7934 <network_disconnect+0x14>)
 23f7924:	6800      	ldr	r0, [r0, #0]
 23f7926:	4b04      	ldr	r3, [pc, #16]	; (23f7938 <network_disconnect+0x18>)
 23f7928:	4403      	add	r3, r0
 23f792a:	681b      	ldr	r3, [r3, #0]
 23f792c:	68db      	ldr	r3, [r3, #12]
 23f792e:	9302      	str	r3, [sp, #8]
 23f7930:	bd09      	pop	{r0, r3, pc}
 23f7932:	0000      	.short	0x0000
 23f7934:	1006a0f8 	.word	0x1006a0f8
 23f7938:	00000028 	.word	0x00000028

023f793c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f793c:	b509      	push	{r0, r3, lr}
 23f793e:	4804      	ldr	r0, [pc, #16]	; (23f7950 <network_ready+0x14>)
 23f7940:	6800      	ldr	r0, [r0, #0]
 23f7942:	4b04      	ldr	r3, [pc, #16]	; (23f7954 <network_ready+0x18>)
 23f7944:	4403      	add	r3, r0
 23f7946:	681b      	ldr	r3, [r3, #0]
 23f7948:	691b      	ldr	r3, [r3, #16]
 23f794a:	9302      	str	r3, [sp, #8]
 23f794c:	bd09      	pop	{r0, r3, pc}
 23f794e:	0000      	.short	0x0000
 23f7950:	1006a0f8 	.word	0x1006a0f8
 23f7954:	00000028 	.word	0x00000028

023f7958 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f7958:	b509      	push	{r0, r3, lr}
 23f795a:	4804      	ldr	r0, [pc, #16]	; (23f796c <network_on+0x14>)
 23f795c:	6800      	ldr	r0, [r0, #0]
 23f795e:	4b04      	ldr	r3, [pc, #16]	; (23f7970 <network_on+0x18>)
 23f7960:	4403      	add	r3, r0
 23f7962:	681b      	ldr	r3, [r3, #0]
 23f7964:	695b      	ldr	r3, [r3, #20]
 23f7966:	9302      	str	r3, [sp, #8]
 23f7968:	bd09      	pop	{r0, r3, pc}
 23f796a:	0000      	.short	0x0000
 23f796c:	1006a0f8 	.word	0x1006a0f8
 23f7970:	00000028 	.word	0x00000028

023f7974 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f7974:	b509      	push	{r0, r3, lr}
 23f7976:	4804      	ldr	r0, [pc, #16]	; (23f7988 <network_off+0x14>)
 23f7978:	6800      	ldr	r0, [r0, #0]
 23f797a:	4b04      	ldr	r3, [pc, #16]	; (23f798c <network_off+0x18>)
 23f797c:	4403      	add	r3, r0
 23f797e:	681b      	ldr	r3, [r3, #0]
 23f7980:	699b      	ldr	r3, [r3, #24]
 23f7982:	9302      	str	r3, [sp, #8]
 23f7984:	bd09      	pop	{r0, r3, pc}
 23f7986:	0000      	.short	0x0000
 23f7988:	1006a0f8 	.word	0x1006a0f8
 23f798c:	00000028 	.word	0x00000028

023f7990 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f7990:	b509      	push	{r0, r3, lr}
 23f7992:	4804      	ldr	r0, [pc, #16]	; (23f79a4 <network_listen+0x14>)
 23f7994:	6800      	ldr	r0, [r0, #0]
 23f7996:	4b04      	ldr	r3, [pc, #16]	; (23f79a8 <network_listen+0x18>)
 23f7998:	4403      	add	r3, r0
 23f799a:	681b      	ldr	r3, [r3, #0]
 23f799c:	69db      	ldr	r3, [r3, #28]
 23f799e:	9302      	str	r3, [sp, #8]
 23f79a0:	bd09      	pop	{r0, r3, pc}
 23f79a2:	0000      	.short	0x0000
 23f79a4:	1006a0f8 	.word	0x1006a0f8
 23f79a8:	00000028 	.word	0x00000028

023f79ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f79ac:	b509      	push	{r0, r3, lr}
 23f79ae:	4804      	ldr	r0, [pc, #16]	; (23f79c0 <network_listening+0x14>)
 23f79b0:	6800      	ldr	r0, [r0, #0]
 23f79b2:	4b04      	ldr	r3, [pc, #16]	; (23f79c4 <network_listening+0x18>)
 23f79b4:	4403      	add	r3, r0
 23f79b6:	681b      	ldr	r3, [r3, #0]
 23f79b8:	6a1b      	ldr	r3, [r3, #32]
 23f79ba:	9302      	str	r3, [sp, #8]
 23f79bc:	bd09      	pop	{r0, r3, pc}
 23f79be:	0000      	.short	0x0000
 23f79c0:	1006a0f8 	.word	0x1006a0f8
 23f79c4:	00000028 	.word	0x00000028

023f79c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f79c8:	b509      	push	{r0, r3, lr}
 23f79ca:	4804      	ldr	r0, [pc, #16]	; (23f79dc <network_set_listen_timeout+0x14>)
 23f79cc:	6800      	ldr	r0, [r0, #0]
 23f79ce:	4b04      	ldr	r3, [pc, #16]	; (23f79e0 <network_set_listen_timeout+0x18>)
 23f79d0:	4403      	add	r3, r0
 23f79d2:	681b      	ldr	r3, [r3, #0]
 23f79d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f79d6:	9302      	str	r3, [sp, #8]
 23f79d8:	bd09      	pop	{r0, r3, pc}
 23f79da:	0000      	.short	0x0000
 23f79dc:	1006a0f8 	.word	0x1006a0f8
 23f79e0:	00000028 	.word	0x00000028

023f79e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f79e4:	b509      	push	{r0, r3, lr}
 23f79e6:	4804      	ldr	r0, [pc, #16]	; (23f79f8 <network_get_listen_timeout+0x14>)
 23f79e8:	6800      	ldr	r0, [r0, #0]
 23f79ea:	4b04      	ldr	r3, [pc, #16]	; (23f79fc <network_get_listen_timeout+0x18>)
 23f79ec:	4403      	add	r3, r0
 23f79ee:	681b      	ldr	r3, [r3, #0]
 23f79f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f79f2:	9302      	str	r3, [sp, #8]
 23f79f4:	bd09      	pop	{r0, r3, pc}
 23f79f6:	0000      	.short	0x0000
 23f79f8:	1006a0f8 	.word	0x1006a0f8
 23f79fc:	00000028 	.word	0x00000028

023f7a00 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f7a00:	b509      	push	{r0, r3, lr}
 23f7a02:	4804      	ldr	r0, [pc, #16]	; (23f7a14 <network_is_on+0x14>)
 23f7a04:	6800      	ldr	r0, [r0, #0]
 23f7a06:	4b04      	ldr	r3, [pc, #16]	; (23f7a18 <network_is_on+0x18>)
 23f7a08:	4403      	add	r3, r0
 23f7a0a:	681b      	ldr	r3, [r3, #0]
 23f7a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7a0e:	9302      	str	r3, [sp, #8]
 23f7a10:	bd09      	pop	{r0, r3, pc}
 23f7a12:	0000      	.short	0x0000
 23f7a14:	1006a0f8 	.word	0x1006a0f8
 23f7a18:	00000028 	.word	0x00000028

023f7a1c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f7a1c:	b509      	push	{r0, r3, lr}
 23f7a1e:	4804      	ldr	r0, [pc, #16]	; (23f7a30 <network_is_off+0x14>)
 23f7a20:	6800      	ldr	r0, [r0, #0]
 23f7a22:	4b04      	ldr	r3, [pc, #16]	; (23f7a34 <network_is_off+0x18>)
 23f7a24:	4403      	add	r3, r0
 23f7a26:	681b      	ldr	r3, [r3, #0]
 23f7a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7a2a:	9302      	str	r3, [sp, #8]
 23f7a2c:	bd09      	pop	{r0, r3, pc}
 23f7a2e:	0000      	.short	0x0000
 23f7a30:	1006a0f8 	.word	0x1006a0f8
 23f7a34:	00000028 	.word	0x00000028

023f7a38 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23f7a38:	b509      	push	{r0, r3, lr}
 23f7a3a:	4804      	ldr	r0, [pc, #16]	; (23f7a4c <network_prefer+0x14>)
 23f7a3c:	6800      	ldr	r0, [r0, #0]
 23f7a3e:	4b04      	ldr	r3, [pc, #16]	; (23f7a50 <network_prefer+0x18>)
 23f7a40:	4403      	add	r3, r0
 23f7a42:	681b      	ldr	r3, [r3, #0]
 23f7a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7a46:	9302      	str	r3, [sp, #8]
 23f7a48:	bd09      	pop	{r0, r3, pc}
 23f7a4a:	0000      	.short	0x0000
 23f7a4c:	1006a0f8 	.word	0x1006a0f8
 23f7a50:	00000028 	.word	0x00000028

023f7a54 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f7a54:	b509      	push	{r0, r3, lr}
 23f7a56:	4804      	ldr	r0, [pc, #16]	; (23f7a68 <network_is_preferred+0x14>)
 23f7a58:	6800      	ldr	r0, [r0, #0]
 23f7a5a:	4b04      	ldr	r3, [pc, #16]	; (23f7a6c <network_is_preferred+0x18>)
 23f7a5c:	4403      	add	r3, r0
 23f7a5e:	681b      	ldr	r3, [r3, #0]
 23f7a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7a62:	9302      	str	r3, [sp, #8]
 23f7a64:	bd09      	pop	{r0, r3, pc}
 23f7a66:	0000      	.short	0x0000
 23f7a68:	1006a0f8 	.word	0x1006a0f8
 23f7a6c:	00000028 	.word	0x00000028

023f7a70 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f7a70:	b509      	push	{r0, r3, lr}
 23f7a72:	4804      	ldr	r0, [pc, #16]	; (23f7a84 <malloc+0x14>)
 23f7a74:	6800      	ldr	r0, [r0, #0]
 23f7a76:	4b04      	ldr	r3, [pc, #16]	; (23f7a88 <malloc+0x18>)
 23f7a78:	4403      	add	r3, r0
 23f7a7a:	681b      	ldr	r3, [r3, #0]
 23f7a7c:	681b      	ldr	r3, [r3, #0]
 23f7a7e:	9302      	str	r3, [sp, #8]
 23f7a80:	bd09      	pop	{r0, r3, pc}
 23f7a82:	0000      	.short	0x0000
 23f7a84:	1006a0f8 	.word	0x1006a0f8
 23f7a88:	00000004 	.word	0x00000004

023f7a8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f7a8c:	b509      	push	{r0, r3, lr}
 23f7a8e:	4804      	ldr	r0, [pc, #16]	; (23f7aa0 <free+0x14>)
 23f7a90:	6800      	ldr	r0, [r0, #0]
 23f7a92:	4b04      	ldr	r3, [pc, #16]	; (23f7aa4 <free+0x18>)
 23f7a94:	4403      	add	r3, r0
 23f7a96:	681b      	ldr	r3, [r3, #0]
 23f7a98:	685b      	ldr	r3, [r3, #4]
 23f7a9a:	9302      	str	r3, [sp, #8]
 23f7a9c:	bd09      	pop	{r0, r3, pc}
 23f7a9e:	0000      	.short	0x0000
 23f7aa0:	1006a0f8 	.word	0x1006a0f8
 23f7aa4:	00000004 	.word	0x00000004

023f7aa8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f7aa8:	b509      	push	{r0, r3, lr}
 23f7aaa:	4804      	ldr	r0, [pc, #16]	; (23f7abc <realloc+0x14>)
 23f7aac:	6800      	ldr	r0, [r0, #0]
 23f7aae:	4b04      	ldr	r3, [pc, #16]	; (23f7ac0 <realloc+0x18>)
 23f7ab0:	4403      	add	r3, r0
 23f7ab2:	681b      	ldr	r3, [r3, #0]
 23f7ab4:	689b      	ldr	r3, [r3, #8]
 23f7ab6:	9302      	str	r3, [sp, #8]
 23f7ab8:	bd09      	pop	{r0, r3, pc}
 23f7aba:	0000      	.short	0x0000
 23f7abc:	1006a0f8 	.word	0x1006a0f8
 23f7ac0:	00000004 	.word	0x00000004

023f7ac4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 23f7ac4:	b509      	push	{r0, r3, lr}
 23f7ac6:	4804      	ldr	r0, [pc, #16]	; (23f7ad8 <sprintf+0x14>)
 23f7ac8:	6800      	ldr	r0, [r0, #0]
 23f7aca:	4b04      	ldr	r3, [pc, #16]	; (23f7adc <sprintf+0x18>)
 23f7acc:	4403      	add	r3, r0
 23f7ace:	681b      	ldr	r3, [r3, #0]
 23f7ad0:	68db      	ldr	r3, [r3, #12]
 23f7ad2:	9302      	str	r3, [sp, #8]
 23f7ad4:	bd09      	pop	{r0, r3, pc}
 23f7ad6:	0000      	.short	0x0000
 23f7ad8:	1006a0f8 	.word	0x1006a0f8
 23f7adc:	00000004 	.word	0x00000004

023f7ae0 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23f7ae0:	b509      	push	{r0, r3, lr}
 23f7ae2:	4804      	ldr	r0, [pc, #16]	; (23f7af4 <siprintf+0x14>)
 23f7ae4:	6800      	ldr	r0, [r0, #0]
 23f7ae6:	4b04      	ldr	r3, [pc, #16]	; (23f7af8 <siprintf+0x18>)
 23f7ae8:	4403      	add	r3, r0
 23f7aea:	681b      	ldr	r3, [r3, #0]
 23f7aec:	691b      	ldr	r3, [r3, #16]
 23f7aee:	9302      	str	r3, [sp, #8]
 23f7af0:	bd09      	pop	{r0, r3, pc}
 23f7af2:	0000      	.short	0x0000
 23f7af4:	1006a0f8 	.word	0x1006a0f8
 23f7af8:	00000004 	.word	0x00000004

023f7afc <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 23f7afc:	b509      	push	{r0, r3, lr}
 23f7afe:	4804      	ldr	r0, [pc, #16]	; (23f7b10 <sscanf+0x14>)
 23f7b00:	6800      	ldr	r0, [r0, #0]
 23f7b02:	4b04      	ldr	r3, [pc, #16]	; (23f7b14 <sscanf+0x18>)
 23f7b04:	4403      	add	r3, r0
 23f7b06:	681b      	ldr	r3, [r3, #0]
 23f7b08:	695b      	ldr	r3, [r3, #20]
 23f7b0a:	9302      	str	r3, [sp, #8]
 23f7b0c:	bd09      	pop	{r0, r3, pc}
 23f7b0e:	0000      	.short	0x0000
 23f7b10:	1006a0f8 	.word	0x1006a0f8
 23f7b14:	00000004 	.word	0x00000004

023f7b18 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23f7b18:	b509      	push	{r0, r3, lr}
 23f7b1a:	4804      	ldr	r0, [pc, #16]	; (23f7b2c <snprintf+0x14>)
 23f7b1c:	6800      	ldr	r0, [r0, #0]
 23f7b1e:	4b04      	ldr	r3, [pc, #16]	; (23f7b30 <snprintf+0x18>)
 23f7b20:	4403      	add	r3, r0
 23f7b22:	681b      	ldr	r3, [r3, #0]
 23f7b24:	69db      	ldr	r3, [r3, #28]
 23f7b26:	9302      	str	r3, [sp, #8]
 23f7b28:	bd09      	pop	{r0, r3, pc}
 23f7b2a:	0000      	.short	0x0000
 23f7b2c:	1006a0f8 	.word	0x1006a0f8
 23f7b30:	00000004 	.word	0x00000004

023f7b34 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f7b34:	b509      	push	{r0, r3, lr}
 23f7b36:	4804      	ldr	r0, [pc, #16]	; (23f7b48 <vsnprintf+0x14>)
 23f7b38:	6800      	ldr	r0, [r0, #0]
 23f7b3a:	4b04      	ldr	r3, [pc, #16]	; (23f7b4c <vsnprintf+0x18>)
 23f7b3c:	4403      	add	r3, r0
 23f7b3e:	681b      	ldr	r3, [r3, #0]
 23f7b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7b42:	9302      	str	r3, [sp, #8]
 23f7b44:	bd09      	pop	{r0, r3, pc}
 23f7b46:	0000      	.short	0x0000
 23f7b48:	1006a0f8 	.word	0x1006a0f8
 23f7b4c:	00000004 	.word	0x00000004

023f7b50 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f7b50:	b509      	push	{r0, r3, lr}
 23f7b52:	4804      	ldr	r0, [pc, #16]	; (23f7b64 <abort+0x14>)
 23f7b54:	6800      	ldr	r0, [r0, #0]
 23f7b56:	4b04      	ldr	r3, [pc, #16]	; (23f7b68 <abort+0x18>)
 23f7b58:	4403      	add	r3, r0
 23f7b5a:	681b      	ldr	r3, [r3, #0]
 23f7b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7b5e:	9302      	str	r3, [sp, #8]
 23f7b60:	bd09      	pop	{r0, r3, pc}
 23f7b62:	0000      	.short	0x0000
 23f7b64:	1006a0f8 	.word	0x1006a0f8
 23f7b68:	00000004 	.word	0x00000004

023f7b6c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f7b6c:	b509      	push	{r0, r3, lr}
 23f7b6e:	4804      	ldr	r0, [pc, #16]	; (23f7b80 <_malloc_r+0x14>)
 23f7b70:	6800      	ldr	r0, [r0, #0]
 23f7b72:	4b04      	ldr	r3, [pc, #16]	; (23f7b84 <_malloc_r+0x18>)
 23f7b74:	4403      	add	r3, r0
 23f7b76:	681b      	ldr	r3, [r3, #0]
 23f7b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7b7a:	9302      	str	r3, [sp, #8]
 23f7b7c:	bd09      	pop	{r0, r3, pc}
 23f7b7e:	0000      	.short	0x0000
 23f7b80:	1006a0f8 	.word	0x1006a0f8
 23f7b84:	00000004 	.word	0x00000004

023f7b88 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f7b88:	b509      	push	{r0, r3, lr}
 23f7b8a:	4804      	ldr	r0, [pc, #16]	; (23f7b9c <__errno+0x14>)
 23f7b8c:	6800      	ldr	r0, [r0, #0]
 23f7b8e:	4b04      	ldr	r3, [pc, #16]	; (23f7ba0 <__errno+0x18>)
 23f7b90:	4403      	add	r3, r0
 23f7b92:	681b      	ldr	r3, [r3, #0]
 23f7b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7b96:	9302      	str	r3, [sp, #8]
 23f7b98:	bd09      	pop	{r0, r3, pc}
 23f7b9a:	0000      	.short	0x0000
 23f7b9c:	1006a0f8 	.word	0x1006a0f8
 23f7ba0:	00000004 	.word	0x00000004

023f7ba4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f7ba4:	b509      	push	{r0, r3, lr}
 23f7ba6:	4804      	ldr	r0, [pc, #16]	; (23f7bb8 <__assert_func+0x14>)
 23f7ba8:	6800      	ldr	r0, [r0, #0]
 23f7baa:	4b04      	ldr	r3, [pc, #16]	; (23f7bbc <__assert_func+0x18>)
 23f7bac:	4403      	add	r3, r0
 23f7bae:	681b      	ldr	r3, [r3, #0]
 23f7bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7bb2:	9302      	str	r3, [sp, #8]
 23f7bb4:	bd09      	pop	{r0, r3, pc}
 23f7bb6:	0000      	.short	0x0000
 23f7bb8:	1006a0f8 	.word	0x1006a0f8
 23f7bbc:	00000004 	.word	0x00000004

023f7bc0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f7bc0:	b509      	push	{r0, r3, lr}
 23f7bc2:	4804      	ldr	r0, [pc, #16]	; (23f7bd4 <newlib_impure_ptr_callback+0x14>)
 23f7bc4:	6800      	ldr	r0, [r0, #0]
 23f7bc6:	4b04      	ldr	r3, [pc, #16]	; (23f7bd8 <newlib_impure_ptr_callback+0x18>)
 23f7bc8:	4403      	add	r3, r0
 23f7bca:	681b      	ldr	r3, [r3, #0]
 23f7bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7bce:	9302      	str	r3, [sp, #8]
 23f7bd0:	bd09      	pop	{r0, r3, pc}
 23f7bd2:	0000      	.short	0x0000
 23f7bd4:	1006a0f8 	.word	0x1006a0f8
 23f7bd8:	00000004 	.word	0x00000004

023f7bdc <strftime>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 23f7bdc:	b509      	push	{r0, r3, lr}
 23f7bde:	4804      	ldr	r0, [pc, #16]	; (23f7bf0 <strftime+0x14>)
 23f7be0:	6800      	ldr	r0, [r0, #0]
 23f7be2:	4b04      	ldr	r3, [pc, #16]	; (23f7bf4 <strftime+0x18>)
 23f7be4:	4403      	add	r3, r0
 23f7be6:	681b      	ldr	r3, [r3, #0]
 23f7be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f7bea:	9302      	str	r3, [sp, #8]
 23f7bec:	bd09      	pop	{r0, r3, pc}
 23f7bee:	0000      	.short	0x0000
 23f7bf0:	1006a0f8 	.word	0x1006a0f8
 23f7bf4:	00000004 	.word	0x00000004

023f7bf8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f7bf8:	b509      	push	{r0, r3, lr}
 23f7bfa:	4804      	ldr	r0, [pc, #16]	; (23f7c0c <localtime_r+0x14>)
 23f7bfc:	6800      	ldr	r0, [r0, #0]
 23f7bfe:	4b04      	ldr	r3, [pc, #16]	; (23f7c10 <localtime_r+0x18>)
 23f7c00:	4403      	add	r3, r0
 23f7c02:	681b      	ldr	r3, [r3, #0]
 23f7c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f7c06:	9302      	str	r3, [sp, #8]
 23f7c08:	bd09      	pop	{r0, r3, pc}
 23f7c0a:	0000      	.short	0x0000
 23f7c0c:	1006a0f8 	.word	0x1006a0f8
 23f7c10:	00000004 	.word	0x00000004

023f7c14 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f7c14:	b509      	push	{r0, r3, lr}
 23f7c16:	4804      	ldr	r0, [pc, #16]	; (23f7c28 <gmtime_r+0x14>)
 23f7c18:	6800      	ldr	r0, [r0, #0]
 23f7c1a:	4b04      	ldr	r3, [pc, #16]	; (23f7c2c <gmtime_r+0x18>)
 23f7c1c:	4403      	add	r3, r0
 23f7c1e:	681b      	ldr	r3, [r3, #0]
 23f7c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f7c22:	9302      	str	r3, [sp, #8]
 23f7c24:	bd09      	pop	{r0, r3, pc}
 23f7c26:	0000      	.short	0x0000
 23f7c28:	1006a0f8 	.word	0x1006a0f8
 23f7c2c:	00000004 	.word	0x00000004

023f7c30 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
 23f7c30:	b509      	push	{r0, r3, lr}
 23f7c32:	4804      	ldr	r0, [pc, #16]	; (23f7c44 <mktime+0x14>)
 23f7c34:	6800      	ldr	r0, [r0, #0]
 23f7c36:	4b04      	ldr	r3, [pc, #16]	; (23f7c48 <mktime+0x18>)
 23f7c38:	4403      	add	r3, r0
 23f7c3a:	681b      	ldr	r3, [r3, #0]
 23f7c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7c3e:	9302      	str	r3, [sp, #8]
 23f7c40:	bd09      	pop	{r0, r3, pc}
 23f7c42:	0000      	.short	0x0000
 23f7c44:	1006a0f8 	.word	0x1006a0f8
 23f7c48:	00000004 	.word	0x00000004

023f7c4c <__cxa_guard_acquire>:
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
 23f7c4c:	b509      	push	{r0, r3, lr}
 23f7c4e:	4804      	ldr	r0, [pc, #16]	; (23f7c60 <__cxa_guard_acquire+0x14>)
 23f7c50:	6800      	ldr	r0, [r0, #0]
 23f7c52:	4b04      	ldr	r3, [pc, #16]	; (23f7c64 <__cxa_guard_acquire+0x18>)
 23f7c54:	4403      	add	r3, r0
 23f7c56:	681b      	ldr	r3, [r3, #0]
 23f7c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7c5a:	9302      	str	r3, [sp, #8]
 23f7c5c:	bd09      	pop	{r0, r3, pc}
 23f7c5e:	0000      	.short	0x0000
 23f7c60:	1006a0f8 	.word	0x1006a0f8
 23f7c64:	00000004 	.word	0x00000004

023f7c68 <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
 23f7c68:	b509      	push	{r0, r3, lr}
 23f7c6a:	4804      	ldr	r0, [pc, #16]	; (23f7c7c <__cxa_guard_release+0x14>)
 23f7c6c:	6800      	ldr	r0, [r0, #0]
 23f7c6e:	4b04      	ldr	r3, [pc, #16]	; (23f7c80 <__cxa_guard_release+0x18>)
 23f7c70:	4403      	add	r3, r0
 23f7c72:	681b      	ldr	r3, [r3, #0]
 23f7c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f7c76:	9302      	str	r3, [sp, #8]
 23f7c78:	bd09      	pop	{r0, r3, pc}
 23f7c7a:	0000      	.short	0x0000
 23f7c7c:	1006a0f8 	.word	0x1006a0f8
 23f7c80:	00000004 	.word	0x00000004

023f7c84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f7c84:	2100      	movs	r1, #0
 23f7c86:	f7ff bcdf 	b.w	23f7648 <system_delay_ms>

023f7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f7c8a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23f7c8c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f7c8e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f7c90:	b17c      	cbz	r4, 23f7cb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f7c92:	6863      	ldr	r3, [r4, #4]
 23f7c94:	3b01      	subs	r3, #1
 23f7c96:	6063      	str	r3, [r4, #4]
 23f7c98:	b95b      	cbnz	r3, 23f7cb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f7c9a:	6823      	ldr	r3, [r4, #0]
 23f7c9c:	4620      	mov	r0, r4
 23f7c9e:	689b      	ldr	r3, [r3, #8]
 23f7ca0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f7ca2:	68a3      	ldr	r3, [r4, #8]
 23f7ca4:	3b01      	subs	r3, #1
 23f7ca6:	60a3      	str	r3, [r4, #8]
 23f7ca8:	b91b      	cbnz	r3, 23f7cb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f7caa:	6823      	ldr	r3, [r4, #0]
 23f7cac:	4620      	mov	r0, r4
 23f7cae:	68db      	ldr	r3, [r3, #12]
 23f7cb0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f7cb2:	4628      	mov	r0, r5
 23f7cb4:	bd38      	pop	{r3, r4, r5, pc}

023f7cb6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23f7cb6:	b510      	push	{r4, lr}
      if (_M_empty())
 23f7cb8:	6883      	ldr	r3, [r0, #8]
 23f7cba:	4604      	mov	r4, r0
 23f7cbc:	b90b      	cbnz	r3, 23f7cc2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23f7cbe:	f002 f9cb 	bl	23fa058 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7cc2:	68c3      	ldr	r3, [r0, #12]
 23f7cc4:	4798      	blx	r3
      if (_M_manager)
 23f7cc6:	68a3      	ldr	r3, [r4, #8]
 23f7cc8:	b11b      	cbz	r3, 23f7cd2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f7cca:	2203      	movs	r2, #3
 23f7ccc:	4621      	mov	r1, r4
 23f7cce:	4620      	mov	r0, r4
 23f7cd0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23f7cd2:	4620      	mov	r0, r4
}
 23f7cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23f7cd8:	2110      	movs	r1, #16
 23f7cda:	f7ed ba9a 	b.w	23e5212 <_ZdlPvj>

023f7cde <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 23f7cde:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7ce0:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23f7ce2:	460b      	mov	r3, r1
 23f7ce4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7ce6:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f7cea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f7cee:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f7cf2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f7cf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f7cfa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23f7cfe:	b002      	add	sp, #8
 23f7d00:	bd10      	pop	{r4, pc}
	...

023f7d04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f7d04:	2300      	movs	r3, #0
 23f7d06:	4802      	ldr	r0, [pc, #8]	; (23f7d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f7d08:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f7d0a:	f7ff b859 	b.w	23f6dc0 <os_mutex_recursive_create>
 23f7d0e:	bf00      	nop
 23f7d10:	1007aeb4 	.word	0x1007aeb4

023f7d14 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23f7d14:	2200      	movs	r2, #0
 23f7d16:	6840      	ldr	r0, [r0, #4]
 23f7d18:	4611      	mov	r1, r2
 23f7d1a:	f7ff be0f 	b.w	23f793c <network_ready>

023f7d1e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23f7d1e:	2200      	movs	r2, #0
 23f7d20:	6840      	ldr	r0, [r0, #4]
 23f7d22:	4611      	mov	r1, r2
 23f7d24:	f7ff be42 	b.w	23f79ac <network_listening>

023f7d28 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f7d28:	2200      	movs	r2, #0
 23f7d2a:	6840      	ldr	r0, [r0, #4]
 23f7d2c:	4611      	mov	r1, r2
 23f7d2e:	f7ff be59 	b.w	23f79e4 <network_get_listen_timeout>

023f7d32 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f7d32:	2200      	movs	r2, #0
 23f7d34:	6840      	ldr	r0, [r0, #4]
 23f7d36:	f7ff be47 	b.w	23f79c8 <network_set_listen_timeout>

023f7d3a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f7d3a:	2200      	movs	r2, #0
 23f7d3c:	6840      	ldr	r0, [r0, #4]
 23f7d3e:	f081 0101 	eor.w	r1, r1, #1
 23f7d42:	f7ff be25 	b.w	23f7990 <network_listen>

023f7d46 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f7d46:	2200      	movs	r2, #0
 23f7d48:	6840      	ldr	r0, [r0, #4]
 23f7d4a:	4611      	mov	r1, r2
 23f7d4c:	f7ff bdda 	b.w	23f7904 <network_connecting>

023f7d50 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f7d50:	2200      	movs	r2, #0
 23f7d52:	2102      	movs	r1, #2
 23f7d54:	6840      	ldr	r0, [r0, #4]
 23f7d56:	f7ff bde3 	b.w	23f7920 <network_disconnect>

023f7d5a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f7d5a:	2300      	movs	r3, #0
 23f7d5c:	6840      	ldr	r0, [r0, #4]
 23f7d5e:	461a      	mov	r2, r3
 23f7d60:	f7ff bdc2 	b.w	23f78e8 <network_connect>

023f7d64 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 23f7d64:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
 23f7d66:	2518      	movs	r5, #24
 23f7d68:	4b12      	ldr	r3, [pc, #72]	; (23f7db4 <_ZN5spark13CellularClass4RSSIEv+0x50>)
 23f7d6a:	460e      	mov	r6, r1
 23f7d6c:	6003      	str	r3, [r0, #0]
 23f7d6e:	3330      	adds	r3, #48	; 0x30
 23f7d70:	462a      	mov	r2, r5
 23f7d72:	2100      	movs	r1, #0
 23f7d74:	b086      	sub	sp, #24
 23f7d76:	6043      	str	r3, [r0, #4]
 23f7d78:	4604      	mov	r4, r0
 23f7d7a:	3008      	adds	r0, #8
 23f7d7c:	f004 fe93 	bl	23fcaa6 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 23f7d80:	2200      	movs	r2, #0
 23f7d82:	6870      	ldr	r0, [r6, #4]
 23f7d84:	4611      	mov	r1, r2
 23f7d86:	f7ff fdd9 	bl	23f793c <network_ready>
 23f7d8a:	b178      	cbz	r0, 23f7dac <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
 23f7d8c:	2100      	movs	r1, #0
 23f7d8e:	462a      	mov	r2, r5
 23f7d90:	4668      	mov	r0, sp
 23f7d92:	f004 fe88 	bl	23fcaa6 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f7d96:	4669      	mov	r1, sp
 23f7d98:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
 23f7d9a:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f7d9e:	f7fe fff3 	bl	23f6d88 <cellular_signal>
 23f7da2:	b918      	cbnz	r0, 23f7dac <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
 23f7da4:	4669      	mov	r1, sp
 23f7da6:	4620      	mov	r0, r4
 23f7da8:	f000 f990 	bl	23f80cc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 23f7dac:	4620      	mov	r0, r4
 23f7dae:	b006      	add	sp, #24
 23f7db0:	bd70      	pop	{r4, r5, r6, pc}
 23f7db2:	bf00      	nop
 23f7db4:	023ff8f8 	.word	0x023ff8f8

023f7db8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23f7db8:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23f7dba:	2428      	movs	r4, #40	; 0x28
 23f7dbc:	4b07      	ldr	r3, [pc, #28]	; (23f7ddc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23f7dbe:	4622      	mov	r2, r4
 23f7dc0:	4618      	mov	r0, r3
 23f7dc2:	2100      	movs	r1, #0
 23f7dc4:	f004 fe6f 	bl	23fcaa6 <memset>
        cid = -1;
 23f7dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f7dcc:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name, bool flushCache = false);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f7dce:	2204      	movs	r2, #4
 23f7dd0:	4b03      	ldr	r3, [pc, #12]	; (23f7de0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23f7dd2:	8004      	strh	r4, [r0, #0]
 23f7dd4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23f7dd6:	4a03      	ldr	r2, [pc, #12]	; (23f7de4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23f7dd8:	601a      	str	r2, [r3, #0]
 23f7dda:	bd10      	pop	{r4, pc}
 23f7ddc:	1007aec0 	.word	0x1007aec0
 23f7de0:	1007aeb8 	.word	0x1007aeb8
 23f7de4:	023ff8a8 	.word	0x023ff8a8

023f7de8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 23f7de8:	4770      	bx	lr

023f7dea <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 23f7dea:	7b00      	ldrb	r0, [r0, #12]
 23f7dec:	4770      	bx	lr

023f7dee <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f7dee:	7b03      	ldrb	r3, [r0, #12]
 23f7df0:	b14b      	cbz	r3, 23f7e06 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 23f7df2:	6903      	ldr	r3, [r0, #16]
 23f7df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f7df8:	d005      	beq.n	23f7e06 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f7dfa:	6980      	ldr	r0, [r0, #24]
 23f7dfc:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 23f7e00:	bf18      	it	ne
 23f7e02:	2001      	movne	r0, #1
 23f7e04:	4770      	bx	lr
 23f7e06:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
 23f7e08:	4770      	bx	lr

023f7e0a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 23f7e0a:	6803      	ldr	r3, [r0, #0]
 23f7e0c:	6a1b      	ldr	r3, [r3, #32]
 23f7e0e:	4718      	bx	r3

023f7e10 <_ZN14CellularSignalD0Ev>:
 23f7e10:	b510      	push	{r4, lr}
 23f7e12:	4604      	mov	r4, r0
 23f7e14:	2120      	movs	r1, #32
 23f7e16:	f7ed f9fc 	bl	23e5212 <_ZdlPvj>
 23f7e1a:	4620      	mov	r0, r4
 23f7e1c:	bd10      	pop	{r4, pc}
	...

023f7e20 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 23f7e20:	7b03      	ldrb	r3, [r0, #12]
 23f7e22:	b17b      	cbz	r3, 23f7e44 <_ZNK14CellularSignal11getStrengthEv+0x24>
 23f7e24:	6943      	ldr	r3, [r0, #20]
 23f7e26:	2b00      	cmp	r3, #0
 23f7e28:	db0c      	blt.n	23f7e44 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
 23f7e2a:	ee07 3a90 	vmov	s15, r3
 23f7e2e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f7e4c <_ZNK14CellularSignal11getStrengthEv+0x2c>
 23f7e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7e36:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7e3a:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f7e50 <_ZNK14CellularSignal11getStrengthEv+0x30>
 23f7e3e:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f7e42:	4770      	bx	lr
    return -1.0f;
 23f7e44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f7e48:	4770      	bx	lr
 23f7e4a:	bf00      	nop
 23f7e4c:	477fff00 	.word	0x477fff00
 23f7e50:	42c80000 	.word	0x42c80000

023f7e54 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 23f7e54:	7b03      	ldrb	r3, [r0, #12]
 23f7e56:	b163      	cbz	r3, 23f7e72 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
 23f7e58:	6903      	ldr	r3, [r0, #16]
 23f7e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f7e5e:	d008      	beq.n	23f7e72 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
 23f7e60:	ee07 3a90 	vmov	s15, r3
 23f7e64:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f7e78 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
 23f7e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7e6c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7e70:	4770      	bx	lr
    return 0.0f;
 23f7e72:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f7e7c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
 23f7e76:	4770      	bx	lr
 23f7e78:	42c80000 	.word	0x42c80000
 23f7e7c:	00000000 	.word	0x00000000

023f7e80 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 23f7e80:	7b03      	ldrb	r3, [r0, #12]
 23f7e82:	b17b      	cbz	r3, 23f7ea4 <_ZNK14CellularSignal10getQualityEv+0x24>
 23f7e84:	69c3      	ldr	r3, [r0, #28]
 23f7e86:	2b00      	cmp	r3, #0
 23f7e88:	db0c      	blt.n	23f7ea4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
 23f7e8a:	ee07 3a90 	vmov	s15, r3
 23f7e8e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f7eac <_ZNK14CellularSignal10getQualityEv+0x2c>
 23f7e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7e96:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7e9a:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f7eb0 <_ZNK14CellularSignal10getQualityEv+0x30>
 23f7e9e:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f7ea2:	4770      	bx	lr
    return -1.0f;
 23f7ea4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f7ea8:	4770      	bx	lr
 23f7eaa:	bf00      	nop
 23f7eac:	477fff00 	.word	0x477fff00
 23f7eb0:	42c80000 	.word	0x42c80000

023f7eb4 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 23f7eb4:	7b03      	ldrb	r3, [r0, #12]
 23f7eb6:	b163      	cbz	r3, 23f7ed2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
 23f7eb8:	6983      	ldr	r3, [r0, #24]
 23f7eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f7ebe:	d008      	beq.n	23f7ed2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
 23f7ec0:	ee07 3a90 	vmov	s15, r3
 23f7ec4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f7ed8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
 23f7ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7ecc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7ed0:	4770      	bx	lr
    return 0.0f;
 23f7ed2:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f7edc <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
 23f7ed6:	4770      	bx	lr
 23f7ed8:	42c80000 	.word	0x42c80000
 23f7edc:	00000000 	.word	0x00000000

023f7ee0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
 23f7ee0:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23f7ee2:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
 23f7ee4:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 23f7ee6:	da0a      	bge.n	23f7efe <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 23f7ee8:	212d      	movs	r1, #45	; 0x2d
 23f7eea:	f001 f8ce 	bl	23f908a <_ZN5Print5printEc>
 23f7eee:	4605      	mov	r5, r0
            val = -n;
 23f7ef0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f7ef2:	220a      	movs	r2, #10
 23f7ef4:	4630      	mov	r0, r6
 23f7ef6:	f001 f8e5 	bl	23f90c4 <_ZN5Print11printNumberEmh>
    }
}
 23f7efa:	4428      	add	r0, r5
 23f7efc:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 23f7efe:	4621      	mov	r1, r4
        size_t t = 0;
 23f7f00:	2500      	movs	r5, #0
 23f7f02:	e7f6      	b.n	23f7ef2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

023f7f04 <_ZN5Print10printFloatEdh>:
    size_t printFloat(double number, uint8_t digits) {
 23f7f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7f08:	ec55 4b10 	vmov	r4, r5, d0
 23f7f0c:	4607      	mov	r7, r0
 23f7f0e:	460e      	mov	r6, r1
        if (std::isnan(number)) {
 23f7f10:	ee10 2a10 	vmov	r2, s0
 23f7f14:	462b      	mov	r3, r5
 23f7f16:	ee10 0a10 	vmov	r0, s0
 23f7f1a:	4629      	mov	r1, r5
 23f7f1c:	f7ec fdaa 	bl	23e4a74 <__aeabi_dcmpun>
 23f7f20:	b128      	cbz	r0, 23f7f2e <_ZN5Print10printFloatEdh+0x2a>
            return print("nan");
 23f7f22:	494c      	ldr	r1, [pc, #304]	; (23f8054 <_ZN5Print10printFloatEdh+0x150>)
            return print ("ovf"); // constant determined empirically
 23f7f24:	4638      	mov	r0, r7
    }
 23f7f26:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            return print ("ovf"); // constant determined empirically
 23f7f2a:	f001 b8aa 	b.w	23f9082 <_ZN5Print5printEPKc>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23f7f2e:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
 23f7f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f7f36:	4620      	mov	r0, r4
 23f7f38:	4649      	mov	r1, r9
 23f7f3a:	4b47      	ldr	r3, [pc, #284]	; (23f8058 <_ZN5Print10printFloatEdh+0x154>)
 23f7f3c:	f7ec fd9a 	bl	23e4a74 <__aeabi_dcmpun>
 23f7f40:	b948      	cbnz	r0, 23f7f56 <_ZN5Print10printFloatEdh+0x52>
 23f7f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f7f46:	4620      	mov	r0, r4
 23f7f48:	4649      	mov	r1, r9
 23f7f4a:	4b43      	ldr	r3, [pc, #268]	; (23f8058 <_ZN5Print10printFloatEdh+0x154>)
 23f7f4c:	f7ec fd74 	bl	23e4a38 <__aeabi_dcmple>
 23f7f50:	b908      	cbnz	r0, 23f7f56 <_ZN5Print10printFloatEdh+0x52>
            return print("inf");
 23f7f52:	4942      	ldr	r1, [pc, #264]	; (23f805c <_ZN5Print10printFloatEdh+0x158>)
 23f7f54:	e7e6      	b.n	23f7f24 <_ZN5Print10printFloatEdh+0x20>
        if (number > 4294967040.0) {
 23f7f56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f7f5a:	4620      	mov	r0, r4
 23f7f5c:	4629      	mov	r1, r5
 23f7f5e:	4b40      	ldr	r3, [pc, #256]	; (23f8060 <_ZN5Print10printFloatEdh+0x15c>)
 23f7f60:	f7ec fd7e 	bl	23e4a60 <__aeabi_dcmpgt>
 23f7f64:	b108      	cbz	r0, 23f7f6a <_ZN5Print10printFloatEdh+0x66>
            return print ("ovf"); // constant determined empirically
 23f7f66:	493f      	ldr	r1, [pc, #252]	; (23f8064 <_ZN5Print10printFloatEdh+0x160>)
 23f7f68:	e7dc      	b.n	23f7f24 <_ZN5Print10printFloatEdh+0x20>
        if (number <-4294967040.0) {
 23f7f6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f7f6e:	4620      	mov	r0, r4
 23f7f70:	4629      	mov	r1, r5
 23f7f72:	4b3d      	ldr	r3, [pc, #244]	; (23f8068 <_ZN5Print10printFloatEdh+0x164>)
 23f7f74:	f7ec fd56 	bl	23e4a24 <__aeabi_dcmplt>
 23f7f78:	2800      	cmp	r0, #0
 23f7f7a:	d1f4      	bne.n	23f7f66 <_ZN5Print10printFloatEdh+0x62>
        if (number < 0.0) {
 23f7f7c:	2200      	movs	r2, #0
 23f7f7e:	2300      	movs	r3, #0
 23f7f80:	4620      	mov	r0, r4
 23f7f82:	4629      	mov	r1, r5
 23f7f84:	f7ec fd4e 	bl	23e4a24 <__aeabi_dcmplt>
 23f7f88:	b1d0      	cbz	r0, 23f7fc0 <_ZN5Print10printFloatEdh+0xbc>
            n += print('-');
 23f7f8a:	212d      	movs	r1, #45	; 0x2d
 23f7f8c:	4638      	mov	r0, r7
 23f7f8e:	f001 f87c 	bl	23f908a <_ZN5Print5printEc>
            number = -number;
 23f7f92:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
            n += print('-');
 23f7f96:	4682      	mov	sl, r0
            number = -number;
 23f7f98:	461d      	mov	r5, r3
        size_t n = 0;
 23f7f9a:	f04f 0b00 	mov.w	fp, #0
        double rounding = 0.5;
 23f7f9e:	2000      	movs	r0, #0
            rounding /= 10.0;
 23f7fa0:	f04f 0800 	mov.w	r8, #0
        double rounding = 0.5;
 23f7fa4:	4931      	ldr	r1, [pc, #196]	; (23f806c <_ZN5Print10printFloatEdh+0x168>)
            rounding /= 10.0;
 23f7fa6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 23f8074 <_ZN5Print10printFloatEdh+0x170>
        for (uint8_t i = 0; i < digits; ++i) {
 23f7faa:	fa5f f38b 	uxtb.w	r3, fp
 23f7fae:	429e      	cmp	r6, r3
 23f7fb0:	d908      	bls.n	23f7fc4 <_ZN5Print10printFloatEdh+0xc0>
            rounding /= 10.0;
 23f7fb2:	4642      	mov	r2, r8
 23f7fb4:	464b      	mov	r3, r9
 23f7fb6:	f7ec fbed 	bl	23e4794 <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
 23f7fba:	f10b 0b01 	add.w	fp, fp, #1
 23f7fbe:	e7f4      	b.n	23f7faa <_ZN5Print10printFloatEdh+0xa6>
        size_t n = 0;
 23f7fc0:	4682      	mov	sl, r0
 23f7fc2:	e7ea      	b.n	23f7f9a <_ZN5Print10printFloatEdh+0x96>
        number += rounding;
 23f7fc4:	4602      	mov	r2, r0
 23f7fc6:	460b      	mov	r3, r1
 23f7fc8:	4620      	mov	r0, r4
 23f7fca:	4629      	mov	r1, r5
 23f7fcc:	f7ec f902 	bl	23e41d4 <__adddf3>
 23f7fd0:	460d      	mov	r5, r1
 23f7fd2:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
 23f7fd4:	f7ec fd8c 	bl	23e4af0 <__aeabi_d2uiz>
 23f7fd8:	4680      	mov	r8, r0
        double remainder = number - (double)int_part;
 23f7fda:	f7ec fa37 	bl	23e444c <__aeabi_ui2d>
 23f7fde:	4602      	mov	r2, r0
 23f7fe0:	460b      	mov	r3, r1
 23f7fe2:	4620      	mov	r0, r4
 23f7fe4:	4629      	mov	r1, r5
 23f7fe6:	f7ec f8f3 	bl	23e41d0 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f7fea:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
 23f7fec:	4604      	mov	r4, r0
 23f7fee:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
 23f7ff0:	4638      	mov	r0, r7
 23f7ff2:	4641      	mov	r1, r8
 23f7ff4:	f001 f866 	bl	23f90c4 <_ZN5Print11printNumberEmh>
        n += print(int_part);
 23f7ff8:	4482      	add	sl, r0
        if (digits > 0) {
 23f7ffa:	b33e      	cbz	r6, 23f804c <_ZN5Print10printFloatEdh+0x148>
            n += print(".");
 23f7ffc:	4638      	mov	r0, r7
 23f7ffe:	491c      	ldr	r1, [pc, #112]	; (23f8070 <_ZN5Print10printFloatEdh+0x16c>)
 23f8000:	f001 f83f 	bl	23f9082 <_ZN5Print5printEPKc>
            remainder *= 10.0;
 23f8004:	f04f 0800 	mov.w	r8, #0
 23f8008:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23f8074 <_ZN5Print10printFloatEdh+0x170>
            n += print(".");
 23f800c:	4482      	add	sl, r0
        while (digits-- > 0) {
 23f800e:	b1ee      	cbz	r6, 23f804c <_ZN5Print10printFloatEdh+0x148>
            remainder *= 10.0;
 23f8010:	4642      	mov	r2, r8
 23f8012:	464b      	mov	r3, r9
 23f8014:	4620      	mov	r0, r4
 23f8016:	4629      	mov	r1, r5
 23f8018:	f7ec fa92 	bl	23e4540 <__aeabi_dmul>
 23f801c:	460d      	mov	r5, r1
 23f801e:	4604      	mov	r4, r0
            int toPrint = int(remainder);
 23f8020:	f7ec fd3e 	bl	23e4aa0 <__aeabi_d2iz>
 23f8024:	4601      	mov	r1, r0
 23f8026:	4683      	mov	fp, r0
inline size_t Print::print(T n, int base)
 23f8028:	4638      	mov	r0, r7
 23f802a:	f7ff ff59 	bl	23f7ee0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
            n += print(toPrint);
 23f802e:	4482      	add	sl, r0
            remainder -= toPrint;
 23f8030:	4658      	mov	r0, fp
 23f8032:	f7ec fa1b 	bl	23e446c <__aeabi_i2d>
 23f8036:	4602      	mov	r2, r0
 23f8038:	460b      	mov	r3, r1
 23f803a:	4620      	mov	r0, r4
 23f803c:	4629      	mov	r1, r5
 23f803e:	f7ec f8c7 	bl	23e41d0 <__aeabi_dsub>
 23f8042:	3e01      	subs	r6, #1
 23f8044:	4604      	mov	r4, r0
 23f8046:	460d      	mov	r5, r1
 23f8048:	b2f6      	uxtb	r6, r6
        while (digits-- > 0) {
 23f804a:	e7e0      	b.n	23f800e <_ZN5Print10printFloatEdh+0x10a>
    }
 23f804c:	4650      	mov	r0, sl
 23f804e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8052:	bf00      	nop
 23f8054:	023ff8e4 	.word	0x023ff8e4
 23f8058:	7fefffff 	.word	0x7fefffff
 23f805c:	023ff8e8 	.word	0x023ff8e8
 23f8060:	41efffff 	.word	0x41efffff
 23f8064:	023ff8ec 	.word	0x023ff8ec
 23f8068:	c1efffff 	.word	0xc1efffff
 23f806c:	3fe00000 	.word	0x3fe00000
 23f8070:	023fe366 	.word	0x023fe366
 23f8074:	40240000 	.word	0x40240000

023f8078 <_ZNK14CellularSignal7printToER5Print>:
{
 23f8078:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
 23f807a:	6803      	ldr	r3, [r0, #0]
{
 23f807c:	460c      	mov	r4, r1
    n += p.print(this->getStrengthValue(), 2);
 23f807e:	691b      	ldr	r3, [r3, #16]
{
 23f8080:	4605      	mov	r5, r0
    n += p.print(this->getStrengthValue(), 2);
 23f8082:	4798      	blx	r3
 23f8084:	ee10 0a10 	vmov	r0, s0
        return printFloat((double)n, digits);
 23f8088:	f7ec fa02 	bl	23e4490 <__aeabi_f2d>
 23f808c:	ec41 0b10 	vmov	d0, r0, r1
 23f8090:	2102      	movs	r1, #2
 23f8092:	4620      	mov	r0, r4
 23f8094:	f7ff ff36 	bl	23f7f04 <_ZN5Print10printFloatEdh>
    n += p.print(',');
 23f8098:	212c      	movs	r1, #44	; 0x2c
 23f809a:	4606      	mov	r6, r0
 23f809c:	4620      	mov	r0, r4
 23f809e:	f000 fff4 	bl	23f908a <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
 23f80a2:	682b      	ldr	r3, [r5, #0]
    n += p.print(',');
 23f80a4:	4406      	add	r6, r0
    n += p.print(this->getQualityValue(), 2);
 23f80a6:	699b      	ldr	r3, [r3, #24]
 23f80a8:	4628      	mov	r0, r5
 23f80aa:	4798      	blx	r3
 23f80ac:	ee10 0a10 	vmov	r0, s0
 23f80b0:	f7ec f9ee 	bl	23e4490 <__aeabi_f2d>
 23f80b4:	ec41 0b10 	vmov	d0, r0, r1
 23f80b8:	2102      	movs	r1, #2
 23f80ba:	4620      	mov	r0, r4
 23f80bc:	f7ff ff22 	bl	23f7f04 <_ZN5Print10printFloatEdh>
}
 23f80c0:	4430      	add	r0, r6
 23f80c2:	bd70      	pop	{r4, r5, r6, pc}

023f80c4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 23f80c4:	f1a0 0004 	sub.w	r0, r0, #4
 23f80c8:	f7ff bfd6 	b.w	23f8078 <_ZNK14CellularSignal7printToER5Print>

023f80cc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 23f80cc:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 23f80ce:	460d      	mov	r5, r1
 23f80d0:	f100 0408 	add.w	r4, r0, #8
 23f80d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f80d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f80d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f80dc:	e884 0003 	stmia.w	r4, {r0, r1}
}
 23f80e0:	2001      	movs	r0, #1
 23f80e2:	bd30      	pop	{r4, r5, pc}

023f80e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f80e4:	4770      	bx	lr

023f80e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23f80e6:	2000      	movs	r0, #0
 23f80e8:	4770      	bx	lr

023f80ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f80ea:	b510      	push	{r4, lr}
 23f80ec:	4604      	mov	r4, r0
 23f80ee:	2110      	movs	r1, #16
 23f80f0:	f7ed f88f 	bl	23e5212 <_ZdlPvj>
 23f80f4:	4620      	mov	r0, r4
 23f80f6:	bd10      	pop	{r4, pc}

023f80f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23f80f8:	b508      	push	{r3, lr}
      { delete this; }
 23f80fa:	f7ff fff6 	bl	23f80ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23f80fe:	bd08      	pop	{r3, pc}

023f8100 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23f8100:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23f8102:	b530      	push	{r4, r5, lr}
        type_(type) {
 23f8104:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23f8108:	6002      	str	r2, [r0, #0]
 23f810a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f810c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f810e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f8110:	680c      	ldr	r4, [r1, #0]
 23f8112:	8085      	strh	r5, [r0, #4]
 23f8114:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8116:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23f8118:	bd30      	pop	{r4, r5, pc}

023f811a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23f811a:	b510      	push	{r4, lr}
 23f811c:	4604      	mov	r4, r0
    free((void*)msg_);
 23f811e:	6800      	ldr	r0, [r0, #0]
 23f8120:	f7ff fcb4 	bl	23f7a8c <free>
}
 23f8124:	4620      	mov	r0, r4
 23f8126:	bd10      	pop	{r4, pc}

023f8128 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f8128:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23f812a:	68c4      	ldr	r4, [r0, #12]
 23f812c:	b314      	cbz	r4, 23f8174 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
 23f812e:	7823      	ldrb	r3, [r4, #0]
 23f8130:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23f8132:	2b02      	cmp	r3, #2
 23f8134:	d103      	bne.n	23f813e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23f8136:	f104 000c 	add.w	r0, r4, #12
 23f813a:	f7ff ffee 	bl	23f811a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23f813e:	1d23      	adds	r3, r4, #4
 23f8140:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23f8142:	b135      	cbz	r5, 23f8152 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23f8144:	4628      	mov	r0, r5
 23f8146:	f7fe f907 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
 23f814a:	2110      	movs	r1, #16
 23f814c:	4628      	mov	r0, r5
 23f814e:	f7ed f860 	bl	23e5212 <_ZdlPvj>
 23f8152:	f104 0308 	add.w	r3, r4, #8
 23f8156:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23f8158:	b135      	cbz	r5, 23f8168 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23f815a:	4628      	mov	r0, r5
 23f815c:	f7fe f8fc 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
 23f8160:	2110      	movs	r1, #16
 23f8162:	4628      	mov	r0, r5
 23f8164:	f7ed f855 	bl	23e5212 <_ZdlPvj>
 23f8168:	4620      	mov	r0, r4
 23f816a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f816e:	2114      	movs	r1, #20
 23f8170:	f7ed b84f 	b.w	23e5212 <_ZdlPvj>
 23f8174:	bd38      	pop	{r3, r4, r5, pc}

023f8176 <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>:

} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
 23f8176:	2200      	movs	r2, #0
 23f8178:	8142      	strh	r2, [r0, #10]
    opts.size = sizeof(opts);
 23f817a:	220c      	movs	r2, #12
 23f817c:	8002      	strh	r2, [r0, #0]
    opts.flags = flags_;
 23f817e:	680a      	ldr	r2, [r1, #0]
 23f8180:	7082      	strb	r2, [r0, #2]
    opts.graceful = graceful_;
 23f8182:	7a0a      	ldrb	r2, [r1, #8]
 23f8184:	70c2      	strb	r2, [r0, #3]
    opts.timeout = timeout_;
 23f8186:	684a      	ldr	r2, [r1, #4]
 23f8188:	6042      	str	r2, [r0, #4]
    opts.clear_session = clearSession_;
 23f818a:	7a4a      	ldrb	r2, [r1, #9]
 23f818c:	7202      	strb	r2, [r0, #8]
    opts.reconnect_immediately = reconnect_;
 23f818e:	7a8a      	ldrb	r2, [r1, #10]
 23f8190:	7242      	strb	r2, [r0, #9]
    return opts;
}
 23f8192:	4770      	bx	lr

023f8194 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23f8194:	b510      	push	{r4, lr}
 23f8196:	b088      	sub	sp, #32
 23f8198:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23f819a:	4668      	mov	r0, sp
 23f819c:	f001 f976 	bl	23f948c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23f81a0:	4669      	mov	r1, sp
 23f81a2:	a804      	add	r0, sp, #16
 23f81a4:	f001 f995 	bl	23f94d2 <_ZN6StringC1ERKS_>
 23f81a8:	a804      	add	r0, sp, #16
 23f81aa:	47a0      	blx	r4
 23f81ac:	4604      	mov	r4, r0
 23f81ae:	a804      	add	r0, sp, #16
 23f81b0:	f001 f921 	bl	23f93f6 <_ZN6StringD1Ev>
    String p(param);
 23f81b4:	4668      	mov	r0, sp
 23f81b6:	f001 f91e 	bl	23f93f6 <_ZN6StringD1Ev>
}
 23f81ba:	4620      	mov	r0, r4
 23f81bc:	b008      	add	sp, #32
 23f81be:	bd10      	pop	{r4, pc}

023f81c0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23f81c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23f81c2:	2300      	movs	r3, #0
         size = sizeof(*this);
 23f81c4:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23f81c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23f81ca:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23f81cc:	4669      	mov	r1, sp
 23f81ce:	461a      	mov	r2, r3
 23f81d0:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23f81d2:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23f81d6:	f8ad 4000 	strh.w	r4, [sp]
 23f81da:	f7ff faeb 	bl	23f77b4 <spark_function>
}
 23f81de:	b004      	add	sp, #16
 23f81e0:	bd10      	pop	{r4, pc}

023f81e2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23f81e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f81e4:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f81e6:	a801      	add	r0, sp, #4
 23f81e8:	f7ff ffc5 	bl	23f8176 <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23f81ec:	2100      	movs	r1, #0
 23f81ee:	f7ff fb6d 	bl	23f78cc <spark_cloud_disconnect>
}
 23f81f2:	b005      	add	sp, #20
 23f81f4:	f85d fb04 	ldr.w	pc, [sp], #4

023f81f8 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f81f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f81fa:	2300      	movs	r3, #0
void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f81fc:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f81fe:	a801      	add	r0, sp, #4
 23f8200:	f7ff ffb9 	bl	23f8176 <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f8204:	4602      	mov	r2, r0
 23f8206:	4619      	mov	r1, r3
 23f8208:	2002      	movs	r0, #2
 23f820a:	f7ff fb43 	bl	23f7894 <spark_set_connection_property>
}
 23f820e:	b005      	add	sp, #20
 23f8210:	f85d fb04 	ldr.w	pc, [sp], #4

023f8214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f8214:	680b      	ldr	r3, [r1, #0]
 23f8216:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f8218:	684b      	ldr	r3, [r1, #4]
 23f821a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f821c:	b113      	cbz	r3, 23f8224 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23f821e:	685a      	ldr	r2, [r3, #4]
 23f8220:	3201      	adds	r2, #1
 23f8222:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f8224:	4770      	bx	lr

023f8226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23f8226:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8228:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f822a:	4668      	mov	r0, sp
 23f822c:	460d      	mov	r5, r1
 23f822e:	f7ff fff1 	bl	23f8214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f8232:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f8234:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f8236:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f8238:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f823a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f823c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23f823e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23f8240:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23f8242:	f7ff fd22 	bl	23f7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23f8246:	b135      	cbz	r5, 23f8256 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23f8248:	1d28      	adds	r0, r5, #4
 23f824a:	f7ff fd1e 	bl	23f7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f824e:	2108      	movs	r1, #8
 23f8250:	4628      	mov	r0, r5
 23f8252:	f7ec ffde 	bl	23e5212 <_ZdlPvj>
        return p;
    }
 23f8256:	4620      	mov	r0, r4
 23f8258:	b003      	add	sp, #12
 23f825a:	bd30      	pop	{r4, r5, pc}

023f825c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23f825c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f825e:	b510      	push	{r4, lr}
      if (_M_empty())
 23f8260:	b90a      	cbnz	r2, 23f8266 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23f8262:	f001 fef9 	bl	23fa058 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f8266:	68c3      	ldr	r3, [r0, #12]
    }
 23f8268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f826c:	4718      	bx	r3

023f826e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f826e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f8270:	6800      	ldr	r0, [r0, #0]
 23f8272:	f100 0110 	add.w	r1, r0, #16
 23f8276:	f7ff fff1 	bl	23f825c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23f827a:	bd08      	pop	{r3, pc}

023f827c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23f827c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f827e:	b510      	push	{r4, lr}
      if (_M_empty())
 23f8280:	b90a      	cbnz	r2, 23f8286 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23f8282:	f001 fee9 	bl	23fa058 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f8286:	68c3      	ldr	r3, [r0, #12]
    }
 23f8288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f828c:	4718      	bx	r3

023f828e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f828e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f8290:	6800      	ldr	r0, [r0, #0]
 23f8292:	f100 0110 	add.w	r1, r0, #16
 23f8296:	f7ff fff1 	bl	23f827c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23f829a:	bd08      	pop	{r3, pc}

023f829c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23f829c:	b538      	push	{r3, r4, r5, lr}
 23f829e:	2300      	movs	r3, #0
 23f82a0:	4604      	mov	r4, r0
 23f82a2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f82a4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23f82a6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f82a8:	f7ec ffaf 	bl	23e520a <_Znwj>
 23f82ac:	b128      	cbz	r0, 23f82ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23f82ae:	2301      	movs	r3, #1
 23f82b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23f82b4:	4b02      	ldr	r3, [pc, #8]	; (23f82c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23f82b6:	60c5      	str	r5, [r0, #12]
 23f82b8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f82ba:	6020      	str	r0, [r4, #0]
	}
 23f82bc:	4620      	mov	r0, r4
 23f82be:	bd38      	pop	{r3, r4, r5, pc}
 23f82c0:	023ff934 	.word	0x023ff934

023f82c4 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>:
    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
    }

    explicit FutureBase(Error::Type error) :
 23f82c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        type_(type) {
 23f82c6:	2600      	movs	r6, #0
 23f82c8:	f8ad 1004 	strh.w	r1, [sp, #4]
 23f82cc:	4605      	mov	r5, r0
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f82ce:	4669      	mov	r1, sp
 23f82d0:	a802      	add	r0, sp, #8
 23f82d2:	9600      	str	r6, [sp, #0]
 23f82d4:	f7ff ff14 	bl	23f8100 <_ZN8particle5ErrorC1EOS0_>
 23f82d8:	2014      	movs	r0, #20
 23f82da:	f7ec ff96 	bl	23e520a <_Znwj>
 23f82de:	4604      	mov	r4, r0
 23f82e0:	b148      	cbz	r0, 23f82f6 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE+0x32>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f82e2:	2302      	movs	r3, #2
 23f82e4:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f82e6:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f82e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f82ec:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23f82ee:	a902      	add	r1, sp, #8
 23f82f0:	300c      	adds	r0, #12
 23f82f2:	f7ff ff05 	bl	23f8100 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f82f6:	4628      	mov	r0, r5
	: __shared_count(__p)
 23f82f8:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f82fa:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23f82fe:	f7ff ffcd 	bl	23f829c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f8302:	a802      	add	r0, sp, #8
 23f8304:	f7ff ff09 	bl	23f811a <_ZN8particle5ErrorD1Ev>
            FutureBase(Error(error)) {
 23f8308:	4668      	mov	r0, sp
 23f830a:	f7ff ff06 	bl	23f811a <_ZN8particle5ErrorD1Ev>
    }
 23f830e:	4628      	mov	r0, r5
 23f8310:	b004      	add	sp, #16
 23f8312:	bd70      	pop	{r4, r5, r6, pc}

023f8314 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23f8314:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f8316:	2300      	movs	r3, #0
 23f8318:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f831a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f831c:	4604      	mov	r4, r0
 23f831e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f8320:	b12b      	cbz	r3, 23f832e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f8322:	2202      	movs	r2, #2
 23f8324:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f8326:	68eb      	ldr	r3, [r5, #12]
 23f8328:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f832a:	68ab      	ldr	r3, [r5, #8]
 23f832c:	60a3      	str	r3, [r4, #8]
    }
 23f832e:	4620      	mov	r0, r4
 23f8330:	bd38      	pop	{r3, r4, r5, pc}
	...

023f8334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23f8334:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8336:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23f8338:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23f833a:	4668      	mov	r0, sp
 23f833c:	f7ff fee0 	bl	23f8100 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f8340:	f04f 0302 	mov.w	r3, #2
 23f8344:	e8d4 2f4f 	ldrexb	r2, [r4]
 23f8348:	2a00      	cmp	r2, #0
 23f834a:	d103      	bne.n	23f8354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23f834c:	e8c4 3f41 	strexb	r1, r3, [r4]
 23f8350:	2900      	cmp	r1, #0
 23f8352:	d1f7      	bne.n	23f8344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23f8354:	d121      	bne.n	23f839a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23f8356:	f104 050c 	add.w	r5, r4, #12
 23f835a:	4669      	mov	r1, sp
 23f835c:	4628      	mov	r0, r5
 23f835e:	f7ff fecf 	bl	23f8100 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23f8362:	2201      	movs	r2, #1
 23f8364:	1c63      	adds	r3, r4, #1
 23f8366:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f836a:	2000      	movs	r0, #0
 23f836c:	f104 0308 	add.w	r3, r4, #8
 23f8370:	e8d3 6fef 	ldaex	r6, [r3]
 23f8374:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23f8378:	2a00      	cmp	r2, #0
 23f837a:	d1f9      	bne.n	23f8370 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23f837c:	b16e      	cbz	r6, 23f839a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23f837e:	f7ff f99b 	bl	23f76b8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f8382:	b178      	cbz	r0, 23f83a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f8384:	4629      	mov	r1, r5
 23f8386:	4630      	mov	r0, r6
 23f8388:	f7ff ff68 	bl	23f825c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23f838c:	4630      	mov	r0, r6
 23f838e:	f7fd ffe3 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f8392:	2110      	movs	r1, #16
 23f8394:	4630      	mov	r0, r6
 23f8396:	f7ec ff3c 	bl	23e5212 <_ZdlPvj>
        p_->setError(std::move(error));
 23f839a:	4668      	mov	r0, sp
 23f839c:	f7ff febd 	bl	23f811a <_ZN8particle5ErrorD1Ev>
    }
 23f83a0:	b009      	add	sp, #36	; 0x24
 23f83a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f83a4:	4631      	mov	r1, r6
 23f83a6:	a802      	add	r0, sp, #8
 23f83a8:	f7ff ffb4 	bl	23f8314 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f83ac:	68e0      	ldr	r0, [r4, #12]
 23f83ae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f83b2:	b108      	cbz	r0, 23f83b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23f83b4:	f004 fbf4 	bl	23fcba0 <strdup>
        type_(type) {
 23f83b8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f83ba:	2010      	movs	r0, #16
 23f83bc:	f8ad 501c 	strh.w	r5, [sp, #28]
 23f83c0:	f7ec ff23 	bl	23e520a <_Znwj>
 23f83c4:	4605      	mov	r5, r0
 23f83c6:	b1e8      	cbz	r0, 23f8404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23f83c8:	2700      	movs	r7, #0
 23f83ca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f83cc:	2018      	movs	r0, #24
 23f83ce:	f7ec ff1c 	bl	23e520a <_Znwj>
 23f83d2:	4604      	mov	r4, r0
 23f83d4:	b188      	cbz	r0, 23f83fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23f83d6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f83d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f83da:	a802      	add	r0, sp, #8
 23f83dc:	f7ff fc7f 	bl	23f7cde <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f83e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f83e2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f83e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f83e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f83e8:	9204      	str	r2, [sp, #16]
 23f83ea:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f83ec:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23f83ee:	60e3      	str	r3, [r4, #12]
 23f83f0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23f83f4:	9205      	str	r2, [sp, #20]
 23f83f6:	f7ff fe83 	bl	23f8100 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23f83fa:	4b08      	ldr	r3, [pc, #32]	; (23f841c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f83fc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f83fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f8400:	4b07      	ldr	r3, [pc, #28]	; (23f8420 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23f8402:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23f8404:	a806      	add	r0, sp, #24
 23f8406:	f7ff fe88 	bl	23f811a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f840a:	a802      	add	r0, sp, #8
 23f840c:	f7fd ffa4 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f8410:	2200      	movs	r2, #0
 23f8412:	4629      	mov	r1, r5
 23f8414:	4803      	ldr	r0, [pc, #12]	; (23f8424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23f8416:	f7ff f95d 	bl	23f76d4 <application_thread_invoke>
 23f841a:	e7b7      	b.n	23f838c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23f841c:	023f826f 	.word	0x023f826f
 23f8420:	023f8501 	.word	0x023f8501
 23f8424:	023f7cb7 	.word	0x023f7cb7

023f8428 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>:
        PublishFlags flags) {
 23f8428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f842c:	b08d      	sub	sp, #52	; 0x34
 23f842e:	4604      	mov	r4, r0
 23f8430:	460e      	mov	r6, r1
 23f8432:	4617      	mov	r7, r2
 23f8434:	4699      	mov	r9, r3
 23f8436:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f843a:	f7ff f9e5 	bl	23f7808 <spark_cloud_flag_connected>
    if (!connected()) {
 23f843e:	b940      	cbnz	r0, 23f8452 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x2a>
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 23f8440:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 23f8444:	4620      	mov	r0, r4
 23f8446:	f7ff ff3d 	bl	23f82c4 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>
}
 23f844a:	4620      	mov	r0, r4
 23f844c:	b00d      	add	sp, #52	; 0x34
 23f844e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d.size = sizeof(spark_send_event_data);
 23f8452:	2014      	movs	r0, #20
    spark_send_event_data d = {};
 23f8454:	2500      	movs	r5, #0
    d.content_type = static_cast<int>(type);
 23f8456:	9b14      	ldr	r3, [sp, #80]	; 0x50
    spark_send_event_data d = {};
 23f8458:	e9cd 5508 	strd	r5, r5, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23f845c:	9007      	str	r0, [sp, #28]
    d.data_size = size;
 23f845e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d.content_type = static_cast<int>(type);
 23f8462:	930b      	str	r3, [sp, #44]	; 0x2c
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23f8464:	f7ec fed1 	bl	23e520a <_Znwj>
 23f8468:	4601      	mov	r1, r0
 23f846a:	b118      	cbz	r0, 23f8474 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f846c:	e9c0 5501 	strd	r5, r5, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f8470:	7005      	strb	r5, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f8472:	7045      	strb	r5, [r0, #1]
	: __shared_count(__p)
 23f8474:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f8476:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23f8478:	f7ff ff10 	bl	23f829c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23f847c:	4b1f      	ldr	r3, [pc, #124]	; (23f84fc <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xd4>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23f847e:	2008      	movs	r0, #8
 23f8480:	9308      	str	r3, [sp, #32]
 23f8482:	f7ec fec2 	bl	23e520a <_Znwj>
 23f8486:	4605      	mov	r5, r0
 23f8488:	b110      	cbz	r0, 23f8490 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x68>
 23f848a:	a903      	add	r1, sp, #12
 23f848c:	f7ff fec2 	bl	23f8214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f8490:	ab07      	add	r3, sp, #28
 23f8492:	9300      	str	r3, [sp, #0]
 23f8494:	4639      	mov	r1, r7
 23f8496:	4630      	mov	r0, r6
 23f8498:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23f849a:	fa5f f388 	uxtb.w	r3, r8
    d.handler_data = p.dataPtr();
 23f849e:	9509      	str	r5, [sp, #36]	; 0x24
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f84a0:	f7ff f9ce 	bl	23f7840 <spark_send_event>
 23f84a4:	b9b8      	cbnz	r0, 23f84d6 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
	return __atomic_load_n(&_M_i, int(__m));
 23f84a6:	9b03      	ldr	r3, [sp, #12]
 23f84a8:	3301      	adds	r3, #1
 23f84aa:	781b      	ldrb	r3, [r3, #0]
 23f84ac:	b2db      	uxtb	r3, r3
 23f84ae:	b993      	cbnz	r3, 23f84d6 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
        type_(type) {
 23f84b0:	9305      	str	r3, [sp, #20]
 23f84b2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23f84b6:	a905      	add	r1, sp, #20
 23f84b8:	a803      	add	r0, sp, #12
 23f84ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 23f84be:	f7ff ff39 	bl	23f8334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f84c2:	a805      	add	r0, sp, #20
 23f84c4:	f7ff fe29 	bl	23f811a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23f84c8:	a805      	add	r0, sp, #20
 23f84ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f84cc:	f7ff feab 	bl	23f8226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23f84d0:	a806      	add	r0, sp, #24
 23f84d2:	f7ff fbda 	bl	23f7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f84d6:	a903      	add	r1, sp, #12
 23f84d8:	a805      	add	r0, sp, #20
 23f84da:	f7ff fe9b 	bl	23f8214 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f84de:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f84e0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f84e2:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f84e4:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f84e6:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f84e8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23f84ea:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23f84ec:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23f84ee:	f7ff fbcc 	bl	23f7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f84f2:	a804      	add	r0, sp, #16
 23f84f4:	f7ff fbc9 	bl	23f7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23f84f8:	e7a7      	b.n	23f844a <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x22>
 23f84fa:	bf00      	nop
 23f84fc:	023f85c5 	.word	0x023f85c5

023f8500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23f8500:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f8502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8504:	4605      	mov	r5, r0
	switch (__op)
 23f8506:	d103      	bne.n	23f8510 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f8508:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f850a:	6003      	str	r3, [r0, #0]
      }
 23f850c:	2000      	movs	r0, #0
 23f850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23f8510:	2a02      	cmp	r2, #2
 23f8512:	d010      	beq.n	23f8536 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23f8514:	2a03      	cmp	r2, #3
 23f8516:	d1f9      	bne.n	23f850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f8518:	6804      	ldr	r4, [r0, #0]
 23f851a:	2c00      	cmp	r4, #0
 23f851c:	d0f6      	beq.n	23f850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23f851e:	f104 0010 	add.w	r0, r4, #16
 23f8522:	f7ff fdfa 	bl	23f811a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f8526:	4620      	mov	r0, r4
 23f8528:	f7fd ff16 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f852c:	2118      	movs	r1, #24
 23f852e:	4620      	mov	r0, r4
 23f8530:	f7ec fe6f 	bl	23e5212 <_ZdlPvj>
 23f8534:	e7ea      	b.n	23f850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8536:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23f8538:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f853a:	f7ec fe66 	bl	23e520a <_Znwj>
 23f853e:	4604      	mov	r4, r0
 23f8540:	b150      	cbz	r0, 23f8558 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23f8542:	4631      	mov	r1, r6
 23f8544:	f7ff fee6 	bl	23f8314 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f8548:	6930      	ldr	r0, [r6, #16]
 23f854a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f854e:	b108      	cbz	r0, 23f8554 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23f8550:	f004 fb26 	bl	23fcba0 <strdup>
        type_(type) {
 23f8554:	6120      	str	r0, [r4, #16]
 23f8556:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23f8558:	602c      	str	r4, [r5, #0]
	}
 23f855a:	e7d7      	b.n	23f850c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023f855c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23f855c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f855e:	2300      	movs	r3, #0
 23f8560:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f8562:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f8564:	4604      	mov	r4, r0
 23f8566:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f8568:	b12b      	cbz	r3, 23f8576 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f856a:	2202      	movs	r2, #2
 23f856c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f856e:	68eb      	ldr	r3, [r5, #12]
 23f8570:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f8572:	68ab      	ldr	r3, [r5, #8]
 23f8574:	60a3      	str	r3, [r4, #8]
    }
 23f8576:	4620      	mov	r0, r4
 23f8578:	bd38      	pop	{r3, r4, r5, pc}

023f857a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23f857a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f857c:	b570      	push	{r4, r5, r6, lr}
 23f857e:	4604      	mov	r4, r0
	switch (__op)
 23f8580:	d103      	bne.n	23f858a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f8582:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f8584:	6003      	str	r3, [r0, #0]
      }
 23f8586:	2000      	movs	r0, #0
 23f8588:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23f858a:	2a02      	cmp	r2, #2
 23f858c:	d00c      	beq.n	23f85a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23f858e:	2a03      	cmp	r2, #3
 23f8590:	d1f9      	bne.n	23f8586 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f8592:	6804      	ldr	r4, [r0, #0]
 23f8594:	2c00      	cmp	r4, #0
 23f8596:	d0f6      	beq.n	23f8586 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f8598:	4620      	mov	r0, r4
 23f859a:	f7fd fedd 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f859e:	2114      	movs	r1, #20
 23f85a0:	4620      	mov	r0, r4
 23f85a2:	f7ec fe36 	bl	23e5212 <_ZdlPvj>
 23f85a6:	e7ee      	b.n	23f8586 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f85a8:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23f85aa:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f85ac:	f7ec fe2d 	bl	23e520a <_Znwj>
 23f85b0:	4605      	mov	r5, r0
 23f85b2:	b120      	cbz	r0, 23f85be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
 23f85b4:	4631      	mov	r1, r6
 23f85b6:	f7ff ffd1 	bl	23f855c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23f85ba:	7c33      	ldrb	r3, [r6, #16]
 23f85bc:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23f85be:	6025      	str	r5, [r4, #0]
	}
 23f85c0:	e7e1      	b.n	23f8586 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

023f85c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23f85c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f85c6:	4604      	mov	r4, r0
 23f85c8:	b089      	sub	sp, #36	; 0x24
 23f85ca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23f85cc:	a801      	add	r0, sp, #4
 23f85ce:	4611      	mov	r1, r2
 23f85d0:	f7ff fe29 	bl	23f8226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23f85d4:	b1a4      	cbz	r4, 23f8600 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23f85d6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f85d8:	b11d      	cbz	r5, 23f85e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23f85da:	4628      	mov	r0, r5
 23f85dc:	f004 fae0 	bl	23fcba0 <strdup>
 23f85e0:	4605      	mov	r5, r0
 23f85e2:	a801      	add	r0, sp, #4
 23f85e4:	a903      	add	r1, sp, #12
        type_(type) {
 23f85e6:	9503      	str	r5, [sp, #12]
 23f85e8:	f8ad 4010 	strh.w	r4, [sp, #16]
 23f85ec:	f7ff fea2 	bl	23f8334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f85f0:	a803      	add	r0, sp, #12
 23f85f2:	f7ff fd92 	bl	23f811a <_ZN8particle5ErrorD1Ev>
 23f85f6:	a802      	add	r0, sp, #8
 23f85f8:	f7ff fb47 	bl	23f7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f85fc:	b009      	add	sp, #36	; 0x24
 23f85fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f8600:	2301      	movs	r3, #1
      { return _M_ptr; }
 23f8602:	9d01      	ldr	r5, [sp, #4]
 23f8604:	e8d5 2f4f 	ldrexb	r2, [r5]
 23f8608:	2a00      	cmp	r2, #0
 23f860a:	d103      	bne.n	23f8614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23f860c:	e8c5 3f41 	strexb	r1, r3, [r5]
 23f8610:	2900      	cmp	r1, #0
 23f8612:	d1f7      	bne.n	23f8604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23f8614:	d1ef      	bne.n	23f85f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23f8616:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23f8618:	2201      	movs	r2, #1
 23f861a:	18eb      	adds	r3, r5, r3
 23f861c:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f8620:	1d2b      	adds	r3, r5, #4
 23f8622:	e8d3 6fef 	ldaex	r6, [r3]
 23f8626:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23f862a:	2a00      	cmp	r2, #0
 23f862c:	d1f9      	bne.n	23f8622 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23f862e:	2e00      	cmp	r6, #0
 23f8630:	d0e1      	beq.n	23f85f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23f8632:	4620      	mov	r0, r4
 23f8634:	f7ff f840 	bl	23f76b8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f8638:	4607      	mov	r7, r0
 23f863a:	b160      	cbz	r0, 23f8656 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f863c:	4630      	mov	r0, r6
 23f863e:	f105 010c 	add.w	r1, r5, #12
 23f8642:	f7ff fe1b 	bl	23f827c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23f8646:	4630      	mov	r0, r6
 23f8648:	f7fd fe86 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f864c:	2110      	movs	r1, #16
 23f864e:	4630      	mov	r0, r6
 23f8650:	f7ec fddf 	bl	23e5212 <_ZdlPvj>
 23f8654:	e7cf      	b.n	23f85f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f8656:	4631      	mov	r1, r6
 23f8658:	a803      	add	r0, sp, #12
 23f865a:	f7ff ff7f 	bl	23f855c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f865e:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f8660:	2010      	movs	r0, #16
 23f8662:	f88d 301c 	strb.w	r3, [sp, #28]
 23f8666:	f7ec fdd0 	bl	23e520a <_Znwj>
 23f866a:	4605      	mov	r5, r0
 23f866c:	b1d0      	cbz	r0, 23f86a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23f866e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8670:	2014      	movs	r0, #20
 23f8672:	f7ec fdca 	bl	23e520a <_Znwj>
 23f8676:	4604      	mov	r4, r0
 23f8678:	b178      	cbz	r0, 23f869a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23f867a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f867c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f867e:	a803      	add	r0, sp, #12
 23f8680:	f7ff fb2d 	bl	23f7cde <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8684:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f8686:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8688:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f868a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23f868c:	9205      	str	r2, [sp, #20]
 23f868e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8690:	60e3      	str	r3, [r4, #12]
 23f8692:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23f8696:	9206      	str	r2, [sp, #24]
 23f8698:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f869a:	4b07      	ldr	r3, [pc, #28]	; (23f86b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f869c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f869e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f86a0:	4b06      	ldr	r3, [pc, #24]	; (23f86bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23f86a2:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23f86a4:	a803      	add	r0, sp, #12
 23f86a6:	f7fd fe57 	bl	23f6358 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f86aa:	2200      	movs	r2, #0
 23f86ac:	4629      	mov	r1, r5
 23f86ae:	4804      	ldr	r0, [pc, #16]	; (23f86c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23f86b0:	f7ff f810 	bl	23f76d4 <application_thread_invoke>
 23f86b4:	e7c7      	b.n	23f8646 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23f86b6:	bf00      	nop
 23f86b8:	023f828f 	.word	0x023f828f
 23f86bc:	023f857b 	.word	0x023f857b
 23f86c0:	023f7cb7 	.word	0x023f7cb7

023f86c4 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f86c4:	2200      	movs	r2, #0
 23f86c6:	4b02      	ldr	r3, [pc, #8]	; (23f86d0 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
 23f86c8:	e9c3 2200 	strd	r2, r2, [r3]
 23f86cc:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
 23f86ce:	4770      	bx	lr
 23f86d0:	1007aee8 	.word	0x1007aee8

023f86d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f86d4:	2200      	movs	r2, #0
 23f86d6:	6840      	ldr	r0, [r0, #4]
 23f86d8:	4611      	mov	r1, r2
 23f86da:	f7ff b967 	b.w	23f79ac <network_listening>

023f86de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f86de:	2200      	movs	r2, #0
 23f86e0:	6840      	ldr	r0, [r0, #4]
 23f86e2:	4611      	mov	r1, r2
 23f86e4:	f7ff b97e 	b.w	23f79e4 <network_get_listen_timeout>

023f86e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f86e8:	2200      	movs	r2, #0
 23f86ea:	6840      	ldr	r0, [r0, #4]
 23f86ec:	f7ff b96c 	b.w	23f79c8 <network_set_listen_timeout>

023f86f0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f86f0:	2200      	movs	r2, #0
 23f86f2:	6840      	ldr	r0, [r0, #4]
 23f86f4:	f081 0101 	eor.w	r1, r1, #1
 23f86f8:	f7ff b94a 	b.w	23f7990 <network_listen>

023f86fc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f86fc:	2300      	movs	r3, #0
 23f86fe:	6840      	ldr	r0, [r0, #4]
 23f8700:	461a      	mov	r2, r3
 23f8702:	4619      	mov	r1, r3
 23f8704:	f7ff b936 	b.w	23f7974 <network_off>

023f8708 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f8708:	2300      	movs	r3, #0
 23f870a:	6840      	ldr	r0, [r0, #4]
 23f870c:	461a      	mov	r2, r3
 23f870e:	4619      	mov	r1, r3
 23f8710:	f7ff b922 	b.w	23f7958 <network_on>

023f8714 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f8714:	2200      	movs	r2, #0
 23f8716:	6840      	ldr	r0, [r0, #4]
 23f8718:	4611      	mov	r1, r2
 23f871a:	f7ff b90f 	b.w	23f793c <network_ready>

023f871e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f871e:	2200      	movs	r2, #0
 23f8720:	6840      	ldr	r0, [r0, #4]
 23f8722:	4611      	mov	r1, r2
 23f8724:	f7ff b8ee 	b.w	23f7904 <network_connecting>

023f8728 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f8728:	2200      	movs	r2, #0
 23f872a:	2102      	movs	r1, #2
 23f872c:	6840      	ldr	r0, [r0, #4]
 23f872e:	f7ff b8f7 	b.w	23f7920 <network_disconnect>

023f8732 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f8732:	2300      	movs	r3, #0
 23f8734:	6840      	ldr	r0, [r0, #4]
 23f8736:	461a      	mov	r2, r3
 23f8738:	f7ff b8d6 	b.w	23f78e8 <network_connect>

023f873c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f873c:	2203      	movs	r2, #3
 23f873e:	4b02      	ldr	r3, [pc, #8]	; (23f8748 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f8740:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f8742:	4a02      	ldr	r2, [pc, #8]	; (23f874c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f8744:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f8746:	4770      	bx	lr
 23f8748:	1007aef4 	.word	0x1007aef4
 23f874c:	023ff950 	.word	0x023ff950

023f8750 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f8750:	4770      	bx	lr

023f8752 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f8752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8754:	4606      	mov	r6, r0
 23f8756:	4615      	mov	r5, r2
 23f8758:	460c      	mov	r4, r1
 23f875a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f875c:	42bc      	cmp	r4, r7
 23f875e:	d006      	beq.n	23f876e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f8760:	6833      	ldr	r3, [r6, #0]
 23f8762:	4630      	mov	r0, r6
 23f8764:	689b      	ldr	r3, [r3, #8]
 23f8766:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f876a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f876c:	e7f6      	b.n	23f875c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f876e:	4628      	mov	r0, r5
 23f8770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8772 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f8772:	2200      	movs	r2, #0
 23f8774:	7c00      	ldrb	r0, [r0, #16]
 23f8776:	f7fe bcab 	b.w	23f70d0 <hal_i2c_write>

023f877a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f877a:	2100      	movs	r1, #0
 23f877c:	7c00      	ldrb	r0, [r0, #16]
 23f877e:	f7fe bcb5 	b.w	23f70ec <hal_i2c_available>

023f8782 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f8782:	2100      	movs	r1, #0
 23f8784:	7c00      	ldrb	r0, [r0, #16]
 23f8786:	f7fe bcbf 	b.w	23f7108 <hal_i2c_read>

023f878a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f878a:	2100      	movs	r1, #0
 23f878c:	7c00      	ldrb	r0, [r0, #16]
 23f878e:	f7fe bcc9 	b.w	23f7124 <hal_i2c_peek>

023f8792 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f8792:	2100      	movs	r1, #0
 23f8794:	7c00      	ldrb	r0, [r0, #16]
 23f8796:	f7fe bcd3 	b.w	23f7140 <hal_i2c_flush>

023f879a <_ZN7TwoWireD0Ev>:
 23f879a:	b510      	push	{r4, lr}
 23f879c:	4604      	mov	r4, r0
 23f879e:	2114      	movs	r1, #20
 23f87a0:	f7ec fd37 	bl	23e5212 <_ZdlPvj>
 23f87a4:	4620      	mov	r0, r4
 23f87a6:	bd10      	pop	{r4, pc}

023f87a8 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23f87a8:	2200      	movs	r2, #0
 23f87aa:	e9c0 2200 	strd	r2, r2, [r0]
 23f87ae:	2218      	movs	r2, #24
 23f87b0:	8002      	strh	r2, [r0, #0]
    };
 23f87b2:	780a      	ldrb	r2, [r1, #0]
 23f87b4:	7102      	strb	r2, [r0, #4]
 23f87b6:	684a      	ldr	r2, [r1, #4]
 23f87b8:	6082      	str	r2, [r0, #8]
 23f87ba:	68ca      	ldr	r2, [r1, #12]
 23f87bc:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23f87be:	7a0a      	ldrb	r2, [r1, #8]
 23f87c0:	6102      	str	r2, [r0, #16]
    };
 23f87c2:	690a      	ldr	r2, [r1, #16]
 23f87c4:	6142      	str	r2, [r0, #20]
  }
 23f87c6:	4770      	bx	lr

023f87c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f87c8:	b538      	push	{r3, r4, r5, lr}
 23f87ca:	4604      	mov	r4, r0
 23f87cc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f87ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f87d2:	2200      	movs	r2, #0
 23f87d4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f87d8:	4b09      	ldr	r3, [pc, #36]	; (23f8800 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f87da:	4608      	mov	r0, r1
  _i2c = i2c;
 23f87dc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f87de:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f87e0:	4629      	mov	r1, r5
 23f87e2:	f7fe fcc9 	bl	23f7178 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f87e6:	30bf      	adds	r0, #191	; 0xbf
 23f87e8:	d108      	bne.n	23f87fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f87ea:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f87ec:	07db      	lsls	r3, r3, #31
 23f87ee:	d505      	bpl.n	23f87fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f87f0:	6868      	ldr	r0, [r5, #4]
 23f87f2:	f7ff f94b 	bl	23f7a8c <free>
    free(conf.tx_buffer);
 23f87f6:	68e8      	ldr	r0, [r5, #12]
 23f87f8:	f7ff f948 	bl	23f7a8c <free>
}
 23f87fc:	4620      	mov	r0, r4
 23f87fe:	bd38      	pop	{r3, r4, r5, pc}
 23f8800:	023ff994 	.word	0x023ff994

023f8804 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23f8804:	2200      	movs	r2, #0
 23f8806:	7c00      	ldrb	r0, [r0, #16]
 23f8808:	f7fe bc2a 	b.w	23f7060 <hal_i2c_set_speed>

023f880c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23f880c:	2300      	movs	r3, #0
 23f880e:	7c00      	ldrb	r0, [r0, #16]
 23f8810:	461a      	mov	r2, r3
 23f8812:	4619      	mov	r1, r3
 23f8814:	f7fe bc32 	b.w	23f707c <hal_i2c_begin>

023f8818 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23f8818:	b510      	push	{r4, lr}
 23f881a:	4604      	mov	r4, r0
 23f881c:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23f881e:	4668      	mov	r0, sp
 23f8820:	f7ff ffc2 	bl	23f87a8 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23f8824:	2200      	movs	r2, #0
 23f8826:	4669      	mov	r1, sp
 23f8828:	7c20      	ldrb	r0, [r4, #16]
 23f882a:	f7fe fccf 	bl	23f71cc <hal_i2c_request_ex>
}
 23f882e:	b006      	add	sp, #24
 23f8830:	bd10      	pop	{r4, pc}

023f8832 <_ZN7TwoWire11requestFromEhjh>:
{
 23f8832:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23f8834:	f88d 1004 	strb.w	r1, [sp, #4]
 23f8838:	2100      	movs	r1, #0
 23f883a:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23f883e:	1a5b      	subs	r3, r3, r1
 23f8840:	bf18      	it	ne
 23f8842:	2301      	movne	r3, #1
 23f8844:	e9cd c104 	strd	ip, r1, [sp, #16]
 23f8848:	a901      	add	r1, sp, #4
    size_ = size;
 23f884a:	9202      	str	r2, [sp, #8]
 23f884c:	f88d 300c 	strb.w	r3, [sp, #12]
 23f8850:	f7ff ffe2 	bl	23f8818 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23f8854:	b007      	add	sp, #28
 23f8856:	f85d fb04 	ldr.w	pc, [sp], #4

023f885a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23f885a:	2301      	movs	r3, #1
 23f885c:	f7ff bfe9 	b.w	23f8832 <_ZN7TwoWire11requestFromEhjh>

023f8860 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23f8860:	2200      	movs	r2, #0
 23f8862:	7c00      	ldrb	r0, [r0, #16]
 23f8864:	f7fe bc18 	b.w	23f7098 <hal_i2c_begin_transmission>

023f8868 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23f8868:	b2c9      	uxtb	r1, r1
 23f886a:	f7ff bff9 	b.w	23f8860 <_ZN7TwoWire17beginTransmissionEh>

023f886e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23f886e:	2200      	movs	r2, #0
 23f8870:	7c00      	ldrb	r0, [r0, #16]
 23f8872:	f7fe bc1f 	b.w	23f70b4 <hal_i2c_end_transmission>

023f8876 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23f8876:	2101      	movs	r1, #1
 23f8878:	f7ff bff9 	b.w	23f886e <_ZN7TwoWire15endTransmissionEh>

023f887c <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 23f887c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 23f887e:	2100      	movs	r1, #0
 23f8880:	7c00      	ldrb	r0, [r0, #16]
 23f8882:	f7fe fc87 	bl	23f7194 <hal_i2c_lock>
}
 23f8886:	fab0 f080 	clz	r0, r0
 23f888a:	0940      	lsrs	r0, r0, #5
 23f888c:	bd08      	pop	{r3, pc}

023f888e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 23f888e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 23f8890:	2100      	movs	r1, #0
 23f8892:	7c00      	ldrb	r0, [r0, #16]
 23f8894:	f7fe fc8c 	bl	23f71b0 <hal_i2c_unlock>
}
 23f8898:	fab0 f080 	clz	r0, r0
 23f889c:	0940      	lsrs	r0, r0, #5
 23f889e:	bd08      	pop	{r3, pc}

023f88a0 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>:

#if HAL_PLATFORM_I2C_NUM == 1
int TwoWire::transaction(const WireTransmission& tx, const WireTransmission& rx)
{
 23f88a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f88a4:	b08c      	sub	sp, #48	; 0x30
  auto txConf = tx.halConfig();
 23f88a6:	466c      	mov	r4, sp
{
 23f88a8:	4615      	mov	r5, r2
 23f88aa:	460f      	mov	r7, r1
 23f88ac:	4606      	mov	r6, r0
  auto rxConf = rx.halConfig();
 23f88ae:	f10d 0818 	add.w	r8, sp, #24
  auto txConf = tx.halConfig();
 23f88b2:	4620      	mov	r0, r4
 23f88b4:	f7ff ff78 	bl	23f87a8 <_ZNK16WireTransmission9halConfigEv>
  auto rxConf = rx.halConfig();
 23f88b8:	4629      	mov	r1, r5
 23f88ba:	4640      	mov	r0, r8
 23f88bc:	f7ff ff74 	bl	23f87a8 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_transaction(_i2c, tx.isValid() ? &txConf : nullptr, rx.isValid() ? &rxConf : nullptr, nullptr);
 23f88c0:	783b      	ldrb	r3, [r7, #0]
 23f88c2:	7c30      	ldrb	r0, [r6, #16]
 23f88c4:	2bff      	cmp	r3, #255	; 0xff
 23f88c6:	782b      	ldrb	r3, [r5, #0]
 23f88c8:	bf14      	ite	ne
 23f88ca:	4621      	movne	r1, r4
 23f88cc:	2100      	moveq	r1, #0
 23f88ce:	2bff      	cmp	r3, #255	; 0xff
 23f88d0:	f04f 0300 	mov.w	r3, #0
 23f88d4:	bf14      	ite	ne
 23f88d6:	4642      	movne	r2, r8
 23f88d8:	461a      	moveq	r2, r3
 23f88da:	f7fe fc85 	bl	23f71e8 <hal_i2c_transaction>
}
 23f88de:	b00c      	add	sp, #48	; 0x30
 23f88e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f88e4 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23f88e4:	21ff      	movs	r1, #255	; 0xff
 23f88e6:	2200      	movs	r2, #0
      : address_{address},
 23f88e8:	4b04      	ldr	r3, [pc, #16]	; (23f88fc <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23f88ea:	2001      	movs	r0, #1
 23f88ec:	e9c3 1200 	strd	r1, r2, [r3]
 23f88f0:	2164      	movs	r1, #100	; 0x64
 23f88f2:	611a      	str	r2, [r3, #16]
 23f88f4:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23f88f8:	4770      	bx	lr
 23f88fa:	bf00      	nop
 23f88fc:	1007aefc 	.word	0x1007aefc

023f8900 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 23f8900:	4700      	bx	r0
	...

023f8904 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 23f8904:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f8908:	461d      	mov	r5, r3
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
 23f890a:	2400      	movs	r4, #0
{
 23f890c:	460f      	mov	r7, r1
 23f890e:	4690      	mov	r8, r2
 23f8910:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
 23f8912:	f7fe fb89 	bl	23f7028 <hal_interrupt_detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f8916:	2304      	movs	r3, #4
  if (priority >= 0) {
 23f8918:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f891a:	f88d 3008 	strb.w	r3, [sp, #8]
    extra.IRQChannelSubPriority = subpriority;
 23f891e:	bfa8      	it	ge
 23f8920:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    hal_interrupt_extra_configuration_t extra = {};
 23f8924:	f8cd 4009 	str.w	r4, [sp, #9]
    return &extra;
 23f8928:	bfa4      	itt	ge
 23f892a:	ac02      	addge	r4, sp, #8
    extra.IRQChannelSubPriority = subpriority;
 23f892c:	f88d 300a 	strbge.w	r3, [sp, #10]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f8930:	463a      	mov	r2, r7
 23f8932:	4643      	mov	r3, r8
 23f8934:	4630      	mov	r0, r6
 23f8936:	4906      	ldr	r1, [pc, #24]	; (23f8950 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 23f8938:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 23f893a:	bfa8      	it	ge
 23f893c:	f88d 5009 	strbge.w	r5, [sp, #9]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f8940:	f7fe fb64 	bl	23f700c <hal_interrupt_attach>
        return false;
    }
    return true;
}
 23f8944:	fab0 f080 	clz	r0, r0
 23f8948:	0940      	lsrs	r0, r0, #5
 23f894a:	b004      	add	sp, #16
 23f894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8950:	023f8901 	.word	0x023f8901

023f8954 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f8954:	4770      	bx	lr

023f8956 <_ZN9IPAddressD0Ev>:
 23f8956:	b510      	push	{r4, lr}
 23f8958:	4604      	mov	r4, r0
 23f895a:	2118      	movs	r1, #24
 23f895c:	f7ec fc59 	bl	23e5212 <_ZdlPvj>
 23f8960:	4620      	mov	r0, r4
 23f8962:	bd10      	pop	{r4, pc}

023f8964 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f8964:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f8966:	7d03      	ldrb	r3, [r0, #20]
{
 23f8968:	460e      	mov	r6, r1
	if (address.v==6) {
 23f896a:	2b06      	cmp	r3, #6
 23f896c:	f04f 0400 	mov.w	r4, #0
{
 23f8970:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8972:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f8976:	d012      	beq.n	23f899e <_ZNK9IPAddress7printToER5Print+0x3a>
 23f8978:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
 23f897c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f8980:	220a      	movs	r2, #10
 23f8982:	4630      	mov	r0, r6
 23f8984:	f000 fb9e 	bl	23f90c4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f8988:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f898a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f898c:	d019      	beq.n	23f89c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f898e:	2c00      	cmp	r4, #0
 23f8990:	d0f4      	beq.n	23f897c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f8992:	212e      	movs	r1, #46	; 0x2e
 23f8994:	4630      	mov	r0, r6
 23f8996:	f000 fb78 	bl	23f908a <_ZN5Print5printEc>
 23f899a:	4404      	add	r4, r0
 23f899c:	e7ee      	b.n	23f897c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f899e:	232f      	movs	r3, #47	; 0x2f
 23f89a0:	466a      	mov	r2, sp
 23f89a2:	4639      	mov	r1, r7
 23f89a4:	200a      	movs	r0, #10
		buf[0] = 0;
 23f89a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f89aa:	f7fe fc39 	bl	23f7220 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f89ae:	4668      	mov	r0, sp
 23f89b0:	f7ec fc06 	bl	23e51c0 <strlen>
 23f89b4:	6833      	ldr	r3, [r6, #0]
 23f89b6:	4602      	mov	r2, r0
 23f89b8:	4669      	mov	r1, sp
 23f89ba:	4630      	mov	r0, r6
 23f89bc:	68db      	ldr	r3, [r3, #12]
 23f89be:	4798      	blx	r3
 23f89c0:	4604      	mov	r4, r0
    }
    return n;
}
 23f89c2:	4620      	mov	r0, r4
 23f89c4:	b00d      	add	sp, #52	; 0x34
 23f89c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f89c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f89c8:	b510      	push	{r4, lr}
 23f89ca:	4604      	mov	r4, r0
 23f89cc:	4b04      	ldr	r3, [pc, #16]	; (23f89e0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f89ce:	2211      	movs	r2, #17
 23f89d0:	2100      	movs	r1, #0
 23f89d2:	f840 3b04 	str.w	r3, [r0], #4
 23f89d6:	f004 f866 	bl	23fcaa6 <memset>
}
 23f89da:	4620      	mov	r0, r4
 23f89dc:	bd10      	pop	{r4, pc}
 23f89de:	bf00      	nop
 23f89e0:	023ff9c0 	.word	0x023ff9c0

023f89e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f89e4:	4603      	mov	r3, r0
 23f89e6:	4a07      	ldr	r2, [pc, #28]	; (23f8a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f89e8:	b510      	push	{r4, lr}
 23f89ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f89ee:	f101 0210 	add.w	r2, r1, #16
 23f89f2:	f851 4b04 	ldr.w	r4, [r1], #4
 23f89f6:	4291      	cmp	r1, r2
 23f89f8:	f843 4b04 	str.w	r4, [r3], #4
 23f89fc:	d1f9      	bne.n	23f89f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f89fe:	780a      	ldrb	r2, [r1, #0]
 23f8a00:	701a      	strb	r2, [r3, #0]
}
 23f8a02:	bd10      	pop	{r4, pc}
 23f8a04:	023ff9c0 	.word	0x023ff9c0

023f8a08 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f8a08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f8a0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f8a0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f8a12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f8a16:	2304      	movs	r3, #4
 23f8a18:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f8a1c:	6041      	str	r1, [r0, #4]
 23f8a1e:	7503      	strb	r3, [r0, #20]
}
 23f8a20:	bd10      	pop	{r4, pc}
	...

023f8a24 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f8a24:	b507      	push	{r0, r1, r2, lr}
 23f8a26:	4b06      	ldr	r3, [pc, #24]	; (23f8a40 <_ZN9IPAddressC1EPKh+0x1c>)
 23f8a28:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f8a2a:	78cb      	ldrb	r3, [r1, #3]
 23f8a2c:	9300      	str	r3, [sp, #0]
 23f8a2e:	788b      	ldrb	r3, [r1, #2]
 23f8a30:	784a      	ldrb	r2, [r1, #1]
 23f8a32:	7809      	ldrb	r1, [r1, #0]
 23f8a34:	f7ff ffe8 	bl	23f8a08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f8a38:	b003      	add	sp, #12
 23f8a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 23f8a3e:	bf00      	nop
 23f8a40:	023ff9c0 	.word	0x023ff9c0

023f8a44 <_ZN5spark16JSONBufferWriterD1Ev>:
private:
    Print &strm_;
    size_t bytesWritten_;
};

class JSONBufferWriter: public JSONWriter {
 23f8a44:	4770      	bx	lr

023f8a46 <_ZN5spark16JSONBufferWriterD0Ev>:
 23f8a46:	b510      	push	{r4, lr}
 23f8a48:	4604      	mov	r4, r0
 23f8a4a:	2114      	movs	r1, #20
 23f8a4c:	f7ec fbe1 	bl	23e5212 <_ZdlPvj>
 23f8a50:	4620      	mov	r0, r4
 23f8a52:	bd10      	pop	{r4, pc}

023f8a54 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f8a54:	b538      	push	{r3, r4, r5, lr}
 23f8a56:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23f8a58:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23f8a5c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f8a5e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23f8a60:	d207      	bcs.n	23f8a72 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23f8a62:	1ad2      	subs	r2, r2, r3
 23f8a64:	6880      	ldr	r0, [r0, #8]
 23f8a66:	42aa      	cmp	r2, r5
 23f8a68:	bf28      	it	cs
 23f8a6a:	462a      	movcs	r2, r5
 23f8a6c:	4418      	add	r0, r3
 23f8a6e:	f004 f80d 	bl	23fca8c <memcpy>
    }
    n_ += size;
 23f8a72:	6922      	ldr	r2, [r4, #16]
 23f8a74:	442a      	add	r2, r5
 23f8a76:	6122      	str	r2, [r4, #16]
}
 23f8a78:	bd38      	pop	{r3, r4, r5, pc}

023f8a7a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23f8a7a:	b40e      	push	{r1, r2, r3}
 23f8a7c:	b517      	push	{r0, r1, r2, r4, lr}
 23f8a7e:	4604      	mov	r4, r0
 23f8a80:	ab05      	add	r3, sp, #20
 23f8a82:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f8a86:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23f8a88:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f8a8a:	6903      	ldr	r3, [r0, #16]
 23f8a8c:	6880      	ldr	r0, [r0, #8]
 23f8a8e:	428b      	cmp	r3, r1
 23f8a90:	bf34      	ite	cc
 23f8a92:	1ac9      	subcc	r1, r1, r3
 23f8a94:	2100      	movcs	r1, #0
 23f8a96:	4418      	add	r0, r3
 23f8a98:	9b01      	ldr	r3, [sp, #4]
 23f8a9a:	f7ff f84b 	bl	23f7b34 <vsnprintf>
    va_end(args);
    n_ += n;
 23f8a9e:	6923      	ldr	r3, [r4, #16]
 23f8aa0:	4418      	add	r0, r3
 23f8aa2:	6120      	str	r0, [r4, #16]
}
 23f8aa4:	b003      	add	sp, #12
 23f8aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8aaa:	b003      	add	sp, #12
 23f8aac:	4770      	bx	lr

023f8aae <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f8aae:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f8ab0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f8ab2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f8ab6:	2201      	movs	r2, #1
 23f8ab8:	689b      	ldr	r3, [r3, #8]
 23f8aba:	f10d 0107 	add.w	r1, sp, #7
 23f8abe:	4798      	blx	r3
}
 23f8ac0:	b003      	add	sp, #12
 23f8ac2:	f85d fb04 	ldr.w	pc, [sp], #4

023f8ac6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f8ac6:	b510      	push	{r4, lr}
    write('}');
 23f8ac8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f8aca:	4604      	mov	r4, r0
    write('}');
 23f8acc:	f7ff ffef 	bl	23f8aae <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f8ad0:	2301      	movs	r3, #1
}
 23f8ad2:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8ad4:	7123      	strb	r3, [r4, #4]
}
 23f8ad6:	bd10      	pop	{r4, pc}

023f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23f8ad8:	b508      	push	{r3, lr}
    switch (state_) {
 23f8ada:	7903      	ldrb	r3, [r0, #4]
 23f8adc:	2b01      	cmp	r3, #1
 23f8ade:	d002      	beq.n	23f8ae6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f8ae0:	2b02      	cmp	r3, #2
 23f8ae2:	d004      	beq.n	23f8aee <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23f8ae4:	bd08      	pop	{r3, pc}
        write(',');
 23f8ae6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f8ae8:	f7ff ffe1 	bl	23f8aae <_ZN5spark10JSONWriter5writeEc>
}
 23f8aec:	e7fa      	b.n	23f8ae4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f8aee:	213a      	movs	r1, #58	; 0x3a
 23f8af0:	e7fa      	b.n	23f8ae8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f8af2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f8af2:	b510      	push	{r4, lr}
 23f8af4:	4604      	mov	r4, r0
    writeSeparator();
 23f8af6:	f7ff ffef 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f8afa:	4620      	mov	r0, r4
 23f8afc:	217b      	movs	r1, #123	; 0x7b
 23f8afe:	f7ff ffd6 	bl	23f8aae <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f8b02:	2300      	movs	r3, #0
}
 23f8b04:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f8b06:	7123      	strb	r3, [r4, #4]
}
 23f8b08:	bd10      	pop	{r4, pc}
	...

023f8b0c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f8b0c:	b513      	push	{r0, r1, r4, lr}
 23f8b0e:	4604      	mov	r4, r0
 23f8b10:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f8b12:	f7ff ffe1 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f8b16:	6823      	ldr	r3, [r4, #0]
 23f8b18:	4620      	mov	r0, r4
 23f8b1a:	68db      	ldr	r3, [r3, #12]
 23f8b1c:	9a01      	ldr	r2, [sp, #4]
 23f8b1e:	4903      	ldr	r1, [pc, #12]	; (23f8b2c <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f8b20:	4798      	blx	r3
    state_ = NEXT;
 23f8b22:	2301      	movs	r3, #1
}
 23f8b24:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8b26:	7123      	strb	r3, [r4, #4]
}
 23f8b28:	b002      	add	sp, #8
 23f8b2a:	bd10      	pop	{r4, pc}
 23f8b2c:	023ff751 	.word	0x023ff751

023f8b30 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f8b30:	b513      	push	{r0, r1, r4, lr}
 23f8b32:	4604      	mov	r4, r0
 23f8b34:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f8b36:	f7ff ffcf 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f8b3a:	6823      	ldr	r3, [r4, #0]
 23f8b3c:	4620      	mov	r0, r4
 23f8b3e:	68db      	ldr	r3, [r3, #12]
 23f8b40:	9a01      	ldr	r2, [sp, #4]
 23f8b42:	4903      	ldr	r1, [pc, #12]	; (23f8b50 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f8b44:	4798      	blx	r3
    state_ = NEXT;
 23f8b46:	2301      	movs	r3, #1
}
 23f8b48:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8b4a:	7123      	strb	r3, [r4, #4]
}
 23f8b4c:	b002      	add	sp, #8
 23f8b4e:	bd10      	pop	{r4, pc}
 23f8b50:	023ff6dc 	.word	0x023ff6dc

023f8b54 <_ZN5spark10JSONWriter5valueEm>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long val) {
 23f8b54:	b513      	push	{r0, r1, r4, lr}
 23f8b56:	4604      	mov	r4, r0
 23f8b58:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f8b5a:	f7ff ffbd 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%lu", val);
 23f8b5e:	6823      	ldr	r3, [r4, #0]
 23f8b60:	4620      	mov	r0, r4
 23f8b62:	68db      	ldr	r3, [r3, #12]
 23f8b64:	9a01      	ldr	r2, [sp, #4]
 23f8b66:	4903      	ldr	r1, [pc, #12]	; (23f8b74 <_ZN5spark10JSONWriter5valueEm+0x20>)
 23f8b68:	4798      	blx	r3
    state_ = NEXT;
 23f8b6a:	2301      	movs	r3, #1
}
 23f8b6c:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8b6e:	7123      	strb	r3, [r4, #4]
}
 23f8b70:	b002      	add	sp, #8
 23f8b72:	bd10      	pop	{r4, pc}
 23f8b74:	023fd95b 	.word	0x023fd95b

023f8b78 <_ZN5spark10JSONWriter5valueEy>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long long val) {
 23f8b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8b7a:	4604      	mov	r4, r0
 23f8b7c:	e9cd 3200 	strd	r3, r2, [sp]
    writeSeparator();
 23f8b80:	f7ff ffaa 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%llu", val);
 23f8b84:	e9dd 3200 	ldrd	r3, r2, [sp]
 23f8b88:	6821      	ldr	r1, [r4, #0]
 23f8b8a:	4620      	mov	r0, r4
 23f8b8c:	68cd      	ldr	r5, [r1, #12]
 23f8b8e:	4903      	ldr	r1, [pc, #12]	; (23f8b9c <_ZN5spark10JSONWriter5valueEy+0x24>)
 23f8b90:	47a8      	blx	r5
    state_ = NEXT;
 23f8b92:	2301      	movs	r3, #1
}
 23f8b94:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8b96:	7123      	strb	r3, [r4, #4]
}
 23f8b98:	b003      	add	sp, #12
 23f8b9a:	bd30      	pop	{r4, r5, pc}
 23f8b9c:	023ff9cc 	.word	0x023ff9cc

023f8ba0 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
 23f8ba0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f8ba4:	4606      	mov	r6, r0
 23f8ba6:	ec55 4b10 	vmov	r4, r5, d0
 23f8baa:	460f      	mov	r7, r1
    writeSeparator();
 23f8bac:	f7ff ff94 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8bb0:	6833      	ldr	r3, [r6, #0]
    if (std::isnan(val)) {
 23f8bb2:	4622      	mov	r2, r4
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8bb4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    if (std::isnan(val)) {
 23f8bb8:	4620      	mov	r0, r4
 23f8bba:	462b      	mov	r3, r5
 23f8bbc:	4629      	mov	r1, r5
 23f8bbe:	f7eb ff59 	bl	23e4a74 <__aeabi_dcmpun>
 23f8bc2:	bb38      	cbnz	r0, 23f8c14 <_ZN5spark10JSONWriter5valueEdi+0x74>
 23f8bc4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
    if (std::isinf(val)) {
 23f8bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8bcc:	4620      	mov	r0, r4
 23f8bce:	4649      	mov	r1, r9
 23f8bd0:	4b13      	ldr	r3, [pc, #76]	; (23f8c20 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f8bd2:	f7eb ff4f 	bl	23e4a74 <__aeabi_dcmpun>
 23f8bd6:	b988      	cbnz	r0, 23f8bfc <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f8bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8bdc:	4620      	mov	r0, r4
 23f8bde:	4649      	mov	r1, r9
 23f8be0:	4b0f      	ldr	r3, [pc, #60]	; (23f8c20 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f8be2:	f7eb ff29 	bl	23e4a38 <__aeabi_dcmple>
 23f8be6:	b948      	cbnz	r0, 23f8bfc <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f8be8:	4620      	mov	r0, r4
 23f8bea:	2200      	movs	r2, #0
 23f8bec:	2300      	movs	r3, #0
 23f8bee:	4629      	mov	r1, r5
 23f8bf0:	f7eb ff18 	bl	23e4a24 <__aeabi_dcmplt>
 23f8bf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f8bf8:	b978      	cbnz	r0, 23f8c1a <_ZN5spark10JSONWriter5valueEdi+0x7a>
 23f8bfa:	4d09      	ldr	r5, [pc, #36]	; (23f8c20 <_ZN5spark10JSONWriter5valueEdi+0x80>)
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8bfc:	4630      	mov	r0, r6
 23f8bfe:	463a      	mov	r2, r7
 23f8c00:	e9cd 4500 	strd	r4, r5, [sp]
 23f8c04:	4907      	ldr	r1, [pc, #28]	; (23f8c24 <_ZN5spark10JSONWriter5valueEdi+0x84>)
 23f8c06:	47d0      	blx	sl
    state_ = NEXT;
 23f8c08:	2301      	movs	r3, #1
}
 23f8c0a:	4630      	mov	r0, r6
    state_ = NEXT;
 23f8c0c:	7133      	strb	r3, [r6, #4]
}
 23f8c0e:	b002      	add	sp, #8
 23f8c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
 23f8c14:	2400      	movs	r4, #0
 23f8c16:	2500      	movs	r5, #0
 23f8c18:	e7f0      	b.n	23f8bfc <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f8c1a:	f46f 1580 	mvn.w	r5, #1048576	; 0x100000
 23f8c1e:	e7ed      	b.n	23f8bfc <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f8c20:	7fefffff 	.word	0x7fefffff
 23f8c24:	023ff9d1 	.word	0x023ff9d1

023f8c28 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f8c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f8c2c:	460d      	mov	r5, r1
 23f8c2e:	4690      	mov	r8, r2
    write('"');
 23f8c30:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f8c32:	4604      	mov	r4, r0
 23f8c34:	462f      	mov	r7, r5
    write('"');
 23f8c36:	f7ff ff3a 	bl	23f8aae <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23f8c3a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f8ce0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f8c3e:	44a8      	add	r8, r5
    while (s != end) {
 23f8c40:	4547      	cmp	r7, r8
 23f8c42:	46ba      	mov	sl, r7
 23f8c44:	d03d      	beq.n	23f8cc2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f8c46:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f8c4a:	2e22      	cmp	r6, #34	; 0x22
 23f8c4c:	d006      	beq.n	23f8c5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f8c4e:	2e5c      	cmp	r6, #92	; 0x5c
 23f8c50:	d004      	beq.n	23f8c5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f8c52:	4630      	mov	r0, r6
 23f8c54:	f003 ff02 	bl	23fca5c <isprint>
 23f8c58:	2800      	cmp	r0, #0
 23f8c5a:	d1f1      	bne.n	23f8c40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f8c5c:	6823      	ldr	r3, [r4, #0]
 23f8c5e:	4629      	mov	r1, r5
 23f8c60:	4620      	mov	r0, r4
 23f8c62:	689b      	ldr	r3, [r3, #8]
 23f8c64:	ebaa 0205 	sub.w	r2, sl, r5
 23f8c68:	4798      	blx	r3
            write('\\');
 23f8c6a:	215c      	movs	r1, #92	; 0x5c
 23f8c6c:	4620      	mov	r0, r4
 23f8c6e:	f7ff ff1e 	bl	23f8aae <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f8c72:	2e0d      	cmp	r6, #13
 23f8c74:	d80a      	bhi.n	23f8c8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f8c76:	2e07      	cmp	r6, #7
 23f8c78:	d91c      	bls.n	23f8cb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f8c7a:	f1a6 0308 	sub.w	r3, r6, #8
 23f8c7e:	2b05      	cmp	r3, #5
 23f8c80:	d818      	bhi.n	23f8cb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f8c82:	e8df f003 	tbb	[pc, r3]
 23f8c86:	0f0d      	.short	0x0f0d
 23f8c88:	15131711 	.word	0x15131711
 23f8c8c:	2e22      	cmp	r6, #34	; 0x22
 23f8c8e:	d001      	beq.n	23f8c94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f8c90:	2e5c      	cmp	r6, #92	; 0x5c
 23f8c92:	d10f      	bne.n	23f8cb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f8c94:	4631      	mov	r1, r6
                write('b');
 23f8c96:	4620      	mov	r0, r4
 23f8c98:	f7ff ff09 	bl	23f8aae <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23f8c9c:	463d      	mov	r5, r7
    while (s != end) {
 23f8c9e:	e7cf      	b.n	23f8c40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f8ca0:	2162      	movs	r1, #98	; 0x62
 23f8ca2:	e7f8      	b.n	23f8c96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f8ca4:	2174      	movs	r1, #116	; 0x74
 23f8ca6:	e7f6      	b.n	23f8c96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f8ca8:	216e      	movs	r1, #110	; 0x6e
 23f8caa:	e7f4      	b.n	23f8c96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f8cac:	2166      	movs	r1, #102	; 0x66
 23f8cae:	e7f2      	b.n	23f8c96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f8cb0:	2172      	movs	r1, #114	; 0x72
 23f8cb2:	e7f0      	b.n	23f8c96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f8cb4:	6823      	ldr	r3, [r4, #0]
 23f8cb6:	4632      	mov	r2, r6
 23f8cb8:	4649      	mov	r1, r9
 23f8cba:	4620      	mov	r0, r4
 23f8cbc:	68db      	ldr	r3, [r3, #12]
 23f8cbe:	4798      	blx	r3
                break;
 23f8cc0:	e7ec      	b.n	23f8c9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23f8cc2:	42bd      	cmp	r5, r7
 23f8cc4:	d005      	beq.n	23f8cd2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f8cc6:	6823      	ldr	r3, [r4, #0]
 23f8cc8:	4629      	mov	r1, r5
 23f8cca:	4620      	mov	r0, r4
 23f8ccc:	689b      	ldr	r3, [r3, #8]
 23f8cce:	1b7a      	subs	r2, r7, r5
 23f8cd0:	4798      	blx	r3
    write('"');
 23f8cd2:	2122      	movs	r1, #34	; 0x22
 23f8cd4:	4620      	mov	r0, r4
 23f8cd6:	f7ff feea 	bl	23f8aae <_ZN5spark10JSONWriter5writeEc>
}
 23f8cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f8cde:	bf00      	nop
 23f8ce0:	023ff9d7 	.word	0x023ff9d7

023f8ce4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f8ce4:	b513      	push	{r0, r1, r4, lr}
 23f8ce6:	4604      	mov	r4, r0
 23f8ce8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f8cec:	f7ff fef4 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f8cf0:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f8cf4:	4620      	mov	r0, r4
 23f8cf6:	f7ff ff97 	bl	23f8c28 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f8cfa:	2302      	movs	r3, #2
}
 23f8cfc:	4620      	mov	r0, r4
    state_ = VALUE;
 23f8cfe:	7123      	strb	r3, [r4, #4]
}
 23f8d00:	b002      	add	sp, #8
 23f8d02:	bd10      	pop	{r4, pc}

023f8d04 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f8d04:	b513      	push	{r0, r1, r4, lr}
 23f8d06:	4604      	mov	r4, r0
 23f8d08:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f8d0c:	f7ff fee4 	bl	23f8ad8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f8d10:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f8d14:	4620      	mov	r0, r4
 23f8d16:	f7ff ff87 	bl	23f8c28 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f8d1a:	2301      	movs	r3, #1
}
 23f8d1c:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8d1e:	7123      	strb	r3, [r4, #4]
}
 23f8d20:	b002      	add	sp, #8
 23f8d22:	bd10      	pop	{r4, pc}

023f8d24 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23f8d24:	4b01      	ldr	r3, [pc, #4]	; (23f8d2c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f8d26:	4a02      	ldr	r2, [pc, #8]	; (23f8d30 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f8d28:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f8d2a:	4770      	bx	lr
 23f8d2c:	1007af10 	.word	0x1007af10
 23f8d30:	023ff9f8 	.word	0x023ff9f8

023f8d34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f8d34:	2300      	movs	r3, #0
 23f8d36:	6840      	ldr	r0, [r0, #4]
 23f8d38:	461a      	mov	r2, r3
 23f8d3a:	f7fe bdd5 	b.w	23f78e8 <network_connect>

023f8d3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f8d3e:	2200      	movs	r2, #0
 23f8d40:	2102      	movs	r1, #2
 23f8d42:	6840      	ldr	r0, [r0, #4]
 23f8d44:	f7fe bdec 	b.w	23f7920 <network_disconnect>

023f8d48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f8d48:	2200      	movs	r2, #0
 23f8d4a:	6840      	ldr	r0, [r0, #4]
 23f8d4c:	4611      	mov	r1, r2
 23f8d4e:	f7fe bdd9 	b.w	23f7904 <network_connecting>

023f8d52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f8d52:	2200      	movs	r2, #0
 23f8d54:	6840      	ldr	r0, [r0, #4]
 23f8d56:	4611      	mov	r1, r2
 23f8d58:	f7fe bdf0 	b.w	23f793c <network_ready>

023f8d5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f8d5c:	2300      	movs	r3, #0
 23f8d5e:	6840      	ldr	r0, [r0, #4]
 23f8d60:	461a      	mov	r2, r3
 23f8d62:	4619      	mov	r1, r3
 23f8d64:	f7fe bdf8 	b.w	23f7958 <network_on>

023f8d68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f8d68:	2300      	movs	r3, #0
 23f8d6a:	6840      	ldr	r0, [r0, #4]
 23f8d6c:	461a      	mov	r2, r3
 23f8d6e:	4619      	mov	r1, r3
 23f8d70:	f7fe be00 	b.w	23f7974 <network_off>

023f8d74 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f8d74:	2100      	movs	r1, #0
 23f8d76:	6840      	ldr	r0, [r0, #4]
 23f8d78:	f7fe be42 	b.w	23f7a00 <network_is_on>

023f8d7c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f8d7c:	2100      	movs	r1, #0
 23f8d7e:	6840      	ldr	r0, [r0, #4]
 23f8d80:	f7fe be4c 	b.w	23f7a1c <network_is_off>

023f8d84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f8d84:	2200      	movs	r2, #0
 23f8d86:	6840      	ldr	r0, [r0, #4]
 23f8d88:	f081 0101 	eor.w	r1, r1, #1
 23f8d8c:	f7fe be00 	b.w	23f7990 <network_listen>

023f8d90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f8d90:	2200      	movs	r2, #0
 23f8d92:	6840      	ldr	r0, [r0, #4]
 23f8d94:	f7fe be18 	b.w	23f79c8 <network_set_listen_timeout>

023f8d98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f8d98:	2200      	movs	r2, #0
 23f8d9a:	6840      	ldr	r0, [r0, #4]
 23f8d9c:	4611      	mov	r1, r2
 23f8d9e:	f7fe be21 	b.w	23f79e4 <network_get_listen_timeout>

023f8da2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f8da2:	2200      	movs	r2, #0
 23f8da4:	6840      	ldr	r0, [r0, #4]
 23f8da6:	4611      	mov	r1, r2
 23f8da8:	f7fe be00 	b.w	23f79ac <network_listening>

023f8dac <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23f8dac:	2100      	movs	r1, #0
 23f8dae:	6840      	ldr	r0, [r0, #4]
 23f8db0:	f7fe be50 	b.w	23f7a54 <network_is_preferred>

023f8db4 <_ZN5spark12NetworkClass7resolveEPKcb>:
}

IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f8db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f8db8:	2600      	movs	r6, #0
IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f8dba:	4698      	mov	r8, r3
 23f8dbc:	b099      	sub	sp, #100	; 0x64
 23f8dbe:	460d      	mov	r5, r1
 23f8dc0:	4614      	mov	r4, r2
 23f8dc2:	4607      	mov	r7, r0
    IPAddress addr;
 23f8dc4:	f7ff fe00 	bl	23f89c8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
 23f8dc8:	221c      	movs	r2, #28
 23f8dca:	4631      	mov	r1, r6
 23f8dcc:	a811      	add	r0, sp, #68	; 0x44
    struct addrinfo *ai = nullptr;
 23f8dce:	9603      	str	r6, [sp, #12]
    struct addrinfo hints = {};
 23f8dd0:	f003 fe69 	bl	23fcaa6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
    if (flushCache) {
 23f8dd4:	f1b8 0f00 	cmp.w	r8, #0
 23f8dd8:	d12c      	bne.n	23f8e34 <_ZN5spark12NetworkClass7resolveEPKcb+0x80>
    hints.ai_flags = AI_ADDRCONFIG;
 23f8dda:	2340      	movs	r3, #64	; 0x40
        return iface_;
 23f8ddc:	6868      	ldr	r0, [r5, #4]
        hints.ai_flags |= AI_FLUSHCACHE;
 23f8dde:	9310      	str	r3, [sp, #64]	; 0x40
    }
    hints.ai_family = AF_UNSPEC;
    if_t iface = nullptr;
 23f8de0:	9604      	str	r6, [sp, #16]
    if ((network_interface_t)*this != NETWORK_INTERFACE_ALL) {
 23f8de2:	b118      	cbz	r0, 23f8dec <_ZN5spark12NetworkClass7resolveEPKcb+0x38>
        if_get_by_index((network_interface_t)*this, &iface);
 23f8de4:	a904      	add	r1, sp, #16
 23f8de6:	b2c0      	uxtb	r0, r0
 23f8de8:	f7fe fa0c 	bl	23f7204 <if_get_by_index>
    }
    const int r = netdb_getaddrinfo_ex(name, nullptr, &hints, &ai, iface);
 23f8dec:	9b04      	ldr	r3, [sp, #16]
 23f8dee:	4620      	mov	r0, r4
 23f8df0:	9300      	str	r3, [sp, #0]
 23f8df2:	2100      	movs	r1, #0
 23f8df4:	ab03      	add	r3, sp, #12
 23f8df6:	aa10      	add	r2, sp, #64	; 0x40
 23f8df8:	f7fe fa2e 	bl	23f7258 <netdb_getaddrinfo_ex>
    if (!r) {
 23f8dfc:	4604      	mov	r4, r0
 23f8dfe:	2800      	cmp	r0, #0
 23f8e00:	d14d      	bne.n	23f8e9e <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f8e02:	4602      	mov	r2, r0
 23f8e04:	2101      	movs	r1, #1
 23f8e06:	6868      	ldr	r0, [r5, #4]
 23f8e08:	f7fe fd98 	bl	23f793c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f8e0c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f8e0e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f8e10:	4622      	mov	r2, r4
 23f8e12:	6868      	ldr	r0, [r5, #4]
 23f8e14:	f7fe fd92 	bl	23f793c <network_ready>
        bool ok = false;
 23f8e18:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f8e1a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f8e1c:	9e03      	ldr	r6, [sp, #12]
 23f8e1e:	2e00      	cmp	r6, #0
 23f8e20:	d03d      	beq.n	23f8e9e <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
 23f8e22:	2900      	cmp	r1, #0
 23f8e24:	d13b      	bne.n	23f8e9e <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f8e26:	6873      	ldr	r3, [r6, #4]
 23f8e28:	2b02      	cmp	r3, #2
 23f8e2a:	d005      	beq.n	23f8e38 <_ZN5spark12NetworkClass7resolveEPKcb+0x84>
 23f8e2c:	2b0a      	cmp	r3, #10
 23f8e2e:	d013      	beq.n	23f8e58 <_ZN5spark12NetworkClass7resolveEPKcb+0xa4>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f8e30:	69f6      	ldr	r6, [r6, #28]
 23f8e32:	e7f4      	b.n	23f8e1e <_ZN5spark12NetworkClass7resolveEPKcb+0x6a>
        hints.ai_flags |= AI_FLUSHCACHE;
 23f8e34:	4b1d      	ldr	r3, [pc, #116]	; (23f8eac <_ZN5spark12NetworkClass7resolveEPKcb+0xf8>)
 23f8e36:	e7d1      	b.n	23f8ddc <_ZN5spark12NetworkClass7resolveEPKcb+0x28>
                case AF_INET: {
                    if (!ipv4) {
 23f8e38:	f1b8 0f00 	cmp.w	r8, #0
 23f8e3c:	d0f8      	beq.n	23f8e30 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f8e3e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23f8e40:	a80a      	add	r0, sp, #40	; 0x28
 23f8e42:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f8e44:	1d3c      	adds	r4, r7, #4
 23f8e46:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 23f8e48:	f7ff fdec 	bl	23f8a24 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f8e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f8e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f8e50:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f8e52:	4641      	mov	r1, r8
 23f8e54:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f8e56:	e7eb      	b.n	23f8e30 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f8e58:	f1b9 0f00 	cmp.w	r9, #0
 23f8e5c:	d0e8      	beq.n	23f8e30 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f8e5e:	2210      	movs	r2, #16
 23f8e60:	a805      	add	r0, sp, #20
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f8e62:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f8e64:	f003 fe1f 	bl	23fcaa6 <memset>
                    a.v = 6;
 23f8e68:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f8e6a:	ad05      	add	r5, sp, #20
                    a.v = 6;
 23f8e6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f8e70:	f104 0308 	add.w	r3, r4, #8
 23f8e74:	3418      	adds	r4, #24
 23f8e76:	462a      	mov	r2, r5
 23f8e78:	6818      	ldr	r0, [r3, #0]
 23f8e7a:	6859      	ldr	r1, [r3, #4]
 23f8e7c:	3308      	adds	r3, #8
 23f8e7e:	c203      	stmia	r2!, {r0, r1}
 23f8e80:	42a3      	cmp	r3, r4
 23f8e82:	4615      	mov	r5, r2
 23f8e84:	d1f7      	bne.n	23f8e76 <_ZN5spark12NetworkClass7resolveEPKcb+0xc2>
                    addr = IPAddress(a);
 23f8e86:	a905      	add	r1, sp, #20
 23f8e88:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 23f8e8a:	1d3c      	adds	r4, r7, #4
 23f8e8c:	ad0b      	add	r5, sp, #44	; 0x2c
 23f8e8e:	f7ff fda9 	bl	23f89e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f8e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f8e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f8e96:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f8e98:	4649      	mov	r1, r9
 23f8e9a:	7023      	strb	r3, [r4, #0]
                    break;
 23f8e9c:	e7c8      	b.n	23f8e30 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f8e9e:	9803      	ldr	r0, [sp, #12]
 23f8ea0:	f7fe f9cc 	bl	23f723c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f8ea4:	4638      	mov	r0, r7
 23f8ea6:	b019      	add	sp, #100	; 0x64
 23f8ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f8eac:	40000040 	.word	0x40000040

023f8eb0 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23f8eb0:	3803      	subs	r0, #3
 23f8eb2:	2803      	cmp	r0, #3
 23f8eb4:	bf9a      	itte	ls
 23f8eb6:	4b02      	ldrls	r3, [pc, #8]	; (23f8ec0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23f8eb8:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23f8ebc:	4801      	ldrhi	r0, [pc, #4]	; (23f8ec4 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23f8ebe:	4770      	bx	lr
 23f8ec0:	023ff9fc 	.word	0x023ff9fc
 23f8ec4:	1007af14 	.word	0x1007af14

023f8ec8 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23f8ec8:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23f8eca:	2200      	movs	r2, #0
 23f8ecc:	6840      	ldr	r0, [r0, #4]
 23f8ece:	f7fe fdb3 	bl	23f7a38 <network_prefer>
}
 23f8ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23f8ed6:	f7ff bfeb 	b.w	23f8eb0 <_ZN5spark12NetworkClass4fromEm>
	...

023f8edc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
            : iface_(iface) {
 23f8edc:	4b02      	ldr	r3, [pc, #8]	; (23f8ee8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f8ede:	4a03      	ldr	r2, [pc, #12]	; (23f8eec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f8ee0:	601a      	str	r2, [r3, #0]
 23f8ee2:	2200      	movs	r2, #0
 23f8ee4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f8ee6:	4770      	bx	lr
 23f8ee8:	1007af14 	.word	0x1007af14
 23f8eec:	023ffa14 	.word	0x023ffa14

023f8ef0 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    config.quantity(sizeof(buf));
    pmicWireInstance()->transaction(config);
#endif // (HAL_PLATFORM_I2C_NUM != 1)
}

bool PMIC::lock() {
 23f8ef0:	b508      	push	{r3, lr}
            return &Wire;
 23f8ef2:	f000 fffb 	bl	23f9eec <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->lock();
}
 23f8ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 23f8efa:	f7ff bcbf 	b.w	23f887c <_ZN7TwoWire4lockEv>

023f8efe <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 23f8efe:	b510      	push	{r4, lr}
 23f8f00:	4604      	mov	r4, r0
    lock_(_lock)
 23f8f02:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 23f8f04:	b109      	cbz	r1, 23f8f0a <_ZN4PMICC1Eb+0xc>
        lock();
 23f8f06:	f7ff fff3 	bl	23f8ef0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 23f8f0a:	4620      	mov	r0, r4
 23f8f0c:	bd10      	pop	{r4, pc}

023f8f0e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 23f8f0e:	b508      	push	{r3, lr}
            return &Wire;
 23f8f10:	f000 ffec 	bl	23f9eec <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->unlock();
}
 23f8f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 23f8f18:	f7ff bcb9 	b.w	23f888e <_ZN7TwoWire6unlockEv>

023f8f1c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f8f1c:	b510      	push	{r4, lr}
 23f8f1e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 23f8f20:	6800      	ldr	r0, [r0, #0]
 23f8f22:	f7ff fff4 	bl	23f8f0e <_ZN4PMIC6unlockEv>
 23f8f26:	4620      	mov	r0, r4
 23f8f28:	bd10      	pop	{r4, pc}

023f8f2a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 23f8f2a:	b510      	push	{r4, lr}
 23f8f2c:	b08e      	sub	sp, #56	; 0x38
 23f8f2e:	f88d 1007 	strb.w	r1, [sp, #7]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8f32:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 23f8f34:	f7ff ffdc 	bl	23f8ef0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    buffer_ = buf;
 23f8f38:	f10d 0307 	add.w	r3, sp, #7
 23f8f3c:	9308      	str	r3, [sp, #32]
    size_ = size;
 23f8f3e:	2301      	movs	r3, #1
    byte DATA = 0;
 23f8f40:	2400      	movs	r4, #0
        buffer_(nullptr) {
 23f8f42:	216b      	movs	r1, #107	; 0x6b
    timeout_ = ms;
 23f8f44:	220a      	movs	r2, #10
    size_ = size;
 23f8f46:	9305      	str	r3, [sp, #20]
        buffer_(nullptr) {
 23f8f48:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    size_ = size;
 23f8f4c:	930a      	str	r3, [sp, #40]	; 0x28
    buffer_ = buf;
 23f8f4e:	f10d 030b 	add.w	r3, sp, #11
 23f8f52:	930d      	str	r3, [sp, #52]	; 0x34
 23f8f54:	f88d 400b 	strb.w	r4, [sp, #11]
        buffer_(nullptr) {
 23f8f58:	f88d 1010 	strb.w	r1, [sp, #16]
    timeout_ = ms;
 23f8f5c:	9207      	str	r2, [sp, #28]
    stop_ = stop;
 23f8f5e:	f88d 4018 	strb.w	r4, [sp, #24]
        buffer_(nullptr) {
 23f8f62:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    timeout_ = ms;
 23f8f66:	920c      	str	r2, [sp, #48]	; 0x30
            return &Wire;
 23f8f68:	f000 ffc0 	bl	23f9eec <_Z19__fetch_global_Wirev>
    auto r = pmicWireInstance()->transaction(config, rxConfig);
 23f8f6c:	aa09      	add	r2, sp, #36	; 0x24
 23f8f6e:	a904      	add	r1, sp, #16
 23f8f70:	f7ff fc96 	bl	23f88a0 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    if (r != 1) {
 23f8f74:	2801      	cmp	r0, #1
        DATA = 0;
 23f8f76:	bf18      	it	ne
 23f8f78:	f88d 400b 	strbne.w	r4, [sp, #11]
    return DATA;
 23f8f7c:	f89d 400b 	ldrb.w	r4, [sp, #11]
    std::lock_guard<PMIC> l(*this);
 23f8f80:	a803      	add	r0, sp, #12
 23f8f82:	f7ff ffcb 	bl	23f8f1c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f8f86:	4620      	mov	r0, r4
 23f8f88:	b00e      	add	sp, #56	; 0x38
 23f8f8a:	bd10      	pop	{r4, pc}

023f8f8c <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 23f8f8c:	2109      	movs	r1, #9
 23f8f8e:	f7ff bfcc 	b.w	23f8f2a <_ZN4PMIC12readRegisterEh>
	...

023f8f94 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 23f8f94:	b530      	push	{r4, r5, lr}
 23f8f96:	b089      	sub	sp, #36	; 0x24
 23f8f98:	460d      	mov	r5, r1
 23f8f9a:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8f9c:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
 23f8f9e:	f7ff ffa7 	bl	23f8ef0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        buffer_(nullptr) {
 23f8fa2:	236b      	movs	r3, #107	; 0x6b
 23f8fa4:	f88d 300c 	strb.w	r3, [sp, #12]
 23f8fa8:	2301      	movs	r3, #1
 23f8faa:	f88d 3014 	strb.w	r3, [sp, #20]
    timeout_ = ms;
 23f8fae:	230a      	movs	r3, #10
 23f8fb0:	9306      	str	r3, [sp, #24]
    buffer_ = buf;
 23f8fb2:	ab01      	add	r3, sp, #4
 23f8fb4:	9307      	str	r3, [sp, #28]
    size_ = size;
 23f8fb6:	2302      	movs	r3, #2
    uint8_t buf[2] = {address, DATA};
 23f8fb8:	f88d 5004 	strb.w	r5, [sp, #4]
 23f8fbc:	9304      	str	r3, [sp, #16]
 23f8fbe:	f88d 4005 	strb.w	r4, [sp, #5]
            return &Wire;
 23f8fc2:	f000 ff93 	bl	23f9eec <_Z19__fetch_global_Wirev>
    pmicWireInstance()->transaction(config);
 23f8fc6:	4a04      	ldr	r2, [pc, #16]	; (23f8fd8 <_ZN4PMIC13writeRegisterEhh+0x44>)
 23f8fc8:	a903      	add	r1, sp, #12
 23f8fca:	f7ff fc69 	bl	23f88a0 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    std::lock_guard<PMIC> l(*this);
 23f8fce:	a802      	add	r0, sp, #8
 23f8fd0:	f7ff ffa4 	bl	23f8f1c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f8fd4:	b009      	add	sp, #36	; 0x24
 23f8fd6:	bd30      	pop	{r4, r5, pc}
 23f8fd8:	1007aefc 	.word	0x1007aefc

023f8fdc <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
 23f8fdc:	b513      	push	{r0, r1, r4, lr}
 23f8fde:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8fe0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f8fe2:	f7ff ff85 	bl	23f8ef0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f8fe6:	2107      	movs	r1, #7
 23f8fe8:	4620      	mov	r0, r4
 23f8fea:	f7ff ff9e 	bl	23f8f2a <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
 23f8fee:	2107      	movs	r1, #7
 23f8ff0:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 23f8ff4:	4620      	mov	r0, r4
 23f8ff6:	f7ff ffcd 	bl	23f8f94 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f8ffa:	a801      	add	r0, sp, #4
 23f8ffc:	f7ff ff8e 	bl	23f8f1c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f9000:	2001      	movs	r0, #1
 23f9002:	b002      	add	sp, #8
 23f9004:	bd10      	pop	{r4, pc}

023f9006 <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
 23f9006:	b513      	push	{r0, r1, r4, lr}
 23f9008:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f900a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f900c:	f7ff ff70 	bl	23f8ef0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f9010:	2107      	movs	r1, #7
 23f9012:	4620      	mov	r0, r4
 23f9014:	f7ff ff89 	bl	23f8f2a <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
 23f9018:	f040 0020 	orr.w	r0, r0, #32
 23f901c:	b2c2      	uxtb	r2, r0
 23f901e:	2107      	movs	r1, #7
 23f9020:	4620      	mov	r0, r4
 23f9022:	f7ff ffb7 	bl	23f8f94 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f9026:	a801      	add	r0, sp, #4
 23f9028:	f7ff ff78 	bl	23f8f1c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f902c:	2001      	movs	r0, #1
 23f902e:	b002      	add	sp, #8
 23f9030:	bd10      	pop	{r4, pc}

023f9032 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f9032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9034:	4606      	mov	r6, r0
 23f9036:	460d      	mov	r5, r1
  size_t n = 0;
 23f9038:	2400      	movs	r4, #0
 23f903a:	188f      	adds	r7, r1, r2
  while (size--) {
 23f903c:	42bd      	cmp	r5, r7
 23f903e:	d00c      	beq.n	23f905a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f9040:	6833      	ldr	r3, [r6, #0]
 23f9042:	4630      	mov	r0, r6
 23f9044:	689b      	ldr	r3, [r3, #8]
 23f9046:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f904a:	4798      	blx	r3
     if (chunk>=0)
 23f904c:	1e03      	subs	r3, r0, #0
 23f904e:	db01      	blt.n	23f9054 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f9050:	441c      	add	r4, r3
  while (size--) {
 23f9052:	e7f3      	b.n	23f903c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f9054:	2c00      	cmp	r4, #0
 23f9056:	bf08      	it	eq
 23f9058:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f905a:	4620      	mov	r0, r4
 23f905c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f905e <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f905e:	b513      	push	{r0, r1, r4, lr}
 23f9060:	4604      	mov	r4, r0
    }
 23f9062:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f9064:	b159      	cbz	r1, 23f907e <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f9066:	9101      	str	r1, [sp, #4]
 23f9068:	f7ec f8aa 	bl	23e51c0 <strlen>
 23f906c:	4602      	mov	r2, r0
 23f906e:	4620      	mov	r0, r4
 23f9070:	6823      	ldr	r3, [r4, #0]
 23f9072:	9901      	ldr	r1, [sp, #4]
 23f9074:	68db      	ldr	r3, [r3, #12]
    }
 23f9076:	b002      	add	sp, #8
 23f9078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f907c:	4718      	bx	r3
    }
 23f907e:	b002      	add	sp, #8
 23f9080:	bd10      	pop	{r4, pc}

023f9082 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23f9082:	b508      	push	{r3, lr}
  return write(str);
 23f9084:	f7ff ffeb 	bl	23f905e <_ZN5Print5writeEPKc>
}
 23f9088:	bd08      	pop	{r3, pc}

023f908a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23f908a:	6803      	ldr	r3, [r0, #0]
 23f908c:	689b      	ldr	r3, [r3, #8]
 23f908e:	4718      	bx	r3

023f9090 <_ZN5Print5printEPK19__FlashStringHelper>:
 23f9090:	b508      	push	{r3, lr}
 23f9092:	f7ff ffe4 	bl	23f905e <_ZN5Print5writeEPKc>
 23f9096:	bd08      	pop	{r3, pc}

023f9098 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23f9098:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23f909a:	210d      	movs	r1, #13
{
 23f909c:	4605      	mov	r5, r0
  size_t n = print('\r');
 23f909e:	f7ff fff4 	bl	23f908a <_ZN5Print5printEc>
  n += print('\n');
 23f90a2:	210a      	movs	r1, #10
  size_t n = print('\r');
 23f90a4:	4604      	mov	r4, r0
  n += print('\n');
 23f90a6:	4628      	mov	r0, r5
 23f90a8:	f7ff ffef 	bl	23f908a <_ZN5Print5printEc>
  return n;
}
 23f90ac:	4420      	add	r0, r4
 23f90ae:	bd38      	pop	{r3, r4, r5, pc}

023f90b0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23f90b0:	b538      	push	{r3, r4, r5, lr}
 23f90b2:	4605      	mov	r5, r0
  return write(str);
 23f90b4:	f7ff ffd3 	bl	23f905e <_ZN5Print5writeEPKc>
 23f90b8:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23f90ba:	4628      	mov	r0, r5
 23f90bc:	f7ff ffec 	bl	23f9098 <_ZN5Print7printlnEv>
  return n;
}
 23f90c0:	4420      	add	r0, r4
 23f90c2:	bd38      	pop	{r3, r4, r5, pc}

023f90c4 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23f90c4:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23f90c6:	2a01      	cmp	r2, #1
 23f90c8:	bf98      	it	ls
 23f90ca:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f90cc:	b530      	push	{r4, r5, lr}
 23f90ce:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f90d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f90d4:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23f90d6:	460d      	mov	r5, r1
 23f90d8:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f90dc:	fb01 5312 	mls	r3, r1, r2, r5
 23f90e0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f90e4:	2b09      	cmp	r3, #9
 23f90e6:	bf94      	ite	ls
 23f90e8:	3330      	addls	r3, #48	; 0x30
 23f90ea:	3337      	addhi	r3, #55	; 0x37
 23f90ec:	b2db      	uxtb	r3, r3
  } while(n);
 23f90ee:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f90f0:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f90f4:	d9ef      	bls.n	23f90d6 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23f90f6:	4621      	mov	r1, r4
 23f90f8:	f7ff ffb1 	bl	23f905e <_ZN5Print5writeEPKc>
}
 23f90fc:	b00b      	add	sp, #44	; 0x2c
 23f90fe:	bd30      	pop	{r4, r5, pc}

023f9100 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23f9100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9104:	b086      	sub	sp, #24
 23f9106:	af00      	add	r7, sp, #0
 23f9108:	4605      	mov	r5, r0
 23f910a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23f910c:	1d38      	adds	r0, r7, #4
 23f910e:	2114      	movs	r1, #20
{
 23f9110:	4614      	mov	r4, r2
    va_copy(args2, args);
 23f9112:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23f9114:	f7fe fd0e 	bl	23f7b34 <vsnprintf>

    if (n<bufsize)
 23f9118:	2813      	cmp	r0, #19
 23f911a:	d80e      	bhi.n	23f913a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23f911c:	4628      	mov	r0, r5
 23f911e:	1d39      	adds	r1, r7, #4
 23f9120:	f7ff ff9d 	bl	23f905e <_ZN5Print5writeEPKc>
 23f9124:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23f9126:	b11e      	cbz	r6, 23f9130 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23f9128:	4628      	mov	r0, r5
 23f912a:	f7ff ffb5 	bl	23f9098 <_ZN5Print7printlnEv>
 23f912e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23f9130:	4620      	mov	r0, r4
 23f9132:	3718      	adds	r7, #24
 23f9134:	46bd      	mov	sp, r7
 23f9136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23f913a:	f100 0308 	add.w	r3, r0, #8
 23f913e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23f9142:	46e8      	mov	r8, sp
        char bigger[n+1];
 23f9144:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23f9148:	4622      	mov	r2, r4
 23f914a:	1c41      	adds	r1, r0, #1
 23f914c:	683b      	ldr	r3, [r7, #0]
 23f914e:	4668      	mov	r0, sp
 23f9150:	f7fe fcf0 	bl	23f7b34 <vsnprintf>
  return write(str);
 23f9154:	4669      	mov	r1, sp
 23f9156:	4628      	mov	r0, r5
 23f9158:	f7ff ff81 	bl	23f905e <_ZN5Print5writeEPKc>
 23f915c:	4604      	mov	r4, r0
 23f915e:	46c5      	mov	sp, r8
 23f9160:	e7e1      	b.n	23f9126 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023f9162 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 23f9162:	b510      	push	{r4, lr}
  if (0 == max) {
 23f9164:	4604      	mov	r4, r0
 23f9166:	b128      	cbz	r0, 23f9174 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 23f9168:	f003 fcd4 	bl	23fcb14 <rand>
 23f916c:	fb90 f3f4 	sdiv	r3, r0, r4
 23f9170:	fb03 0414 	mls	r4, r3, r4, r0
}
 23f9174:	4620      	mov	r0, r4
 23f9176:	bd10      	pop	{r4, pc}

023f9178 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 23f9178:	4288      	cmp	r0, r1
{
 23f917a:	b510      	push	{r4, lr}
 23f917c:	4604      	mov	r4, r0
  if (min >= max) {
 23f917e:	da03      	bge.n	23f9188 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 23f9180:	1a08      	subs	r0, r1, r0
 23f9182:	f7ff ffee 	bl	23f9162 <_Z6randomi>
 23f9186:	4404      	add	r4, r0
}
 23f9188:	4620      	mov	r0, r4
 23f918a:	bd10      	pop	{r4, pc}

023f918c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f918c:	2200      	movs	r2, #0
 23f918e:	4b01      	ldr	r3, [pc, #4]	; (23f9194 <_GLOBAL__sub_I_RGB+0x8>)
 23f9190:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f9192:	4770      	bx	lr
 23f9194:	1007af1c 	.word	0x1007af1c

023f9198 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23f9198:	2100      	movs	r1, #0
 23f919a:	f7fe b8f7 	b.w	23f738c <hal_spi_release>

023f919e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23f919e:	2100      	movs	r1, #0
 23f91a0:	f7fe b8e6 	b.w	23f7370 <hal_spi_acquire>

023f91a4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f91a4:	b510      	push	{r4, lr}
 23f91a6:	4604      	mov	r4, r0
 23f91a8:	4608      	mov	r0, r1
{
    _spi = spi;
 23f91aa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23f91ac:	f7fe f88c 	bl	23f72c8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f91b0:	2300      	movs	r3, #0
}
 23f91b2:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f91b4:	6063      	str	r3, [r4, #4]
}
 23f91b6:	bd10      	pop	{r4, pc}

023f91b8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23f91b8:	b513      	push	{r0, r1, r4, lr}
 23f91ba:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23f91bc:	7800      	ldrb	r0, [r0, #0]
 23f91be:	f7ff ffee 	bl	23f919e <_ZN8SPIClass4lockEv.isra.0>
 23f91c2:	b958      	cbnz	r0, 23f91dc <_ZN8SPIClass5beginEv+0x24>
 23f91c4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23f91c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23f91ca:	9001      	str	r0, [sp, #4]
 23f91cc:	f7fe f852 	bl	23f7274 <hal_spi_begin>
        unlock();
 23f91d0:	9801      	ldr	r0, [sp, #4]
    }
}
 23f91d2:	b002      	add	sp, #8
 23f91d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f91d8:	f7ff bfde 	b.w	23f9198 <_ZN8SPIClass6unlockEv.isra.0>
 23f91dc:	b002      	add	sp, #8
 23f91de:	bd10      	pop	{r4, pc}

023f91e0 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 23f91e0:	b513      	push	{r0, r1, r4, lr}
 23f91e2:	4604      	mov	r4, r0
    if (!lock())
 23f91e4:	7800      	ldrb	r0, [r0, #0]
{
 23f91e6:	9101      	str	r1, [sp, #4]
    if (!lock())
 23f91e8:	f7ff ffd9 	bl	23f919e <_ZN8SPIClass4lockEv.isra.0>
 23f91ec:	9901      	ldr	r1, [sp, #4]
 23f91ee:	b948      	cbnz	r0, 23f9204 <_ZN8SPIClass5beginEt+0x24>
 23f91f0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
 23f91f2:	9001      	str	r0, [sp, #4]
 23f91f4:	f7fe f83e 	bl	23f7274 <hal_spi_begin>
        unlock();
 23f91f8:	9801      	ldr	r0, [sp, #4]
    }
}
 23f91fa:	b002      	add	sp, #8
 23f91fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9200:	f7ff bfca 	b.w	23f9198 <_ZN8SPIClass6unlockEv.isra.0>
 23f9204:	b002      	add	sp, #8
 23f9206:	bd10      	pop	{r4, pc}

023f9208 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 23f9208:	b513      	push	{r0, r1, r4, lr}
 23f920a:	4604      	mov	r4, r0
    if (!lock())
 23f920c:	7800      	ldrb	r0, [r0, #0]
 23f920e:	f7ff ffc6 	bl	23f919e <_ZN8SPIClass4lockEv.isra.0>
 23f9212:	b948      	cbnz	r0, 23f9228 <_ZN8SPIClass3endEv+0x20>
 23f9214:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
 23f9216:	9001      	str	r0, [sp, #4]
 23f9218:	f7fe f83a 	bl	23f7290 <hal_spi_end>
        unlock();
 23f921c:	9801      	ldr	r0, [sp, #4]
    }
}
 23f921e:	b002      	add	sp, #8
 23f9220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9224:	f7ff bfb8 	b.w	23f9198 <_ZN8SPIClass6unlockEv.isra.0>
 23f9228:	b002      	add	sp, #8
 23f922a:	bd10      	pop	{r4, pc}

023f922c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23f922c:	7800      	ldrb	r0, [r0, #0]
 23f922e:	f7ff bfb3 	b.w	23f9198 <_ZN8SPIClass6unlockEv.isra.0>
	...

023f9234 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23f9234:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23f9236:	2400      	movs	r4, #0
 23f9238:	0840      	lsrs	r0, r0, #1
 23f923a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f923c:	6818      	ldr	r0, [r3, #0]
 23f923e:	b2e5      	uxtb	r5, r4
 23f9240:	4288      	cmp	r0, r1
 23f9242:	d906      	bls.n	23f9252 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23f9244:	3401      	adds	r4, #1
 23f9246:	2c08      	cmp	r4, #8
 23f9248:	d002      	beq.n	23f9250 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23f924a:	0840      	lsrs	r0, r0, #1
 23f924c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f924e:	e7f5      	b.n	23f923c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23f9250:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23f9252:	4b02      	ldr	r3, [pc, #8]	; (23f925c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23f9254:	5d5b      	ldrb	r3, [r3, r5]
 23f9256:	7013      	strb	r3, [r2, #0]
}
 23f9258:	bd30      	pop	{r4, r5, pc}
 23f925a:	bf00      	nop
 23f925c:	023ffa50 	.word	0x023ffa50

023f9260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23f9260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f9264:	4606      	mov	r6, r0
 23f9266:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23f9268:	7800      	ldrb	r0, [r0, #0]
{
 23f926a:	460c      	mov	r4, r1
    CHECK(lock());
 23f926c:	f7ff ff97 	bl	23f919e <_ZN8SPIClass4lockEv.isra.0>
 23f9270:	2800      	cmp	r0, #0
 23f9272:	db1b      	blt.n	23f92ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23f9274:	2214      	movs	r2, #20
 23f9276:	2100      	movs	r1, #0
 23f9278:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23f927a:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23f927c:	f003 fc13 	bl	23fcaa6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23f9280:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23f9282:	2200      	movs	r2, #0
 23f9284:	4628      	mov	r0, r5
 23f9286:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23f9288:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23f928c:	f7fe f838 	bl	23f7300 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23f9290:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23f9294:	b113      	cbz	r3, 23f929c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23f9296:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23f929a:	b155      	cbz	r5, 23f92b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23f929c:	2700      	movs	r7, #0
 23f929e:	2501      	movs	r5, #1
 23f92a0:	46b9      	mov	r9, r7
 23f92a2:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23f92a4:	7923      	ldrb	r3, [r4, #4]
 23f92a6:	b15d      	cbz	r5, 23f92c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23f92a8:	b1c3      	cbz	r3, 23f92dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23f92aa:	2000      	movs	r0, #0
}
 23f92ac:	b00f      	add	sp, #60	; 0x3c
 23f92ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23f92b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23f92b6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23f92ba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23f92be:	e7f1      	b.n	23f92a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23f92c0:	2b00      	cmp	r3, #0
 23f92c2:	d135      	bne.n	23f9330 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23f92c4:	68a3      	ldr	r3, [r4, #8]
 23f92c6:	4543      	cmp	r3, r8
 23f92c8:	d108      	bne.n	23f92dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23f92ca:	f88d 9020 	strb.w	r9, [sp, #32]
 23f92ce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f92d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f92d6:	89a3      	ldrh	r3, [r4, #12]
 23f92d8:	429a      	cmp	r2, r3
 23f92da:	d0e6      	beq.n	23f92aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23f92dc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f92de:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23f92e0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f92e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f92e6:	ab04      	add	r3, sp, #16
 23f92e8:	f10d 020f 	add.w	r2, sp, #15
 23f92ec:	f7ff ffa2 	bl	23f9234 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23f92f0:	7921      	ldrb	r1, [r4, #4]
 23f92f2:	b985      	cbnz	r5, 23f9316 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23f92f4:	b989      	cbnz	r1, 23f931a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f92f6:	68a3      	ldr	r3, [r4, #8]
 23f92f8:	4543      	cmp	r3, r8
 23f92fa:	d30e      	bcc.n	23f931a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23f92fc:	f88d 9020 	strb.w	r9, [sp, #32]
 23f9300:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f9304:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f9308:	89a3      	ldrh	r3, [r4, #12]
 23f930a:	429a      	cmp	r2, r3
 23f930c:	d105      	bne.n	23f931a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23f930e:	9b04      	ldr	r3, [sp, #16]
 23f9310:	4543      	cmp	r3, r8
 23f9312:	d102      	bne.n	23f931a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f9314:	e7c9      	b.n	23f92aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23f9316:	2900      	cmp	r1, #0
 23f9318:	d1f9      	bne.n	23f930e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23f931a:	2300      	movs	r3, #0
 23f931c:	9301      	str	r3, [sp, #4]
 23f931e:	7b63      	ldrb	r3, [r4, #13]
 23f9320:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23f9324:	9300      	str	r3, [sp, #0]
 23f9326:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23f9328:	7830      	ldrb	r0, [r6, #0]
 23f932a:	f7fe f813 	bl	23f7354 <hal_spi_set_settings>
 23f932e:	e7bc      	b.n	23f92aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23f9330:	462b      	mov	r3, r5
 23f9332:	462a      	mov	r2, r5
 23f9334:	2101      	movs	r1, #1
 23f9336:	e9cd 5500 	strd	r5, r5, [sp]
 23f933a:	e7f5      	b.n	23f9328 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023f933c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23f933c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23f933e:	7800      	ldrb	r0, [r0, #0]
 23f9340:	f7fd ffb4 	bl	23f72ac <hal_spi_transfer>
}
 23f9344:	b2c0      	uxtb	r0, r0
 23f9346:	bd08      	pop	{r3, pc}

023f9348 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23f9348:	b530      	push	{r4, r5, lr}
 23f934a:	b087      	sub	sp, #28
 23f934c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23f934e:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23f9350:	9500      	str	r5, [sp, #0]
 23f9352:	7800      	ldrb	r0, [r0, #0]
 23f9354:	f7fd ffe2 	bl	23f731c <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23f9358:	b93d      	cbnz	r5, 23f936a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23f935a:	7820      	ldrb	r0, [r4, #0]
 23f935c:	a902      	add	r1, sp, #8
 23f935e:	f7fd ffeb 	bl	23f7338 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23f9362:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f9366:	07db      	lsls	r3, r3, #31
 23f9368:	d4f7      	bmi.n	23f935a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23f936a:	b007      	add	sp, #28
 23f936c:	bd30      	pop	{r4, r5, pc}

023f936e <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
 23f936e:	4770      	bx	lr

023f9370 <_ZN8SPIClass15detachInterruptEv>:
 23f9370:	4770      	bx	lr

023f9372 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23f9372:	b510      	push	{r4, lr}
 23f9374:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f9376:	f7fd fd77 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23f937a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23f937c:	6823      	ldr	r3, [r4, #0]
 23f937e:	4620      	mov	r0, r4
 23f9380:	695b      	ldr	r3, [r3, #20]
 23f9382:	4798      	blx	r3
    if (c >= 0) return c;
 23f9384:	2800      	cmp	r0, #0
 23f9386:	da08      	bge.n	23f939a <_ZN6Stream9timedReadEv+0x28>
 23f9388:	f7fd fd6e 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23f938c:	68e3      	ldr	r3, [r4, #12]
 23f938e:	1ac0      	subs	r0, r0, r3
 23f9390:	68a3      	ldr	r3, [r4, #8]
 23f9392:	4298      	cmp	r0, r3
 23f9394:	d3f2      	bcc.n	23f937c <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23f9396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f939a:	bd10      	pop	{r4, pc}

023f939c <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23f939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f93a0:	4607      	mov	r7, r0
 23f93a2:	460c      	mov	r4, r1
 23f93a4:	460d      	mov	r5, r1
 23f93a6:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23f93a8:	42b5      	cmp	r5, r6
 23f93aa:	eba5 0804 	sub.w	r8, r5, r4
 23f93ae:	d007      	beq.n	23f93c0 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23f93b0:	4638      	mov	r0, r7
 23f93b2:	f7ff ffde 	bl	23f9372 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23f93b6:	1e03      	subs	r3, r0, #0
 23f93b8:	db02      	blt.n	23f93c0 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23f93ba:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23f93be:	e7f3      	b.n	23f93a8 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23f93c0:	4640      	mov	r0, r8
 23f93c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f93c6 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 23f93c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f93ca:	4607      	mov	r7, r0
 23f93cc:	4688      	mov	r8, r1
 23f93ce:	4616      	mov	r6, r2
  if (length < 1) return 0;
 23f93d0:	461d      	mov	r5, r3
 23f93d2:	b173      	cbz	r3, 23f93f2 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
 23f93d4:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
 23f93d6:	4638      	mov	r0, r7
 23f93d8:	f7ff ffcb 	bl	23f9372 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
 23f93dc:	1e03      	subs	r3, r0, #0
 23f93de:	db05      	blt.n	23f93ec <_ZN6Stream14readBytesUntilEcPcj+0x26>
 23f93e0:	4543      	cmp	r3, r8
 23f93e2:	d003      	beq.n	23f93ec <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
 23f93e4:	5533      	strb	r3, [r6, r4]
    index++;
 23f93e6:	3401      	adds	r4, #1
  while (index < length) {
 23f93e8:	42a5      	cmp	r5, r4
 23f93ea:	d1f4      	bne.n	23f93d6 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
 23f93ec:	4620      	mov	r0, r4
 23f93ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
 23f93f2:	461c      	mov	r4, r3
 23f93f4:	e7fa      	b.n	23f93ec <_ZN6Stream14readBytesUntilEcPcj+0x26>

023f93f6 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23f93f6:	b510      	push	{r4, lr}
 23f93f8:	4604      	mov	r4, r0
{
    free(buffer);
 23f93fa:	6800      	ldr	r0, [r0, #0]
 23f93fc:	f7fe fb46 	bl	23f7a8c <free>
}
 23f9400:	4620      	mov	r0, r4
 23f9402:	bd10      	pop	{r4, pc}

023f9404 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23f9404:	b510      	push	{r4, lr}
 23f9406:	4604      	mov	r4, r0
    if (buffer) {
 23f9408:	6800      	ldr	r0, [r0, #0]
 23f940a:	b108      	cbz	r0, 23f9410 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23f940c:	f7fe fb3e 	bl	23f7a8c <free>
    }
    buffer = nullptr;
 23f9410:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23f9412:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23f9416:	6023      	str	r3, [r4, #0]
}
 23f9418:	bd10      	pop	{r4, pc}

023f941a <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f941a:	b538      	push	{r3, r4, r5, lr}
 23f941c:	4604      	mov	r4, r0
 23f941e:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f9420:	6800      	ldr	r0, [r0, #0]
 23f9422:	3101      	adds	r1, #1
 23f9424:	f7fe fb40 	bl	23f7aa8 <realloc>
    if (newbuffer) {
 23f9428:	b110      	cbz	r0, 23f9430 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23f942a:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23f942e:	2001      	movs	r0, #1
    }
    return 0;
}
 23f9430:	bd38      	pop	{r3, r4, r5, pc}

023f9432 <_ZN6String7reserveEj>:
{
 23f9432:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23f9434:	6803      	ldr	r3, [r0, #0]
{
 23f9436:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23f9438:	b123      	cbz	r3, 23f9444 <_ZN6String7reserveEj+0x12>
 23f943a:	6843      	ldr	r3, [r0, #4]
 23f943c:	428b      	cmp	r3, r1
 23f943e:	d301      	bcc.n	23f9444 <_ZN6String7reserveEj+0x12>
 23f9440:	2001      	movs	r0, #1
}
 23f9442:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23f9444:	4620      	mov	r0, r4
 23f9446:	f7ff ffe8 	bl	23f941a <_ZN6String12changeBufferEj>
 23f944a:	2800      	cmp	r0, #0
 23f944c:	d0f9      	beq.n	23f9442 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23f944e:	68a3      	ldr	r3, [r4, #8]
 23f9450:	2b00      	cmp	r3, #0
 23f9452:	d1f5      	bne.n	23f9440 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23f9454:	6822      	ldr	r2, [r4, #0]
 23f9456:	7013      	strb	r3, [r2, #0]
 23f9458:	e7f2      	b.n	23f9440 <_ZN6String7reserveEj+0xe>

023f945a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f945a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f945c:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23f945e:	4611      	mov	r1, r2
 23f9460:	9201      	str	r2, [sp, #4]
{
 23f9462:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23f9464:	f7ff ffe5 	bl	23f9432 <_ZN6String7reserveEj>
 23f9468:	9a01      	ldr	r2, [sp, #4]
 23f946a:	b928      	cbnz	r0, 23f9478 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23f946c:	4620      	mov	r0, r4
 23f946e:	f7ff ffc9 	bl	23f9404 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23f9472:	4620      	mov	r0, r4
 23f9474:	b003      	add	sp, #12
 23f9476:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23f9478:	4629      	mov	r1, r5
    len = length;
 23f947a:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23f947c:	6820      	ldr	r0, [r4, #0]
 23f947e:	f003 fb05 	bl	23fca8c <memcpy>
    buffer[len] = 0;
 23f9482:	2100      	movs	r1, #0
 23f9484:	6822      	ldr	r2, [r4, #0]
 23f9486:	68a3      	ldr	r3, [r4, #8]
 23f9488:	54d1      	strb	r1, [r2, r3]
    return *this;
 23f948a:	e7f2      	b.n	23f9472 <_ZN6String4copyEPKcj+0x18>

023f948c <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23f948c:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23f948e:	b513      	push	{r0, r1, r4, lr}
 23f9490:	4604      	mov	r4, r0
    capacity_ = 0;
 23f9492:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f9496:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f9498:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23f949a:	b141      	cbz	r1, 23f94ae <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23f949c:	4608      	mov	r0, r1
 23f949e:	9101      	str	r1, [sp, #4]
 23f94a0:	f7eb fe8e 	bl	23e51c0 <strlen>
 23f94a4:	9901      	ldr	r1, [sp, #4]
 23f94a6:	4602      	mov	r2, r0
 23f94a8:	4620      	mov	r0, r4
 23f94aa:	f7ff ffd6 	bl	23f945a <_ZN6String4copyEPKcj>
}
 23f94ae:	4620      	mov	r0, r4
 23f94b0:	b002      	add	sp, #8
 23f94b2:	bd10      	pop	{r4, pc}

023f94b4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23f94b4:	4288      	cmp	r0, r1
{
 23f94b6:	b510      	push	{r4, lr}
 23f94b8:	4604      	mov	r4, r0
    if (this == &rhs) {
 23f94ba:	d005      	beq.n	23f94c8 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23f94bc:	680b      	ldr	r3, [r1, #0]
 23f94be:	b12b      	cbz	r3, 23f94cc <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23f94c0:	688a      	ldr	r2, [r1, #8]
 23f94c2:	4619      	mov	r1, r3
 23f94c4:	f7ff ffc9 	bl	23f945a <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23f94c8:	4620      	mov	r0, r4
 23f94ca:	bd10      	pop	{r4, pc}
        invalidate();
 23f94cc:	f7ff ff9a 	bl	23f9404 <_ZN6String10invalidateEv>
 23f94d0:	e7fa      	b.n	23f94c8 <_ZN6StringaSERKS_+0x14>

023f94d2 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23f94d2:	2300      	movs	r3, #0
String::String(const String &value)
 23f94d4:	b510      	push	{r4, lr}
 23f94d6:	4604      	mov	r4, r0
    capacity_ = 0;
 23f94d8:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f94dc:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f94de:	7303      	strb	r3, [r0, #12]
    *this = value;
 23f94e0:	f7ff ffe8 	bl	23f94b4 <_ZN6StringaSERKS_>
}
 23f94e4:	4620      	mov	r0, r4
 23f94e6:	bd10      	pop	{r4, pc}

023f94e8 <_ZN6String6formatEPKcz>:
    OutputStringStream stream(*this);
    printable.printTo(stream);
}

String String::format(const char* fmt, ...)
{
 23f94e8:	b40e      	push	{r1, r2, r3}
 23f94ea:	b570      	push	{r4, r5, r6, lr}
 23f94ec:	b087      	sub	sp, #28
 23f94ee:	ad0b      	add	r5, sp, #44	; 0x2c
 23f94f0:	f855 2b04 	ldr.w	r2, [r5], #4
 23f94f4:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23f94f6:	462b      	mov	r3, r5
 23f94f8:	2105      	movs	r1, #5
 23f94fa:	a804      	add	r0, sp, #16
 23f94fc:	9201      	str	r2, [sp, #4]
    va_start(marker, fmt);
 23f94fe:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23f9500:	f7fe fb18 	bl	23f7b34 <vsnprintf>
 23f9504:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 23f9506:	490b      	ldr	r1, [pc, #44]	; (23f9534 <_ZN6String6formatEPKcz+0x4c>)
 23f9508:	4620      	mov	r0, r4
 23f950a:	f7ff ffbf 	bl	23f948c <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 23f950e:	4631      	mov	r1, r6
 23f9510:	4620      	mov	r0, r4
 23f9512:	f7ff ff8e 	bl	23f9432 <_ZN6String7reserveEj>
    if (result.buffer) {
 23f9516:	6820      	ldr	r0, [r4, #0]
 23f9518:	b130      	cbz	r0, 23f9528 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23f951a:	462b      	mov	r3, r5
 23f951c:	9a01      	ldr	r2, [sp, #4]
 23f951e:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 23f9520:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23f9522:	f7fe fb07 	bl	23f7b34 <vsnprintf>
        va_end(marker);
        result.len = n;
 23f9526:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 23f9528:	4620      	mov	r0, r4
 23f952a:	b007      	add	sp, #28
 23f952c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f9530:	b003      	add	sp, #12
 23f9532:	4770      	bx	lr
 23f9534:	023fe708 	.word	0x023fe708

023f9538 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23f9538:	b507      	push	{r0, r1, r2, lr}
 23f953a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f953c:	2100      	movs	r1, #0
{
 23f953e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f9540:	9100      	str	r1, [sp, #0]
 23f9542:	2001      	movs	r0, #1
 23f9544:	218c      	movs	r1, #140	; 0x8c
 23f9546:	f7fe f919 	bl	23f777c <system_reset>
}
 23f954a:	b003      	add	sp, #12
 23f954c:	f85d fb04 	ldr.w	pc, [sp], #4

023f9550 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23f9550:	4601      	mov	r1, r0
    reset(0, flags);
 23f9552:	2000      	movs	r0, #0
 23f9554:	f7ff bff0 	b.w	23f9538 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023f9558 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23f9558:	2000      	movs	r0, #0
 23f955a:	f7ff bff9 	b.w	23f9550 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023f955e <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23f955e:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23f9560:	2420      	movs	r4, #32
{
 23f9562:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23f9564:	4622      	mov	r2, r4
 23f9566:	2100      	movs	r1, #0
 23f9568:	4668      	mov	r0, sp
 23f956a:	f003 fa9c 	bl	23fcaa6 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23f956e:	2100      	movs	r1, #0
 23f9570:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23f9572:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23f9576:	f7fd fc31 	bl	23f6ddc <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23f957a:	9801      	ldr	r0, [sp, #4]
 23f957c:	b008      	add	sp, #32
 23f957e:	bd10      	pop	{r4, pc}

023f9580 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f9580:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f9582:	2000      	movs	r0, #0
 23f9584:	4b04      	ldr	r3, [pc, #16]	; (23f9598 <_GLOBAL__sub_I_System+0x18>)
 23f9586:	601a      	str	r2, [r3, #0]
 23f9588:	4b04      	ldr	r3, [pc, #16]	; (23f959c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f958a:	4a05      	ldr	r2, [pc, #20]	; (23f95a0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f958c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f9590:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f9592:	f7fe b84b 	b.w	23f762c <set_system_mode>
 23f9596:	bf00      	nop
 23f9598:	1007af38 	.word	0x1007af38
 23f959c:	1007af2c 	.word	0x1007af2c
 23f95a0:	ffff0000 	.word	0xffff0000

023f95a4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23f95a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23f95a8:	4a15      	ldr	r2, [pc, #84]	; (23f9600 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23f95aa:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23f960c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23f95ae:	e9d2 6300 	ldrd	r6, r3, [r2]
 23f95b2:	1980      	adds	r0, r0, r6
 23f95b4:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23f95b8:	4b12      	ldr	r3, [pc, #72]	; (23f9604 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23f95ba:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23f95bc:	e9d3 6700 	ldrd	r6, r7, [r3]
 23f95c0:	1986      	adds	r6, r0, r6
 23f95c2:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23f95c6:	e9d8 2300 	ldrd	r2, r3, [r8]
 23f95ca:	42bb      	cmp	r3, r7
 23f95cc:	bf08      	it	eq
 23f95ce:	42b2      	cmpeq	r2, r6
 23f95d0:	d013      	beq.n	23f95fa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23f95d2:	a903      	add	r1, sp, #12
 23f95d4:	4668      	mov	r0, sp
 23f95d6:	e9cd 6700 	strd	r6, r7, [sp]
 23f95da:	f7fe fb0d 	bl	23f7bf8 <localtime_r>
	calendar_time.tm_year += 1900;
 23f95de:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f95e0:	4d09      	ldr	r5, [pc, #36]	; (23f9608 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23f95e2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f95e6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23f95e8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f95ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f95ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f95ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f95f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23f95f2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f95f6:	6823      	ldr	r3, [r4, #0]
 23f95f8:	602b      	str	r3, [r5, #0]
    }
}
 23f95fa:	b00c      	add	sp, #48	; 0x30
 23f95fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9600:	1007af70 	.word	0x1007af70
 23f9604:	1007af68 	.word	0x1007af68
 23f9608:	1007af44 	.word	0x1007af44
 23f960c:	1007af78 	.word	0x1007af78

023f9610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 23f9610:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9612:	2000      	movs	r0, #0
 23f9614:	f7fe f930 	bl	23f7878 <spark_sync_time_pending>
 23f9618:	b128      	cbz	r0, 23f9626 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f961a:	f7fe f8f5 	bl	23f7808 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f961e:	f080 0001 	eor.w	r0, r0, #1
 23f9622:	b2c0      	uxtb	r0, r0
    }
 23f9624:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9626:	2001      	movs	r0, #1
 23f9628:	e7fc      	b.n	23f9624 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023f962c <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 23f962c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f962e:	f7ff ffb9 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
 23f9632:	4b01      	ldr	r3, [pc, #4]	; (23f9638 <_ZN9TimeClass4hourEx+0xc>)
 23f9634:	6898      	ldr	r0, [r3, #8]
 23f9636:	bd08      	pop	{r3, pc}
 23f9638:	1007af44 	.word	0x1007af44

023f963c <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
 23f963c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f963e:	f7ff ffb1 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
 23f9642:	4b01      	ldr	r3, [pc, #4]	; (23f9648 <_ZN9TimeClass6minuteEx+0xc>)
 23f9644:	6858      	ldr	r0, [r3, #4]
 23f9646:	bd08      	pop	{r3, pc}
 23f9648:	1007af44 	.word	0x1007af44

023f964c <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
 23f964c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f964e:	f7ff ffa9 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
 23f9652:	4b01      	ldr	r3, [pc, #4]	; (23f9658 <_ZN9TimeClass6secondEx+0xc>)
 23f9654:	6818      	ldr	r0, [r3, #0]
 23f9656:	bd08      	pop	{r3, pc}
 23f9658:	1007af44 	.word	0x1007af44

023f965c <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 23f965c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f965e:	f7ff ffa1 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
 23f9662:	4b01      	ldr	r3, [pc, #4]	; (23f9668 <_ZN9TimeClass3dayEx+0xc>)
 23f9664:	68d8      	ldr	r0, [r3, #12]
 23f9666:	bd08      	pop	{r3, pc}
 23f9668:	1007af44 	.word	0x1007af44

023f966c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23f966c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f966e:	f7ff ff99 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23f9672:	4b02      	ldr	r3, [pc, #8]	; (23f967c <_ZN9TimeClass5monthEx+0x10>)
 23f9674:	6918      	ldr	r0, [r3, #16]
}
 23f9676:	3001      	adds	r0, #1
 23f9678:	bd08      	pop	{r3, pc}
 23f967a:	bf00      	nop
 23f967c:	1007af44 	.word	0x1007af44

023f9680 <_ZN9TimeClass4yearEx>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
 23f9680:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9682:	f7ff ff8f 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_year;
}
 23f9686:	4b01      	ldr	r3, [pc, #4]	; (23f968c <_ZN9TimeClass4yearEx+0xc>)
 23f9688:	6958      	ldr	r0, [r3, #20]
 23f968a:	bd08      	pop	{r3, pc}
 23f968c:	1007af44 	.word	0x1007af44

023f9690 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 23f9690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f9692:	4602      	mov	r2, r0
 23f9694:	460b      	mov	r3, r1
    struct timeval tv = {
 23f9696:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f9698:	4668      	mov	r0, sp
    };
 23f969a:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 23f969e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f96a2:	f7fd fc51 	bl	23f6f48 <hal_rtc_set_time>
 23f96a6:	4602      	mov	r2, r0
 23f96a8:	b910      	cbnz	r0, 23f96b0 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 23f96aa:	4601      	mov	r1, r0
 23f96ac:	f7fe f82e 	bl	23f770c <system_notify_time_changed>
    }
}
 23f96b0:	b005      	add	sp, #20
 23f96b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f96b8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23f96b8:	b530      	push	{r4, r5, lr}
 23f96ba:	b093      	sub	sp, #76	; 0x4c
 23f96bc:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23f96c0:	4b19      	ldr	r3, [pc, #100]	; (23f9728 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23f96c2:	4604      	mov	r4, r0
    t += time_zone_cache;
 23f96c4:	e9d3 1000 	ldrd	r1, r0, [r3]
 23f96c8:	9b01      	ldr	r3, [sp, #4]
 23f96ca:	1852      	adds	r2, r2, r1
 23f96cc:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23f96d0:	4816      	ldr	r0, [pc, #88]	; (23f972c <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23f96d2:	2500      	movs	r5, #0
    t += dst_current_cache;
 23f96d4:	e9d0 1000 	ldrd	r1, r0, [r0]
 23f96d8:	1852      	adds	r2, r2, r1
 23f96da:	eb43 0300 	adc.w	r3, r3, r0
 23f96de:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23f96e2:	2224      	movs	r2, #36	; 0x24
 23f96e4:	2100      	movs	r1, #0
 23f96e6:	eb0d 0002 	add.w	r0, sp, r2
 23f96ea:	f003 f9dc 	bl	23fcaa6 <memset>
    localtime_r(&t, &calendar_time);
 23f96ee:	a909      	add	r1, sp, #36	; 0x24
 23f96f0:	4668      	mov	r0, sp
 23f96f2:	f7fe fa81 	bl	23f7bf8 <localtime_r>
    char ascstr[26] = {};
 23f96f6:	2216      	movs	r2, #22
 23f96f8:	4629      	mov	r1, r5
 23f96fa:	a803      	add	r0, sp, #12
 23f96fc:	9502      	str	r5, [sp, #8]
 23f96fe:	f003 f9d2 	bl	23fcaa6 <memset>
    asctime_r(&calendar_time, ascstr);
 23f9702:	a902      	add	r1, sp, #8
 23f9704:	a809      	add	r0, sp, #36	; 0x24
 23f9706:	f003 f95b 	bl	23fc9c0 <asctime_r>
    int len = strlen(ascstr);
 23f970a:	a802      	add	r0, sp, #8
 23f970c:	f7eb fd58 	bl	23e51c0 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23f9710:	ab12      	add	r3, sp, #72	; 0x48
 23f9712:	4418      	add	r0, r3
 23f9714:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23f9718:	a902      	add	r1, sp, #8
 23f971a:	4620      	mov	r0, r4
 23f971c:	f7ff feb6 	bl	23f948c <_ZN6StringC1EPK19__FlashStringHelper>
}
 23f9720:	4620      	mov	r0, r4
 23f9722:	b013      	add	sp, #76	; 0x4c
 23f9724:	bd30      	pop	{r4, r5, pc}
 23f9726:	bf00      	nop
 23f9728:	1007af70 	.word	0x1007af70
 23f972c:	1007af68 	.word	0x1007af68

023f9730 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 23f9730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f9734:	b0a4      	sub	sp, #144	; 0x90
 23f9736:	4607      	mov	r7, r0
 23f9738:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f973a:	a814      	add	r0, sp, #80	; 0x50
{
 23f973c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f973e:	223f      	movs	r2, #63	; 0x3f
{
 23f9740:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f9742:	f003 fa5e 	bl	23fcc02 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23f9746:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23f9748:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23f974a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23f974e:	f7eb fd37 	bl	23e51c0 <strlen>
 23f9752:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 23f9754:	bb4c      	cbnz	r4, 23f97aa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 23f9756:	4929      	ldr	r1, [pc, #164]	; (23f97fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 23f9758:	a803      	add	r0, sp, #12
 23f975a:	f003 fa19 	bl	23fcb90 <strcpy>
{
 23f975e:	2600      	movs	r6, #0
 23f9760:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 23f9762:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 23f9766:	45b1      	cmp	r9, r6
 23f9768:	d934      	bls.n	23f97d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 23f976a:	7823      	ldrb	r3, [r4, #0]
 23f976c:	f106 0a01 	add.w	sl, r6, #1
 23f9770:	2b25      	cmp	r3, #37	; 0x25
 23f9772:	d117      	bne.n	23f97a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 23f9774:	7863      	ldrb	r3, [r4, #1]
 23f9776:	2b7a      	cmp	r3, #122	; 0x7a
 23f9778:	d114      	bne.n	23f97a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 23f977a:	a803      	add	r0, sp, #12
 23f977c:	f7eb fd20 	bl	23e51c0 <strlen>
 23f9780:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 23f9782:	ab14      	add	r3, sp, #80	; 0x50
 23f9784:	1830      	adds	r0, r6, r0
 23f9786:	4418      	add	r0, r3
 23f9788:	eba9 0206 	sub.w	r2, r9, r6
 23f978c:	1ca1      	adds	r1, r4, #2
 23f978e:	f003 f97d 	bl	23fca8c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 23f9792:	462a      	mov	r2, r5
 23f9794:	a903      	add	r1, sp, #12
 23f9796:	4620      	mov	r0, r4
 23f9798:	f003 f978 	bl	23fca8c <memcpy>
            len = strlen(format_str);
 23f979c:	a814      	add	r0, sp, #80	; 0x50
 23f979e:	f7eb fd0f 	bl	23e51c0 <strlen>
 23f97a2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 23f97a4:	4656      	mov	r6, sl
 23f97a6:	3401      	adds	r4, #1
 23f97a8:	e7db      	b.n	23f9762 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 23f97aa:	233c      	movs	r3, #60	; 0x3c
 23f97ac:	fb94 f2f3 	sdiv	r2, r4, r3
 23f97b0:	2a00      	cmp	r2, #0
 23f97b2:	bfb8      	it	lt
 23f97b4:	4252      	neglt	r2, r2
 23f97b6:	fbb2 f1f3 	udiv	r1, r2, r3
 23f97ba:	fb03 2211 	mls	r2, r3, r1, r2
 23f97be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 23f97c2:	9200      	str	r2, [sp, #0]
 23f97c4:	fb94 f3f3 	sdiv	r3, r4, r3
 23f97c8:	2110      	movs	r1, #16
 23f97ca:	4a0d      	ldr	r2, [pc, #52]	; (23f9800 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 23f97cc:	a803      	add	r0, sp, #12
 23f97ce:	f7fe f9a3 	bl	23f7b18 <snprintf>
 23f97d2:	e7c4      	b.n	23f975e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 23f97d4:	2100      	movs	r1, #0
 23f97d6:	222e      	movs	r2, #46	; 0x2e
 23f97d8:	a808      	add	r0, sp, #32
 23f97da:	9107      	str	r1, [sp, #28]
 23f97dc:	f003 f963 	bl	23fcaa6 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 23f97e0:	4643      	mov	r3, r8
 23f97e2:	aa14      	add	r2, sp, #80	; 0x50
 23f97e4:	2132      	movs	r1, #50	; 0x32
 23f97e6:	a807      	add	r0, sp, #28
 23f97e8:	f7fe f9f8 	bl	23f7bdc <strftime>
    return String(buf);
 23f97ec:	4638      	mov	r0, r7
 23f97ee:	a907      	add	r1, sp, #28
 23f97f0:	f7ff fe4c 	bl	23f948c <_ZN6StringC1EPK19__FlashStringHelper>
}
 23f97f4:	4638      	mov	r0, r7
 23f97f6:	b024      	add	sp, #144	; 0x90
 23f97f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f97fc:	023ffa58 	.word	0x023ffa58
 23f9800:	023ffa5a 	.word	0x023ffa5a

023f9804 <_ZN9TimeClass6formatExPKc>:
{
 23f9804:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9806:	b08d      	sub	sp, #52	; 0x34
 23f9808:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23f980a:	4604      	mov	r4, r0
 23f980c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 23f9810:	b915      	cbnz	r5, 23f9818 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 23f9812:	4b19      	ldr	r3, [pc, #100]	; (23f9878 <_ZN9TimeClass6formatExPKc+0x74>)
 23f9814:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 23f9816:	b12d      	cbz	r5, 23f9824 <_ZN9TimeClass6formatExPKc+0x20>
 23f9818:	4b18      	ldr	r3, [pc, #96]	; (23f987c <_ZN9TimeClass6formatExPKc+0x78>)
 23f981a:	4628      	mov	r0, r5
 23f981c:	6819      	ldr	r1, [r3, #0]
 23f981e:	f7eb fcc5 	bl	23e51ac <strcmp>
 23f9822:	b938      	cbnz	r0, 23f9834 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 23f9824:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f9828:	4620      	mov	r0, r4
 23f982a:	f7ff ff45 	bl	23f96b8 <_ZN9TimeClass7timeStrEx>
}
 23f982e:	4620      	mov	r0, r4
 23f9830:	b00d      	add	sp, #52	; 0x34
 23f9832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 23f9834:	9900      	ldr	r1, [sp, #0]
 23f9836:	4e12      	ldr	r6, [pc, #72]	; (23f9880 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 23f9838:	4f12      	ldr	r7, [pc, #72]	; (23f9884 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 23f983a:	e9d6 3200 	ldrd	r3, r2, [r6]
 23f983e:	185b      	adds	r3, r3, r1
 23f9840:	9901      	ldr	r1, [sp, #4]
 23f9842:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 23f9846:	e9d7 0100 	ldrd	r0, r1, [r7]
 23f984a:	181b      	adds	r3, r3, r0
 23f984c:	eb42 0201 	adc.w	r2, r2, r1
 23f9850:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 23f9854:	2100      	movs	r1, #0
 23f9856:	2224      	movs	r2, #36	; 0x24
 23f9858:	a803      	add	r0, sp, #12
 23f985a:	f003 f924 	bl	23fcaa6 <memset>
    localtime_r(&t, &calendar_time);
 23f985e:	a903      	add	r1, sp, #12
 23f9860:	4668      	mov	r0, sp
 23f9862:	f7fe f9c9 	bl	23f7bf8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 23f9866:	6832      	ldr	r2, [r6, #0]
 23f9868:	683b      	ldr	r3, [r7, #0]
 23f986a:	4620      	mov	r0, r4
 23f986c:	4413      	add	r3, r2
 23f986e:	a903      	add	r1, sp, #12
 23f9870:	462a      	mov	r2, r5
 23f9872:	f7ff ff5d 	bl	23f9730 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 23f9876:	e7da      	b.n	23f982e <_ZN9TimeClass6formatExPKc+0x2a>
 23f9878:	1007af40 	.word	0x1007af40
 23f987c:	1006a1c4 	.word	0x1006a1c4
 23f9880:	1007af70 	.word	0x1007af70
 23f9884:	1007af68 	.word	0x1007af68

023f9888 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 23f9888:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23f988a:	2000      	movs	r0, #0
 23f988c:	f7fd fb32 	bl	23f6ef4 <hal_rtc_time_is_valid>
    if (rtcstate)
 23f9890:	4604      	mov	r4, r0
 23f9892:	b9a0      	cbnz	r0, 23f98be <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23f9894:	f7fd febc 	bl	23f7610 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23f9898:	2801      	cmp	r0, #1
 23f989a:	d110      	bne.n	23f98be <_ZN9TimeClass7isValidEv+0x36>
 23f989c:	4620      	mov	r0, r4
 23f989e:	f7fd ff27 	bl	23f76f0 <system_thread_get_state>
 23f98a2:	b960      	cbnz	r0, 23f98be <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23f98a4:	f7ff feb4 	bl	23f9610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23f98a8:	b910      	cbnz	r0, 23f98b0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23f98aa:	f7fd ff91 	bl	23f77d0 <spark_process>
        while (_while() && !_condition()) {
 23f98ae:	e7f9      	b.n	23f98a4 <_ZN9TimeClass7isValidEv+0x1c>
 23f98b0:	f7ff feae 	bl	23f9610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23f98b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23f98b8:	2000      	movs	r0, #0
 23f98ba:	f7fd bb1b 	b.w	23f6ef4 <hal_rtc_time_is_valid>
}
 23f98be:	4620      	mov	r0, r4
 23f98c0:	bd10      	pop	{r4, pc}

023f98c2 <_ZN9TimeClass3nowEv>:
{
 23f98c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23f98c4:	f7ff ffe0 	bl	23f9888 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23f98c8:	2210      	movs	r2, #16
 23f98ca:	2100      	movs	r1, #0
 23f98cc:	4668      	mov	r0, sp
 23f98ce:	f003 f8ea 	bl	23fcaa6 <memset>
    hal_rtc_get_time(&tv, nullptr);
 23f98d2:	2100      	movs	r1, #0
 23f98d4:	4668      	mov	r0, sp
 23f98d6:	f7fd fb29 	bl	23f6f2c <hal_rtc_get_time>
}
 23f98da:	9800      	ldr	r0, [sp, #0]
 23f98dc:	b005      	add	sp, #20
 23f98de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f98e4 <_ZN9TimeClass4hourEv>:
{
 23f98e4:	b508      	push	{r3, lr}
	return hour(now());
 23f98e6:	f7ff ffec 	bl	23f98c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f98ea:	17c1      	asrs	r1, r0, #31
 23f98ec:	f7ff fe5a 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
}
 23f98f0:	4b01      	ldr	r3, [pc, #4]	; (23f98f8 <_ZN9TimeClass4hourEv+0x14>)
 23f98f2:	6898      	ldr	r0, [r3, #8]
 23f98f4:	bd08      	pop	{r3, pc}
 23f98f6:	bf00      	nop
 23f98f8:	1007af44 	.word	0x1007af44

023f98fc <_ZN9TimeClass6minuteEv>:
{
 23f98fc:	b508      	push	{r3, lr}
	return minute(now());
 23f98fe:	f7ff ffe0 	bl	23f98c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9902:	17c1      	asrs	r1, r0, #31
 23f9904:	f7ff fe4e 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9908:	4b01      	ldr	r3, [pc, #4]	; (23f9910 <_ZN9TimeClass6minuteEv+0x14>)
 23f990a:	6858      	ldr	r0, [r3, #4]
 23f990c:	bd08      	pop	{r3, pc}
 23f990e:	bf00      	nop
 23f9910:	1007af44 	.word	0x1007af44

023f9914 <_ZN9TimeClass6secondEv>:
{
 23f9914:	b508      	push	{r3, lr}
	return second(now());
 23f9916:	f7ff ffd4 	bl	23f98c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f991a:	17c1      	asrs	r1, r0, #31
 23f991c:	f7ff fe42 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9920:	4b01      	ldr	r3, [pc, #4]	; (23f9928 <_ZN9TimeClass6secondEv+0x14>)
 23f9922:	6818      	ldr	r0, [r3, #0]
 23f9924:	bd08      	pop	{r3, pc}
 23f9926:	bf00      	nop
 23f9928:	1007af44 	.word	0x1007af44

023f992c <_ZN9TimeClass3dayEv>:
{
 23f992c:	b508      	push	{r3, lr}
	return day(now());
 23f992e:	f7ff ffc8 	bl	23f98c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9932:	17c1      	asrs	r1, r0, #31
 23f9934:	f7ff fe36 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9938:	4b01      	ldr	r3, [pc, #4]	; (23f9940 <_ZN9TimeClass3dayEv+0x14>)
 23f993a:	68d8      	ldr	r0, [r3, #12]
 23f993c:	bd08      	pop	{r3, pc}
 23f993e:	bf00      	nop
 23f9940:	1007af44 	.word	0x1007af44

023f9944 <_ZN9TimeClass5monthEv>:
{
 23f9944:	b508      	push	{r3, lr}
	return month(now());
 23f9946:	f7ff ffbc 	bl	23f98c2 <_ZN9TimeClass3nowEv>
}
 23f994a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23f994e:	17c1      	asrs	r1, r0, #31
 23f9950:	f7ff be8c 	b.w	23f966c <_ZN9TimeClass5monthEx>

023f9954 <_ZN9TimeClass4yearEv>:
{
 23f9954:	b508      	push	{r3, lr}
	return year(now());
 23f9956:	f7ff ffb4 	bl	23f98c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f995a:	17c1      	asrs	r1, r0, #31
 23f995c:	f7ff fe22 	bl	23f95a4 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9960:	4b01      	ldr	r3, [pc, #4]	; (23f9968 <_ZN9TimeClass4yearEv+0x14>)
 23f9962:	6958      	ldr	r0, [r3, #20]
 23f9964:	bd08      	pop	{r3, pc}
 23f9966:	bf00      	nop
 23f9968:	1007af44 	.word	0x1007af44

023f996c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f996c:	4b02      	ldr	r3, [pc, #8]	; (23f9978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f996e:	681a      	ldr	r2, [r3, #0]
 23f9970:	4b02      	ldr	r3, [pc, #8]	; (23f997c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f9972:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f9974:	4770      	bx	lr
 23f9976:	bf00      	nop
 23f9978:	1006a1c4 	.word	0x1006a1c4
 23f997c:	1007af40 	.word	0x1007af40

023f9980 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f9980:	4770      	bx	lr

023f9982 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f9982:	7441      	strb	r1, [r0, #17]
}
 23f9984:	4770      	bx	lr

023f9986 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f9986:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f9988:	7c00      	ldrb	r0, [r0, #16]
 23f998a:	f7fd fd61 	bl	23f7450 <hal_usart_available_data_for_write>
}
 23f998e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9992:	bd08      	pop	{r3, pc}

023f9994 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f9994:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f9996:	7c00      	ldrb	r0, [r0, #16]
 23f9998:	f7fd fd14 	bl	23f73c4 <hal_usart_available>
}
 23f999c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f99a0:	bd08      	pop	{r3, pc}

023f99a2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f99a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f99a4:	7c00      	ldrb	r0, [r0, #16]
 23f99a6:	f7fd fd29 	bl	23f73fc <hal_usart_peek>
}
 23f99aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f99ae:	bd08      	pop	{r3, pc}

023f99b0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f99b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f99b2:	7c00      	ldrb	r0, [r0, #16]
 23f99b4:	f7fd fd14 	bl	23f73e0 <hal_usart_read>
}
 23f99b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f99bc:	bd08      	pop	{r3, pc}

023f99be <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f99be:	7c00      	ldrb	r0, [r0, #16]
 23f99c0:	f7fd bd2a 	b.w	23f7418 <hal_usart_flush>

023f99c4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f99c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f99c6:	7c45      	ldrb	r5, [r0, #17]
{
 23f99c8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f99ca:	b12d      	cbz	r5, 23f99d8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f99cc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f99ce:	b003      	add	sp, #12
 23f99d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f99d4:	f7fd bce8 	b.w	23f73a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f99d8:	7c00      	ldrb	r0, [r0, #16]
 23f99da:	9101      	str	r1, [sp, #4]
 23f99dc:	f7fd fd38 	bl	23f7450 <hal_usart_available_data_for_write>
 23f99e0:	2800      	cmp	r0, #0
 23f99e2:	9901      	ldr	r1, [sp, #4]
 23f99e4:	dcf2      	bgt.n	23f99cc <_ZN11USARTSerial5writeEh+0x8>
}
 23f99e6:	4628      	mov	r0, r5
 23f99e8:	b003      	add	sp, #12
 23f99ea:	bd30      	pop	{r4, r5, pc}

023f99ec <_ZN11USARTSerialD0Ev>:
 23f99ec:	b510      	push	{r4, lr}
 23f99ee:	4604      	mov	r4, r0
 23f99f0:	2114      	movs	r1, #20
 23f99f2:	f7eb fc0e 	bl	23e5212 <_ZdlPvj>
 23f99f6:	4620      	mov	r0, r4
 23f99f8:	bd10      	pop	{r4, pc}
	...

023f99fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f99fc:	b510      	push	{r4, lr}
 23f99fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9a02:	4604      	mov	r4, r0
 23f9a04:	4608      	mov	r0, r1
 23f9a06:	4611      	mov	r1, r2
 23f9a08:	2200      	movs	r2, #0
 23f9a0a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f9a0e:	4b04      	ldr	r3, [pc, #16]	; (23f9a20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f9a10:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9a12:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9a14:	2301      	movs	r3, #1
 23f9a16:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f9a18:	f7fd fd28 	bl	23f746c <hal_usart_init_ex>
}
 23f9a1c:	4620      	mov	r0, r4
 23f9a1e:	bd10      	pop	{r4, pc}
 23f9a20:	023ffa8c 	.word	0x023ffa8c

023f9a24 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f9a24:	7c00      	ldrb	r0, [r0, #16]
 23f9a26:	f7fd bd05 	b.w	23f7434 <hal_usart_is_enabled>

023f9a2a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f9a2a:	7441      	strb	r1, [r0, #17]
}
 23f9a2c:	4770      	bx	lr

023f9a2e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9a2e:	4770      	bx	lr

023f9a30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f9a30:	4770      	bx	lr

023f9a32 <_ZN9USBSerial4readEv>:
{
 23f9a32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f9a34:	2100      	movs	r1, #0
 23f9a36:	7c00      	ldrb	r0, [r0, #16]
 23f9a38:	f7fd fd5e 	bl	23f74f8 <HAL_USB_USART_Receive_Data>
}
 23f9a3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9a40:	bd08      	pop	{r3, pc}

023f9a42 <_ZN9USBSerial4peekEv>:
{
 23f9a42:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f9a44:	2101      	movs	r1, #1
 23f9a46:	7c00      	ldrb	r0, [r0, #16]
 23f9a48:	f7fd fd56 	bl	23f74f8 <HAL_USB_USART_Receive_Data>
}
 23f9a4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9a50:	bd08      	pop	{r3, pc}

023f9a52 <_ZN9USBSerial17availableForWriteEv>:
{
 23f9a52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f9a54:	7c00      	ldrb	r0, [r0, #16]
 23f9a56:	f7fd fd41 	bl	23f74dc <HAL_USB_USART_Available_Data_For_Write>
}
 23f9a5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9a5e:	bd08      	pop	{r3, pc}

023f9a60 <_ZN9USBSerial9availableEv>:
{
 23f9a60:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f9a62:	7c00      	ldrb	r0, [r0, #16]
 23f9a64:	f7fd fd2c 	bl	23f74c0 <HAL_USB_USART_Available_Data>
}
 23f9a68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9a6c:	bd08      	pop	{r3, pc}

023f9a6e <_ZN9USBSerial5writeEh>:
{
 23f9a6e:	b513      	push	{r0, r1, r4, lr}
 23f9a70:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9a72:	7c00      	ldrb	r0, [r0, #16]
{
 23f9a74:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9a76:	f7fd fd31 	bl	23f74dc <HAL_USB_USART_Available_Data_For_Write>
 23f9a7a:	2800      	cmp	r0, #0
 23f9a7c:	9901      	ldr	r1, [sp, #4]
 23f9a7e:	dc01      	bgt.n	23f9a84 <_ZN9USBSerial5writeEh+0x16>
 23f9a80:	7c60      	ldrb	r0, [r4, #17]
 23f9a82:	b120      	cbz	r0, 23f9a8e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f9a84:	7c20      	ldrb	r0, [r4, #16]
 23f9a86:	f7fd fd45 	bl	23f7514 <HAL_USB_USART_Send_Data>
 23f9a8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f9a8e:	b002      	add	sp, #8
 23f9a90:	bd10      	pop	{r4, pc}

023f9a92 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f9a92:	7c00      	ldrb	r0, [r0, #16]
 23f9a94:	f7fd bd4c 	b.w	23f7530 <HAL_USB_USART_Flush_Data>

023f9a98 <_ZN9USBSerialD0Ev>:
 23f9a98:	b510      	push	{r4, lr}
 23f9a9a:	4604      	mov	r4, r0
 23f9a9c:	2114      	movs	r1, #20
 23f9a9e:	f7eb fbb8 	bl	23e5212 <_ZdlPvj>
 23f9aa2:	4620      	mov	r0, r4
 23f9aa4:	bd10      	pop	{r4, pc}
	...

023f9aa8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9aa8:	b510      	push	{r4, lr}
 23f9aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9aae:	4604      	mov	r4, r0
 23f9ab0:	4608      	mov	r0, r1
 23f9ab2:	2100      	movs	r1, #0
 23f9ab4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f9ab8:	4b04      	ldr	r3, [pc, #16]	; (23f9acc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f9aba:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9abc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9abe:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f9ac0:	4611      	mov	r1, r2
  _blocking = true;
 23f9ac2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f9ac4:	f7fd fce0 	bl	23f7488 <HAL_USB_USART_Init>
}
 23f9ac8:	4620      	mov	r0, r4
 23f9aca:	bd10      	pop	{r4, pc}
 23f9acc:	023ffac0 	.word	0x023ffac0

023f9ad0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f9ad0:	2200      	movs	r2, #0
 23f9ad2:	7c00      	ldrb	r0, [r0, #16]
 23f9ad4:	f7fd bce6 	b.w	23f74a4 <HAL_USB_USART_Begin>

023f9ad8 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f9ad8:	7c00      	ldrb	r0, [r0, #16]
 23f9ada:	f7fd bd37 	b.w	23f754c <HAL_USB_USART_Is_Connected>

023f9ade <_Z19acquireSerialBufferv>:
{
 23f9ade:	b510      	push	{r4, lr}
 23f9ae0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f9ae2:	2214      	movs	r2, #20
 23f9ae4:	2100      	movs	r1, #0
 23f9ae6:	f002 ffde 	bl	23fcaa6 <memset>
}
 23f9aea:	4620      	mov	r0, r4
 23f9aec:	bd10      	pop	{r4, pc}
	...

023f9af0 <_Z16_fetch_usbserialv>:
{
 23f9af0:	b510      	push	{r4, lr}
 23f9af2:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f9af4:	a803      	add	r0, sp, #12
 23f9af6:	f7ff fff2 	bl	23f9ade <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9afa:	4c0c      	ldr	r4, [pc, #48]	; (23f9b2c <_Z16_fetch_usbserialv+0x3c>)
 23f9afc:	e8d4 1f8f 	ldab	r1, [r4]
 23f9b00:	f011 0101 	ands.w	r1, r1, #1
 23f9b04:	d10f      	bne.n	23f9b26 <_Z16_fetch_usbserialv+0x36>
 23f9b06:	4620      	mov	r0, r4
 23f9b08:	9101      	str	r1, [sp, #4]
 23f9b0a:	f7fe f89f 	bl	23f7c4c <__cxa_guard_acquire>
 23f9b0e:	9901      	ldr	r1, [sp, #4]
 23f9b10:	b148      	cbz	r0, 23f9b26 <_Z16_fetch_usbserialv+0x36>
 23f9b12:	aa03      	add	r2, sp, #12
 23f9b14:	4806      	ldr	r0, [pc, #24]	; (23f9b30 <_Z16_fetch_usbserialv+0x40>)
 23f9b16:	f7ff ffc7 	bl	23f9aa8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f9b1a:	4620      	mov	r0, r4
 23f9b1c:	f7fe f8a4 	bl	23f7c68 <__cxa_guard_release>
 23f9b20:	4804      	ldr	r0, [pc, #16]	; (23f9b34 <_Z16_fetch_usbserialv+0x44>)
 23f9b22:	f002 ff73 	bl	23fca0c <atexit>
	return _usbserial;
}
 23f9b26:	4802      	ldr	r0, [pc, #8]	; (23f9b30 <_Z16_fetch_usbserialv+0x40>)
 23f9b28:	b008      	add	sp, #32
 23f9b2a:	bd10      	pop	{r4, pc}
 23f9b2c:	1007af80 	.word	0x1007af80
 23f9b30:	1007af84 	.word	0x1007af84
 23f9b34:	023f9a2f 	.word	0x023f9a2f

023f9b38 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>:
LOG_SOURCE_CATEGORY("wiring.watchdog")

namespace particle {

int WatchdogClass::init(const WatchdogConfiguration& config) {
    instance_ = config.watchdogInstance();
 23f9b38:	2200      	movs	r2, #0
 23f9b3a:	7402      	strb	r2, [r0, #16]
    return hal_watchdog_set_config(instance_, config.halConfig(), nullptr);
 23f9b3c:	4610      	mov	r0, r2
 23f9b3e:	f7fd bd13 	b.w	23f7568 <hal_watchdog_set_config>

023f9b42 <_ZN8particle13WatchdogClass5startEv>:
}

int WatchdogClass::start() {
    return hal_watchdog_start(instance_, nullptr);
 23f9b42:	2100      	movs	r1, #0
 23f9b44:	7c00      	ldrb	r0, [r0, #16]
 23f9b46:	f7fd bd1d 	b.w	23f7584 <hal_watchdog_start>

023f9b4a <_ZN8particle13WatchdogClass7refreshEv>:
int WatchdogClass::stop() {
    return hal_watchdog_stop(instance_, nullptr);
}

int WatchdogClass::refresh() {
    return hal_watchdog_refresh(instance_, nullptr);
 23f9b4a:	2100      	movs	r1, #0
 23f9b4c:	7c00      	ldrb	r0, [r0, #16]
 23f9b4e:	f7fd bd27 	b.w	23f75a0 <hal_watchdog_refresh>

023f9b52 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f9b52:	2200      	movs	r2, #0
 23f9b54:	6840      	ldr	r0, [r0, #4]
 23f9b56:	4611      	mov	r1, r2
 23f9b58:	f7fd bef0 	b.w	23f793c <network_ready>

023f9b5c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f9b5c:	2200      	movs	r2, #0
 23f9b5e:	6840      	ldr	r0, [r0, #4]
 23f9b60:	4611      	mov	r1, r2
 23f9b62:	f7fd bf23 	b.w	23f79ac <network_listening>

023f9b66 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f9b66:	2200      	movs	r2, #0
 23f9b68:	6840      	ldr	r0, [r0, #4]
 23f9b6a:	4611      	mov	r1, r2
 23f9b6c:	f7fd bf3a 	b.w	23f79e4 <network_get_listen_timeout>

023f9b70 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9b70:	2200      	movs	r2, #0
 23f9b72:	6840      	ldr	r0, [r0, #4]
 23f9b74:	f7fd bf28 	b.w	23f79c8 <network_set_listen_timeout>

023f9b78 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f9b78:	2200      	movs	r2, #0
 23f9b7a:	6840      	ldr	r0, [r0, #4]
 23f9b7c:	f081 0101 	eor.w	r1, r1, #1
 23f9b80:	f7fd bf06 	b.w	23f7990 <network_listen>

023f9b84 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9b84:	2300      	movs	r3, #0
 23f9b86:	6840      	ldr	r0, [r0, #4]
 23f9b88:	461a      	mov	r2, r3
 23f9b8a:	4619      	mov	r1, r3
 23f9b8c:	f7fd bef2 	b.w	23f7974 <network_off>

023f9b90 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9b90:	2300      	movs	r3, #0
 23f9b92:	6840      	ldr	r0, [r0, #4]
 23f9b94:	461a      	mov	r2, r3
 23f9b96:	4619      	mov	r1, r3
 23f9b98:	f7fd bede 	b.w	23f7958 <network_on>

023f9b9c <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f9b9c:	2200      	movs	r2, #0
 23f9b9e:	6840      	ldr	r0, [r0, #4]
 23f9ba0:	4611      	mov	r1, r2
 23f9ba2:	f7fd beaf 	b.w	23f7904 <network_connecting>

023f9ba6 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f9ba6:	2200      	movs	r2, #0
 23f9ba8:	2102      	movs	r1, #2
 23f9baa:	6840      	ldr	r0, [r0, #4]
 23f9bac:	f7fd beb8 	b.w	23f7920 <network_disconnect>

023f9bb0 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9bb0:	2300      	movs	r3, #0
 23f9bb2:	6840      	ldr	r0, [r0, #4]
 23f9bb4:	461a      	mov	r2, r3
 23f9bb6:	f7fd be97 	b.w	23f78e8 <network_connect>
	...

023f9bbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f9bbc:	2205      	movs	r2, #5
 23f9bbe:	4b02      	ldr	r3, [pc, #8]	; (23f9bc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f9bc0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f9bc2:	4a02      	ldr	r2, [pc, #8]	; (23f9bcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f9bc4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f9bc6:	4770      	bx	lr
 23f9bc8:	1007af98 	.word	0x1007af98
 23f9bcc:	023ffaf4 	.word	0x023ffaf4

023f9bd0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f9bd0:	4b01      	ldr	r3, [pc, #4]	; (23f9bd8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f9bd2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f9bd4:	4770      	bx	lr
 23f9bd6:	bf00      	nop
 23f9bd8:	1006a1d0 	.word	0x1006a1d0

023f9bdc <serialEventRun>:
{
 23f9bdc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f9bde:	4b0d      	ldr	r3, [pc, #52]	; (23f9c14 <serialEventRun+0x38>)
 23f9be0:	b143      	cbz	r3, 23f9bf4 <serialEventRun+0x18>
 23f9be2:	f7ff ff85 	bl	23f9af0 <_Z16_fetch_usbserialv>
 23f9be6:	6803      	ldr	r3, [r0, #0]
 23f9be8:	691b      	ldr	r3, [r3, #16]
 23f9bea:	4798      	blx	r3
 23f9bec:	2800      	cmp	r0, #0
 23f9bee:	dd01      	ble.n	23f9bf4 <serialEventRun+0x18>
        serialEvent();
 23f9bf0:	e000      	b.n	23f9bf4 <serialEventRun+0x18>
 23f9bf2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f9bf4:	4b08      	ldr	r3, [pc, #32]	; (23f9c18 <serialEventRun+0x3c>)
 23f9bf6:	b143      	cbz	r3, 23f9c0a <serialEventRun+0x2e>
 23f9bf8:	f000 f9d2 	bl	23f9fa0 <_Z22__fetch_global_Serial1v>
 23f9bfc:	6803      	ldr	r3, [r0, #0]
 23f9bfe:	691b      	ldr	r3, [r3, #16]
 23f9c00:	4798      	blx	r3
 23f9c02:	2800      	cmp	r0, #0
 23f9c04:	dd01      	ble.n	23f9c0a <serialEventRun+0x2e>
        serialEvent1();
 23f9c06:	e000      	b.n	23f9c0a <serialEventRun+0x2e>
 23f9c08:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f9c0a:	4b04      	ldr	r3, [pc, #16]	; (23f9c1c <serialEventRun+0x40>)
 23f9c0c:	b10b      	cbz	r3, 23f9c12 <serialEventRun+0x36>
 23f9c0e:	f000 fa0d 	bl	23fa02c <_Z15serialEventRun2v>
}
 23f9c12:	bd08      	pop	{r3, pc}
	...

023f9c20 <_post_loop>:
{
 23f9c20:	b508      	push	{r3, lr}
	serialEventRun();
 23f9c22:	f7ff ffdb 	bl	23f9bdc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f9c26:	f7fd f91f 	bl	23f6e68 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f9c2a:	4b01      	ldr	r3, [pc, #4]	; (23f9c30 <_post_loop+0x10>)
 23f9c2c:	6018      	str	r0, [r3, #0]
}
 23f9c2e:	bd08      	pop	{r3, pc}
 23f9c30:	1007afa8 	.word	0x1007afa8

023f9c34 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f9c34:	4805      	ldr	r0, [pc, #20]	; (23f9c4c <_Z33system_initialize_user_backup_ramv+0x18>)
 23f9c36:	4a06      	ldr	r2, [pc, #24]	; (23f9c50 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f9c38:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f9c3a:	1a12      	subs	r2, r2, r0
 23f9c3c:	4905      	ldr	r1, [pc, #20]	; (23f9c54 <_Z33system_initialize_user_backup_ramv+0x20>)
 23f9c3e:	f002 ff25 	bl	23fca8c <memcpy>
    __backup_sram_signature = signature;
 23f9c42:	4b05      	ldr	r3, [pc, #20]	; (23f9c58 <_Z33system_initialize_user_backup_ramv+0x24>)
 23f9c44:	4a05      	ldr	r2, [pc, #20]	; (23f9c5c <_Z33system_initialize_user_backup_ramv+0x28>)
 23f9c46:	601a      	str	r2, [r3, #0]
}
 23f9c48:	bd08      	pop	{r3, pc}
 23f9c4a:	bf00      	nop
 23f9c4c:	1007b400 	.word	0x1007b400
 23f9c50:	1007b404 	.word	0x1007b404
 23f9c54:	085ff020 	.word	0x085ff020
 23f9c58:	1007b400 	.word	0x1007b400
 23f9c5c:	9a271c1e 	.word	0x9a271c1e

023f9c60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f9c60:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f9c62:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f9c64:	461a      	mov	r2, r3
 23f9c66:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f9c6a:	9300      	str	r3, [sp, #0]
 23f9c6c:	f7fd fd6a 	bl	23f7744 <system_ctrl_set_result>
}
 23f9c70:	b003      	add	sp, #12
 23f9c72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f9c78 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f9c78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f9c7a:	8843      	ldrh	r3, [r0, #2]
 23f9c7c:	2b0a      	cmp	r3, #10
 23f9c7e:	d008      	beq.n	23f9c92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f9c80:	2b50      	cmp	r3, #80	; 0x50
 23f9c82:	d10b      	bne.n	23f9c9c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f9c84:	4b09      	ldr	r3, [pc, #36]	; (23f9cac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f9c86:	681b      	ldr	r3, [r3, #0]
 23f9c88:	b14b      	cbz	r3, 23f9c9e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f9c8a:	b003      	add	sp, #12
 23f9c8c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f9c90:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f9c92:	f7ff ffe5 	bl	23f9c60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f9c96:	b003      	add	sp, #12
 23f9c98:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f9c9c:	2300      	movs	r3, #0
 23f9c9e:	461a      	mov	r2, r3
 23f9ca0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f9ca4:	9300      	str	r3, [sp, #0]
 23f9ca6:	f7fd fd4d 	bl	23f7744 <system_ctrl_set_result>
}
 23f9caa:	e7f4      	b.n	23f9c96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f9cac:	1007afa4 	.word	0x1007afa4

023f9cb0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f9cb0:	2100      	movs	r1, #0
{
 23f9cb2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f9cb4:	4811      	ldr	r0, [pc, #68]	; (23f9cfc <module_user_init_hook+0x4c>)
 23f9cb6:	f7fd ff83 	bl	23f7bc0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f9cba:	4b11      	ldr	r3, [pc, #68]	; (23f9d00 <module_user_init_hook+0x50>)
 23f9cbc:	681a      	ldr	r2, [r3, #0]
 23f9cbe:	4b11      	ldr	r3, [pc, #68]	; (23f9d04 <module_user_init_hook+0x54>)
 23f9cc0:	429a      	cmp	r2, r3
 23f9cc2:	bf0c      	ite	eq
 23f9cc4:	2201      	moveq	r2, #1
 23f9cc6:	2200      	movne	r2, #0
 23f9cc8:	4b0f      	ldr	r3, [pc, #60]	; (23f9d08 <module_user_init_hook+0x58>)
 23f9cca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f9ccc:	d001      	beq.n	23f9cd2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f9cce:	f7ff ffb1 	bl	23f9c34 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f9cd2:	f7fd f8ad 	bl	23f6e30 <HAL_RNG_GetRandomNumber>
 23f9cd6:	4604      	mov	r4, r0
    srand(seed);
 23f9cd8:	f002 feee 	bl	23fcab8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f9cdc:	4b0b      	ldr	r3, [pc, #44]	; (23f9d0c <module_user_init_hook+0x5c>)
 23f9cde:	b113      	cbz	r3, 23f9ce6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f9ce0:	4620      	mov	r0, r4
 23f9ce2:	e000      	b.n	23f9ce6 <module_user_init_hook+0x36>
 23f9ce4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f9ce6:	2100      	movs	r1, #0
 23f9ce8:	4808      	ldr	r0, [pc, #32]	; (23f9d0c <module_user_init_hook+0x5c>)
 23f9cea:	f7fd fde1 	bl	23f78b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f9cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f9cf2:	2100      	movs	r1, #0
 23f9cf4:	4806      	ldr	r0, [pc, #24]	; (23f9d10 <module_user_init_hook+0x60>)
 23f9cf6:	f7fd bd17 	b.w	23f7728 <system_ctrl_set_app_request_handler>
 23f9cfa:	bf00      	nop
 23f9cfc:	023f9bd1 	.word	0x023f9bd1
 23f9d00:	1007b400 	.word	0x1007b400
 23f9d04:	9a271c1e 	.word	0x9a271c1e
 23f9d08:	1007afa0 	.word	0x1007afa0
 23f9d0c:	00000000 	.word	0x00000000
 23f9d10:	023f9c79 	.word	0x023f9c79

023f9d14 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 23f9d14:	b509      	push	{r0, r3, lr}
 23f9d16:	4804      	ldr	r0, [pc, #16]	; (23f9d28 <spark_protocol_instance+0x14>)
 23f9d18:	6800      	ldr	r0, [r0, #0]
 23f9d1a:	4b04      	ldr	r3, [pc, #16]	; (23f9d2c <spark_protocol_instance+0x18>)
 23f9d1c:	4403      	add	r3, r0
 23f9d1e:	681b      	ldr	r3, [r3, #0]
 23f9d20:	681b      	ldr	r3, [r3, #0]
 23f9d22:	9302      	str	r3, [sp, #8]
 23f9d24:	bd09      	pop	{r0, r3, pc}
 23f9d26:	0000      	.short	0x0000
 23f9d28:	1006a0f8 	.word	0x1006a0f8
 23f9d2c:	00000044 	.word	0x00000044

023f9d30 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 23f9d30:	b509      	push	{r0, r3, lr}
 23f9d32:	4804      	ldr	r0, [pc, #16]	; (23f9d44 <spark_protocol_set_product_id+0x14>)
 23f9d34:	6800      	ldr	r0, [r0, #0]
 23f9d36:	4b04      	ldr	r3, [pc, #16]	; (23f9d48 <spark_protocol_set_product_id+0x18>)
 23f9d38:	4403      	add	r3, r0
 23f9d3a:	681b      	ldr	r3, [r3, #0]
 23f9d3c:	685b      	ldr	r3, [r3, #4]
 23f9d3e:	9302      	str	r3, [sp, #8]
 23f9d40:	bd09      	pop	{r0, r3, pc}
 23f9d42:	0000      	.short	0x0000
 23f9d44:	1006a0f8 	.word	0x1006a0f8
 23f9d48:	00000044 	.word	0x00000044

023f9d4c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 23f9d4c:	b509      	push	{r0, r3, lr}
 23f9d4e:	4804      	ldr	r0, [pc, #16]	; (23f9d60 <spark_protocol_set_product_firmware_version+0x14>)
 23f9d50:	6800      	ldr	r0, [r0, #0]
 23f9d52:	4b04      	ldr	r3, [pc, #16]	; (23f9d64 <spark_protocol_set_product_firmware_version+0x18>)
 23f9d54:	4403      	add	r3, r0
 23f9d56:	681b      	ldr	r3, [r3, #0]
 23f9d58:	689b      	ldr	r3, [r3, #8]
 23f9d5a:	9302      	str	r3, [sp, #8]
 23f9d5c:	bd09      	pop	{r0, r3, pc}
 23f9d5e:	0000      	.short	0x0000
 23f9d60:	1006a0f8 	.word	0x1006a0f8
 23f9d64:	00000044 	.word	0x00000044

023f9d68 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23f9d68:	282c      	cmp	r0, #44	; 0x2c
bool pinAvailable(uint16_t pin) {
 23f9d6a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
 23f9d6c:	d902      	bls.n	23f9d74 <pinAvailable+0xc>
    return false;
 23f9d6e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23f9d70:	b002      	add	sp, #8
 23f9d72:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23f9d74:	f1a0 030b 	sub.w	r3, r0, #11
 23f9d78:	2b02      	cmp	r3, #2
 23f9d7a:	d819      	bhi.n	23f9db0 <pinAvailable+0x48>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23f9d7c:	4c17      	ldr	r4, [pc, #92]	; (23f9ddc <pinAvailable+0x74>)
 23f9d7e:	e8d4 1f8f 	ldab	r1, [r4]
 23f9d82:	f011 0101 	ands.w	r1, r1, #1
 23f9d86:	d10b      	bne.n	23f9da0 <pinAvailable+0x38>
 23f9d88:	4620      	mov	r0, r4
 23f9d8a:	9101      	str	r1, [sp, #4]
 23f9d8c:	f7fd ff5e 	bl	23f7c4c <__cxa_guard_acquire>
 23f9d90:	9901      	ldr	r1, [sp, #4]
 23f9d92:	b128      	cbz	r0, 23f9da0 <pinAvailable+0x38>
 23f9d94:	4812      	ldr	r0, [pc, #72]	; (23f9de0 <pinAvailable+0x78>)
 23f9d96:	f7ff fa05 	bl	23f91a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f9d9a:	4620      	mov	r0, r4
 23f9d9c:	f7fd ff64 	bl	23f7c68 <__cxa_guard_release>
 23f9da0:	4b0f      	ldr	r3, [pc, #60]	; (23f9de0 <pinAvailable+0x78>)
 23f9da2:	7818      	ldrb	r0, [r3, #0]
 23f9da4:	f7fd fa9e 	bl	23f72e4 <hal_spi_is_enabled>
 23f9da8:	2800      	cmp	r0, #0
 23f9daa:	d1e0      	bne.n	23f9d6e <pinAvailable+0x6>
  return true; // 'pin' is available
 23f9dac:	2001      	movs	r0, #1
 23f9dae:	e7df      	b.n	23f9d70 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23f9db0:	2801      	cmp	r0, #1
 23f9db2:	d809      	bhi.n	23f9dc8 <pinAvailable+0x60>
 23f9db4:	f000 f89a 	bl	23f9eec <_Z19__fetch_global_Wirev>
 23f9db8:	2100      	movs	r1, #0
 23f9dba:	7c00      	ldrb	r0, [r0, #16]
 23f9dbc:	f7fd f9ce 	bl	23f715c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23f9dc0:	f080 0001 	eor.w	r0, r0, #1
 23f9dc4:	b2c0      	uxtb	r0, r0
 23f9dc6:	e7d3      	b.n	23f9d70 <pinAvailable+0x8>
 23f9dc8:	3809      	subs	r0, #9
 23f9dca:	2801      	cmp	r0, #1
 23f9dcc:	d8ee      	bhi.n	23f9dac <pinAvailable+0x44>
 23f9dce:	f000 f8e7 	bl	23f9fa0 <_Z22__fetch_global_Serial1v>
 23f9dd2:	7c00      	ldrb	r0, [r0, #16]
 23f9dd4:	f7fd fb2e 	bl	23f7434 <hal_usart_is_enabled>
 23f9dd8:	e7f2      	b.n	23f9dc0 <pinAvailable+0x58>
 23f9dda:	bf00      	nop
 23f9ddc:	1006a238 	.word	0x1006a238
 23f9de0:	1006a23c 	.word	0x1006a23c

023f9de4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f9de4:	282c      	cmp	r0, #44	; 0x2c
{
 23f9de6:	b538      	push	{r3, r4, r5, lr}
 23f9de8:	4604      	mov	r4, r0
 23f9dea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f9dec:	d80a      	bhi.n	23f9e04 <pinMode+0x20>
 23f9dee:	29ff      	cmp	r1, #255	; 0xff
 23f9df0:	d008      	beq.n	23f9e04 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23f9df2:	f7ff ffb9 	bl	23f9d68 <pinAvailable>
 23f9df6:	b128      	cbz	r0, 23f9e04 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23f9df8:	4629      	mov	r1, r5
 23f9dfa:	4620      	mov	r0, r4
}
 23f9dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23f9e00:	f7fd b8cc 	b.w	23f6f9c <hal_gpio_mode>
}
 23f9e04:	bd38      	pop	{r3, r4, r5, pc}

023f9e06 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23f9e06:	b538      	push	{r3, r4, r5, lr}
 23f9e08:	4604      	mov	r4, r0
 23f9e0a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23f9e0c:	f7fd f8d4 	bl	23f6fb8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23f9e10:	28ff      	cmp	r0, #255	; 0xff
 23f9e12:	d010      	beq.n	23f9e36 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23f9e14:	2806      	cmp	r0, #6
 23f9e16:	d804      	bhi.n	23f9e22 <digitalWrite+0x1c>
 23f9e18:	234d      	movs	r3, #77	; 0x4d
 23f9e1a:	fa23 f000 	lsr.w	r0, r3, r0
 23f9e1e:	07c3      	lsls	r3, r0, #31
 23f9e20:	d409      	bmi.n	23f9e36 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23f9e22:	4620      	mov	r0, r4
 23f9e24:	f7ff ffa0 	bl	23f9d68 <pinAvailable>
 23f9e28:	b128      	cbz	r0, 23f9e36 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23f9e2a:	4629      	mov	r1, r5
 23f9e2c:	4620      	mov	r0, r4
}
 23f9e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23f9e32:	f7fd b8cf 	b.w	23f6fd4 <hal_gpio_write>
}
 23f9e36:	bd38      	pop	{r3, r4, r5, pc}

023f9e38 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23f9e38:	b510      	push	{r4, lr}
 23f9e3a:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23f9e3c:	f7fd f8bc 	bl	23f6fb8 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23f9e40:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23f9e42:	b2db      	uxtb	r3, r3
 23f9e44:	2b01      	cmp	r3, #1
 23f9e46:	d908      	bls.n	23f9e5a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23f9e48:	4620      	mov	r0, r4
 23f9e4a:	f7ff ff8d 	bl	23f9d68 <pinAvailable>
 23f9e4e:	b120      	cbz	r0, 23f9e5a <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23f9e50:	4620      	mov	r0, r4
}
 23f9e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23f9e56:	f7fd b8cb 	b.w	23f6ff0 <hal_gpio_read>
}
 23f9e5a:	2000      	movs	r0, #0
 23f9e5c:	bd10      	pop	{r4, pc}

023f9e5e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23f9e5e:	b510      	push	{r4, lr}
 23f9e60:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23f9e62:	f7ff ff81 	bl	23f9d68 <pinAvailable>
 23f9e66:	b150      	cbz	r0, 23f9e7e <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23f9e68:	2103      	movs	r1, #3
 23f9e6a:	4620      	mov	r0, r4
 23f9e6c:	f7fd f888 	bl	23f6f80 <hal_pin_validate_function>
 23f9e70:	2803      	cmp	r0, #3
 23f9e72:	d104      	bne.n	23f9e7e <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23f9e74:	4620      	mov	r0, r4
}
 23f9e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23f9e7a:	f7fd b8e3 	b.w	23f7044 <hal_adc_read>
}
 23f9e7e:	2000      	movs	r0, #0
 23f9e80:	bd10      	pop	{r4, pc}
	...

023f9e84 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23f9e84:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23f9e86:	4c08      	ldr	r4, [pc, #32]	; (23f9ea8 <_Z21__fetch_global_EEPROMv+0x24>)
 23f9e88:	e8d4 3f8f 	ldab	r3, [r4]
 23f9e8c:	07db      	lsls	r3, r3, #31
 23f9e8e:	d408      	bmi.n	23f9ea2 <_Z21__fetch_global_EEPROMv+0x1e>
 23f9e90:	4620      	mov	r0, r4
 23f9e92:	f7fd fedb 	bl	23f7c4c <__cxa_guard_acquire>
 23f9e96:	b120      	cbz	r0, 23f9ea2 <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23f9e98:	f7fc fff4 	bl	23f6e84 <HAL_EEPROM_Init>
 23f9e9c:	4620      	mov	r0, r4
 23f9e9e:	f7fd fee3 	bl	23f7c68 <__cxa_guard_release>
	return eeprom;
}
 23f9ea2:	4802      	ldr	r0, [pc, #8]	; (23f9eac <_Z21__fetch_global_EEPROMv+0x28>)
 23f9ea4:	bd10      	pop	{r4, pc}
 23f9ea6:	bf00      	nop
 23f9ea8:	1007afac 	.word	0x1007afac
 23f9eac:	1007afb0 	.word	0x1007afb0

023f9eb0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9eb0:	4770      	bx	lr
	...

023f9eb4 <_Z17acquireWireBufferv>:
{
 23f9eb4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23f9eb6:	4b0b      	ldr	r3, [pc, #44]	; (23f9ee4 <_Z17acquireWireBufferv+0x30>)
{
 23f9eb8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23f9eba:	6003      	str	r3, [r0, #0]
 23f9ebc:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9ebe:	490a      	ldr	r1, [pc, #40]	; (23f9ee8 <_Z17acquireWireBufferv+0x34>)
	hal_i2c_config_t config = {
 23f9ec0:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9ec2:	f44f 7000 	mov.w	r0, #512	; 0x200
 23f9ec6:	f000 f8c5 	bl	23fa054 <_ZnajRKSt9nothrow_t>
	};
 23f9eca:	f44f 7500 	mov.w	r5, #512	; 0x200
 23f9ece:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9ed0:	4905      	ldr	r1, [pc, #20]	; (23f9ee8 <_Z17acquireWireBufferv+0x34>)
 23f9ed2:	4628      	mov	r0, r5
	};
 23f9ed4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9ed6:	f000 f8bd 	bl	23fa054 <_ZnajRKSt9nothrow_t>
	};
 23f9eda:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23f9ede:	4620      	mov	r0, r4
 23f9ee0:	bd38      	pop	{r3, r4, r5, pc}
 23f9ee2:	bf00      	nop
 23f9ee4:	00010018 	.word	0x00010018
 23f9ee8:	023ffb30 	.word	0x023ffb30

023f9eec <_Z19__fetch_global_Wirev>:
{
 23f9eec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9eee:	4d0e      	ldr	r5, [pc, #56]	; (23f9f28 <_Z19__fetch_global_Wirev+0x3c>)
{
 23f9ef0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9ef2:	e8d5 1f8f 	ldab	r1, [r5]
 23f9ef6:	f011 0401 	ands.w	r4, r1, #1
 23f9efa:	d111      	bne.n	23f9f20 <_Z19__fetch_global_Wirev+0x34>
 23f9efc:	4628      	mov	r0, r5
 23f9efe:	f7fd fea5 	bl	23f7c4c <__cxa_guard_acquire>
 23f9f02:	b168      	cbz	r0, 23f9f20 <_Z19__fetch_global_Wirev+0x34>
 23f9f04:	4668      	mov	r0, sp
 23f9f06:	f7ff ffd5 	bl	23f9eb4 <_Z17acquireWireBufferv>
 23f9f0a:	466a      	mov	r2, sp
 23f9f0c:	4621      	mov	r1, r4
 23f9f0e:	4807      	ldr	r0, [pc, #28]	; (23f9f2c <_Z19__fetch_global_Wirev+0x40>)
 23f9f10:	f7fe fc5a 	bl	23f87c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23f9f14:	4628      	mov	r0, r5
 23f9f16:	f7fd fea7 	bl	23f7c68 <__cxa_guard_release>
 23f9f1a:	4805      	ldr	r0, [pc, #20]	; (23f9f30 <_Z19__fetch_global_Wirev+0x44>)
 23f9f1c:	f002 fd76 	bl	23fca0c <atexit>
	return wire;
}
 23f9f20:	4802      	ldr	r0, [pc, #8]	; (23f9f2c <_Z19__fetch_global_Wirev+0x40>)
 23f9f22:	b007      	add	sp, #28
 23f9f24:	bd30      	pop	{r4, r5, pc}
 23f9f26:	bf00      	nop
 23f9f28:	1007afb4 	.word	0x1007afb4
 23f9f2c:	1007afb8 	.word	0x1007afb8
 23f9f30:	023f9eb1 	.word	0x023f9eb1

023f9f34 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f9f34:	4770      	bx	lr

023f9f36 <__tcf_1>:
 23f9f36:	4770      	bx	lr

023f9f38 <_Z20acquireSerial1Bufferv>:
{
 23f9f38:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23f9f3a:	2514      	movs	r5, #20
{
 23f9f3c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23f9f3e:	462a      	mov	r2, r5
 23f9f40:	2100      	movs	r1, #0
 23f9f42:	f002 fdb0 	bl	23fcaa6 <memset>
 23f9f46:	8025      	strh	r5, [r4, #0]
 23f9f48:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9f4a:	4907      	ldr	r1, [pc, #28]	; (23f9f68 <_Z20acquireSerial1Bufferv+0x30>)
 23f9f4c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23f9f4e:	8125      	strh	r5, [r4, #8]
 23f9f50:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9f52:	f000 f87f 	bl	23fa054 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9f56:	4904      	ldr	r1, [pc, #16]	; (23f9f68 <_Z20acquireSerial1Bufferv+0x30>)
    };
 23f9f58:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9f5a:	4628      	mov	r0, r5
 23f9f5c:	f000 f87a 	bl	23fa054 <_ZnajRKSt9nothrow_t>
    };
 23f9f60:	60e0      	str	r0, [r4, #12]
}
 23f9f62:	4620      	mov	r0, r4
 23f9f64:	bd38      	pop	{r3, r4, r5, pc}
 23f9f66:	bf00      	nop
 23f9f68:	023ffb30 	.word	0x023ffb30

023f9f6c <_Z20acquireSerial2Bufferv>:
 23f9f6c:	b538      	push	{r3, r4, r5, lr}
 23f9f6e:	2514      	movs	r5, #20
 23f9f70:	4604      	mov	r4, r0
 23f9f72:	462a      	mov	r2, r5
 23f9f74:	2100      	movs	r1, #0
 23f9f76:	f002 fd96 	bl	23fcaa6 <memset>
 23f9f7a:	8025      	strh	r5, [r4, #0]
 23f9f7c:	2540      	movs	r5, #64	; 0x40
 23f9f7e:	4907      	ldr	r1, [pc, #28]	; (23f9f9c <_Z20acquireSerial2Bufferv+0x30>)
 23f9f80:	4628      	mov	r0, r5
 23f9f82:	8125      	strh	r5, [r4, #8]
 23f9f84:	8225      	strh	r5, [r4, #16]
 23f9f86:	f000 f865 	bl	23fa054 <_ZnajRKSt9nothrow_t>
 23f9f8a:	4904      	ldr	r1, [pc, #16]	; (23f9f9c <_Z20acquireSerial2Bufferv+0x30>)
 23f9f8c:	6060      	str	r0, [r4, #4]
 23f9f8e:	4628      	mov	r0, r5
 23f9f90:	f000 f860 	bl	23fa054 <_ZnajRKSt9nothrow_t>
 23f9f94:	60e0      	str	r0, [r4, #12]
 23f9f96:	4620      	mov	r0, r4
 23f9f98:	bd38      	pop	{r3, r4, r5, pc}
 23f9f9a:	bf00      	nop
 23f9f9c:	023ffb30 	.word	0x023ffb30

023f9fa0 <_Z22__fetch_global_Serial1v>:
{
 23f9fa0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f9fa2:	4d0e      	ldr	r5, [pc, #56]	; (23f9fdc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23f9fa4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f9fa6:	e8d5 1f8f 	ldab	r1, [r5]
 23f9faa:	f011 0401 	ands.w	r4, r1, #1
 23f9fae:	d111      	bne.n	23f9fd4 <_Z22__fetch_global_Serial1v+0x34>
 23f9fb0:	4628      	mov	r0, r5
 23f9fb2:	f7fd fe4b 	bl	23f7c4c <__cxa_guard_acquire>
 23f9fb6:	b168      	cbz	r0, 23f9fd4 <_Z22__fetch_global_Serial1v+0x34>
 23f9fb8:	a801      	add	r0, sp, #4
 23f9fba:	f7ff ffbd 	bl	23f9f38 <_Z20acquireSerial1Bufferv>
 23f9fbe:	4621      	mov	r1, r4
 23f9fc0:	aa01      	add	r2, sp, #4
 23f9fc2:	4807      	ldr	r0, [pc, #28]	; (23f9fe0 <_Z22__fetch_global_Serial1v+0x40>)
 23f9fc4:	f7ff fd1a 	bl	23f99fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f9fc8:	4628      	mov	r0, r5
 23f9fca:	f7fd fe4d 	bl	23f7c68 <__cxa_guard_release>
 23f9fce:	4805      	ldr	r0, [pc, #20]	; (23f9fe4 <_Z22__fetch_global_Serial1v+0x44>)
 23f9fd0:	f002 fd1c 	bl	23fca0c <atexit>
    return serial1;
}
 23f9fd4:	4802      	ldr	r0, [pc, #8]	; (23f9fe0 <_Z22__fetch_global_Serial1v+0x40>)
 23f9fd6:	b007      	add	sp, #28
 23f9fd8:	bd30      	pop	{r4, r5, pc}
 23f9fda:	bf00      	nop
 23f9fdc:	1007afcc 	.word	0x1007afcc
 23f9fe0:	1007afd4 	.word	0x1007afd4
 23f9fe4:	023f9f35 	.word	0x023f9f35

023f9fe8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23f9fe8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9fea:	4c0d      	ldr	r4, [pc, #52]	; (23fa020 <_Z22__fetch_global_Serial2v+0x38>)
{
 23f9fec:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9fee:	e8d4 3f8f 	ldab	r3, [r4]
 23f9ff2:	07db      	lsls	r3, r3, #31
 23f9ff4:	d411      	bmi.n	23fa01a <_Z22__fetch_global_Serial2v+0x32>
 23f9ff6:	4620      	mov	r0, r4
 23f9ff8:	f7fd fe28 	bl	23f7c4c <__cxa_guard_acquire>
 23f9ffc:	b168      	cbz	r0, 23fa01a <_Z22__fetch_global_Serial2v+0x32>
 23f9ffe:	a801      	add	r0, sp, #4
 23fa000:	f7ff ffb4 	bl	23f9f6c <_Z20acquireSerial2Bufferv>
 23fa004:	2101      	movs	r1, #1
 23fa006:	aa01      	add	r2, sp, #4
 23fa008:	4806      	ldr	r0, [pc, #24]	; (23fa024 <_Z22__fetch_global_Serial2v+0x3c>)
 23fa00a:	f7ff fcf7 	bl	23f99fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fa00e:	4620      	mov	r0, r4
 23fa010:	f7fd fe2a 	bl	23f7c68 <__cxa_guard_release>
 23fa014:	4804      	ldr	r0, [pc, #16]	; (23fa028 <_Z22__fetch_global_Serial2v+0x40>)
 23fa016:	f002 fcf9 	bl	23fca0c <atexit>
	return serial2;
}
 23fa01a:	4802      	ldr	r0, [pc, #8]	; (23fa024 <_Z22__fetch_global_Serial2v+0x3c>)
 23fa01c:	b006      	add	sp, #24
 23fa01e:	bd10      	pop	{r4, pc}
 23fa020:	1007afd0 	.word	0x1007afd0
 23fa024:	1007afe8 	.word	0x1007afe8
 23fa028:	023f9f37 	.word	0x023f9f37

023fa02c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fa02c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fa02e:	f7ff ffdb 	bl	23f9fe8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fa032:	4b07      	ldr	r3, [pc, #28]	; (23fa050 <_Z15serialEventRun2v+0x24>)
 23fa034:	4604      	mov	r4, r0
 23fa036:	b153      	cbz	r3, 23fa04e <_Z15serialEventRun2v+0x22>
 23fa038:	f7ff fcf4 	bl	23f9a24 <_ZN11USARTSerial9isEnabledEv>
 23fa03c:	b138      	cbz	r0, 23fa04e <_Z15serialEventRun2v+0x22>
 23fa03e:	6823      	ldr	r3, [r4, #0]
 23fa040:	4620      	mov	r0, r4
 23fa042:	691b      	ldr	r3, [r3, #16]
 23fa044:	4798      	blx	r3
 23fa046:	2800      	cmp	r0, #0
 23fa048:	dd01      	ble.n	23fa04e <_Z15serialEventRun2v+0x22>
        handler();
 23fa04a:	e000      	b.n	23fa04e <_Z15serialEventRun2v+0x22>
 23fa04c:	bf00      	nop
}
 23fa04e:	bd10      	pop	{r4, pc}
 23fa050:	00000000 	.word	0x00000000

023fa054 <_ZnajRKSt9nothrow_t>:
 23fa054:	f7eb b8db 	b.w	23e520e <_Znaj>

023fa058 <_ZSt25__throw_bad_function_callv>:
 23fa058:	b508      	push	{r3, lr}
 23fa05a:	f7fd fd79 	bl	23f7b50 <abort>
	...

023fa060 <atan>:
 23fa060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa064:	ec55 4b10 	vmov	r4, r5, d0
 23fa068:	4bc7      	ldr	r3, [pc, #796]	; (23fa388 <atan+0x328>)
 23fa06a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23fa06e:	46aa      	mov	sl, r5
 23fa070:	429e      	cmp	r6, r3
 23fa072:	dd16      	ble.n	23fa0a2 <atan+0x42>
 23fa074:	4bc5      	ldr	r3, [pc, #788]	; (23fa38c <atan+0x32c>)
 23fa076:	429e      	cmp	r6, r3
 23fa078:	dc01      	bgt.n	23fa07e <atan+0x1e>
 23fa07a:	d10a      	bne.n	23fa092 <atan+0x32>
 23fa07c:	b14c      	cbz	r4, 23fa092 <atan+0x32>
 23fa07e:	4622      	mov	r2, r4
 23fa080:	462b      	mov	r3, r5
 23fa082:	4620      	mov	r0, r4
 23fa084:	4629      	mov	r1, r5
 23fa086:	f7ea f8a5 	bl	23e41d4 <__adddf3>
 23fa08a:	ec41 0b10 	vmov	d0, r0, r1
 23fa08e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa092:	f1ba 0f00 	cmp.w	sl, #0
 23fa096:	f340 80bf 	ble.w	23fa218 <atan+0x1b8>
 23fa09a:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23fa318 <atan+0x2b8>
 23fa09e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa0a2:	4bbb      	ldr	r3, [pc, #748]	; (23fa390 <atan+0x330>)
 23fa0a4:	429e      	cmp	r6, r3
 23fa0a6:	f300 80ba 	bgt.w	23fa21e <atan+0x1be>
 23fa0aa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23fa0ae:	429e      	cmp	r6, r3
 23fa0b0:	f340 80a0 	ble.w	23fa1f4 <atan+0x194>
 23fa0b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23fa0b8:	4622      	mov	r2, r4
 23fa0ba:	462b      	mov	r3, r5
 23fa0bc:	4620      	mov	r0, r4
 23fa0be:	4629      	mov	r1, r5
 23fa0c0:	f7ea fa3e 	bl	23e4540 <__aeabi_dmul>
 23fa0c4:	4602      	mov	r2, r0
 23fa0c6:	460b      	mov	r3, r1
 23fa0c8:	4680      	mov	r8, r0
 23fa0ca:	4689      	mov	r9, r1
 23fa0cc:	f7ea fa38 	bl	23e4540 <__aeabi_dmul>
 23fa0d0:	4606      	mov	r6, r0
 23fa0d2:	460f      	mov	r7, r1
 23fa0d4:	a392      	add	r3, pc, #584	; (adr r3, 23fa320 <atan+0x2c0>)
 23fa0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa0da:	f7ea fa31 	bl	23e4540 <__aeabi_dmul>
 23fa0de:	a392      	add	r3, pc, #584	; (adr r3, 23fa328 <atan+0x2c8>)
 23fa0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa0e4:	f7ea f876 	bl	23e41d4 <__adddf3>
 23fa0e8:	4632      	mov	r2, r6
 23fa0ea:	463b      	mov	r3, r7
 23fa0ec:	f7ea fa28 	bl	23e4540 <__aeabi_dmul>
 23fa0f0:	a38f      	add	r3, pc, #572	; (adr r3, 23fa330 <atan+0x2d0>)
 23fa0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa0f6:	f7ea f86d 	bl	23e41d4 <__adddf3>
 23fa0fa:	4632      	mov	r2, r6
 23fa0fc:	463b      	mov	r3, r7
 23fa0fe:	f7ea fa1f 	bl	23e4540 <__aeabi_dmul>
 23fa102:	a38d      	add	r3, pc, #564	; (adr r3, 23fa338 <atan+0x2d8>)
 23fa104:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa108:	f7ea f864 	bl	23e41d4 <__adddf3>
 23fa10c:	4632      	mov	r2, r6
 23fa10e:	463b      	mov	r3, r7
 23fa110:	f7ea fa16 	bl	23e4540 <__aeabi_dmul>
 23fa114:	a38a      	add	r3, pc, #552	; (adr r3, 23fa340 <atan+0x2e0>)
 23fa116:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa11a:	f7ea f85b 	bl	23e41d4 <__adddf3>
 23fa11e:	4632      	mov	r2, r6
 23fa120:	463b      	mov	r3, r7
 23fa122:	f7ea fa0d 	bl	23e4540 <__aeabi_dmul>
 23fa126:	a388      	add	r3, pc, #544	; (adr r3, 23fa348 <atan+0x2e8>)
 23fa128:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa12c:	f7ea f852 	bl	23e41d4 <__adddf3>
 23fa130:	4642      	mov	r2, r8
 23fa132:	464b      	mov	r3, r9
 23fa134:	f7ea fa04 	bl	23e4540 <__aeabi_dmul>
 23fa138:	4680      	mov	r8, r0
 23fa13a:	4689      	mov	r9, r1
 23fa13c:	4630      	mov	r0, r6
 23fa13e:	4639      	mov	r1, r7
 23fa140:	a383      	add	r3, pc, #524	; (adr r3, 23fa350 <atan+0x2f0>)
 23fa142:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa146:	f7ea f9fb 	bl	23e4540 <__aeabi_dmul>
 23fa14a:	a383      	add	r3, pc, #524	; (adr r3, 23fa358 <atan+0x2f8>)
 23fa14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa150:	f7ea f83e 	bl	23e41d0 <__aeabi_dsub>
 23fa154:	4632      	mov	r2, r6
 23fa156:	463b      	mov	r3, r7
 23fa158:	f7ea f9f2 	bl	23e4540 <__aeabi_dmul>
 23fa15c:	a380      	add	r3, pc, #512	; (adr r3, 23fa360 <atan+0x300>)
 23fa15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa162:	f7ea f835 	bl	23e41d0 <__aeabi_dsub>
 23fa166:	4632      	mov	r2, r6
 23fa168:	463b      	mov	r3, r7
 23fa16a:	f7ea f9e9 	bl	23e4540 <__aeabi_dmul>
 23fa16e:	a37e      	add	r3, pc, #504	; (adr r3, 23fa368 <atan+0x308>)
 23fa170:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa174:	f7ea f82c 	bl	23e41d0 <__aeabi_dsub>
 23fa178:	4632      	mov	r2, r6
 23fa17a:	463b      	mov	r3, r7
 23fa17c:	f7ea f9e0 	bl	23e4540 <__aeabi_dmul>
 23fa180:	a37b      	add	r3, pc, #492	; (adr r3, 23fa370 <atan+0x310>)
 23fa182:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa186:	f7ea f823 	bl	23e41d0 <__aeabi_dsub>
 23fa18a:	4632      	mov	r2, r6
 23fa18c:	463b      	mov	r3, r7
 23fa18e:	f7ea f9d7 	bl	23e4540 <__aeabi_dmul>
 23fa192:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23fa196:	4602      	mov	r2, r0
 23fa198:	460b      	mov	r3, r1
 23fa19a:	4640      	mov	r0, r8
 23fa19c:	4649      	mov	r1, r9
 23fa19e:	d063      	beq.n	23fa268 <atan+0x208>
 23fa1a0:	4e7c      	ldr	r6, [pc, #496]	; (23fa394 <atan+0x334>)
 23fa1a2:	f7ea f817 	bl	23e41d4 <__adddf3>
 23fa1a6:	4622      	mov	r2, r4
 23fa1a8:	462b      	mov	r3, r5
 23fa1aa:	f7ea f9c9 	bl	23e4540 <__aeabi_dmul>
 23fa1ae:	4b7a      	ldr	r3, [pc, #488]	; (23fa398 <atan+0x338>)
 23fa1b0:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23fa1b4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23fa1b8:	449b      	add	fp, r3
 23fa1ba:	e9db 2300 	ldrd	r2, r3, [fp]
 23fa1be:	f7ea f807 	bl	23e41d0 <__aeabi_dsub>
 23fa1c2:	4622      	mov	r2, r4
 23fa1c4:	462b      	mov	r3, r5
 23fa1c6:	f7ea f803 	bl	23e41d0 <__aeabi_dsub>
 23fa1ca:	4602      	mov	r2, r0
 23fa1cc:	460b      	mov	r3, r1
 23fa1ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 23fa1d2:	f7e9 fffd 	bl	23e41d0 <__aeabi_dsub>
 23fa1d6:	f1ba 0f00 	cmp.w	sl, #0
 23fa1da:	ec41 0b10 	vmov	d0, r0, r1
 23fa1de:	f6bf af56 	bge.w	23fa08e <atan+0x2e>
 23fa1e2:	ee10 1a90 	vmov	r1, s1
 23fa1e6:	4602      	mov	r2, r0
 23fa1e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa1ec:	ec43 2b10 	vmov	d0, r2, r3
 23fa1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa1f4:	a360      	add	r3, pc, #384	; (adr r3, 23fa378 <atan+0x318>)
 23fa1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa1fa:	ee10 0a10 	vmov	r0, s0
 23fa1fe:	4629      	mov	r1, r5
 23fa200:	f7e9 ffe8 	bl	23e41d4 <__adddf3>
 23fa204:	2200      	movs	r2, #0
 23fa206:	4b65      	ldr	r3, [pc, #404]	; (23fa39c <atan+0x33c>)
 23fa208:	f7ea fc2a 	bl	23e4a60 <__aeabi_dcmpgt>
 23fa20c:	2800      	cmp	r0, #0
 23fa20e:	f43f af51 	beq.w	23fa0b4 <atan+0x54>
 23fa212:	ec45 4b10 	vmov	d0, r4, r5
 23fa216:	e73a      	b.n	23fa08e <atan+0x2e>
 23fa218:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23fa380 <atan+0x320>
 23fa21c:	e737      	b.n	23fa08e <atan+0x2e>
 23fa21e:	f000 f91b 	bl	23fa458 <fabs>
 23fa222:	4b5f      	ldr	r3, [pc, #380]	; (23fa3a0 <atan+0x340>)
 23fa224:	429e      	cmp	r6, r3
 23fa226:	ec55 4b10 	vmov	r4, r5, d0
 23fa22a:	dc2d      	bgt.n	23fa288 <atan+0x228>
 23fa22c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23fa230:	429e      	cmp	r6, r3
 23fa232:	dd58      	ble.n	23fa2e6 <atan+0x286>
 23fa234:	2200      	movs	r2, #0
 23fa236:	4b59      	ldr	r3, [pc, #356]	; (23fa39c <atan+0x33c>)
 23fa238:	ee10 0a10 	vmov	r0, s0
 23fa23c:	4629      	mov	r1, r5
 23fa23e:	f7e9 ffc7 	bl	23e41d0 <__aeabi_dsub>
 23fa242:	f04f 0b01 	mov.w	fp, #1
 23fa246:	4606      	mov	r6, r0
 23fa248:	460f      	mov	r7, r1
 23fa24a:	4620      	mov	r0, r4
 23fa24c:	4629      	mov	r1, r5
 23fa24e:	2200      	movs	r2, #0
 23fa250:	4b52      	ldr	r3, [pc, #328]	; (23fa39c <atan+0x33c>)
 23fa252:	f7e9 ffbf 	bl	23e41d4 <__adddf3>
 23fa256:	4602      	mov	r2, r0
 23fa258:	460b      	mov	r3, r1
 23fa25a:	4630      	mov	r0, r6
 23fa25c:	4639      	mov	r1, r7
 23fa25e:	f7ea fa99 	bl	23e4794 <__aeabi_ddiv>
 23fa262:	4604      	mov	r4, r0
 23fa264:	460d      	mov	r5, r1
 23fa266:	e727      	b.n	23fa0b8 <atan+0x58>
 23fa268:	f7e9 ffb4 	bl	23e41d4 <__adddf3>
 23fa26c:	4622      	mov	r2, r4
 23fa26e:	462b      	mov	r3, r5
 23fa270:	f7ea f966 	bl	23e4540 <__aeabi_dmul>
 23fa274:	4602      	mov	r2, r0
 23fa276:	460b      	mov	r3, r1
 23fa278:	4620      	mov	r0, r4
 23fa27a:	4629      	mov	r1, r5
 23fa27c:	f7e9 ffa8 	bl	23e41d0 <__aeabi_dsub>
 23fa280:	ec41 0b10 	vmov	d0, r0, r1
 23fa284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa288:	4b46      	ldr	r3, [pc, #280]	; (23fa3a4 <atan+0x344>)
 23fa28a:	429e      	cmp	r6, r3
 23fa28c:	da1f      	bge.n	23fa2ce <atan+0x26e>
 23fa28e:	ee10 0a10 	vmov	r0, s0
 23fa292:	2200      	movs	r2, #0
 23fa294:	4b44      	ldr	r3, [pc, #272]	; (23fa3a8 <atan+0x348>)
 23fa296:	4629      	mov	r1, r5
 23fa298:	f7e9 ff9a 	bl	23e41d0 <__aeabi_dsub>
 23fa29c:	4602      	mov	r2, r0
 23fa29e:	460b      	mov	r3, r1
 23fa2a0:	4620      	mov	r0, r4
 23fa2a2:	4629      	mov	r1, r5
 23fa2a4:	4614      	mov	r4, r2
 23fa2a6:	461d      	mov	r5, r3
 23fa2a8:	2200      	movs	r2, #0
 23fa2aa:	4b3f      	ldr	r3, [pc, #252]	; (23fa3a8 <atan+0x348>)
 23fa2ac:	f04f 0b02 	mov.w	fp, #2
 23fa2b0:	f7ea f946 	bl	23e4540 <__aeabi_dmul>
 23fa2b4:	2200      	movs	r2, #0
 23fa2b6:	4b39      	ldr	r3, [pc, #228]	; (23fa39c <atan+0x33c>)
 23fa2b8:	f7e9 ff8c 	bl	23e41d4 <__adddf3>
 23fa2bc:	4602      	mov	r2, r0
 23fa2be:	460b      	mov	r3, r1
 23fa2c0:	4620      	mov	r0, r4
 23fa2c2:	4629      	mov	r1, r5
 23fa2c4:	f7ea fa66 	bl	23e4794 <__aeabi_ddiv>
 23fa2c8:	4604      	mov	r4, r0
 23fa2ca:	460d      	mov	r5, r1
 23fa2cc:	e6f4      	b.n	23fa0b8 <atan+0x58>
 23fa2ce:	462b      	mov	r3, r5
 23fa2d0:	2000      	movs	r0, #0
 23fa2d2:	4936      	ldr	r1, [pc, #216]	; (23fa3ac <atan+0x34c>)
 23fa2d4:	ee10 2a10 	vmov	r2, s0
 23fa2d8:	f7ea fa5c 	bl	23e4794 <__aeabi_ddiv>
 23fa2dc:	f04f 0b03 	mov.w	fp, #3
 23fa2e0:	4604      	mov	r4, r0
 23fa2e2:	460d      	mov	r5, r1
 23fa2e4:	e6e8      	b.n	23fa0b8 <atan+0x58>
 23fa2e6:	ee10 2a10 	vmov	r2, s0
 23fa2ea:	462b      	mov	r3, r5
 23fa2ec:	ee10 0a10 	vmov	r0, s0
 23fa2f0:	4629      	mov	r1, r5
 23fa2f2:	f7e9 ff6f 	bl	23e41d4 <__adddf3>
 23fa2f6:	2200      	movs	r2, #0
 23fa2f8:	4b28      	ldr	r3, [pc, #160]	; (23fa39c <atan+0x33c>)
 23fa2fa:	f04f 0b00 	mov.w	fp, #0
 23fa2fe:	f7e9 ff67 	bl	23e41d0 <__aeabi_dsub>
 23fa302:	2200      	movs	r2, #0
 23fa304:	4606      	mov	r6, r0
 23fa306:	460f      	mov	r7, r1
 23fa308:	4620      	mov	r0, r4
 23fa30a:	4629      	mov	r1, r5
 23fa30c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fa310:	e79f      	b.n	23fa252 <atan+0x1f2>
 23fa312:	bf00      	nop
 23fa314:	f3af 8000 	nop.w
 23fa318:	54442d18 	.word	0x54442d18
 23fa31c:	3ff921fb 	.word	0x3ff921fb
 23fa320:	e322da11 	.word	0xe322da11
 23fa324:	3f90ad3a 	.word	0x3f90ad3a
 23fa328:	24760deb 	.word	0x24760deb
 23fa32c:	3fa97b4b 	.word	0x3fa97b4b
 23fa330:	a0d03d51 	.word	0xa0d03d51
 23fa334:	3fb10d66 	.word	0x3fb10d66
 23fa338:	c54c206e 	.word	0xc54c206e
 23fa33c:	3fb745cd 	.word	0x3fb745cd
 23fa340:	920083ff 	.word	0x920083ff
 23fa344:	3fc24924 	.word	0x3fc24924
 23fa348:	5555550d 	.word	0x5555550d
 23fa34c:	3fd55555 	.word	0x3fd55555
 23fa350:	2c6a6c2f 	.word	0x2c6a6c2f
 23fa354:	bfa2b444 	.word	0xbfa2b444
 23fa358:	52defd9a 	.word	0x52defd9a
 23fa35c:	3fadde2d 	.word	0x3fadde2d
 23fa360:	af749a6d 	.word	0xaf749a6d
 23fa364:	3fb3b0f2 	.word	0x3fb3b0f2
 23fa368:	fe231671 	.word	0xfe231671
 23fa36c:	3fbc71c6 	.word	0x3fbc71c6
 23fa370:	9998ebc4 	.word	0x9998ebc4
 23fa374:	3fc99999 	.word	0x3fc99999
 23fa378:	8800759c 	.word	0x8800759c
 23fa37c:	7e37e43c 	.word	0x7e37e43c
 23fa380:	54442d18 	.word	0x54442d18
 23fa384:	bff921fb 	.word	0xbff921fb
 23fa388:	440fffff 	.word	0x440fffff
 23fa38c:	7ff00000 	.word	0x7ff00000
 23fa390:	3fdbffff 	.word	0x3fdbffff
 23fa394:	023ffb38 	.word	0x023ffb38
 23fa398:	023ffb58 	.word	0x023ffb58
 23fa39c:	3ff00000 	.word	0x3ff00000
 23fa3a0:	3ff2ffff 	.word	0x3ff2ffff
 23fa3a4:	40038000 	.word	0x40038000
 23fa3a8:	3ff80000 	.word	0x3ff80000
 23fa3ac:	bff00000 	.word	0xbff00000

023fa3b0 <cos>:
 23fa3b0:	ec51 0b10 	vmov	r0, r1, d0
 23fa3b4:	4a26      	ldr	r2, [pc, #152]	; (23fa450 <cos+0xa0>)
 23fa3b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa3ba:	4293      	cmp	r3, r2
 23fa3bc:	dd20      	ble.n	23fa400 <cos+0x50>
 23fa3be:	4a25      	ldr	r2, [pc, #148]	; (23fa454 <cos+0xa4>)
 23fa3c0:	4293      	cmp	r3, r2
 23fa3c2:	b500      	push	{lr}
 23fa3c4:	b085      	sub	sp, #20
 23fa3c6:	dd09      	ble.n	23fa3dc <cos+0x2c>
 23fa3c8:	ee10 2a10 	vmov	r2, s0
 23fa3cc:	460b      	mov	r3, r1
 23fa3ce:	f7e9 feff 	bl	23e41d0 <__aeabi_dsub>
 23fa3d2:	ec41 0b10 	vmov	d0, r0, r1
 23fa3d6:	b005      	add	sp, #20
 23fa3d8:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa3dc:	4668      	mov	r0, sp
 23fa3de:	f001 f8a7 	bl	23fb530 <__ieee754_rem_pio2>
 23fa3e2:	f000 0003 	and.w	r0, r0, #3
 23fa3e6:	2801      	cmp	r0, #1
 23fa3e8:	d00e      	beq.n	23fa408 <cos+0x58>
 23fa3ea:	2802      	cmp	r0, #2
 23fa3ec:	d022      	beq.n	23fa434 <cos+0x84>
 23fa3ee:	b1d0      	cbz	r0, 23fa426 <cos+0x76>
 23fa3f0:	2001      	movs	r0, #1
 23fa3f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa3f6:	ed9d 0b00 	vldr	d0, [sp]
 23fa3fa:	f002 f8e5 	bl	23fc5c8 <__kernel_sin>
 23fa3fe:	e7ea      	b.n	23fa3d6 <cos+0x26>
 23fa400:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23fa448 <cos+0x98>
 23fa404:	f001 bb7c 	b.w	23fbb00 <__kernel_cos>
 23fa408:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa40c:	ed9d 0b00 	vldr	d0, [sp]
 23fa410:	f002 f8da 	bl	23fc5c8 <__kernel_sin>
 23fa414:	ec53 2b10 	vmov	r2, r3, d0
 23fa418:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23fa41c:	ee00 3a90 	vmov	s1, r3
 23fa420:	b005      	add	sp, #20
 23fa422:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa426:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa42a:	ed9d 0b00 	vldr	d0, [sp]
 23fa42e:	f001 fb67 	bl	23fbb00 <__kernel_cos>
 23fa432:	e7d0      	b.n	23fa3d6 <cos+0x26>
 23fa434:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa438:	ed9d 0b00 	vldr	d0, [sp]
 23fa43c:	f001 fb60 	bl	23fbb00 <__kernel_cos>
 23fa440:	e7e8      	b.n	23fa414 <cos+0x64>
 23fa442:	bf00      	nop
 23fa444:	f3af 8000 	nop.w
	...
 23fa450:	3fe921fb 	.word	0x3fe921fb
 23fa454:	7fefffff 	.word	0x7fefffff

023fa458 <fabs>:
 23fa458:	ec51 0b10 	vmov	r0, r1, d0
 23fa45c:	ee10 2a10 	vmov	r2, s0
 23fa460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa464:	ec43 2b10 	vmov	d0, r2, r3
 23fa468:	4770      	bx	lr
 23fa46a:	bf00      	nop
 23fa46c:	0000      	movs	r0, r0
	...

023fa470 <scalbn>:
 23fa470:	b538      	push	{r3, r4, r5, lr}
 23fa472:	ec53 2b10 	vmov	r2, r3, d0
 23fa476:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fa47a:	469c      	mov	ip, r3
 23fa47c:	4604      	mov	r4, r0
 23fa47e:	bb89      	cbnz	r1, 23fa4e4 <scalbn+0x74>
 23fa480:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fa484:	ee10 1a10 	vmov	r1, s0
 23fa488:	ea5c 0101 	orrs.w	r1, ip, r1
 23fa48c:	d029      	beq.n	23fa4e2 <scalbn+0x72>
 23fa48e:	4d3e      	ldr	r5, [pc, #248]	; (23fa588 <scalbn+0x118>)
 23fa490:	4619      	mov	r1, r3
 23fa492:	2200      	movs	r2, #0
 23fa494:	4b3d      	ldr	r3, [pc, #244]	; (23fa58c <scalbn+0x11c>)
 23fa496:	ee10 0a10 	vmov	r0, s0
 23fa49a:	f7ea f851 	bl	23e4540 <__aeabi_dmul>
 23fa49e:	42ac      	cmp	r4, r5
 23fa4a0:	4602      	mov	r2, r0
 23fa4a2:	460b      	mov	r3, r1
 23fa4a4:	db16      	blt.n	23fa4d4 <scalbn+0x64>
 23fa4a6:	468c      	mov	ip, r1
 23fa4a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fa4ac:	3936      	subs	r1, #54	; 0x36
 23fa4ae:	4421      	add	r1, r4
 23fa4b0:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fa4b4:	4281      	cmp	r1, r0
 23fa4b6:	dc21      	bgt.n	23fa4fc <scalbn+0x8c>
 23fa4b8:	2900      	cmp	r1, #0
 23fa4ba:	dc47      	bgt.n	23fa54c <scalbn+0xdc>
 23fa4bc:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fa4c0:	da34      	bge.n	23fa52c <scalbn+0xbc>
 23fa4c2:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fa4c6:	428c      	cmp	r4, r1
 23fa4c8:	dc18      	bgt.n	23fa4fc <scalbn+0x8c>
 23fa4ca:	2b00      	cmp	r3, #0
 23fa4cc:	a126      	add	r1, pc, #152	; (adr r1, 23fa568 <scalbn+0xf8>)
 23fa4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa4d2:	db43      	blt.n	23fa55c <scalbn+0xec>
 23fa4d4:	a324      	add	r3, pc, #144	; (adr r3, 23fa568 <scalbn+0xf8>)
 23fa4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa4da:	f7ea f831 	bl	23e4540 <__aeabi_dmul>
 23fa4de:	ec41 0b10 	vmov	d0, r0, r1
 23fa4e2:	bd38      	pop	{r3, r4, r5, pc}
 23fa4e4:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fa4e8:	4571      	cmp	r1, lr
 23fa4ea:	d1e0      	bne.n	23fa4ae <scalbn+0x3e>
 23fa4ec:	ee10 0a10 	vmov	r0, s0
 23fa4f0:	4619      	mov	r1, r3
 23fa4f2:	f7e9 fe6f 	bl	23e41d4 <__adddf3>
 23fa4f6:	ec41 0b10 	vmov	d0, r0, r1
 23fa4fa:	bd38      	pop	{r3, r4, r5, pc}
 23fa4fc:	2b00      	cmp	r3, #0
 23fa4fe:	a11c      	add	r1, pc, #112	; (adr r1, 23fa570 <scalbn+0x100>)
 23fa500:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa504:	db07      	blt.n	23fa516 <scalbn+0xa6>
 23fa506:	a31a      	add	r3, pc, #104	; (adr r3, 23fa570 <scalbn+0x100>)
 23fa508:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa50c:	f7ea f818 	bl	23e4540 <__aeabi_dmul>
 23fa510:	ec41 0b10 	vmov	d0, r0, r1
 23fa514:	bd38      	pop	{r3, r4, r5, pc}
 23fa516:	a118      	add	r1, pc, #96	; (adr r1, 23fa578 <scalbn+0x108>)
 23fa518:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa51c:	a314      	add	r3, pc, #80	; (adr r3, 23fa570 <scalbn+0x100>)
 23fa51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa522:	f7ea f80d 	bl	23e4540 <__aeabi_dmul>
 23fa526:	ec41 0b10 	vmov	d0, r0, r1
 23fa52a:	e7f3      	b.n	23fa514 <scalbn+0xa4>
 23fa52c:	4818      	ldr	r0, [pc, #96]	; (23fa590 <scalbn+0x120>)
 23fa52e:	3136      	adds	r1, #54	; 0x36
 23fa530:	4614      	mov	r4, r2
 23fa532:	4b18      	ldr	r3, [pc, #96]	; (23fa594 <scalbn+0x124>)
 23fa534:	ea0c 0000 	and.w	r0, ip, r0
 23fa538:	2200      	movs	r2, #0
 23fa53a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fa53e:	4620      	mov	r0, r4
 23fa540:	4629      	mov	r1, r5
 23fa542:	f7e9 fffd 	bl	23e4540 <__aeabi_dmul>
 23fa546:	ec41 0b10 	vmov	d0, r0, r1
 23fa54a:	bd38      	pop	{r3, r4, r5, pc}
 23fa54c:	4810      	ldr	r0, [pc, #64]	; (23fa590 <scalbn+0x120>)
 23fa54e:	ea0c 0000 	and.w	r0, ip, r0
 23fa552:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fa556:	ec43 2b10 	vmov	d0, r2, r3
 23fa55a:	bd38      	pop	{r3, r4, r5, pc}
 23fa55c:	a108      	add	r1, pc, #32	; (adr r1, 23fa580 <scalbn+0x110>)
 23fa55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa562:	e7b7      	b.n	23fa4d4 <scalbn+0x64>
 23fa564:	f3af 8000 	nop.w
 23fa568:	c2f8f359 	.word	0xc2f8f359
 23fa56c:	01a56e1f 	.word	0x01a56e1f
 23fa570:	8800759c 	.word	0x8800759c
 23fa574:	7e37e43c 	.word	0x7e37e43c
 23fa578:	8800759c 	.word	0x8800759c
 23fa57c:	fe37e43c 	.word	0xfe37e43c
 23fa580:	c2f8f359 	.word	0xc2f8f359
 23fa584:	81a56e1f 	.word	0x81a56e1f
 23fa588:	ffff3cb0 	.word	0xffff3cb0
 23fa58c:	43500000 	.word	0x43500000
 23fa590:	800fffff 	.word	0x800fffff
 23fa594:	3c900000 	.word	0x3c900000

023fa598 <sin>:
 23fa598:	ec51 0b10 	vmov	r0, r1, d0
 23fa59c:	4a26      	ldr	r2, [pc, #152]	; (23fa638 <sin+0xa0>)
 23fa59e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa5a2:	4293      	cmp	r3, r2
 23fa5a4:	dd27      	ble.n	23fa5f6 <sin+0x5e>
 23fa5a6:	4a25      	ldr	r2, [pc, #148]	; (23fa63c <sin+0xa4>)
 23fa5a8:	4293      	cmp	r3, r2
 23fa5aa:	b500      	push	{lr}
 23fa5ac:	b085      	sub	sp, #20
 23fa5ae:	dd09      	ble.n	23fa5c4 <sin+0x2c>
 23fa5b0:	ee10 2a10 	vmov	r2, s0
 23fa5b4:	460b      	mov	r3, r1
 23fa5b6:	f7e9 fe0b 	bl	23e41d0 <__aeabi_dsub>
 23fa5ba:	ec41 0b10 	vmov	d0, r0, r1
 23fa5be:	b005      	add	sp, #20
 23fa5c0:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa5c4:	4668      	mov	r0, sp
 23fa5c6:	f000 ffb3 	bl	23fb530 <__ieee754_rem_pio2>
 23fa5ca:	f000 0003 	and.w	r0, r0, #3
 23fa5ce:	2801      	cmp	r0, #1
 23fa5d0:	d016      	beq.n	23fa600 <sin+0x68>
 23fa5d2:	2802      	cmp	r0, #2
 23fa5d4:	d023      	beq.n	23fa61e <sin+0x86>
 23fa5d6:	b1d0      	cbz	r0, 23fa60e <sin+0x76>
 23fa5d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa5dc:	ed9d 0b00 	vldr	d0, [sp]
 23fa5e0:	f001 fa8e 	bl	23fbb00 <__kernel_cos>
 23fa5e4:	ec53 2b10 	vmov	r2, r3, d0
 23fa5e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23fa5ec:	ee00 3a90 	vmov	s1, r3
 23fa5f0:	b005      	add	sp, #20
 23fa5f2:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa5f6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23fa630 <sin+0x98>
 23fa5fa:	2000      	movs	r0, #0
 23fa5fc:	f001 bfe4 	b.w	23fc5c8 <__kernel_sin>
 23fa600:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa604:	ed9d 0b00 	vldr	d0, [sp]
 23fa608:	f001 fa7a 	bl	23fbb00 <__kernel_cos>
 23fa60c:	e7d7      	b.n	23fa5be <sin+0x26>
 23fa60e:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa612:	ed9d 0b00 	vldr	d0, [sp]
 23fa616:	2001      	movs	r0, #1
 23fa618:	f001 ffd6 	bl	23fc5c8 <__kernel_sin>
 23fa61c:	e7cf      	b.n	23fa5be <sin+0x26>
 23fa61e:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa622:	ed9d 0b00 	vldr	d0, [sp]
 23fa626:	2001      	movs	r0, #1
 23fa628:	f001 ffce 	bl	23fc5c8 <__kernel_sin>
 23fa62c:	e7da      	b.n	23fa5e4 <sin+0x4c>
 23fa62e:	bf00      	nop
	...
 23fa638:	3fe921fb 	.word	0x3fe921fb
 23fa63c:	7fefffff 	.word	0x7fefffff

023fa640 <atan2>:
 23fa640:	f000 b90e 	b.w	23fa860 <__ieee754_atan2>
 23fa644:	0000      	movs	r0, r0
	...

023fa648 <pow>:
 23fa648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa64a:	ed2d 8b02 	vpush	{d8}
 23fa64e:	ec57 6b10 	vmov	r6, r7, d0
 23fa652:	ec55 4b11 	vmov	r4, r5, d1
 23fa656:	f000 f9d7 	bl	23faa08 <__ieee754_pow>
 23fa65a:	4b63      	ldr	r3, [pc, #396]	; (23fa7e8 <pow+0x1a0>)
 23fa65c:	eeb0 8a40 	vmov.f32	s16, s0
 23fa660:	eef0 8a60 	vmov.f32	s17, s1
 23fa664:	f993 3000 	ldrsb.w	r3, [r3]
 23fa668:	3301      	adds	r3, #1
 23fa66a:	d02a      	beq.n	23fa6c2 <pow+0x7a>
 23fa66c:	4622      	mov	r2, r4
 23fa66e:	462b      	mov	r3, r5
 23fa670:	4620      	mov	r0, r4
 23fa672:	4629      	mov	r1, r5
 23fa674:	f7ea f9fe 	bl	23e4a74 <__aeabi_dcmpun>
 23fa678:	bb18      	cbnz	r0, 23fa6c2 <pow+0x7a>
 23fa67a:	4632      	mov	r2, r6
 23fa67c:	463b      	mov	r3, r7
 23fa67e:	4630      	mov	r0, r6
 23fa680:	4639      	mov	r1, r7
 23fa682:	f7ea f9f7 	bl	23e4a74 <__aeabi_dcmpun>
 23fa686:	2800      	cmp	r0, #0
 23fa688:	d144      	bne.n	23fa714 <pow+0xcc>
 23fa68a:	2200      	movs	r2, #0
 23fa68c:	2300      	movs	r3, #0
 23fa68e:	4630      	mov	r0, r6
 23fa690:	4639      	mov	r1, r7
 23fa692:	f7ea f9bd 	bl	23e4a10 <__aeabi_dcmpeq>
 23fa696:	b1d8      	cbz	r0, 23fa6d0 <pow+0x88>
 23fa698:	2200      	movs	r2, #0
 23fa69a:	2300      	movs	r3, #0
 23fa69c:	4620      	mov	r0, r4
 23fa69e:	4629      	mov	r1, r5
 23fa6a0:	f7ea f9b6 	bl	23e4a10 <__aeabi_dcmpeq>
 23fa6a4:	2800      	cmp	r0, #0
 23fa6a6:	d13d      	bne.n	23fa724 <pow+0xdc>
 23fa6a8:	ec45 4b10 	vmov	d0, r4, r5
 23fa6ac:	f002 f852 	bl	23fc754 <finite>
 23fa6b0:	b138      	cbz	r0, 23fa6c2 <pow+0x7a>
 23fa6b2:	4620      	mov	r0, r4
 23fa6b4:	4629      	mov	r1, r5
 23fa6b6:	2200      	movs	r2, #0
 23fa6b8:	2300      	movs	r3, #0
 23fa6ba:	f7ea f9b3 	bl	23e4a24 <__aeabi_dcmplt>
 23fa6be:	2800      	cmp	r0, #0
 23fa6c0:	d15c      	bne.n	23fa77c <pow+0x134>
 23fa6c2:	eeb0 0a48 	vmov.f32	s0, s16
 23fa6c6:	eef0 0a68 	vmov.f32	s1, s17
 23fa6ca:	ecbd 8b02 	vpop	{d8}
 23fa6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa6d0:	eeb0 0a48 	vmov.f32	s0, s16
 23fa6d4:	eef0 0a68 	vmov.f32	s1, s17
 23fa6d8:	f002 f83c 	bl	23fc754 <finite>
 23fa6dc:	b358      	cbz	r0, 23fa736 <pow+0xee>
 23fa6de:	2200      	movs	r2, #0
 23fa6e0:	2300      	movs	r3, #0
 23fa6e2:	ec51 0b18 	vmov	r0, r1, d8
 23fa6e6:	f7ea f993 	bl	23e4a10 <__aeabi_dcmpeq>
 23fa6ea:	2800      	cmp	r0, #0
 23fa6ec:	d0e9      	beq.n	23fa6c2 <pow+0x7a>
 23fa6ee:	ec47 6b10 	vmov	d0, r6, r7
 23fa6f2:	f002 f82f 	bl	23fc754 <finite>
 23fa6f6:	2800      	cmp	r0, #0
 23fa6f8:	d0e3      	beq.n	23fa6c2 <pow+0x7a>
 23fa6fa:	ec45 4b10 	vmov	d0, r4, r5
 23fa6fe:	f002 f829 	bl	23fc754 <finite>
 23fa702:	2800      	cmp	r0, #0
 23fa704:	d0dd      	beq.n	23fa6c2 <pow+0x7a>
 23fa706:	f7fd fa3f 	bl	23f7b88 <__errno>
 23fa70a:	2322      	movs	r3, #34	; 0x22
 23fa70c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fa7c8 <pow+0x180>
 23fa710:	6003      	str	r3, [r0, #0]
 23fa712:	e7d6      	b.n	23fa6c2 <pow+0x7a>
 23fa714:	4620      	mov	r0, r4
 23fa716:	4629      	mov	r1, r5
 23fa718:	2200      	movs	r2, #0
 23fa71a:	2300      	movs	r3, #0
 23fa71c:	f7ea f978 	bl	23e4a10 <__aeabi_dcmpeq>
 23fa720:	2800      	cmp	r0, #0
 23fa722:	d0ce      	beq.n	23fa6c2 <pow+0x7a>
 23fa724:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fa7d0 <pow+0x188>
 23fa728:	eeb0 0a48 	vmov.f32	s0, s16
 23fa72c:	eef0 0a68 	vmov.f32	s1, s17
 23fa730:	ecbd 8b02 	vpop	{d8}
 23fa734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa736:	ec47 6b10 	vmov	d0, r6, r7
 23fa73a:	f002 f80b 	bl	23fc754 <finite>
 23fa73e:	2800      	cmp	r0, #0
 23fa740:	d0cd      	beq.n	23fa6de <pow+0x96>
 23fa742:	ec45 4b10 	vmov	d0, r4, r5
 23fa746:	f002 f805 	bl	23fc754 <finite>
 23fa74a:	2800      	cmp	r0, #0
 23fa74c:	d0c7      	beq.n	23fa6de <pow+0x96>
 23fa74e:	ee18 0a10 	vmov	r0, s16
 23fa752:	ec53 2b18 	vmov	r2, r3, d8
 23fa756:	4619      	mov	r1, r3
 23fa758:	f7ea f98c 	bl	23e4a74 <__aeabi_dcmpun>
 23fa75c:	bb20      	cbnz	r0, 23fa7a8 <pow+0x160>
 23fa75e:	f7fd fa13 	bl	23f7b88 <__errno>
 23fa762:	2222      	movs	r2, #34	; 0x22
 23fa764:	4603      	mov	r3, r0
 23fa766:	4639      	mov	r1, r7
 23fa768:	4630      	mov	r0, r6
 23fa76a:	601a      	str	r2, [r3, #0]
 23fa76c:	2200      	movs	r2, #0
 23fa76e:	2300      	movs	r3, #0
 23fa770:	f7ea f958 	bl	23e4a24 <__aeabi_dcmplt>
 23fa774:	b948      	cbnz	r0, 23fa78a <pow+0x142>
 23fa776:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fa7d8 <pow+0x190>
 23fa77a:	e7a2      	b.n	23fa6c2 <pow+0x7a>
 23fa77c:	f7fd fa04 	bl	23f7b88 <__errno>
 23fa780:	2321      	movs	r3, #33	; 0x21
 23fa782:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fa7e0 <pow+0x198>
 23fa786:	6003      	str	r3, [r0, #0]
 23fa788:	e79b      	b.n	23fa6c2 <pow+0x7a>
 23fa78a:	ec45 4b10 	vmov	d0, r4, r5
 23fa78e:	f002 f87b 	bl	23fc888 <rint>
 23fa792:	4622      	mov	r2, r4
 23fa794:	462b      	mov	r3, r5
 23fa796:	ec51 0b10 	vmov	r0, r1, d0
 23fa79a:	f7ea f939 	bl	23e4a10 <__aeabi_dcmpeq>
 23fa79e:	2800      	cmp	r0, #0
 23fa7a0:	d1e9      	bne.n	23fa776 <pow+0x12e>
 23fa7a2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fa7e0 <pow+0x198>
 23fa7a6:	e78c      	b.n	23fa6c2 <pow+0x7a>
 23fa7a8:	f7fd f9ee 	bl	23f7b88 <__errno>
 23fa7ac:	2200      	movs	r2, #0
 23fa7ae:	2300      	movs	r3, #0
 23fa7b0:	2121      	movs	r1, #33	; 0x21
 23fa7b2:	6001      	str	r1, [r0, #0]
 23fa7b4:	4610      	mov	r0, r2
 23fa7b6:	4619      	mov	r1, r3
 23fa7b8:	f7e9 ffec 	bl	23e4794 <__aeabi_ddiv>
 23fa7bc:	ec41 0b18 	vmov	d8, r0, r1
 23fa7c0:	e77f      	b.n	23fa6c2 <pow+0x7a>
 23fa7c2:	bf00      	nop
 23fa7c4:	f3af 8000 	nop.w
	...
 23fa7d4:	3ff00000 	.word	0x3ff00000
 23fa7d8:	00000000 	.word	0x00000000
 23fa7dc:	7ff00000 	.word	0x7ff00000
 23fa7e0:	00000000 	.word	0x00000000
 23fa7e4:	fff00000 	.word	0xfff00000
 23fa7e8:	1006a1cc 	.word	0x1006a1cc

023fa7ec <sqrt>:
 23fa7ec:	b538      	push	{r3, r4, r5, lr}
 23fa7ee:	ed2d 8b02 	vpush	{d8}
 23fa7f2:	ec55 4b10 	vmov	r4, r5, d0
 23fa7f6:	f001 f8c1 	bl	23fb97c <__ieee754_sqrt>
 23fa7fa:	4b18      	ldr	r3, [pc, #96]	; (23fa85c <sqrt+0x70>)
 23fa7fc:	eeb0 8a40 	vmov.f32	s16, s0
 23fa800:	eef0 8a60 	vmov.f32	s17, s1
 23fa804:	f993 3000 	ldrsb.w	r3, [r3]
 23fa808:	3301      	adds	r3, #1
 23fa80a:	d00d      	beq.n	23fa828 <sqrt+0x3c>
 23fa80c:	4622      	mov	r2, r4
 23fa80e:	462b      	mov	r3, r5
 23fa810:	4620      	mov	r0, r4
 23fa812:	4629      	mov	r1, r5
 23fa814:	f7ea f92e 	bl	23e4a74 <__aeabi_dcmpun>
 23fa818:	b930      	cbnz	r0, 23fa828 <sqrt+0x3c>
 23fa81a:	2200      	movs	r2, #0
 23fa81c:	2300      	movs	r3, #0
 23fa81e:	4620      	mov	r0, r4
 23fa820:	4629      	mov	r1, r5
 23fa822:	f7ea f8ff 	bl	23e4a24 <__aeabi_dcmplt>
 23fa826:	b930      	cbnz	r0, 23fa836 <sqrt+0x4a>
 23fa828:	eeb0 0a48 	vmov.f32	s0, s16
 23fa82c:	eef0 0a68 	vmov.f32	s1, s17
 23fa830:	ecbd 8b02 	vpop	{d8}
 23fa834:	bd38      	pop	{r3, r4, r5, pc}
 23fa836:	f7fd f9a7 	bl	23f7b88 <__errno>
 23fa83a:	2200      	movs	r2, #0
 23fa83c:	2300      	movs	r3, #0
 23fa83e:	2121      	movs	r1, #33	; 0x21
 23fa840:	6001      	str	r1, [r0, #0]
 23fa842:	4610      	mov	r0, r2
 23fa844:	4619      	mov	r1, r3
 23fa846:	f7e9 ffa5 	bl	23e4794 <__aeabi_ddiv>
 23fa84a:	ec41 0b18 	vmov	d8, r0, r1
 23fa84e:	eeb0 0a48 	vmov.f32	s0, s16
 23fa852:	eef0 0a68 	vmov.f32	s1, s17
 23fa856:	ecbd 8b02 	vpop	{d8}
 23fa85a:	bd38      	pop	{r3, r4, r5, pc}
 23fa85c:	1006a1cc 	.word	0x1006a1cc

023fa860 <__ieee754_atan2>:
 23fa860:	ec51 0b11 	vmov	r0, r1, d1
 23fa864:	4243      	negs	r3, r0
 23fa866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa86a:	4303      	orrs	r3, r0
 23fa86c:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fa870:	4e61      	ldr	r6, [pc, #388]	; (23fa9f8 <__ieee754_atan2+0x198>)
 23fa872:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fa876:	42b3      	cmp	r3, r6
 23fa878:	ec55 4b10 	vmov	r4, r5, d0
 23fa87c:	d83c      	bhi.n	23fa8f8 <__ieee754_atan2+0x98>
 23fa87e:	4263      	negs	r3, r4
 23fa880:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fa884:	46a9      	mov	r9, r5
 23fa886:	4323      	orrs	r3, r4
 23fa888:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fa88c:	42b3      	cmp	r3, r6
 23fa88e:	d833      	bhi.n	23fa8f8 <__ieee754_atan2+0x98>
 23fa890:	4b5a      	ldr	r3, [pc, #360]	; (23fa9fc <__ieee754_atan2+0x19c>)
 23fa892:	440b      	add	r3, r1
 23fa894:	4303      	orrs	r3, r0
 23fa896:	d03e      	beq.n	23fa916 <__ieee754_atan2+0xb6>
 23fa898:	178f      	asrs	r7, r1, #30
 23fa89a:	ea5a 0304 	orrs.w	r3, sl, r4
 23fa89e:	f007 0702 	and.w	r7, r7, #2
 23fa8a2:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fa8a6:	d02f      	beq.n	23fa908 <__ieee754_atan2+0xa8>
 23fa8a8:	ea5e 0300 	orrs.w	r3, lr, r0
 23fa8ac:	d037      	beq.n	23fa91e <__ieee754_atan2+0xbe>
 23fa8ae:	45b6      	cmp	lr, r6
 23fa8b0:	d044      	beq.n	23fa93c <__ieee754_atan2+0xdc>
 23fa8b2:	45b2      	cmp	sl, r6
 23fa8b4:	d033      	beq.n	23fa91e <__ieee754_atan2+0xbe>
 23fa8b6:	ebaa 0e0e 	sub.w	lr, sl, lr
 23fa8ba:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23fa8be:	ea4f 532e 	mov.w	r3, lr, asr #20
 23fa8c2:	da38      	bge.n	23fa936 <__ieee754_atan2+0xd6>
 23fa8c4:	2900      	cmp	r1, #0
 23fa8c6:	da6a      	bge.n	23fa99e <__ieee754_atan2+0x13e>
 23fa8c8:	333c      	adds	r3, #60	; 0x3c
 23fa8ca:	da68      	bge.n	23fa99e <__ieee754_atan2+0x13e>
 23fa8cc:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fa9c0 <__ieee754_atan2+0x160>
 23fa8d0:	2f01      	cmp	r7, #1
 23fa8d2:	d050      	beq.n	23fa976 <__ieee754_atan2+0x116>
 23fa8d4:	2f02      	cmp	r7, #2
 23fa8d6:	d03d      	beq.n	23fa954 <__ieee754_atan2+0xf4>
 23fa8d8:	b1a7      	cbz	r7, 23fa904 <__ieee754_atan2+0xa4>
 23fa8da:	ec51 0b10 	vmov	r0, r1, d0
 23fa8de:	a33a      	add	r3, pc, #232	; (adr r3, 23fa9c8 <__ieee754_atan2+0x168>)
 23fa8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8e4:	f7e9 fc74 	bl	23e41d0 <__aeabi_dsub>
 23fa8e8:	a339      	add	r3, pc, #228	; (adr r3, 23fa9d0 <__ieee754_atan2+0x170>)
 23fa8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8ee:	f7e9 fc6f 	bl	23e41d0 <__aeabi_dsub>
 23fa8f2:	ec41 0b10 	vmov	d0, r0, r1
 23fa8f6:	e005      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa8f8:	4622      	mov	r2, r4
 23fa8fa:	462b      	mov	r3, r5
 23fa8fc:	f7e9 fc6a 	bl	23e41d4 <__adddf3>
 23fa900:	ec41 0b10 	vmov	d0, r0, r1
 23fa904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa908:	2f02      	cmp	r7, #2
 23fa90a:	d00e      	beq.n	23fa92a <__ieee754_atan2+0xca>
 23fa90c:	2f03      	cmp	r7, #3
 23fa90e:	d1f9      	bne.n	23fa904 <__ieee754_atan2+0xa4>
 23fa910:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fa9d8 <__ieee754_atan2+0x178>
 23fa914:	e7f6      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa91a:	f7ff bba1 	b.w	23fa060 <atan>
 23fa91e:	f1b9 0f00 	cmp.w	r9, #0
 23fa922:	db05      	blt.n	23fa930 <__ieee754_atan2+0xd0>
 23fa924:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fa9e0 <__ieee754_atan2+0x180>
 23fa928:	e7ec      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa92a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fa9d0 <__ieee754_atan2+0x170>
 23fa92e:	e7e9      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa930:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fa9e8 <__ieee754_atan2+0x188>
 23fa934:	e7e6      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa936:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fa9e0 <__ieee754_atan2+0x180>
 23fa93a:	e7c9      	b.n	23fa8d0 <__ieee754_atan2+0x70>
 23fa93c:	45f2      	cmp	sl, lr
 23fa93e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fa942:	d021      	beq.n	23fa988 <__ieee754_atan2+0x128>
 23fa944:	2f02      	cmp	r7, #2
 23fa946:	d827      	bhi.n	23fa998 <__ieee754_atan2+0x138>
 23fa948:	4b2d      	ldr	r3, [pc, #180]	; (23faa00 <__ieee754_atan2+0x1a0>)
 23fa94a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fa94e:	ed97 0b00 	vldr	d0, [r7]
 23fa952:	e7d7      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa954:	a31c      	add	r3, pc, #112	; (adr r3, 23fa9c8 <__ieee754_atan2+0x168>)
 23fa956:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa95a:	ec51 0b10 	vmov	r0, r1, d0
 23fa95e:	f7e9 fc37 	bl	23e41d0 <__aeabi_dsub>
 23fa962:	4602      	mov	r2, r0
 23fa964:	460b      	mov	r3, r1
 23fa966:	a11a      	add	r1, pc, #104	; (adr r1, 23fa9d0 <__ieee754_atan2+0x170>)
 23fa968:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa96c:	f7e9 fc30 	bl	23e41d0 <__aeabi_dsub>
 23fa970:	ec41 0b10 	vmov	d0, r0, r1
 23fa974:	e7c6      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa976:	ee10 1a90 	vmov	r1, s1
 23fa97a:	ec53 2b10 	vmov	r2, r3, d0
 23fa97e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa982:	ec43 2b10 	vmov	d0, r2, r3
 23fa986:	e7bd      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa988:	2f02      	cmp	r7, #2
 23fa98a:	d815      	bhi.n	23fa9b8 <__ieee754_atan2+0x158>
 23fa98c:	4b1d      	ldr	r3, [pc, #116]	; (23faa04 <__ieee754_atan2+0x1a4>)
 23fa98e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fa992:	ed97 0b00 	vldr	d0, [r7]
 23fa996:	e7b5      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa998:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fa9c0 <__ieee754_atan2+0x160>
 23fa99c:	e7b2      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa99e:	4602      	mov	r2, r0
 23fa9a0:	460b      	mov	r3, r1
 23fa9a2:	4620      	mov	r0, r4
 23fa9a4:	4629      	mov	r1, r5
 23fa9a6:	f7e9 fef5 	bl	23e4794 <__aeabi_ddiv>
 23fa9aa:	ec41 0b10 	vmov	d0, r0, r1
 23fa9ae:	f7ff fd53 	bl	23fa458 <fabs>
 23fa9b2:	f7ff fb55 	bl	23fa060 <atan>
 23fa9b6:	e78b      	b.n	23fa8d0 <__ieee754_atan2+0x70>
 23fa9b8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fa9f0 <__ieee754_atan2+0x190>
 23fa9bc:	e7a2      	b.n	23fa904 <__ieee754_atan2+0xa4>
 23fa9be:	bf00      	nop
	...
 23fa9c8:	33145c07 	.word	0x33145c07
 23fa9cc:	3ca1a626 	.word	0x3ca1a626
 23fa9d0:	54442d18 	.word	0x54442d18
 23fa9d4:	400921fb 	.word	0x400921fb
 23fa9d8:	54442d18 	.word	0x54442d18
 23fa9dc:	c00921fb 	.word	0xc00921fb
 23fa9e0:	54442d18 	.word	0x54442d18
 23fa9e4:	3ff921fb 	.word	0x3ff921fb
 23fa9e8:	54442d18 	.word	0x54442d18
 23fa9ec:	bff921fb 	.word	0xbff921fb
 23fa9f0:	54442d18 	.word	0x54442d18
 23fa9f4:	3fe921fb 	.word	0x3fe921fb
 23fa9f8:	7ff00000 	.word	0x7ff00000
 23fa9fc:	c0100000 	.word	0xc0100000
 23faa00:	023ffb90 	.word	0x023ffb90
 23faa04:	023ffb78 	.word	0x023ffb78

023faa08 <__ieee754_pow>:
 23faa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faa0c:	ec55 4b11 	vmov	r4, r5, d1
 23faa10:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23faa14:	ea5a 0204 	orrs.w	r2, sl, r4
 23faa18:	ed2d 8b0c 	vpush	{d8-d13}
 23faa1c:	b087      	sub	sp, #28
 23faa1e:	d01f      	beq.n	23faa60 <__ieee754_pow+0x58>
 23faa20:	495d      	ldr	r1, [pc, #372]	; (23fab98 <__ieee754_pow+0x190>)
 23faa22:	ee10 2a10 	vmov	r2, s0
 23faa26:	ec57 6b10 	vmov	r6, r7, d0
 23faa2a:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23faa2e:	46b9      	mov	r9, r7
 23faa30:	4588      	cmp	r8, r1
 23faa32:	dc11      	bgt.n	23faa58 <__ieee754_pow+0x50>
 23faa34:	46ab      	mov	fp, r5
 23faa36:	ee11 3a10 	vmov	r3, s2
 23faa3a:	d108      	bne.n	23faa4e <__ieee754_pow+0x46>
 23faa3c:	b13e      	cbz	r6, 23faa4e <__ieee754_pow+0x46>
 23faa3e:	4857      	ldr	r0, [pc, #348]	; (23fab9c <__ieee754_pow+0x194>)
 23faa40:	b007      	add	sp, #28
 23faa42:	ecbd 8b0c 	vpop	{d8-d13}
 23faa46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faa4a:	f001 bf15 	b.w	23fc878 <nan>
 23faa4e:	4952      	ldr	r1, [pc, #328]	; (23fab98 <__ieee754_pow+0x190>)
 23faa50:	458a      	cmp	sl, r1
 23faa52:	dc01      	bgt.n	23faa58 <__ieee754_pow+0x50>
 23faa54:	d10b      	bne.n	23faa6e <__ieee754_pow+0x66>
 23faa56:	b153      	cbz	r3, 23faa6e <__ieee754_pow+0x66>
 23faa58:	4b51      	ldr	r3, [pc, #324]	; (23faba0 <__ieee754_pow+0x198>)
 23faa5a:	4443      	add	r3, r8
 23faa5c:	4313      	orrs	r3, r2
 23faa5e:	d1ee      	bne.n	23faa3e <__ieee754_pow+0x36>
 23faa60:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fab88 <__ieee754_pow+0x180>
 23faa64:	b007      	add	sp, #28
 23faa66:	ecbd 8b0c 	vpop	{d8-d13}
 23faa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faa6e:	f1b9 0f00 	cmp.w	r9, #0
 23faa72:	db45      	blt.n	23fab00 <__ieee754_pow+0xf8>
 23faa74:	2100      	movs	r1, #0
 23faa76:	9100      	str	r1, [sp, #0]
 23faa78:	b983      	cbnz	r3, 23faa9c <__ieee754_pow+0x94>
 23faa7a:	4b47      	ldr	r3, [pc, #284]	; (23fab98 <__ieee754_pow+0x190>)
 23faa7c:	459a      	cmp	sl, r3
 23faa7e:	d05b      	beq.n	23fab38 <__ieee754_pow+0x130>
 23faa80:	4b48      	ldr	r3, [pc, #288]	; (23faba4 <__ieee754_pow+0x19c>)
 23faa82:	459a      	cmp	sl, r3
 23faa84:	d06a      	beq.n	23fab5c <__ieee754_pow+0x154>
 23faa86:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23faa8a:	f000 84b0 	beq.w	23fb3ee <__ieee754_pow+0x9e6>
 23faa8e:	4b46      	ldr	r3, [pc, #280]	; (23faba8 <__ieee754_pow+0x1a0>)
 23faa90:	459b      	cmp	fp, r3
 23faa92:	d103      	bne.n	23faa9c <__ieee754_pow+0x94>
 23faa94:	f1b9 0f00 	cmp.w	r9, #0
 23faa98:	f280 850d 	bge.w	23fb4b6 <__ieee754_pow+0xaae>
 23faa9c:	9202      	str	r2, [sp, #8]
 23faa9e:	ec47 6b10 	vmov	d0, r6, r7
 23faaa2:	f7ff fcd9 	bl	23fa458 <fabs>
 23faaa6:	9a02      	ldr	r2, [sp, #8]
 23faaa8:	b94a      	cbnz	r2, 23faabe <__ieee754_pow+0xb6>
 23faaaa:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23faaae:	4a3d      	ldr	r2, [pc, #244]	; (23faba4 <__ieee754_pow+0x19c>)
 23faab0:	4293      	cmp	r3, r2
 23faab2:	f000 83a8 	beq.w	23fb206 <__ieee754_pow+0x7fe>
 23faab6:	f1b8 0f00 	cmp.w	r8, #0
 23faaba:	f000 83a4 	beq.w	23fb206 <__ieee754_pow+0x7fe>
 23faabe:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23faac2:	9a00      	ldr	r2, [sp, #0]
 23faac4:	3b01      	subs	r3, #1
 23faac6:	9304      	str	r3, [sp, #16]
 23faac8:	4313      	orrs	r3, r2
 23faaca:	d04e      	beq.n	23fab6a <__ieee754_pow+0x162>
 23faacc:	4b37      	ldr	r3, [pc, #220]	; (23fabac <__ieee754_pow+0x1a4>)
 23faace:	459a      	cmp	sl, r3
 23faad0:	dd72      	ble.n	23fabb8 <__ieee754_pow+0x1b0>
 23faad2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23faad6:	459a      	cmp	sl, r3
 23faad8:	4b35      	ldr	r3, [pc, #212]	; (23fabb0 <__ieee754_pow+0x1a8>)
 23faada:	f340 842b 	ble.w	23fb334 <__ieee754_pow+0x92c>
 23faade:	4598      	cmp	r8, r3
 23faae0:	f340 83a9 	ble.w	23fb236 <__ieee754_pow+0x82e>
 23faae4:	f1bb 0f00 	cmp.w	fp, #0
 23faae8:	f340 83a9 	ble.w	23fb23e <__ieee754_pow+0x836>
 23faaec:	a328      	add	r3, pc, #160	; (adr r3, 23fab90 <__ieee754_pow+0x188>)
 23faaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faaf2:	4610      	mov	r0, r2
 23faaf4:	4619      	mov	r1, r3
 23faaf6:	f7e9 fd23 	bl	23e4540 <__aeabi_dmul>
 23faafa:	ec41 0b10 	vmov	d0, r0, r1
 23faafe:	e7b1      	b.n	23faa64 <__ieee754_pow+0x5c>
 23fab00:	492c      	ldr	r1, [pc, #176]	; (23fabb4 <__ieee754_pow+0x1ac>)
 23fab02:	458a      	cmp	sl, r1
 23fab04:	dc27      	bgt.n	23fab56 <__ieee754_pow+0x14e>
 23fab06:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fab0a:	458a      	cmp	sl, r1
 23fab0c:	ddb2      	ble.n	23faa74 <__ieee754_pow+0x6c>
 23fab0e:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fab12:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fab16:	2914      	cmp	r1, #20
 23fab18:	f340 847d 	ble.w	23fb416 <__ieee754_pow+0xa0e>
 23fab1c:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fab20:	fa23 f001 	lsr.w	r0, r3, r1
 23fab24:	fa00 f101 	lsl.w	r1, r0, r1
 23fab28:	4299      	cmp	r1, r3
 23fab2a:	d1a3      	bne.n	23faa74 <__ieee754_pow+0x6c>
 23fab2c:	f000 0001 	and.w	r0, r0, #1
 23fab30:	f1c0 0102 	rsb	r1, r0, #2
 23fab34:	9100      	str	r1, [sp, #0]
 23fab36:	e79f      	b.n	23faa78 <__ieee754_pow+0x70>
 23fab38:	4b19      	ldr	r3, [pc, #100]	; (23faba0 <__ieee754_pow+0x198>)
 23fab3a:	4443      	add	r3, r8
 23fab3c:	4313      	orrs	r3, r2
 23fab3e:	d08f      	beq.n	23faa60 <__ieee754_pow+0x58>
 23fab40:	4b1b      	ldr	r3, [pc, #108]	; (23fabb0 <__ieee754_pow+0x1a8>)
 23fab42:	4598      	cmp	r8, r3
 23fab44:	f340 83ab 	ble.w	23fb29e <__ieee754_pow+0x896>
 23fab48:	f1bb 0f00 	cmp.w	fp, #0
 23fab4c:	f2c0 8377 	blt.w	23fb23e <__ieee754_pow+0x836>
 23fab50:	ec45 4b10 	vmov	d0, r4, r5
 23fab54:	e786      	b.n	23faa64 <__ieee754_pow+0x5c>
 23fab56:	2102      	movs	r1, #2
 23fab58:	9100      	str	r1, [sp, #0]
 23fab5a:	e78d      	b.n	23faa78 <__ieee754_pow+0x70>
 23fab5c:	f1bb 0f00 	cmp.w	fp, #0
 23fab60:	f2c0 844f 	blt.w	23fb402 <__ieee754_pow+0x9fa>
 23fab64:	ec47 6b10 	vmov	d0, r6, r7
 23fab68:	e77c      	b.n	23faa64 <__ieee754_pow+0x5c>
 23fab6a:	4632      	mov	r2, r6
 23fab6c:	463b      	mov	r3, r7
 23fab6e:	4610      	mov	r0, r2
 23fab70:	4619      	mov	r1, r3
 23fab72:	f7e9 fb2d 	bl	23e41d0 <__aeabi_dsub>
 23fab76:	4602      	mov	r2, r0
 23fab78:	460b      	mov	r3, r1
 23fab7a:	f7e9 fe0b 	bl	23e4794 <__aeabi_ddiv>
 23fab7e:	ec41 0b10 	vmov	d0, r0, r1
 23fab82:	e76f      	b.n	23faa64 <__ieee754_pow+0x5c>
 23fab84:	f3af 8000 	nop.w
 23fab88:	00000000 	.word	0x00000000
 23fab8c:	3ff00000 	.word	0x3ff00000
 23fab90:	8800759c 	.word	0x8800759c
 23fab94:	7e37e43c 	.word	0x7e37e43c
 23fab98:	7ff00000 	.word	0x7ff00000
 23fab9c:	023ffba8 	.word	0x023ffba8
 23faba0:	c0100000 	.word	0xc0100000
 23faba4:	3ff00000 	.word	0x3ff00000
 23faba8:	3fe00000 	.word	0x3fe00000
 23fabac:	41e00000 	.word	0x41e00000
 23fabb0:	3fefffff 	.word	0x3fefffff
 23fabb4:	433fffff 	.word	0x433fffff
 23fabb8:	4be3      	ldr	r3, [pc, #908]	; (23faf48 <__ieee754_pow+0x540>)
 23fabba:	2200      	movs	r2, #0
 23fabbc:	ea09 0303 	and.w	r3, r9, r3
 23fabc0:	b953      	cbnz	r3, 23fabd8 <__ieee754_pow+0x1d0>
 23fabc2:	4be2      	ldr	r3, [pc, #904]	; (23faf4c <__ieee754_pow+0x544>)
 23fabc4:	ec51 0b10 	vmov	r0, r1, d0
 23fabc8:	f7e9 fcba 	bl	23e4540 <__aeabi_dmul>
 23fabcc:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fabd0:	ec41 0b10 	vmov	d0, r0, r1
 23fabd4:	ee10 8a90 	vmov	r8, s1
 23fabd8:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fabdc:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fabe0:	4edb      	ldr	r6, [pc, #876]	; (23faf50 <__ieee754_pow+0x548>)
 23fabe2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fabe6:	ea48 0606 	orr.w	r6, r8, r6
 23fabea:	189a      	adds	r2, r3, r2
 23fabec:	4bd9      	ldr	r3, [pc, #868]	; (23faf54 <__ieee754_pow+0x54c>)
 23fabee:	4598      	cmp	r8, r3
 23fabf0:	9205      	str	r2, [sp, #20]
 23fabf2:	dd07      	ble.n	23fac04 <__ieee754_pow+0x1fc>
 23fabf4:	4bd8      	ldr	r3, [pc, #864]	; (23faf58 <__ieee754_pow+0x550>)
 23fabf6:	4598      	cmp	r8, r3
 23fabf8:	f340 8433 	ble.w	23fb462 <__ieee754_pow+0xa5a>
 23fabfc:	3201      	adds	r2, #1
 23fabfe:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fac02:	9205      	str	r2, [sp, #20]
 23fac04:	2700      	movs	r7, #0
 23fac06:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23faee8 <__ieee754_pow+0x4e0>
 23fac0a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23faef0 <__ieee754_pow+0x4e8>
 23fac0e:	eeb0 da47 	vmov.f32	s26, s14
 23fac12:	eef0 da67 	vmov.f32	s27, s15
 23fac16:	eeb0 ca47 	vmov.f32	s24, s14
 23fac1a:	eef0 ca67 	vmov.f32	s25, s15
 23fac1e:	ec51 0b16 	vmov	r0, r1, d6
 23fac22:	ec53 2b10 	vmov	r2, r3, d0
 23fac26:	4633      	mov	r3, r6
 23fac28:	1076      	asrs	r6, r6, #1
 23fac2a:	ec43 2b19 	vmov	d9, r2, r3
 23fac2e:	ec41 0b1a 	vmov	d10, r0, r1
 23fac32:	4602      	mov	r2, r0
 23fac34:	460b      	mov	r3, r1
 23fac36:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fac3a:	ec51 0b19 	vmov	r0, r1, d9
 23fac3e:	f7e9 fac7 	bl	23e41d0 <__aeabi_dsub>
 23fac42:	4680      	mov	r8, r0
 23fac44:	4689      	mov	r9, r1
 23fac46:	ec53 2b1a 	vmov	r2, r3, d10
 23fac4a:	ec51 0b19 	vmov	r0, r1, d9
 23fac4e:	f7e9 fac1 	bl	23e41d4 <__adddf3>
 23fac52:	4602      	mov	r2, r0
 23fac54:	460b      	mov	r3, r1
 23fac56:	2000      	movs	r0, #0
 23fac58:	49bd      	ldr	r1, [pc, #756]	; (23faf50 <__ieee754_pow+0x548>)
 23fac5a:	f7e9 fd9b 	bl	23e4794 <__aeabi_ddiv>
 23fac5e:	ec41 0b1b 	vmov	d11, r0, r1
 23fac62:	ec53 2b1b 	vmov	r2, r3, d11
 23fac66:	4640      	mov	r0, r8
 23fac68:	4649      	mov	r1, r9
 23fac6a:	f7e9 fc69 	bl	23e4540 <__aeabi_dmul>
 23fac6e:	460a      	mov	r2, r1
 23fac70:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fac74:	ec41 0b18 	vmov	d8, r0, r1
 23fac78:	4601      	mov	r1, r0
 23fac7a:	2000      	movs	r0, #0
 23fac7c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fac80:	2100      	movs	r1, #0
 23fac82:	4606      	mov	r6, r0
 23fac84:	4602      	mov	r2, r0
 23fac86:	9102      	str	r1, [sp, #8]
 23fac88:	19d9      	adds	r1, r3, r7
 23fac8a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fac8e:	460f      	mov	r7, r1
 23fac90:	460b      	mov	r3, r1
 23fac92:	4650      	mov	r0, sl
 23fac94:	4659      	mov	r1, fp
 23fac96:	f7e9 fc53 	bl	23e4540 <__aeabi_dmul>
 23fac9a:	4602      	mov	r2, r0
 23fac9c:	460b      	mov	r3, r1
 23fac9e:	4640      	mov	r0, r8
 23faca0:	4649      	mov	r1, r9
 23faca2:	f7e9 fa95 	bl	23e41d0 <__aeabi_dsub>
 23faca6:	4680      	mov	r8, r0
 23faca8:	4689      	mov	r9, r1
 23facaa:	4630      	mov	r0, r6
 23facac:	4639      	mov	r1, r7
 23facae:	ec53 2b1a 	vmov	r2, r3, d10
 23facb2:	f7e9 fa8d 	bl	23e41d0 <__aeabi_dsub>
 23facb6:	4602      	mov	r2, r0
 23facb8:	460b      	mov	r3, r1
 23facba:	ec51 0b19 	vmov	r0, r1, d9
 23facbe:	f7e9 fa87 	bl	23e41d0 <__aeabi_dsub>
 23facc2:	4652      	mov	r2, sl
 23facc4:	465b      	mov	r3, fp
 23facc6:	f7e9 fc3b 	bl	23e4540 <__aeabi_dmul>
 23facca:	4602      	mov	r2, r0
 23faccc:	460b      	mov	r3, r1
 23facce:	4640      	mov	r0, r8
 23facd0:	4649      	mov	r1, r9
 23facd2:	f7e9 fa7d 	bl	23e41d0 <__aeabi_dsub>
 23facd6:	ec53 2b1b 	vmov	r2, r3, d11
 23facda:	f7e9 fc31 	bl	23e4540 <__aeabi_dmul>
 23facde:	ec53 2b18 	vmov	r2, r3, d8
 23face2:	ec41 0b1a 	vmov	d10, r0, r1
 23face6:	ec51 0b18 	vmov	r0, r1, d8
 23facea:	f7e9 fc29 	bl	23e4540 <__aeabi_dmul>
 23facee:	4606      	mov	r6, r0
 23facf0:	460f      	mov	r7, r1
 23facf2:	a381      	add	r3, pc, #516	; (adr r3, 23faef8 <__ieee754_pow+0x4f0>)
 23facf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23facf8:	f7e9 fc22 	bl	23e4540 <__aeabi_dmul>
 23facfc:	a380      	add	r3, pc, #512	; (adr r3, 23faf00 <__ieee754_pow+0x4f8>)
 23facfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad02:	f7e9 fa67 	bl	23e41d4 <__adddf3>
 23fad06:	4632      	mov	r2, r6
 23fad08:	463b      	mov	r3, r7
 23fad0a:	f7e9 fc19 	bl	23e4540 <__aeabi_dmul>
 23fad0e:	a37e      	add	r3, pc, #504	; (adr r3, 23faf08 <__ieee754_pow+0x500>)
 23fad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad14:	f7e9 fa5e 	bl	23e41d4 <__adddf3>
 23fad18:	4632      	mov	r2, r6
 23fad1a:	463b      	mov	r3, r7
 23fad1c:	f7e9 fc10 	bl	23e4540 <__aeabi_dmul>
 23fad20:	a37b      	add	r3, pc, #492	; (adr r3, 23faf10 <__ieee754_pow+0x508>)
 23fad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad26:	f7e9 fa55 	bl	23e41d4 <__adddf3>
 23fad2a:	4632      	mov	r2, r6
 23fad2c:	463b      	mov	r3, r7
 23fad2e:	f7e9 fc07 	bl	23e4540 <__aeabi_dmul>
 23fad32:	a379      	add	r3, pc, #484	; (adr r3, 23faf18 <__ieee754_pow+0x510>)
 23fad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad38:	f7e9 fa4c 	bl	23e41d4 <__adddf3>
 23fad3c:	4632      	mov	r2, r6
 23fad3e:	463b      	mov	r3, r7
 23fad40:	f7e9 fbfe 	bl	23e4540 <__aeabi_dmul>
 23fad44:	a376      	add	r3, pc, #472	; (adr r3, 23faf20 <__ieee754_pow+0x518>)
 23fad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad4a:	f7e9 fa43 	bl	23e41d4 <__adddf3>
 23fad4e:	4680      	mov	r8, r0
 23fad50:	4689      	mov	r9, r1
 23fad52:	4632      	mov	r2, r6
 23fad54:	463b      	mov	r3, r7
 23fad56:	4630      	mov	r0, r6
 23fad58:	4639      	mov	r1, r7
 23fad5a:	f7e9 fbf1 	bl	23e4540 <__aeabi_dmul>
 23fad5e:	4602      	mov	r2, r0
 23fad60:	460b      	mov	r3, r1
 23fad62:	4640      	mov	r0, r8
 23fad64:	4649      	mov	r1, r9
 23fad66:	f04f 0800 	mov.w	r8, #0
 23fad6a:	f7e9 fbe9 	bl	23e4540 <__aeabi_dmul>
 23fad6e:	4652      	mov	r2, sl
 23fad70:	4606      	mov	r6, r0
 23fad72:	460f      	mov	r7, r1
 23fad74:	465b      	mov	r3, fp
 23fad76:	ec51 0b18 	vmov	r0, r1, d8
 23fad7a:	f7e9 fa2b 	bl	23e41d4 <__adddf3>
 23fad7e:	ec53 2b1a 	vmov	r2, r3, d10
 23fad82:	f7e9 fbdd 	bl	23e4540 <__aeabi_dmul>
 23fad86:	4632      	mov	r2, r6
 23fad88:	463b      	mov	r3, r7
 23fad8a:	f7e9 fa23 	bl	23e41d4 <__adddf3>
 23fad8e:	4652      	mov	r2, sl
 23fad90:	465b      	mov	r3, fp
 23fad92:	ec41 0b19 	vmov	d9, r0, r1
 23fad96:	4650      	mov	r0, sl
 23fad98:	4659      	mov	r1, fp
 23fad9a:	f7e9 fbd1 	bl	23e4540 <__aeabi_dmul>
 23fad9e:	2200      	movs	r2, #0
 23fada0:	4b6e      	ldr	r3, [pc, #440]	; (23faf5c <__ieee754_pow+0x554>)
 23fada2:	4606      	mov	r6, r0
 23fada4:	460f      	mov	r7, r1
 23fada6:	f7e9 fa15 	bl	23e41d4 <__adddf3>
 23fadaa:	ec53 2b19 	vmov	r2, r3, d9
 23fadae:	f7e9 fa11 	bl	23e41d4 <__adddf3>
 23fadb2:	4689      	mov	r9, r1
 23fadb4:	4642      	mov	r2, r8
 23fadb6:	4650      	mov	r0, sl
 23fadb8:	464b      	mov	r3, r9
 23fadba:	4659      	mov	r1, fp
 23fadbc:	f7e9 fbc0 	bl	23e4540 <__aeabi_dmul>
 23fadc0:	2200      	movs	r2, #0
 23fadc2:	4682      	mov	sl, r0
 23fadc4:	468b      	mov	fp, r1
 23fadc6:	4b65      	ldr	r3, [pc, #404]	; (23faf5c <__ieee754_pow+0x554>)
 23fadc8:	4640      	mov	r0, r8
 23fadca:	4649      	mov	r1, r9
 23fadcc:	f7e9 fa00 	bl	23e41d0 <__aeabi_dsub>
 23fadd0:	4632      	mov	r2, r6
 23fadd2:	463b      	mov	r3, r7
 23fadd4:	f7e9 f9fc 	bl	23e41d0 <__aeabi_dsub>
 23fadd8:	4602      	mov	r2, r0
 23fadda:	460b      	mov	r3, r1
 23faddc:	ec51 0b19 	vmov	r0, r1, d9
 23fade0:	f7e9 f9f6 	bl	23e41d0 <__aeabi_dsub>
 23fade4:	ec53 2b18 	vmov	r2, r3, d8
 23fade8:	f7e9 fbaa 	bl	23e4540 <__aeabi_dmul>
 23fadec:	4606      	mov	r6, r0
 23fadee:	460f      	mov	r7, r1
 23fadf0:	4642      	mov	r2, r8
 23fadf2:	464b      	mov	r3, r9
 23fadf4:	ec51 0b1a 	vmov	r0, r1, d10
 23fadf8:	f7e9 fba2 	bl	23e4540 <__aeabi_dmul>
 23fadfc:	4602      	mov	r2, r0
 23fadfe:	460b      	mov	r3, r1
 23fae00:	4630      	mov	r0, r6
 23fae02:	4639      	mov	r1, r7
 23fae04:	f7e9 f9e6 	bl	23e41d4 <__adddf3>
 23fae08:	4680      	mov	r8, r0
 23fae0a:	4689      	mov	r9, r1
 23fae0c:	4650      	mov	r0, sl
 23fae0e:	4642      	mov	r2, r8
 23fae10:	4659      	mov	r1, fp
 23fae12:	464b      	mov	r3, r9
 23fae14:	f7e9 f9de 	bl	23e41d4 <__adddf3>
 23fae18:	2000      	movs	r0, #0
 23fae1a:	460f      	mov	r7, r1
 23fae1c:	4606      	mov	r6, r0
 23fae1e:	a342      	add	r3, pc, #264	; (adr r3, 23faf28 <__ieee754_pow+0x520>)
 23fae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fae24:	f7e9 fb8c 	bl	23e4540 <__aeabi_dmul>
 23fae28:	4652      	mov	r2, sl
 23fae2a:	465b      	mov	r3, fp
 23fae2c:	ec41 0b19 	vmov	d9, r0, r1
 23fae30:	4630      	mov	r0, r6
 23fae32:	4639      	mov	r1, r7
 23fae34:	f7e9 f9cc 	bl	23e41d0 <__aeabi_dsub>
 23fae38:	4602      	mov	r2, r0
 23fae3a:	460b      	mov	r3, r1
 23fae3c:	4640      	mov	r0, r8
 23fae3e:	4649      	mov	r1, r9
 23fae40:	f7e9 f9c6 	bl	23e41d0 <__aeabi_dsub>
 23fae44:	a33a      	add	r3, pc, #232	; (adr r3, 23faf30 <__ieee754_pow+0x528>)
 23fae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fae4a:	f7e9 fb79 	bl	23e4540 <__aeabi_dmul>
 23fae4e:	4680      	mov	r8, r0
 23fae50:	4689      	mov	r9, r1
 23fae52:	4630      	mov	r0, r6
 23fae54:	4639      	mov	r1, r7
 23fae56:	a338      	add	r3, pc, #224	; (adr r3, 23faf38 <__ieee754_pow+0x530>)
 23fae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fae5c:	f7e9 fb70 	bl	23e4540 <__aeabi_dmul>
 23fae60:	4602      	mov	r2, r0
 23fae62:	460b      	mov	r3, r1
 23fae64:	4640      	mov	r0, r8
 23fae66:	4649      	mov	r1, r9
 23fae68:	f7e9 f9b4 	bl	23e41d4 <__adddf3>
 23fae6c:	ec53 2b1c 	vmov	r2, r3, d12
 23fae70:	f7e9 f9b0 	bl	23e41d4 <__adddf3>
 23fae74:	4606      	mov	r6, r0
 23fae76:	460f      	mov	r7, r1
 23fae78:	9805      	ldr	r0, [sp, #20]
 23fae7a:	f7e9 faf7 	bl	23e446c <__aeabi_i2d>
 23fae7e:	4632      	mov	r2, r6
 23fae80:	4680      	mov	r8, r0
 23fae82:	4689      	mov	r9, r1
 23fae84:	463b      	mov	r3, r7
 23fae86:	ec51 0b19 	vmov	r0, r1, d9
 23fae8a:	f7e9 f9a3 	bl	23e41d4 <__adddf3>
 23fae8e:	ec53 2b1d 	vmov	r2, r3, d13
 23fae92:	f7e9 f99f 	bl	23e41d4 <__adddf3>
 23fae96:	4642      	mov	r2, r8
 23fae98:	464b      	mov	r3, r9
 23fae9a:	f7e9 f99b 	bl	23e41d4 <__adddf3>
 23fae9e:	2000      	movs	r0, #0
 23faea0:	4642      	mov	r2, r8
 23faea2:	464b      	mov	r3, r9
 23faea4:	4682      	mov	sl, r0
 23faea6:	468b      	mov	fp, r1
 23faea8:	f7e9 f992 	bl	23e41d0 <__aeabi_dsub>
 23faeac:	ec53 2b1d 	vmov	r2, r3, d13
 23faeb0:	f7e9 f98e 	bl	23e41d0 <__aeabi_dsub>
 23faeb4:	ec53 2b19 	vmov	r2, r3, d9
 23faeb8:	f7e9 f98a 	bl	23e41d0 <__aeabi_dsub>
 23faebc:	4602      	mov	r2, r0
 23faebe:	460b      	mov	r3, r1
 23faec0:	4630      	mov	r0, r6
 23faec2:	4639      	mov	r1, r7
 23faec4:	f7e9 f984 	bl	23e41d0 <__aeabi_dsub>
 23faec8:	9b00      	ldr	r3, [sp, #0]
 23faeca:	9a04      	ldr	r2, [sp, #16]
 23faecc:	3b01      	subs	r3, #1
 23faece:	4313      	orrs	r3, r2
 23faed0:	ec41 0b18 	vmov	d8, r0, r1
 23faed4:	f040 81dc 	bne.w	23fb290 <__ieee754_pow+0x888>
 23faed8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23faf40 <__ieee754_pow+0x538>
 23faedc:	eeb0 9a47 	vmov.f32	s18, s14
 23faee0:	eef0 9a67 	vmov.f32	s19, s15
 23faee4:	e03c      	b.n	23faf60 <__ieee754_pow+0x558>
 23faee6:	bf00      	nop
	...
 23faef4:	3ff00000 	.word	0x3ff00000
 23faef8:	4a454eef 	.word	0x4a454eef
 23faefc:	3fca7e28 	.word	0x3fca7e28
 23faf00:	93c9db65 	.word	0x93c9db65
 23faf04:	3fcd864a 	.word	0x3fcd864a
 23faf08:	a91d4101 	.word	0xa91d4101
 23faf0c:	3fd17460 	.word	0x3fd17460
 23faf10:	518f264d 	.word	0x518f264d
 23faf14:	3fd55555 	.word	0x3fd55555
 23faf18:	db6fabff 	.word	0xdb6fabff
 23faf1c:	3fdb6db6 	.word	0x3fdb6db6
 23faf20:	33333303 	.word	0x33333303
 23faf24:	3fe33333 	.word	0x3fe33333
 23faf28:	e0000000 	.word	0xe0000000
 23faf2c:	3feec709 	.word	0x3feec709
 23faf30:	dc3a03fd 	.word	0xdc3a03fd
 23faf34:	3feec709 	.word	0x3feec709
 23faf38:	145b01f5 	.word	0x145b01f5
 23faf3c:	be3e2fe0 	.word	0xbe3e2fe0
 23faf40:	00000000 	.word	0x00000000
 23faf44:	bff00000 	.word	0xbff00000
 23faf48:	7ff00000 	.word	0x7ff00000
 23faf4c:	43400000 	.word	0x43400000
 23faf50:	3ff00000 	.word	0x3ff00000
 23faf54:	0003988e 	.word	0x0003988e
 23faf58:	000bb679 	.word	0x000bb679
 23faf5c:	40080000 	.word	0x40080000
 23faf60:	2300      	movs	r3, #0
 23faf62:	4620      	mov	r0, r4
 23faf64:	4629      	mov	r1, r5
 23faf66:	e9cd 4500 	strd	r4, r5, [sp]
 23faf6a:	9300      	str	r3, [sp, #0]
 23faf6c:	e9dd 8900 	ldrd	r8, r9, [sp]
 23faf70:	4642      	mov	r2, r8
 23faf72:	464b      	mov	r3, r9
 23faf74:	f7e9 f92c 	bl	23e41d0 <__aeabi_dsub>
 23faf78:	465b      	mov	r3, fp
 23faf7a:	4652      	mov	r2, sl
 23faf7c:	f7e9 fae0 	bl	23e4540 <__aeabi_dmul>
 23faf80:	4606      	mov	r6, r0
 23faf82:	460f      	mov	r7, r1
 23faf84:	4622      	mov	r2, r4
 23faf86:	462b      	mov	r3, r5
 23faf88:	ec51 0b18 	vmov	r0, r1, d8
 23faf8c:	f7e9 fad8 	bl	23e4540 <__aeabi_dmul>
 23faf90:	4602      	mov	r2, r0
 23faf92:	460b      	mov	r3, r1
 23faf94:	4630      	mov	r0, r6
 23faf96:	4639      	mov	r1, r7
 23faf98:	f7e9 f91c 	bl	23e41d4 <__adddf3>
 23faf9c:	4642      	mov	r2, r8
 23faf9e:	4604      	mov	r4, r0
 23fafa0:	460d      	mov	r5, r1
 23fafa2:	464b      	mov	r3, r9
 23fafa4:	4659      	mov	r1, fp
 23fafa6:	4650      	mov	r0, sl
 23fafa8:	46a0      	mov	r8, r4
 23fafaa:	f7e9 fac9 	bl	23e4540 <__aeabi_dmul>
 23fafae:	4606      	mov	r6, r0
 23fafb0:	460f      	mov	r7, r1
 23fafb2:	4620      	mov	r0, r4
 23fafb4:	4629      	mov	r1, r5
 23fafb6:	4632      	mov	r2, r6
 23fafb8:	463b      	mov	r3, r7
 23fafba:	46a9      	mov	r9, r5
 23fafbc:	f7e9 f90a 	bl	23e41d4 <__adddf3>
 23fafc0:	4bd5      	ldr	r3, [pc, #852]	; (23fb318 <__ieee754_pow+0x910>)
 23fafc2:	4604      	mov	r4, r0
 23fafc4:	460d      	mov	r5, r1
 23fafc6:	4299      	cmp	r1, r3
 23fafc8:	468b      	mov	fp, r1
 23fafca:	f340 813b 	ble.w	23fb244 <__ieee754_pow+0x83c>
 23fafce:	4bd3      	ldr	r3, [pc, #844]	; (23fb31c <__ieee754_pow+0x914>)
 23fafd0:	440b      	add	r3, r1
 23fafd2:	4303      	orrs	r3, r0
 23fafd4:	f040 8235 	bne.w	23fb442 <__ieee754_pow+0xa3a>
 23fafd8:	4640      	mov	r0, r8
 23fafda:	4649      	mov	r1, r9
 23fafdc:	a3b6      	add	r3, pc, #728	; (adr r3, 23fb2b8 <__ieee754_pow+0x8b0>)
 23fafde:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fafe2:	f7e9 f8f7 	bl	23e41d4 <__adddf3>
 23fafe6:	4632      	mov	r2, r6
 23fafe8:	463b      	mov	r3, r7
 23fafea:	ec41 0b18 	vmov	d8, r0, r1
 23fafee:	4620      	mov	r0, r4
 23faff0:	4629      	mov	r1, r5
 23faff2:	f7e9 f8ed 	bl	23e41d0 <__aeabi_dsub>
 23faff6:	4602      	mov	r2, r0
 23faff8:	460b      	mov	r3, r1
 23faffa:	ec51 0b18 	vmov	r0, r1, d8
 23faffe:	f7e9 fd2f 	bl	23e4a60 <__aeabi_dcmpgt>
 23fb002:	2800      	cmp	r0, #0
 23fb004:	f040 821d 	bne.w	23fb442 <__ieee754_pow+0xa3a>
 23fb008:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fb00c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fb010:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fb014:	4cc2      	ldr	r4, [pc, #776]	; (23fb320 <__ieee754_pow+0x918>)
 23fb016:	f1bb 0f00 	cmp.w	fp, #0
 23fb01a:	fa42 f303 	asr.w	r3, r2, r3
 23fb01e:	f04f 0000 	mov.w	r0, #0
 23fb022:	445b      	add	r3, fp
 23fb024:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fb028:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fb02c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fb030:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fb034:	fa44 f402 	asr.w	r4, r4, r2
 23fb038:	f1c2 0214 	rsb	r2, r2, #20
 23fb03c:	ea23 0104 	bic.w	r1, r3, r4
 23fb040:	fa4a fa02 	asr.w	sl, sl, r2
 23fb044:	4602      	mov	r2, r0
 23fb046:	4630      	mov	r0, r6
 23fb048:	460b      	mov	r3, r1
 23fb04a:	bfb8      	it	lt
 23fb04c:	f1ca 0a00 	rsblt	sl, sl, #0
 23fb050:	4639      	mov	r1, r7
 23fb052:	f7e9 f8bd 	bl	23e41d0 <__aeabi_dsub>
 23fb056:	4602      	mov	r2, r0
 23fb058:	460b      	mov	r3, r1
 23fb05a:	4606      	mov	r6, r0
 23fb05c:	460f      	mov	r7, r1
 23fb05e:	4640      	mov	r0, r8
 23fb060:	4649      	mov	r1, r9
 23fb062:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23fb066:	f7e9 f8b5 	bl	23e41d4 <__adddf3>
 23fb06a:	460d      	mov	r5, r1
 23fb06c:	2400      	movs	r4, #0
 23fb06e:	4629      	mov	r1, r5
 23fb070:	a393      	add	r3, pc, #588	; (adr r3, 23fb2c0 <__ieee754_pow+0x8b8>)
 23fb072:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb076:	4620      	mov	r0, r4
 23fb078:	f7e9 fa62 	bl	23e4540 <__aeabi_dmul>
 23fb07c:	4632      	mov	r2, r6
 23fb07e:	463b      	mov	r3, r7
 23fb080:	4606      	mov	r6, r0
 23fb082:	460f      	mov	r7, r1
 23fb084:	4620      	mov	r0, r4
 23fb086:	4629      	mov	r1, r5
 23fb088:	f7e9 f8a2 	bl	23e41d0 <__aeabi_dsub>
 23fb08c:	4602      	mov	r2, r0
 23fb08e:	460b      	mov	r3, r1
 23fb090:	4640      	mov	r0, r8
 23fb092:	4649      	mov	r1, r9
 23fb094:	f7e9 f89c 	bl	23e41d0 <__aeabi_dsub>
 23fb098:	a38b      	add	r3, pc, #556	; (adr r3, 23fb2c8 <__ieee754_pow+0x8c0>)
 23fb09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb09e:	f7e9 fa4f 	bl	23e4540 <__aeabi_dmul>
 23fb0a2:	4680      	mov	r8, r0
 23fb0a4:	4689      	mov	r9, r1
 23fb0a6:	4620      	mov	r0, r4
 23fb0a8:	4629      	mov	r1, r5
 23fb0aa:	a389      	add	r3, pc, #548	; (adr r3, 23fb2d0 <__ieee754_pow+0x8c8>)
 23fb0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb0b0:	f7e9 fa46 	bl	23e4540 <__aeabi_dmul>
 23fb0b4:	4602      	mov	r2, r0
 23fb0b6:	460b      	mov	r3, r1
 23fb0b8:	4640      	mov	r0, r8
 23fb0ba:	4649      	mov	r1, r9
 23fb0bc:	f7e9 f88a 	bl	23e41d4 <__adddf3>
 23fb0c0:	4680      	mov	r8, r0
 23fb0c2:	4689      	mov	r9, r1
 23fb0c4:	4630      	mov	r0, r6
 23fb0c6:	4642      	mov	r2, r8
 23fb0c8:	4639      	mov	r1, r7
 23fb0ca:	464b      	mov	r3, r9
 23fb0cc:	f7e9 f882 	bl	23e41d4 <__adddf3>
 23fb0d0:	4632      	mov	r2, r6
 23fb0d2:	4604      	mov	r4, r0
 23fb0d4:	460d      	mov	r5, r1
 23fb0d6:	463b      	mov	r3, r7
 23fb0d8:	f7e9 f87a 	bl	23e41d0 <__aeabi_dsub>
 23fb0dc:	4602      	mov	r2, r0
 23fb0de:	460b      	mov	r3, r1
 23fb0e0:	4640      	mov	r0, r8
 23fb0e2:	4649      	mov	r1, r9
 23fb0e4:	f7e9 f874 	bl	23e41d0 <__aeabi_dsub>
 23fb0e8:	4622      	mov	r2, r4
 23fb0ea:	4680      	mov	r8, r0
 23fb0ec:	4689      	mov	r9, r1
 23fb0ee:	462b      	mov	r3, r5
 23fb0f0:	4620      	mov	r0, r4
 23fb0f2:	4629      	mov	r1, r5
 23fb0f4:	f7e9 fa24 	bl	23e4540 <__aeabi_dmul>
 23fb0f8:	4606      	mov	r6, r0
 23fb0fa:	460f      	mov	r7, r1
 23fb0fc:	a376      	add	r3, pc, #472	; (adr r3, 23fb2d8 <__ieee754_pow+0x8d0>)
 23fb0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb102:	f7e9 fa1d 	bl	23e4540 <__aeabi_dmul>
 23fb106:	a376      	add	r3, pc, #472	; (adr r3, 23fb2e0 <__ieee754_pow+0x8d8>)
 23fb108:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb10c:	f7e9 f860 	bl	23e41d0 <__aeabi_dsub>
 23fb110:	4632      	mov	r2, r6
 23fb112:	463b      	mov	r3, r7
 23fb114:	f7e9 fa14 	bl	23e4540 <__aeabi_dmul>
 23fb118:	a373      	add	r3, pc, #460	; (adr r3, 23fb2e8 <__ieee754_pow+0x8e0>)
 23fb11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb11e:	f7e9 f859 	bl	23e41d4 <__adddf3>
 23fb122:	4632      	mov	r2, r6
 23fb124:	463b      	mov	r3, r7
 23fb126:	f7e9 fa0b 	bl	23e4540 <__aeabi_dmul>
 23fb12a:	a371      	add	r3, pc, #452	; (adr r3, 23fb2f0 <__ieee754_pow+0x8e8>)
 23fb12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb130:	f7e9 f84e 	bl	23e41d0 <__aeabi_dsub>
 23fb134:	4632      	mov	r2, r6
 23fb136:	463b      	mov	r3, r7
 23fb138:	f7e9 fa02 	bl	23e4540 <__aeabi_dmul>
 23fb13c:	a36e      	add	r3, pc, #440	; (adr r3, 23fb2f8 <__ieee754_pow+0x8f0>)
 23fb13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb142:	f7e9 f847 	bl	23e41d4 <__adddf3>
 23fb146:	4632      	mov	r2, r6
 23fb148:	463b      	mov	r3, r7
 23fb14a:	f7e9 f9f9 	bl	23e4540 <__aeabi_dmul>
 23fb14e:	4602      	mov	r2, r0
 23fb150:	460b      	mov	r3, r1
 23fb152:	4620      	mov	r0, r4
 23fb154:	4629      	mov	r1, r5
 23fb156:	f7e9 f83b 	bl	23e41d0 <__aeabi_dsub>
 23fb15a:	4606      	mov	r6, r0
 23fb15c:	460f      	mov	r7, r1
 23fb15e:	4620      	mov	r0, r4
 23fb160:	4632      	mov	r2, r6
 23fb162:	4629      	mov	r1, r5
 23fb164:	463b      	mov	r3, r7
 23fb166:	f7e9 f9eb 	bl	23e4540 <__aeabi_dmul>
 23fb16a:	2200      	movs	r2, #0
 23fb16c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fb170:	ec41 0b18 	vmov	d8, r0, r1
 23fb174:	4630      	mov	r0, r6
 23fb176:	4639      	mov	r1, r7
 23fb178:	f7e9 f82a 	bl	23e41d0 <__aeabi_dsub>
 23fb17c:	4602      	mov	r2, r0
 23fb17e:	460b      	mov	r3, r1
 23fb180:	ec51 0b18 	vmov	r0, r1, d8
 23fb184:	f7e9 fb06 	bl	23e4794 <__aeabi_ddiv>
 23fb188:	4642      	mov	r2, r8
 23fb18a:	4606      	mov	r6, r0
 23fb18c:	460f      	mov	r7, r1
 23fb18e:	464b      	mov	r3, r9
 23fb190:	4620      	mov	r0, r4
 23fb192:	4629      	mov	r1, r5
 23fb194:	f7e9 f9d4 	bl	23e4540 <__aeabi_dmul>
 23fb198:	4642      	mov	r2, r8
 23fb19a:	464b      	mov	r3, r9
 23fb19c:	f7e9 f81a 	bl	23e41d4 <__adddf3>
 23fb1a0:	4602      	mov	r2, r0
 23fb1a2:	460b      	mov	r3, r1
 23fb1a4:	4630      	mov	r0, r6
 23fb1a6:	4639      	mov	r1, r7
 23fb1a8:	f7e9 f812 	bl	23e41d0 <__aeabi_dsub>
 23fb1ac:	4622      	mov	r2, r4
 23fb1ae:	462b      	mov	r3, r5
 23fb1b0:	f7e9 f80e 	bl	23e41d0 <__aeabi_dsub>
 23fb1b4:	4602      	mov	r2, r0
 23fb1b6:	460b      	mov	r3, r1
 23fb1b8:	2000      	movs	r0, #0
 23fb1ba:	495a      	ldr	r1, [pc, #360]	; (23fb324 <__ieee754_pow+0x91c>)
 23fb1bc:	f7e9 f808 	bl	23e41d0 <__aeabi_dsub>
 23fb1c0:	448b      	add	fp, r1
 23fb1c2:	4602      	mov	r2, r0
 23fb1c4:	460b      	mov	r3, r1
 23fb1c6:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fb1ca:	f2c0 816c 	blt.w	23fb4a6 <__ieee754_pow+0xa9e>
 23fb1ce:	4659      	mov	r1, fp
 23fb1d0:	ec53 2b19 	vmov	r2, r3, d9
 23fb1d4:	f7e9 f9b4 	bl	23e4540 <__aeabi_dmul>
 23fb1d8:	ec41 0b10 	vmov	d0, r0, r1
 23fb1dc:	e442      	b.n	23faa64 <__ieee754_pow+0x5c>
 23fb1de:	ec47 6b10 	vmov	d0, r6, r7
 23fb1e2:	9200      	str	r2, [sp, #0]
 23fb1e4:	f7ff f938 	bl	23fa458 <fabs>
 23fb1e8:	9a00      	ldr	r2, [sp, #0]
 23fb1ea:	2a00      	cmp	r2, #0
 23fb1ec:	f47f acbd 	bne.w	23fab6a <__ieee754_pow+0x162>
 23fb1f0:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fb1f4:	4a4b      	ldr	r2, [pc, #300]	; (23fb324 <__ieee754_pow+0x91c>)
 23fb1f6:	4293      	cmp	r3, r2
 23fb1f8:	d003      	beq.n	23fb202 <__ieee754_pow+0x7fa>
 23fb1fa:	f1b8 0f00 	cmp.w	r8, #0
 23fb1fe:	f47f acb4 	bne.w	23fab6a <__ieee754_pow+0x162>
 23fb202:	2300      	movs	r3, #0
 23fb204:	9300      	str	r3, [sp, #0]
 23fb206:	f1bb 0f00 	cmp.w	fp, #0
 23fb20a:	da07      	bge.n	23fb21c <__ieee754_pow+0x814>
 23fb20c:	2000      	movs	r0, #0
 23fb20e:	4945      	ldr	r1, [pc, #276]	; (23fb324 <__ieee754_pow+0x91c>)
 23fb210:	ec53 2b10 	vmov	r2, r3, d0
 23fb214:	f7e9 fabe 	bl	23e4794 <__aeabi_ddiv>
 23fb218:	ec41 0b10 	vmov	d0, r0, r1
 23fb21c:	f1b9 0f00 	cmp.w	r9, #0
 23fb220:	f6bf ac20 	bge.w	23faa64 <__ieee754_pow+0x5c>
 23fb224:	4b40      	ldr	r3, [pc, #256]	; (23fb328 <__ieee754_pow+0x920>)
 23fb226:	9a00      	ldr	r2, [sp, #0]
 23fb228:	4443      	add	r3, r8
 23fb22a:	4313      	orrs	r3, r2
 23fb22c:	f040 812d 	bne.w	23fb48a <__ieee754_pow+0xa82>
 23fb230:	ec53 2b10 	vmov	r2, r3, d0
 23fb234:	e49b      	b.n	23fab6e <__ieee754_pow+0x166>
 23fb236:	f1bb 0f00 	cmp.w	fp, #0
 23fb23a:	f6ff ac57 	blt.w	23faaec <__ieee754_pow+0xe4>
 23fb23e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fb300 <__ieee754_pow+0x8f8>
 23fb242:	e40f      	b.n	23faa64 <__ieee754_pow+0x5c>
 23fb244:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fb248:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fb330 <__ieee754_pow+0x928>
 23fb24c:	4563      	cmp	r3, ip
 23fb24e:	f340 80f0 	ble.w	23fb432 <__ieee754_pow+0xa2a>
 23fb252:	4b36      	ldr	r3, [pc, #216]	; (23fb32c <__ieee754_pow+0x924>)
 23fb254:	440b      	add	r3, r1
 23fb256:	4303      	orrs	r3, r0
 23fb258:	d10a      	bne.n	23fb270 <__ieee754_pow+0x868>
 23fb25a:	4632      	mov	r2, r6
 23fb25c:	463b      	mov	r3, r7
 23fb25e:	f7e8 ffb7 	bl	23e41d0 <__aeabi_dsub>
 23fb262:	4642      	mov	r2, r8
 23fb264:	464b      	mov	r3, r9
 23fb266:	f7e9 fbf1 	bl	23e4a4c <__aeabi_dcmpge>
 23fb26a:	2800      	cmp	r0, #0
 23fb26c:	f43f aecc 	beq.w	23fb008 <__ieee754_pow+0x600>
 23fb270:	a325      	add	r3, pc, #148	; (adr r3, 23fb308 <__ieee754_pow+0x900>)
 23fb272:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb276:	ec51 0b19 	vmov	r0, r1, d9
 23fb27a:	f7e9 f961 	bl	23e4540 <__aeabi_dmul>
 23fb27e:	a322      	add	r3, pc, #136	; (adr r3, 23fb308 <__ieee754_pow+0x900>)
 23fb280:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb284:	f7e9 f95c 	bl	23e4540 <__aeabi_dmul>
 23fb288:	ec41 0b10 	vmov	d0, r0, r1
 23fb28c:	f7ff bbea 	b.w	23faa64 <__ieee754_pow+0x5c>
 23fb290:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fb310 <__ieee754_pow+0x908>
 23fb294:	eeb0 9a47 	vmov.f32	s18, s14
 23fb298:	eef0 9a67 	vmov.f32	s19, s15
 23fb29c:	e660      	b.n	23faf60 <__ieee754_pow+0x558>
 23fb29e:	f1bb 0f00 	cmp.w	fp, #0
 23fb2a2:	dacc      	bge.n	23fb23e <__ieee754_pow+0x836>
 23fb2a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fb2a8:	ee00 4a10 	vmov	s0, r4
 23fb2ac:	ee00 3a90 	vmov	s1, r3
 23fb2b0:	f7ff bbd8 	b.w	23faa64 <__ieee754_pow+0x5c>
 23fb2b4:	f3af 8000 	nop.w
 23fb2b8:	652b82fe 	.word	0x652b82fe
 23fb2bc:	3c971547 	.word	0x3c971547
 23fb2c0:	00000000 	.word	0x00000000
 23fb2c4:	3fe62e43 	.word	0x3fe62e43
 23fb2c8:	fefa39ef 	.word	0xfefa39ef
 23fb2cc:	3fe62e42 	.word	0x3fe62e42
 23fb2d0:	0ca86c39 	.word	0x0ca86c39
 23fb2d4:	be205c61 	.word	0xbe205c61
 23fb2d8:	72bea4d0 	.word	0x72bea4d0
 23fb2dc:	3e663769 	.word	0x3e663769
 23fb2e0:	c5d26bf1 	.word	0xc5d26bf1
 23fb2e4:	3ebbbd41 	.word	0x3ebbbd41
 23fb2e8:	af25de2c 	.word	0xaf25de2c
 23fb2ec:	3f11566a 	.word	0x3f11566a
 23fb2f0:	16bebd93 	.word	0x16bebd93
 23fb2f4:	3f66c16c 	.word	0x3f66c16c
 23fb2f8:	5555553e 	.word	0x5555553e
 23fb2fc:	3fc55555 	.word	0x3fc55555
	...
 23fb308:	c2f8f359 	.word	0xc2f8f359
 23fb30c:	01a56e1f 	.word	0x01a56e1f
 23fb310:	00000000 	.word	0x00000000
 23fb314:	3ff00000 	.word	0x3ff00000
 23fb318:	408fffff 	.word	0x408fffff
 23fb31c:	bf700000 	.word	0xbf700000
 23fb320:	000fffff 	.word	0x000fffff
 23fb324:	3ff00000 	.word	0x3ff00000
 23fb328:	c0100000 	.word	0xc0100000
 23fb32c:	3f6f3400 	.word	0x3f6f3400
 23fb330:	4090cbff 	.word	0x4090cbff
 23fb334:	4598      	cmp	r8, r3
 23fb336:	f6ff af7e 	blt.w	23fb236 <__ieee754_pow+0x82e>
 23fb33a:	4b79      	ldr	r3, [pc, #484]	; (23fb520 <__ieee754_pow+0xb18>)
 23fb33c:	4598      	cmp	r8, r3
 23fb33e:	f73f abd1 	bgt.w	23faae4 <__ieee754_pow+0xdc>
 23fb342:	2200      	movs	r2, #0
 23fb344:	4b76      	ldr	r3, [pc, #472]	; (23fb520 <__ieee754_pow+0xb18>)
 23fb346:	ec51 0b10 	vmov	r0, r1, d0
 23fb34a:	f7e8 ff41 	bl	23e41d0 <__aeabi_dsub>
 23fb34e:	4606      	mov	r6, r0
 23fb350:	460f      	mov	r7, r1
 23fb352:	a363      	add	r3, pc, #396	; (adr r3, 23fb4e0 <__ieee754_pow+0xad8>)
 23fb354:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb358:	f7e9 f8f2 	bl	23e4540 <__aeabi_dmul>
 23fb35c:	4682      	mov	sl, r0
 23fb35e:	468b      	mov	fp, r1
 23fb360:	4630      	mov	r0, r6
 23fb362:	4639      	mov	r1, r7
 23fb364:	a360      	add	r3, pc, #384	; (adr r3, 23fb4e8 <__ieee754_pow+0xae0>)
 23fb366:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb36a:	f7e9 f8e9 	bl	23e4540 <__aeabi_dmul>
 23fb36e:	2200      	movs	r2, #0
 23fb370:	4b6c      	ldr	r3, [pc, #432]	; (23fb524 <__ieee754_pow+0xb1c>)
 23fb372:	ec41 0b18 	vmov	d8, r0, r1
 23fb376:	4630      	mov	r0, r6
 23fb378:	4639      	mov	r1, r7
 23fb37a:	f7e9 f8e1 	bl	23e4540 <__aeabi_dmul>
 23fb37e:	4602      	mov	r2, r0
 23fb380:	460b      	mov	r3, r1
 23fb382:	a15b      	add	r1, pc, #364	; (adr r1, 23fb4f0 <__ieee754_pow+0xae8>)
 23fb384:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb388:	f7e8 ff22 	bl	23e41d0 <__aeabi_dsub>
 23fb38c:	4632      	mov	r2, r6
 23fb38e:	463b      	mov	r3, r7
 23fb390:	f7e9 f8d6 	bl	23e4540 <__aeabi_dmul>
 23fb394:	4602      	mov	r2, r0
 23fb396:	460b      	mov	r3, r1
 23fb398:	2000      	movs	r0, #0
 23fb39a:	4963      	ldr	r1, [pc, #396]	; (23fb528 <__ieee754_pow+0xb20>)
 23fb39c:	f7e8 ff18 	bl	23e41d0 <__aeabi_dsub>
 23fb3a0:	4680      	mov	r8, r0
 23fb3a2:	4689      	mov	r9, r1
 23fb3a4:	4632      	mov	r2, r6
 23fb3a6:	463b      	mov	r3, r7
 23fb3a8:	4630      	mov	r0, r6
 23fb3aa:	4639      	mov	r1, r7
 23fb3ac:	f7e9 f8c8 	bl	23e4540 <__aeabi_dmul>
 23fb3b0:	4602      	mov	r2, r0
 23fb3b2:	460b      	mov	r3, r1
 23fb3b4:	4640      	mov	r0, r8
 23fb3b6:	4649      	mov	r1, r9
 23fb3b8:	f7e9 f8c2 	bl	23e4540 <__aeabi_dmul>
 23fb3bc:	a34e      	add	r3, pc, #312	; (adr r3, 23fb4f8 <__ieee754_pow+0xaf0>)
 23fb3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb3c2:	f7e9 f8bd 	bl	23e4540 <__aeabi_dmul>
 23fb3c6:	4602      	mov	r2, r0
 23fb3c8:	460b      	mov	r3, r1
 23fb3ca:	ec51 0b18 	vmov	r0, r1, d8
 23fb3ce:	f7e8 feff 	bl	23e41d0 <__aeabi_dsub>
 23fb3d2:	4606      	mov	r6, r0
 23fb3d4:	460f      	mov	r7, r1
 23fb3d6:	4650      	mov	r0, sl
 23fb3d8:	4659      	mov	r1, fp
 23fb3da:	4632      	mov	r2, r6
 23fb3dc:	463b      	mov	r3, r7
 23fb3de:	f7e8 fef9 	bl	23e41d4 <__adddf3>
 23fb3e2:	2000      	movs	r0, #0
 23fb3e4:	4652      	mov	r2, sl
 23fb3e6:	465b      	mov	r3, fp
 23fb3e8:	4682      	mov	sl, r0
 23fb3ea:	468b      	mov	fp, r1
 23fb3ec:	e564      	b.n	23faeb8 <__ieee754_pow+0x4b0>
 23fb3ee:	4632      	mov	r2, r6
 23fb3f0:	463b      	mov	r3, r7
 23fb3f2:	4630      	mov	r0, r6
 23fb3f4:	4639      	mov	r1, r7
 23fb3f6:	f7e9 f8a3 	bl	23e4540 <__aeabi_dmul>
 23fb3fa:	ec41 0b10 	vmov	d0, r0, r1
 23fb3fe:	f7ff bb31 	b.w	23faa64 <__ieee754_pow+0x5c>
 23fb402:	2000      	movs	r0, #0
 23fb404:	4946      	ldr	r1, [pc, #280]	; (23fb520 <__ieee754_pow+0xb18>)
 23fb406:	4632      	mov	r2, r6
 23fb408:	463b      	mov	r3, r7
 23fb40a:	f7e9 f9c3 	bl	23e4794 <__aeabi_ddiv>
 23fb40e:	ec41 0b10 	vmov	d0, r0, r1
 23fb412:	f7ff bb27 	b.w	23faa64 <__ieee754_pow+0x5c>
 23fb416:	2b00      	cmp	r3, #0
 23fb418:	f47f aee1 	bne.w	23fb1de <__ieee754_pow+0x7d6>
 23fb41c:	f1c1 0114 	rsb	r1, r1, #20
 23fb420:	fa4a f001 	asr.w	r0, sl, r1
 23fb424:	fa00 f101 	lsl.w	r1, r0, r1
 23fb428:	4551      	cmp	r1, sl
 23fb42a:	d04d      	beq.n	23fb4c8 <__ieee754_pow+0xac0>
 23fb42c:	9300      	str	r3, [sp, #0]
 23fb42e:	f7ff bb27 	b.w	23faa80 <__ieee754_pow+0x78>
 23fb432:	4a3d      	ldr	r2, [pc, #244]	; (23fb528 <__ieee754_pow+0xb20>)
 23fb434:	4293      	cmp	r3, r2
 23fb436:	dc4e      	bgt.n	23fb4d6 <__ieee754_pow+0xace>
 23fb438:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fb43c:	4693      	mov	fp, r2
 23fb43e:	4692      	mov	sl, r2
 23fb440:	e614      	b.n	23fb06c <__ieee754_pow+0x664>
 23fb442:	a32f      	add	r3, pc, #188	; (adr r3, 23fb500 <__ieee754_pow+0xaf8>)
 23fb444:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb448:	ec51 0b19 	vmov	r0, r1, d9
 23fb44c:	f7e9 f878 	bl	23e4540 <__aeabi_dmul>
 23fb450:	a32b      	add	r3, pc, #172	; (adr r3, 23fb500 <__ieee754_pow+0xaf8>)
 23fb452:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb456:	f7e9 f873 	bl	23e4540 <__aeabi_dmul>
 23fb45a:	ec41 0b10 	vmov	d0, r0, r1
 23fb45e:	f7ff bb01 	b.w	23faa64 <__ieee754_pow+0x5c>
 23fb462:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fb508 <__ieee754_pow+0xb00>
 23fb466:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fb46a:	eeb0 da47 	vmov.f32	s26, s14
 23fb46e:	eef0 da67 	vmov.f32	s27, s15
 23fb472:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fb510 <__ieee754_pow+0xb08>
 23fb476:	eeb0 ca47 	vmov.f32	s24, s14
 23fb47a:	eef0 ca67 	vmov.f32	s25, s15
 23fb47e:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fb518 <__ieee754_pow+0xb10>
 23fb482:	ec51 0b17 	vmov	r0, r1, d7
 23fb486:	f7ff bbcc 	b.w	23fac22 <__ieee754_pow+0x21a>
 23fb48a:	9b00      	ldr	r3, [sp, #0]
 23fb48c:	2b01      	cmp	r3, #1
 23fb48e:	f47f aae9 	bne.w	23faa64 <__ieee754_pow+0x5c>
 23fb492:	ee10 1a90 	vmov	r1, s1
 23fb496:	ee10 2a10 	vmov	r2, s0
 23fb49a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb49e:	ec43 2b10 	vmov	d0, r2, r3
 23fb4a2:	f7ff badf 	b.w	23faa64 <__ieee754_pow+0x5c>
 23fb4a6:	4650      	mov	r0, sl
 23fb4a8:	ec43 2b10 	vmov	d0, r2, r3
 23fb4ac:	f7fe ffe0 	bl	23fa470 <scalbn>
 23fb4b0:	ec51 0b10 	vmov	r0, r1, d0
 23fb4b4:	e68c      	b.n	23fb1d0 <__ieee754_pow+0x7c8>
 23fb4b6:	ec47 6b10 	vmov	d0, r6, r7
 23fb4ba:	b007      	add	sp, #28
 23fb4bc:	ecbd 8b0c 	vpop	{d8-d13}
 23fb4c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb4c4:	f000 ba5a 	b.w	23fb97c <__ieee754_sqrt>
 23fb4c8:	f000 0001 	and.w	r0, r0, #1
 23fb4cc:	f1c0 0302 	rsb	r3, r0, #2
 23fb4d0:	9300      	str	r3, [sp, #0]
 23fb4d2:	f7ff bad5 	b.w	23faa80 <__ieee754_pow+0x78>
 23fb4d6:	151b      	asrs	r3, r3, #20
 23fb4d8:	e598      	b.n	23fb00c <__ieee754_pow+0x604>
 23fb4da:	bf00      	nop
 23fb4dc:	f3af 8000 	nop.w
 23fb4e0:	60000000 	.word	0x60000000
 23fb4e4:	3ff71547 	.word	0x3ff71547
 23fb4e8:	f85ddf44 	.word	0xf85ddf44
 23fb4ec:	3e54ae0b 	.word	0x3e54ae0b
 23fb4f0:	55555555 	.word	0x55555555
 23fb4f4:	3fd55555 	.word	0x3fd55555
 23fb4f8:	652b82fe 	.word	0x652b82fe
 23fb4fc:	3ff71547 	.word	0x3ff71547
 23fb500:	8800759c 	.word	0x8800759c
 23fb504:	7e37e43c 	.word	0x7e37e43c
 23fb508:	40000000 	.word	0x40000000
 23fb50c:	3fe2b803 	.word	0x3fe2b803
 23fb510:	43cfd006 	.word	0x43cfd006
 23fb514:	3e4cfdeb 	.word	0x3e4cfdeb
 23fb518:	00000000 	.word	0x00000000
 23fb51c:	3ff80000 	.word	0x3ff80000
 23fb520:	3ff00000 	.word	0x3ff00000
 23fb524:	3fd00000 	.word	0x3fd00000
 23fb528:	3fe00000 	.word	0x3fe00000
 23fb52c:	00000000 	.word	0x00000000

023fb530 <__ieee754_rem_pio2>:
 23fb530:	ec53 2b10 	vmov	r2, r3, d0
 23fb534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb538:	4991      	ldr	r1, [pc, #580]	; (23fb780 <__ieee754_rem_pio2+0x250>)
 23fb53a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23fb53e:	4604      	mov	r4, r0
 23fb540:	428d      	cmp	r5, r1
 23fb542:	ed2d 8b06 	vpush	{d8-d10}
 23fb546:	b08b      	sub	sp, #44	; 0x2c
 23fb548:	f340 808c 	ble.w	23fb664 <__ieee754_rem_pio2+0x134>
 23fb54c:	498d      	ldr	r1, [pc, #564]	; (23fb784 <__ieee754_rem_pio2+0x254>)
 23fb54e:	461f      	mov	r7, r3
 23fb550:	428d      	cmp	r5, r1
 23fb552:	dc2b      	bgt.n	23fb5ac <__ieee754_rem_pio2+0x7c>
 23fb554:	2f00      	cmp	r7, #0
 23fb556:	4619      	mov	r1, r3
 23fb558:	ee10 0a10 	vmov	r0, s0
 23fb55c:	a37e      	add	r3, pc, #504	; (adr r3, 23fb758 <__ieee754_rem_pio2+0x228>)
 23fb55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb562:	f340 81b8 	ble.w	23fb8d6 <__ieee754_rem_pio2+0x3a6>
 23fb566:	f7e8 fe33 	bl	23e41d0 <__aeabi_dsub>
 23fb56a:	4b87      	ldr	r3, [pc, #540]	; (23fb788 <__ieee754_rem_pio2+0x258>)
 23fb56c:	4680      	mov	r8, r0
 23fb56e:	4689      	mov	r9, r1
 23fb570:	429d      	cmp	r5, r3
 23fb572:	f000 808f 	beq.w	23fb694 <__ieee754_rem_pio2+0x164>
 23fb576:	2601      	movs	r6, #1
 23fb578:	a379      	add	r3, pc, #484	; (adr r3, 23fb760 <__ieee754_rem_pio2+0x230>)
 23fb57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb57e:	f7e8 fe27 	bl	23e41d0 <__aeabi_dsub>
 23fb582:	4602      	mov	r2, r0
 23fb584:	460b      	mov	r3, r1
 23fb586:	4640      	mov	r0, r8
 23fb588:	4649      	mov	r1, r9
 23fb58a:	e9c4 2300 	strd	r2, r3, [r4]
 23fb58e:	f7e8 fe1f 	bl	23e41d0 <__aeabi_dsub>
 23fb592:	a373      	add	r3, pc, #460	; (adr r3, 23fb760 <__ieee754_rem_pio2+0x230>)
 23fb594:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb598:	f7e8 fe1a 	bl	23e41d0 <__aeabi_dsub>
 23fb59c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb5a0:	4630      	mov	r0, r6
 23fb5a2:	b00b      	add	sp, #44	; 0x2c
 23fb5a4:	ecbd 8b06 	vpop	{d8-d10}
 23fb5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb5ac:	4977      	ldr	r1, [pc, #476]	; (23fb78c <__ieee754_rem_pio2+0x25c>)
 23fb5ae:	428d      	cmp	r5, r1
 23fb5b0:	f340 8092 	ble.w	23fb6d8 <__ieee754_rem_pio2+0x1a8>
 23fb5b4:	4976      	ldr	r1, [pc, #472]	; (23fb790 <__ieee754_rem_pio2+0x260>)
 23fb5b6:	428d      	cmp	r5, r1
 23fb5b8:	dc61      	bgt.n	23fb67e <__ieee754_rem_pio2+0x14e>
 23fb5ba:	152e      	asrs	r6, r5, #20
 23fb5bc:	ee10 0a10 	vmov	r0, s0
 23fb5c0:	4690      	mov	r8, r2
 23fb5c2:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23fb5c6:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23fb5ca:	4689      	mov	r9, r1
 23fb5cc:	f7e9 fa68 	bl	23e4aa0 <__aeabi_d2iz>
 23fb5d0:	f7e8 ff4c 	bl	23e446c <__aeabi_i2d>
 23fb5d4:	4602      	mov	r2, r0
 23fb5d6:	460b      	mov	r3, r1
 23fb5d8:	4640      	mov	r0, r8
 23fb5da:	4649      	mov	r1, r9
 23fb5dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23fb5e0:	f7e8 fdf6 	bl	23e41d0 <__aeabi_dsub>
 23fb5e4:	2200      	movs	r2, #0
 23fb5e6:	4b6b      	ldr	r3, [pc, #428]	; (23fb794 <__ieee754_rem_pio2+0x264>)
 23fb5e8:	f7e8 ffaa 	bl	23e4540 <__aeabi_dmul>
 23fb5ec:	4689      	mov	r9, r1
 23fb5ee:	4680      	mov	r8, r0
 23fb5f0:	f7e9 fa56 	bl	23e4aa0 <__aeabi_d2iz>
 23fb5f4:	4605      	mov	r5, r0
 23fb5f6:	f7e8 ff39 	bl	23e446c <__aeabi_i2d>
 23fb5fa:	4602      	mov	r2, r0
 23fb5fc:	460b      	mov	r3, r1
 23fb5fe:	4640      	mov	r0, r8
 23fb600:	4649      	mov	r1, r9
 23fb602:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fb606:	f7e8 fde3 	bl	23e41d0 <__aeabi_dsub>
 23fb60a:	2200      	movs	r2, #0
 23fb60c:	4b61      	ldr	r3, [pc, #388]	; (23fb794 <__ieee754_rem_pio2+0x264>)
 23fb60e:	f7e8 ff97 	bl	23e4540 <__aeabi_dmul>
 23fb612:	4602      	mov	r2, r0
 23fb614:	460b      	mov	r3, r1
 23fb616:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fb61a:	2200      	movs	r2, #0
 23fb61c:	2300      	movs	r3, #0
 23fb61e:	f7e9 f9f7 	bl	23e4a10 <__aeabi_dcmpeq>
 23fb622:	2800      	cmp	r0, #0
 23fb624:	f000 8155 	beq.w	23fb8d2 <__ieee754_rem_pio2+0x3a2>
 23fb628:	2d00      	cmp	r5, #0
 23fb62a:	bf0c      	ite	eq
 23fb62c:	2301      	moveq	r3, #1
 23fb62e:	2302      	movne	r3, #2
 23fb630:	4959      	ldr	r1, [pc, #356]	; (23fb798 <__ieee754_rem_pio2+0x268>)
 23fb632:	4632      	mov	r2, r6
 23fb634:	a804      	add	r0, sp, #16
 23fb636:	9101      	str	r1, [sp, #4]
 23fb638:	2102      	movs	r1, #2
 23fb63a:	9100      	str	r1, [sp, #0]
 23fb63c:	4621      	mov	r1, r4
 23fb63e:	f000 fb9f 	bl	23fbd80 <__kernel_rem_pio2>
 23fb642:	2f00      	cmp	r7, #0
 23fb644:	4606      	mov	r6, r0
 23fb646:	daab      	bge.n	23fb5a0 <__ieee754_rem_pio2+0x70>
 23fb648:	6861      	ldr	r1, [r4, #4]
 23fb64a:	4246      	negs	r6, r0
 23fb64c:	6822      	ldr	r2, [r4, #0]
 23fb64e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb652:	68e1      	ldr	r1, [r4, #12]
 23fb654:	e9c4 2300 	strd	r2, r3, [r4]
 23fb658:	68a2      	ldr	r2, [r4, #8]
 23fb65a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb65e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fb662:	e79d      	b.n	23fb5a0 <__ieee754_rem_pio2+0x70>
 23fb664:	2000      	movs	r0, #0
 23fb666:	2100      	movs	r1, #0
 23fb668:	2600      	movs	r6, #0
 23fb66a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb66e:	4630      	mov	r0, r6
 23fb670:	ed84 0b00 	vstr	d0, [r4]
 23fb674:	b00b      	add	sp, #44	; 0x2c
 23fb676:	ecbd 8b06 	vpop	{d8-d10}
 23fb67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb67e:	ee10 0a10 	vmov	r0, s0
 23fb682:	4619      	mov	r1, r3
 23fb684:	f7e8 fda4 	bl	23e41d0 <__aeabi_dsub>
 23fb688:	2600      	movs	r6, #0
 23fb68a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb68e:	e9c4 0100 	strd	r0, r1, [r4]
 23fb692:	e785      	b.n	23fb5a0 <__ieee754_rem_pio2+0x70>
 23fb694:	a334      	add	r3, pc, #208	; (adr r3, 23fb768 <__ieee754_rem_pio2+0x238>)
 23fb696:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb69a:	f7e8 fd99 	bl	23e41d0 <__aeabi_dsub>
 23fb69e:	4680      	mov	r8, r0
 23fb6a0:	4689      	mov	r9, r1
 23fb6a2:	2601      	movs	r6, #1
 23fb6a4:	a332      	add	r3, pc, #200	; (adr r3, 23fb770 <__ieee754_rem_pio2+0x240>)
 23fb6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb6aa:	f7e8 fd91 	bl	23e41d0 <__aeabi_dsub>
 23fb6ae:	4602      	mov	r2, r0
 23fb6b0:	460b      	mov	r3, r1
 23fb6b2:	4640      	mov	r0, r8
 23fb6b4:	4649      	mov	r1, r9
 23fb6b6:	e9c4 2300 	strd	r2, r3, [r4]
 23fb6ba:	f7e8 fd89 	bl	23e41d0 <__aeabi_dsub>
 23fb6be:	a32c      	add	r3, pc, #176	; (adr r3, 23fb770 <__ieee754_rem_pio2+0x240>)
 23fb6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb6c4:	f7e8 fd84 	bl	23e41d0 <__aeabi_dsub>
 23fb6c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb6cc:	4630      	mov	r0, r6
 23fb6ce:	b00b      	add	sp, #44	; 0x2c
 23fb6d0:	ecbd 8b06 	vpop	{d8-d10}
 23fb6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb6d8:	f7fe febe 	bl	23fa458 <fabs>
 23fb6dc:	ee10 0a10 	vmov	r0, s0
 23fb6e0:	ec59 8b10 	vmov	r8, r9, d0
 23fb6e4:	a324      	add	r3, pc, #144	; (adr r3, 23fb778 <__ieee754_rem_pio2+0x248>)
 23fb6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb6ea:	4649      	mov	r1, r9
 23fb6ec:	f7e8 ff28 	bl	23e4540 <__aeabi_dmul>
 23fb6f0:	2200      	movs	r2, #0
 23fb6f2:	4b2a      	ldr	r3, [pc, #168]	; (23fb79c <__ieee754_rem_pio2+0x26c>)
 23fb6f4:	f7e8 fd6e 	bl	23e41d4 <__adddf3>
 23fb6f8:	f7e9 f9d2 	bl	23e4aa0 <__aeabi_d2iz>
 23fb6fc:	4606      	mov	r6, r0
 23fb6fe:	f7e8 feb5 	bl	23e446c <__aeabi_i2d>
 23fb702:	4602      	mov	r2, r0
 23fb704:	460b      	mov	r3, r1
 23fb706:	ec43 2b18 	vmov	d8, r2, r3
 23fb70a:	a313      	add	r3, pc, #76	; (adr r3, 23fb758 <__ieee754_rem_pio2+0x228>)
 23fb70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb710:	f7e8 ff16 	bl	23e4540 <__aeabi_dmul>
 23fb714:	4602      	mov	r2, r0
 23fb716:	460b      	mov	r3, r1
 23fb718:	4640      	mov	r0, r8
 23fb71a:	4649      	mov	r1, r9
 23fb71c:	eeb0 9a48 	vmov.f32	s18, s16
 23fb720:	eef0 9a68 	vmov.f32	s19, s17
 23fb724:	f7e8 fd54 	bl	23e41d0 <__aeabi_dsub>
 23fb728:	4682      	mov	sl, r0
 23fb72a:	468b      	mov	fp, r1
 23fb72c:	a30c      	add	r3, pc, #48	; (adr r3, 23fb760 <__ieee754_rem_pio2+0x230>)
 23fb72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb732:	ec51 0b18 	vmov	r0, r1, d8
 23fb736:	f7e8 ff03 	bl	23e4540 <__aeabi_dmul>
 23fb73a:	2e1f      	cmp	r6, #31
 23fb73c:	ec41 0b18 	vmov	d8, r0, r1
 23fb740:	dc30      	bgt.n	23fb7a4 <__ieee754_rem_pio2+0x274>
 23fb742:	4b17      	ldr	r3, [pc, #92]	; (23fb7a0 <__ieee754_rem_pio2+0x270>)
 23fb744:	1e72      	subs	r2, r6, #1
 23fb746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fb74a:	42ab      	cmp	r3, r5
 23fb74c:	d02a      	beq.n	23fb7a4 <__ieee754_rem_pio2+0x274>
 23fb74e:	4602      	mov	r2, r0
 23fb750:	460b      	mov	r3, r1
 23fb752:	e09d      	b.n	23fb890 <__ieee754_rem_pio2+0x360>
 23fb754:	f3af 8000 	nop.w
 23fb758:	54400000 	.word	0x54400000
 23fb75c:	3ff921fb 	.word	0x3ff921fb
 23fb760:	1a626331 	.word	0x1a626331
 23fb764:	3dd0b461 	.word	0x3dd0b461
 23fb768:	1a600000 	.word	0x1a600000
 23fb76c:	3dd0b461 	.word	0x3dd0b461
 23fb770:	2e037073 	.word	0x2e037073
 23fb774:	3ba3198a 	.word	0x3ba3198a
 23fb778:	6dc9c883 	.word	0x6dc9c883
 23fb77c:	3fe45f30 	.word	0x3fe45f30
 23fb780:	3fe921fb 	.word	0x3fe921fb
 23fb784:	4002d97b 	.word	0x4002d97b
 23fb788:	3ff921fb 	.word	0x3ff921fb
 23fb78c:	413921fb 	.word	0x413921fb
 23fb790:	7fefffff 	.word	0x7fefffff
 23fb794:	41700000 	.word	0x41700000
 23fb798:	023ffc2c 	.word	0x023ffc2c
 23fb79c:	3fe00000 	.word	0x3fe00000
 23fb7a0:	023ffbac 	.word	0x023ffbac
 23fb7a4:	152b      	asrs	r3, r5, #20
 23fb7a6:	4650      	mov	r0, sl
 23fb7a8:	4659      	mov	r1, fp
 23fb7aa:	9303      	str	r3, [sp, #12]
 23fb7ac:	ec53 2b18 	vmov	r2, r3, d8
 23fb7b0:	f7e8 fd0e 	bl	23e41d0 <__aeabi_dsub>
 23fb7b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fb7b8:	4680      	mov	r8, r0
 23fb7ba:	4689      	mov	r9, r1
 23fb7bc:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23fb7c0:	2d10      	cmp	r5, #16
 23fb7c2:	dd6b      	ble.n	23fb89c <__ieee754_rem_pio2+0x36c>
 23fb7c4:	a364      	add	r3, pc, #400	; (adr r3, 23fb958 <__ieee754_rem_pio2+0x428>)
 23fb7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7ca:	ec51 0b19 	vmov	r0, r1, d9
 23fb7ce:	f7e8 feb7 	bl	23e4540 <__aeabi_dmul>
 23fb7d2:	4680      	mov	r8, r0
 23fb7d4:	4689      	mov	r9, r1
 23fb7d6:	4650      	mov	r0, sl
 23fb7d8:	4642      	mov	r2, r8
 23fb7da:	4659      	mov	r1, fp
 23fb7dc:	464b      	mov	r3, r9
 23fb7de:	f7e8 fcf7 	bl	23e41d0 <__aeabi_dsub>
 23fb7e2:	4602      	mov	r2, r0
 23fb7e4:	460b      	mov	r3, r1
 23fb7e6:	4650      	mov	r0, sl
 23fb7e8:	4659      	mov	r1, fp
 23fb7ea:	4692      	mov	sl, r2
 23fb7ec:	469b      	mov	fp, r3
 23fb7ee:	ec43 2b1a 	vmov	d10, r2, r3
 23fb7f2:	f7e8 fced 	bl	23e41d0 <__aeabi_dsub>
 23fb7f6:	4642      	mov	r2, r8
 23fb7f8:	464b      	mov	r3, r9
 23fb7fa:	f7e8 fce9 	bl	23e41d0 <__aeabi_dsub>
 23fb7fe:	4680      	mov	r8, r0
 23fb800:	4689      	mov	r9, r1
 23fb802:	a357      	add	r3, pc, #348	; (adr r3, 23fb960 <__ieee754_rem_pio2+0x430>)
 23fb804:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb808:	ec51 0b19 	vmov	r0, r1, d9
 23fb80c:	f7e8 fe98 	bl	23e4540 <__aeabi_dmul>
 23fb810:	4642      	mov	r2, r8
 23fb812:	464b      	mov	r3, r9
 23fb814:	f7e8 fcdc 	bl	23e41d0 <__aeabi_dsub>
 23fb818:	4602      	mov	r2, r0
 23fb81a:	460b      	mov	r3, r1
 23fb81c:	4650      	mov	r0, sl
 23fb81e:	4659      	mov	r1, fp
 23fb820:	ec43 2b18 	vmov	d8, r2, r3
 23fb824:	f7e8 fcd4 	bl	23e41d0 <__aeabi_dsub>
 23fb828:	9a03      	ldr	r2, [sp, #12]
 23fb82a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fb82e:	4680      	mov	r8, r0
 23fb830:	4689      	mov	r9, r1
 23fb832:	1ad3      	subs	r3, r2, r3
 23fb834:	2b31      	cmp	r3, #49	; 0x31
 23fb836:	dd31      	ble.n	23fb89c <__ieee754_rem_pio2+0x36c>
 23fb838:	a34c      	add	r3, pc, #304	; (adr r3, 23fb96c <__ieee754_rem_pio2+0x43c>)
 23fb83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb83e:	ec51 0b19 	vmov	r0, r1, d9
 23fb842:	f7e8 fe7d 	bl	23e4540 <__aeabi_dmul>
 23fb846:	4680      	mov	r8, r0
 23fb848:	4689      	mov	r9, r1
 23fb84a:	4642      	mov	r2, r8
 23fb84c:	464b      	mov	r3, r9
 23fb84e:	ec51 0b1a 	vmov	r0, r1, d10
 23fb852:	f7e8 fcbd 	bl	23e41d0 <__aeabi_dsub>
 23fb856:	4682      	mov	sl, r0
 23fb858:	468b      	mov	fp, r1
 23fb85a:	4652      	mov	r2, sl
 23fb85c:	465b      	mov	r3, fp
 23fb85e:	ec51 0b1a 	vmov	r0, r1, d10
 23fb862:	f7e8 fcb5 	bl	23e41d0 <__aeabi_dsub>
 23fb866:	4642      	mov	r2, r8
 23fb868:	464b      	mov	r3, r9
 23fb86a:	f7e8 fcb1 	bl	23e41d0 <__aeabi_dsub>
 23fb86e:	4680      	mov	r8, r0
 23fb870:	4689      	mov	r9, r1
 23fb872:	a340      	add	r3, pc, #256	; (adr r3, 23fb974 <__ieee754_rem_pio2+0x444>)
 23fb874:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb878:	ec51 0b19 	vmov	r0, r1, d9
 23fb87c:	f7e8 fe60 	bl	23e4540 <__aeabi_dmul>
 23fb880:	4642      	mov	r2, r8
 23fb882:	464b      	mov	r3, r9
 23fb884:	f7e8 fca4 	bl	23e41d0 <__aeabi_dsub>
 23fb888:	4602      	mov	r2, r0
 23fb88a:	460b      	mov	r3, r1
 23fb88c:	ec43 2b18 	vmov	d8, r2, r3
 23fb890:	4650      	mov	r0, sl
 23fb892:	4659      	mov	r1, fp
 23fb894:	f7e8 fc9c 	bl	23e41d0 <__aeabi_dsub>
 23fb898:	4680      	mov	r8, r0
 23fb89a:	4689      	mov	r9, r1
 23fb89c:	4642      	mov	r2, r8
 23fb89e:	464b      	mov	r3, r9
 23fb8a0:	4650      	mov	r0, sl
 23fb8a2:	4659      	mov	r1, fp
 23fb8a4:	e9c4 8900 	strd	r8, r9, [r4]
 23fb8a8:	f7e8 fc92 	bl	23e41d0 <__aeabi_dsub>
 23fb8ac:	ec53 2b18 	vmov	r2, r3, d8
 23fb8b0:	f7e8 fc8e 	bl	23e41d0 <__aeabi_dsub>
 23fb8b4:	2f00      	cmp	r7, #0
 23fb8b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb8ba:	f6bf ae71 	bge.w	23fb5a0 <__ieee754_rem_pio2+0x70>
 23fb8be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fb8c2:	4276      	negs	r6, r6
 23fb8c4:	e9c4 8300 	strd	r8, r3, [r4]
 23fb8c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb8cc:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23fb8d0:	e666      	b.n	23fb5a0 <__ieee754_rem_pio2+0x70>
 23fb8d2:	2303      	movs	r3, #3
 23fb8d4:	e6ac      	b.n	23fb630 <__ieee754_rem_pio2+0x100>
 23fb8d6:	f7e8 fc7d 	bl	23e41d4 <__adddf3>
 23fb8da:	4b23      	ldr	r3, [pc, #140]	; (23fb968 <__ieee754_rem_pio2+0x438>)
 23fb8dc:	4680      	mov	r8, r0
 23fb8de:	4689      	mov	r9, r1
 23fb8e0:	429d      	cmp	r5, r3
 23fb8e2:	d016      	beq.n	23fb912 <__ieee754_rem_pio2+0x3e2>
 23fb8e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fb8e8:	a319      	add	r3, pc, #100	; (adr r3, 23fb950 <__ieee754_rem_pio2+0x420>)
 23fb8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb8ee:	f7e8 fc71 	bl	23e41d4 <__adddf3>
 23fb8f2:	4602      	mov	r2, r0
 23fb8f4:	460b      	mov	r3, r1
 23fb8f6:	4640      	mov	r0, r8
 23fb8f8:	4649      	mov	r1, r9
 23fb8fa:	e9c4 2300 	strd	r2, r3, [r4]
 23fb8fe:	f7e8 fc67 	bl	23e41d0 <__aeabi_dsub>
 23fb902:	a313      	add	r3, pc, #76	; (adr r3, 23fb950 <__ieee754_rem_pio2+0x420>)
 23fb904:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb908:	f7e8 fc64 	bl	23e41d4 <__adddf3>
 23fb90c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb910:	e646      	b.n	23fb5a0 <__ieee754_rem_pio2+0x70>
 23fb912:	a311      	add	r3, pc, #68	; (adr r3, 23fb958 <__ieee754_rem_pio2+0x428>)
 23fb914:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb918:	f7e8 fc5c 	bl	23e41d4 <__adddf3>
 23fb91c:	4680      	mov	r8, r0
 23fb91e:	4689      	mov	r9, r1
 23fb920:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fb924:	a30e      	add	r3, pc, #56	; (adr r3, 23fb960 <__ieee754_rem_pio2+0x430>)
 23fb926:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb92a:	f7e8 fc53 	bl	23e41d4 <__adddf3>
 23fb92e:	4602      	mov	r2, r0
 23fb930:	460b      	mov	r3, r1
 23fb932:	4640      	mov	r0, r8
 23fb934:	4649      	mov	r1, r9
 23fb936:	e9c4 2300 	strd	r2, r3, [r4]
 23fb93a:	f7e8 fc49 	bl	23e41d0 <__aeabi_dsub>
 23fb93e:	a308      	add	r3, pc, #32	; (adr r3, 23fb960 <__ieee754_rem_pio2+0x430>)
 23fb940:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb944:	f7e8 fc46 	bl	23e41d4 <__adddf3>
 23fb948:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb94c:	e628      	b.n	23fb5a0 <__ieee754_rem_pio2+0x70>
 23fb94e:	bf00      	nop
 23fb950:	1a626331 	.word	0x1a626331
 23fb954:	3dd0b461 	.word	0x3dd0b461
 23fb958:	1a600000 	.word	0x1a600000
 23fb95c:	3dd0b461 	.word	0x3dd0b461
 23fb960:	2e037073 	.word	0x2e037073
 23fb964:	3ba3198a 	.word	0x3ba3198a
 23fb968:	3ff921fb 	.word	0x3ff921fb
 23fb96c:	2e000000 	.word	0x2e000000
 23fb970:	3ba3198a 	.word	0x3ba3198a
 23fb974:	252049c1 	.word	0x252049c1
 23fb978:	397b839a 	.word	0x397b839a

023fb97c <__ieee754_sqrt>:
 23fb97c:	495e      	ldr	r1, [pc, #376]	; (23fbaf8 <__ieee754_sqrt+0x17c>)
 23fb97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb982:	ec55 4b10 	vmov	r4, r5, d0
 23fb986:	43a9      	bics	r1, r5
 23fb988:	f000 8094 	beq.w	23fbab4 <__ieee754_sqrt+0x138>
 23fb98c:	2d00      	cmp	r5, #0
 23fb98e:	462b      	mov	r3, r5
 23fb990:	ee10 2a10 	vmov	r2, s0
 23fb994:	dd5a      	ble.n	23fba4c <__ieee754_sqrt+0xd0>
 23fb996:	1528      	asrs	r0, r5, #20
 23fb998:	d067      	beq.n	23fba6a <__ieee754_sqrt+0xee>
 23fb99a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fb99e:	07c1      	lsls	r1, r0, #31
 23fb9a0:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fb9a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fb9a8:	d403      	bmi.n	23fb9b2 <__ieee754_sqrt+0x36>
 23fb9aa:	005b      	lsls	r3, r3, #1
 23fb9ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fb9b0:	0052      	lsls	r2, r2, #1
 23fb9b2:	0fd1      	lsrs	r1, r2, #31
 23fb9b4:	2600      	movs	r6, #0
 23fb9b6:	107f      	asrs	r7, r7, #1
 23fb9b8:	f04f 0c16 	mov.w	ip, #22
 23fb9bc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fb9c0:	46b6      	mov	lr, r6
 23fb9c2:	0052      	lsls	r2, r2, #1
 23fb9c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fb9c8:	eb0e 0001 	add.w	r0, lr, r1
 23fb9cc:	4298      	cmp	r0, r3
 23fb9ce:	dc03      	bgt.n	23fb9d8 <__ieee754_sqrt+0x5c>
 23fb9d0:	1a1b      	subs	r3, r3, r0
 23fb9d2:	eb00 0e01 	add.w	lr, r0, r1
 23fb9d6:	440e      	add	r6, r1
 23fb9d8:	005b      	lsls	r3, r3, #1
 23fb9da:	f1bc 0c01 	subs.w	ip, ip, #1
 23fb9de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fb9e2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fb9e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fb9ea:	d1ed      	bne.n	23fb9c8 <__ieee754_sqrt+0x4c>
 23fb9ec:	4665      	mov	r5, ip
 23fb9ee:	2420      	movs	r4, #32
 23fb9f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fb9f4:	e014      	b.n	23fba20 <__ieee754_sqrt+0xa4>
 23fb9f6:	d10a      	bne.n	23fba0e <__ieee754_sqrt+0x92>
 23fb9f8:	4290      	cmp	r0, r2
 23fb9fa:	d808      	bhi.n	23fba0e <__ieee754_sqrt+0x92>
 23fb9fc:	2800      	cmp	r0, #0
 23fb9fe:	eb00 0c01 	add.w	ip, r0, r1
 23fba02:	db1d      	blt.n	23fba40 <__ieee754_sqrt+0xc4>
 23fba04:	46f0      	mov	r8, lr
 23fba06:	2300      	movs	r3, #0
 23fba08:	1a12      	subs	r2, r2, r0
 23fba0a:	440d      	add	r5, r1
 23fba0c:	46c6      	mov	lr, r8
 23fba0e:	0fd0      	lsrs	r0, r2, #31
 23fba10:	3c01      	subs	r4, #1
 23fba12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fba16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fba1a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fba1e:	d033      	beq.n	23fba88 <__ieee754_sqrt+0x10c>
 23fba20:	4573      	cmp	r3, lr
 23fba22:	eb01 000c 	add.w	r0, r1, ip
 23fba26:	dde6      	ble.n	23fb9f6 <__ieee754_sqrt+0x7a>
 23fba28:	2800      	cmp	r0, #0
 23fba2a:	eb00 0c01 	add.w	ip, r0, r1
 23fba2e:	db07      	blt.n	23fba40 <__ieee754_sqrt+0xc4>
 23fba30:	46f0      	mov	r8, lr
 23fba32:	eba3 030e 	sub.w	r3, r3, lr
 23fba36:	4290      	cmp	r0, r2
 23fba38:	bf88      	it	hi
 23fba3a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fba3e:	e7e3      	b.n	23fba08 <__ieee754_sqrt+0x8c>
 23fba40:	f1bc 0f00 	cmp.w	ip, #0
 23fba44:	dbf4      	blt.n	23fba30 <__ieee754_sqrt+0xb4>
 23fba46:	f10e 0801 	add.w	r8, lr, #1
 23fba4a:	e7f2      	b.n	23fba32 <__ieee754_sqrt+0xb6>
 23fba4c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fba50:	4321      	orrs	r1, r4
 23fba52:	d028      	beq.n	23fbaa6 <__ieee754_sqrt+0x12a>
 23fba54:	2d00      	cmp	r5, #0
 23fba56:	d13d      	bne.n	23fbad4 <__ieee754_sqrt+0x158>
 23fba58:	4628      	mov	r0, r5
 23fba5a:	0ad1      	lsrs	r1, r2, #11
 23fba5c:	3815      	subs	r0, #21
 23fba5e:	0552      	lsls	r2, r2, #21
 23fba60:	460b      	mov	r3, r1
 23fba62:	2900      	cmp	r1, #0
 23fba64:	d0f9      	beq.n	23fba5a <__ieee754_sqrt+0xde>
 23fba66:	02cf      	lsls	r7, r1, #11
 23fba68:	d441      	bmi.n	23fbaee <__ieee754_sqrt+0x172>
 23fba6a:	2400      	movs	r4, #0
 23fba6c:	005b      	lsls	r3, r3, #1
 23fba6e:	4625      	mov	r5, r4
 23fba70:	3401      	adds	r4, #1
 23fba72:	02de      	lsls	r6, r3, #11
 23fba74:	d5fa      	bpl.n	23fba6c <__ieee754_sqrt+0xf0>
 23fba76:	4619      	mov	r1, r3
 23fba78:	4613      	mov	r3, r2
 23fba7a:	40a2      	lsls	r2, r4
 23fba7c:	f1c4 0420 	rsb	r4, r4, #32
 23fba80:	40e3      	lsrs	r3, r4
 23fba82:	1b40      	subs	r0, r0, r5
 23fba84:	430b      	orrs	r3, r1
 23fba86:	e788      	b.n	23fb99a <__ieee754_sqrt+0x1e>
 23fba88:	4313      	orrs	r3, r2
 23fba8a:	d10e      	bne.n	23fbaaa <__ieee754_sqrt+0x12e>
 23fba8c:	086c      	lsrs	r4, r5, #1
 23fba8e:	07f3      	lsls	r3, r6, #31
 23fba90:	491a      	ldr	r1, [pc, #104]	; (23fbafc <__ieee754_sqrt+0x180>)
 23fba92:	bf48      	it	mi
 23fba94:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fba98:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fba9c:	4622      	mov	r2, r4
 23fba9e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fbaa2:	ec43 2b10 	vmov	d0, r2, r3
 23fbaa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbaaa:	1c6a      	adds	r2, r5, #1
 23fbaac:	d01d      	beq.n	23fbaea <__ieee754_sqrt+0x16e>
 23fbaae:	1c6c      	adds	r4, r5, #1
 23fbab0:	0864      	lsrs	r4, r4, #1
 23fbab2:	e7ec      	b.n	23fba8e <__ieee754_sqrt+0x112>
 23fbab4:	ee10 2a10 	vmov	r2, s0
 23fbab8:	462b      	mov	r3, r5
 23fbaba:	ee10 0a10 	vmov	r0, s0
 23fbabe:	4629      	mov	r1, r5
 23fbac0:	f7e8 fd3e 	bl	23e4540 <__aeabi_dmul>
 23fbac4:	4622      	mov	r2, r4
 23fbac6:	462b      	mov	r3, r5
 23fbac8:	f7e8 fb84 	bl	23e41d4 <__adddf3>
 23fbacc:	ec41 0b10 	vmov	d0, r0, r1
 23fbad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbad4:	4620      	mov	r0, r4
 23fbad6:	4629      	mov	r1, r5
 23fbad8:	f7e8 fb7a 	bl	23e41d0 <__aeabi_dsub>
 23fbadc:	4602      	mov	r2, r0
 23fbade:	460b      	mov	r3, r1
 23fbae0:	f7e8 fe58 	bl	23e4794 <__aeabi_ddiv>
 23fbae4:	ec41 0b10 	vmov	d0, r0, r1
 23fbae8:	e7dd      	b.n	23fbaa6 <__ieee754_sqrt+0x12a>
 23fbaea:	3601      	adds	r6, #1
 23fbaec:	e7cf      	b.n	23fba8e <__ieee754_sqrt+0x112>
 23fbaee:	4613      	mov	r3, r2
 23fbaf0:	2420      	movs	r4, #32
 23fbaf2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fbaf6:	e7c3      	b.n	23fba80 <__ieee754_sqrt+0x104>
 23fbaf8:	7ff00000 	.word	0x7ff00000
 23fbafc:	3fe00000 	.word	0x3fe00000

023fbb00 <__kernel_cos>:
 23fbb00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbb04:	ec57 6b10 	vmov	r6, r7, d0
 23fbb08:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fbb0c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fbb10:	ec5b ab11 	vmov	sl, fp, d1
 23fbb14:	ed2d 8b04 	vpush	{d8-d9}
 23fbb18:	da71      	bge.n	23fbbfe <__kernel_cos+0xfe>
 23fbb1a:	ee10 0a10 	vmov	r0, s0
 23fbb1e:	4639      	mov	r1, r7
 23fbb20:	f7e8 ffbe 	bl	23e4aa0 <__aeabi_d2iz>
 23fbb24:	2800      	cmp	r0, #0
 23fbb26:	f000 80f6 	beq.w	23fbd16 <__kernel_cos+0x216>
 23fbb2a:	4632      	mov	r2, r6
 23fbb2c:	463b      	mov	r3, r7
 23fbb2e:	4630      	mov	r0, r6
 23fbb30:	4639      	mov	r1, r7
 23fbb32:	f7e8 fd05 	bl	23e4540 <__aeabi_dmul>
 23fbb36:	4604      	mov	r4, r0
 23fbb38:	460d      	mov	r5, r1
 23fbb3a:	a37b      	add	r3, pc, #492	; (adr r3, 23fbd28 <__kernel_cos+0x228>)
 23fbb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb40:	f7e8 fcfe 	bl	23e4540 <__aeabi_dmul>
 23fbb44:	a37a      	add	r3, pc, #488	; (adr r3, 23fbd30 <__kernel_cos+0x230>)
 23fbb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb4a:	f7e8 fb43 	bl	23e41d4 <__adddf3>
 23fbb4e:	4622      	mov	r2, r4
 23fbb50:	462b      	mov	r3, r5
 23fbb52:	f7e8 fcf5 	bl	23e4540 <__aeabi_dmul>
 23fbb56:	a378      	add	r3, pc, #480	; (adr r3, 23fbd38 <__kernel_cos+0x238>)
 23fbb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb5c:	f7e8 fb38 	bl	23e41d0 <__aeabi_dsub>
 23fbb60:	4622      	mov	r2, r4
 23fbb62:	462b      	mov	r3, r5
 23fbb64:	f7e8 fcec 	bl	23e4540 <__aeabi_dmul>
 23fbb68:	a375      	add	r3, pc, #468	; (adr r3, 23fbd40 <__kernel_cos+0x240>)
 23fbb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb6e:	f7e8 fb31 	bl	23e41d4 <__adddf3>
 23fbb72:	4622      	mov	r2, r4
 23fbb74:	462b      	mov	r3, r5
 23fbb76:	f7e8 fce3 	bl	23e4540 <__aeabi_dmul>
 23fbb7a:	a373      	add	r3, pc, #460	; (adr r3, 23fbd48 <__kernel_cos+0x248>)
 23fbb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb80:	f7e8 fb26 	bl	23e41d0 <__aeabi_dsub>
 23fbb84:	4622      	mov	r2, r4
 23fbb86:	462b      	mov	r3, r5
 23fbb88:	f7e8 fcda 	bl	23e4540 <__aeabi_dmul>
 23fbb8c:	a370      	add	r3, pc, #448	; (adr r3, 23fbd50 <__kernel_cos+0x250>)
 23fbb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb92:	f7e8 fb1f 	bl	23e41d4 <__adddf3>
 23fbb96:	4622      	mov	r2, r4
 23fbb98:	462b      	mov	r3, r5
 23fbb9a:	f7e8 fcd1 	bl	23e4540 <__aeabi_dmul>
 23fbb9e:	ec41 0b18 	vmov	d8, r0, r1
 23fbba2:	2200      	movs	r2, #0
 23fbba4:	4b70      	ldr	r3, [pc, #448]	; (23fbd68 <__kernel_cos+0x268>)
 23fbba6:	4620      	mov	r0, r4
 23fbba8:	4629      	mov	r1, r5
 23fbbaa:	f7e8 fcc9 	bl	23e4540 <__aeabi_dmul>
 23fbbae:	4680      	mov	r8, r0
 23fbbb0:	4689      	mov	r9, r1
 23fbbb2:	4620      	mov	r0, r4
 23fbbb4:	4629      	mov	r1, r5
 23fbbb6:	ec53 2b18 	vmov	r2, r3, d8
 23fbbba:	f7e8 fcc1 	bl	23e4540 <__aeabi_dmul>
 23fbbbe:	4604      	mov	r4, r0
 23fbbc0:	460d      	mov	r5, r1
 23fbbc2:	4652      	mov	r2, sl
 23fbbc4:	465b      	mov	r3, fp
 23fbbc6:	4630      	mov	r0, r6
 23fbbc8:	4639      	mov	r1, r7
 23fbbca:	f7e8 fcb9 	bl	23e4540 <__aeabi_dmul>
 23fbbce:	4602      	mov	r2, r0
 23fbbd0:	460b      	mov	r3, r1
 23fbbd2:	4620      	mov	r0, r4
 23fbbd4:	4629      	mov	r1, r5
 23fbbd6:	f7e8 fafb 	bl	23e41d0 <__aeabi_dsub>
 23fbbda:	4602      	mov	r2, r0
 23fbbdc:	460b      	mov	r3, r1
 23fbbde:	4640      	mov	r0, r8
 23fbbe0:	4649      	mov	r1, r9
 23fbbe2:	f7e8 faf5 	bl	23e41d0 <__aeabi_dsub>
 23fbbe6:	4602      	mov	r2, r0
 23fbbe8:	460b      	mov	r3, r1
 23fbbea:	2000      	movs	r0, #0
 23fbbec:	495f      	ldr	r1, [pc, #380]	; (23fbd6c <__kernel_cos+0x26c>)
 23fbbee:	f7e8 faef 	bl	23e41d0 <__aeabi_dsub>
 23fbbf2:	ecbd 8b04 	vpop	{d8-d9}
 23fbbf6:	ec41 0b10 	vmov	d0, r0, r1
 23fbbfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbbfe:	ee10 2a10 	vmov	r2, s0
 23fbc02:	ee10 0a10 	vmov	r0, s0
 23fbc06:	463b      	mov	r3, r7
 23fbc08:	4639      	mov	r1, r7
 23fbc0a:	f7e8 fc99 	bl	23e4540 <__aeabi_dmul>
 23fbc0e:	4604      	mov	r4, r0
 23fbc10:	460d      	mov	r5, r1
 23fbc12:	a345      	add	r3, pc, #276	; (adr r3, 23fbd28 <__kernel_cos+0x228>)
 23fbc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc18:	f7e8 fc92 	bl	23e4540 <__aeabi_dmul>
 23fbc1c:	a344      	add	r3, pc, #272	; (adr r3, 23fbd30 <__kernel_cos+0x230>)
 23fbc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc22:	f7e8 fad7 	bl	23e41d4 <__adddf3>
 23fbc26:	4622      	mov	r2, r4
 23fbc28:	462b      	mov	r3, r5
 23fbc2a:	f7e8 fc89 	bl	23e4540 <__aeabi_dmul>
 23fbc2e:	a342      	add	r3, pc, #264	; (adr r3, 23fbd38 <__kernel_cos+0x238>)
 23fbc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc34:	f7e8 facc 	bl	23e41d0 <__aeabi_dsub>
 23fbc38:	4622      	mov	r2, r4
 23fbc3a:	462b      	mov	r3, r5
 23fbc3c:	f7e8 fc80 	bl	23e4540 <__aeabi_dmul>
 23fbc40:	a33f      	add	r3, pc, #252	; (adr r3, 23fbd40 <__kernel_cos+0x240>)
 23fbc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc46:	f7e8 fac5 	bl	23e41d4 <__adddf3>
 23fbc4a:	4622      	mov	r2, r4
 23fbc4c:	462b      	mov	r3, r5
 23fbc4e:	f7e8 fc77 	bl	23e4540 <__aeabi_dmul>
 23fbc52:	a33d      	add	r3, pc, #244	; (adr r3, 23fbd48 <__kernel_cos+0x248>)
 23fbc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc58:	f7e8 faba 	bl	23e41d0 <__aeabi_dsub>
 23fbc5c:	4622      	mov	r2, r4
 23fbc5e:	462b      	mov	r3, r5
 23fbc60:	f7e8 fc6e 	bl	23e4540 <__aeabi_dmul>
 23fbc64:	a33a      	add	r3, pc, #232	; (adr r3, 23fbd50 <__kernel_cos+0x250>)
 23fbc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc6a:	f7e8 fab3 	bl	23e41d4 <__adddf3>
 23fbc6e:	462b      	mov	r3, r5
 23fbc70:	4622      	mov	r2, r4
 23fbc72:	f7e8 fc65 	bl	23e4540 <__aeabi_dmul>
 23fbc76:	4b3e      	ldr	r3, [pc, #248]	; (23fbd70 <__kernel_cos+0x270>)
 23fbc78:	4599      	cmp	r9, r3
 23fbc7a:	ec41 0b18 	vmov	d8, r0, r1
 23fbc7e:	dd90      	ble.n	23fbba2 <__kernel_cos+0xa2>
 23fbc80:	4b3c      	ldr	r3, [pc, #240]	; (23fbd74 <__kernel_cos+0x274>)
 23fbc82:	4599      	cmp	r9, r3
 23fbc84:	dc3c      	bgt.n	23fbd00 <__kernel_cos+0x200>
 23fbc86:	2200      	movs	r2, #0
 23fbc88:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fbc8c:	2000      	movs	r0, #0
 23fbc8e:	4937      	ldr	r1, [pc, #220]	; (23fbd6c <__kernel_cos+0x26c>)
 23fbc90:	4690      	mov	r8, r2
 23fbc92:	4699      	mov	r9, r3
 23fbc94:	f7e8 fa9c 	bl	23e41d0 <__aeabi_dsub>
 23fbc98:	ec41 0b19 	vmov	d9, r0, r1
 23fbc9c:	2200      	movs	r2, #0
 23fbc9e:	4b32      	ldr	r3, [pc, #200]	; (23fbd68 <__kernel_cos+0x268>)
 23fbca0:	4620      	mov	r0, r4
 23fbca2:	4629      	mov	r1, r5
 23fbca4:	f7e8 fc4c 	bl	23e4540 <__aeabi_dmul>
 23fbca8:	4642      	mov	r2, r8
 23fbcaa:	464b      	mov	r3, r9
 23fbcac:	f7e8 fa90 	bl	23e41d0 <__aeabi_dsub>
 23fbcb0:	4680      	mov	r8, r0
 23fbcb2:	4689      	mov	r9, r1
 23fbcb4:	4620      	mov	r0, r4
 23fbcb6:	4629      	mov	r1, r5
 23fbcb8:	ec53 2b18 	vmov	r2, r3, d8
 23fbcbc:	f7e8 fc40 	bl	23e4540 <__aeabi_dmul>
 23fbcc0:	4604      	mov	r4, r0
 23fbcc2:	460d      	mov	r5, r1
 23fbcc4:	4652      	mov	r2, sl
 23fbcc6:	465b      	mov	r3, fp
 23fbcc8:	4630      	mov	r0, r6
 23fbcca:	4639      	mov	r1, r7
 23fbccc:	f7e8 fc38 	bl	23e4540 <__aeabi_dmul>
 23fbcd0:	4602      	mov	r2, r0
 23fbcd2:	460b      	mov	r3, r1
 23fbcd4:	4620      	mov	r0, r4
 23fbcd6:	4629      	mov	r1, r5
 23fbcd8:	f7e8 fa7a 	bl	23e41d0 <__aeabi_dsub>
 23fbcdc:	4602      	mov	r2, r0
 23fbcde:	460b      	mov	r3, r1
 23fbce0:	4640      	mov	r0, r8
 23fbce2:	4649      	mov	r1, r9
 23fbce4:	f7e8 fa74 	bl	23e41d0 <__aeabi_dsub>
 23fbce8:	4602      	mov	r2, r0
 23fbcea:	460b      	mov	r3, r1
 23fbcec:	ec51 0b19 	vmov	r0, r1, d9
 23fbcf0:	f7e8 fa6e 	bl	23e41d0 <__aeabi_dsub>
 23fbcf4:	ecbd 8b04 	vpop	{d8-d9}
 23fbcf8:	ec41 0b10 	vmov	d0, r0, r1
 23fbcfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbd00:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fbd58 <__kernel_cos+0x258>
 23fbd04:	f04f 0800 	mov.w	r8, #0
 23fbd08:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fbd78 <__kernel_cos+0x278>
 23fbd0c:	eeb0 9a47 	vmov.f32	s18, s14
 23fbd10:	eef0 9a67 	vmov.f32	s19, s15
 23fbd14:	e7c2      	b.n	23fbc9c <__kernel_cos+0x19c>
 23fbd16:	ecbd 8b04 	vpop	{d8-d9}
 23fbd1a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fbd60 <__kernel_cos+0x260>
 23fbd1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbd22:	bf00      	nop
 23fbd24:	f3af 8000 	nop.w
 23fbd28:	be8838d4 	.word	0xbe8838d4
 23fbd2c:	bda8fae9 	.word	0xbda8fae9
 23fbd30:	bdb4b1c4 	.word	0xbdb4b1c4
 23fbd34:	3e21ee9e 	.word	0x3e21ee9e
 23fbd38:	809c52ad 	.word	0x809c52ad
 23fbd3c:	3e927e4f 	.word	0x3e927e4f
 23fbd40:	19cb1590 	.word	0x19cb1590
 23fbd44:	3efa01a0 	.word	0x3efa01a0
 23fbd48:	16c15177 	.word	0x16c15177
 23fbd4c:	3f56c16c 	.word	0x3f56c16c
 23fbd50:	5555554c 	.word	0x5555554c
 23fbd54:	3fa55555 	.word	0x3fa55555
 23fbd58:	00000000 	.word	0x00000000
 23fbd5c:	3fe70000 	.word	0x3fe70000
 23fbd60:	00000000 	.word	0x00000000
 23fbd64:	3ff00000 	.word	0x3ff00000
 23fbd68:	3fe00000 	.word	0x3fe00000
 23fbd6c:	3ff00000 	.word	0x3ff00000
 23fbd70:	3fd33332 	.word	0x3fd33332
 23fbd74:	3fe90000 	.word	0x3fe90000
 23fbd78:	3fd20000 	.word	0x3fd20000
 23fbd7c:	00000000 	.word	0x00000000

023fbd80 <__kernel_rem_pio2>:
 23fbd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbd84:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23fbd88:	461c      	mov	r4, r3
 23fbd8a:	f112 0f14 	cmn.w	r2, #20
 23fbd8e:	9308      	str	r3, [sp, #32]
 23fbd90:	910b      	str	r1, [sp, #44]	; 0x2c
 23fbd92:	4bb6      	ldr	r3, [pc, #728]	; (23fc06c <__kernel_rem_pio2+0x2ec>)
 23fbd94:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23fbd96:	9004      	str	r0, [sp, #16]
 23fbd98:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23fbd9c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23fbda0:	9105      	str	r1, [sp, #20]
 23fbda2:	9303      	str	r3, [sp, #12]
 23fbda4:	f2c0 833a 	blt.w	23fc41c <__kernel_rem_pio2+0x69c>
 23fbda8:	1ed3      	subs	r3, r2, #3
 23fbdaa:	49b1      	ldr	r1, [pc, #708]	; (23fc070 <__kernel_rem_pio2+0x2f0>)
 23fbdac:	fb81 0103 	smull	r0, r1, r1, r3
 23fbdb0:	17db      	asrs	r3, r3, #31
 23fbdb2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23fbdb6:	9307      	str	r3, [sp, #28]
 23fbdb8:	3301      	adds	r3, #1
 23fbdba:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23fbdbe:	00db      	lsls	r3, r3, #3
 23fbdc0:	18d3      	adds	r3, r2, r3
 23fbdc2:	9a07      	ldr	r2, [sp, #28]
 23fbdc4:	9306      	str	r3, [sp, #24]
 23fbdc6:	9b03      	ldr	r3, [sp, #12]
 23fbdc8:	1ad4      	subs	r4, r2, r3
 23fbdca:	9a05      	ldr	r2, [sp, #20]
 23fbdcc:	18d6      	adds	r6, r2, r3
 23fbdce:	d414      	bmi.n	23fbdfa <__kernel_rem_pio2+0x7a>
 23fbdd0:	3601      	adds	r6, #1
 23fbdd2:	ad20      	add	r5, sp, #128	; 0x80
 23fbdd4:	f04f 0800 	mov.w	r8, #0
 23fbdd8:	f04f 0900 	mov.w	r9, #0
 23fbddc:	4426      	add	r6, r4
 23fbdde:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23fbde0:	2c00      	cmp	r4, #0
 23fbde2:	4640      	mov	r0, r8
 23fbde4:	4649      	mov	r1, r9
 23fbde6:	db03      	blt.n	23fbdf0 <__kernel_rem_pio2+0x70>
 23fbde8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23fbdec:	f7e8 fb3e 	bl	23e446c <__aeabi_i2d>
 23fbdf0:	3401      	adds	r4, #1
 23fbdf2:	42b4      	cmp	r4, r6
 23fbdf4:	e8e5 0102 	strd	r0, r1, [r5], #8
 23fbdf8:	d1f2      	bne.n	23fbde0 <__kernel_rem_pio2+0x60>
 23fbdfa:	9b05      	ldr	r3, [sp, #20]
 23fbdfc:	2b00      	cmp	r3, #0
 23fbdfe:	f2c0 83c7 	blt.w	23fc590 <__kernel_rem_pio2+0x810>
 23fbe02:	9b08      	ldr	r3, [sp, #32]
 23fbe04:	a920      	add	r1, sp, #128	; 0x80
 23fbe06:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23fbe0a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23fbe0e:	00da      	lsls	r2, r3, #3
 23fbe10:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23fbe14:	9202      	str	r2, [sp, #8]
 23fbe16:	9a05      	ldr	r2, [sp, #20]
 23fbe18:	441a      	add	r2, r3
 23fbe1a:	9201      	str	r2, [sp, #4]
 23fbe1c:	9a04      	ldr	r2, [sp, #16]
 23fbe1e:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23fbe22:	9b03      	ldr	r3, [sp, #12]
 23fbe24:	2b00      	cmp	r3, #0
 23fbe26:	f2c0 81a6 	blt.w	23fc176 <__kernel_rem_pio2+0x3f6>
 23fbe2a:	4657      	mov	r7, sl
 23fbe2c:	9e04      	ldr	r6, [sp, #16]
 23fbe2e:	2400      	movs	r4, #0
 23fbe30:	2500      	movs	r5, #0
 23fbe32:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fbe36:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fbe3a:	f7e8 fb81 	bl	23e4540 <__aeabi_dmul>
 23fbe3e:	4602      	mov	r2, r0
 23fbe40:	460b      	mov	r3, r1
 23fbe42:	4620      	mov	r0, r4
 23fbe44:	4629      	mov	r1, r5
 23fbe46:	f7e8 f9c5 	bl	23e41d4 <__adddf3>
 23fbe4a:	4546      	cmp	r6, r8
 23fbe4c:	4604      	mov	r4, r0
 23fbe4e:	460d      	mov	r5, r1
 23fbe50:	d1ef      	bne.n	23fbe32 <__kernel_rem_pio2+0xb2>
 23fbe52:	f109 0901 	add.w	r9, r9, #1
 23fbe56:	9b01      	ldr	r3, [sp, #4]
 23fbe58:	f10a 0a08 	add.w	sl, sl, #8
 23fbe5c:	4599      	cmp	r9, r3
 23fbe5e:	e8eb 4502 	strd	r4, r5, [fp], #8
 23fbe62:	d1de      	bne.n	23fbe22 <__kernel_rem_pio2+0xa2>
 23fbe64:	9a04      	ldr	r2, [sp, #16]
 23fbe66:	a90b      	add	r1, sp, #44	; 0x2c
 23fbe68:	9b02      	ldr	r3, [sp, #8]
 23fbe6a:	4413      	add	r3, r2
 23fbe6c:	469b      	mov	fp, r3
 23fbe6e:	9b05      	ldr	r3, [sp, #20]
 23fbe70:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23fbe74:	a90c      	add	r1, sp, #48	; 0x30
 23fbe76:	920a      	str	r2, [sp, #40]	; 0x28
 23fbe78:	461a      	mov	r2, r3
 23fbe7a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fbe7e:	9201      	str	r2, [sp, #4]
 23fbe80:	3b08      	subs	r3, #8
 23fbe82:	9309      	str	r3, [sp, #36]	; 0x24
 23fbe84:	9a01      	ldr	r2, [sp, #4]
 23fbe86:	a998      	add	r1, sp, #608	; 0x260
 23fbe88:	2a00      	cmp	r2, #0
 23fbe8a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23fbe8e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23fbe92:	dd29      	ble.n	23fbee8 <__kernel_rem_pio2+0x168>
 23fbe94:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23fbe98:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23fbe9c:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23fbea0:	2200      	movs	r2, #0
 23fbea2:	4b74      	ldr	r3, [pc, #464]	; (23fc074 <__kernel_rem_pio2+0x2f4>)
 23fbea4:	4620      	mov	r0, r4
 23fbea6:	4629      	mov	r1, r5
 23fbea8:	f7e8 fb4a 	bl	23e4540 <__aeabi_dmul>
 23fbeac:	f7e8 fdf8 	bl	23e4aa0 <__aeabi_d2iz>
 23fbeb0:	f7e8 fadc 	bl	23e446c <__aeabi_i2d>
 23fbeb4:	2200      	movs	r2, #0
 23fbeb6:	4b70      	ldr	r3, [pc, #448]	; (23fc078 <__kernel_rem_pio2+0x2f8>)
 23fbeb8:	4606      	mov	r6, r0
 23fbeba:	460f      	mov	r7, r1
 23fbebc:	f7e8 fb40 	bl	23e4540 <__aeabi_dmul>
 23fbec0:	4602      	mov	r2, r0
 23fbec2:	460b      	mov	r3, r1
 23fbec4:	4620      	mov	r0, r4
 23fbec6:	4629      	mov	r1, r5
 23fbec8:	f7e8 f982 	bl	23e41d0 <__aeabi_dsub>
 23fbecc:	f7e8 fde8 	bl	23e4aa0 <__aeabi_d2iz>
 23fbed0:	4639      	mov	r1, r7
 23fbed2:	f849 0b04 	str.w	r0, [r9], #4
 23fbed6:	4630      	mov	r0, r6
 23fbed8:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fbedc:	f7e8 f97a 	bl	23e41d4 <__adddf3>
 23fbee0:	4604      	mov	r4, r0
 23fbee2:	45d0      	cmp	r8, sl
 23fbee4:	460d      	mov	r5, r1
 23fbee6:	d1db      	bne.n	23fbea0 <__kernel_rem_pio2+0x120>
 23fbee8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fbeec:	ec45 4b10 	vmov	d0, r4, r5
 23fbef0:	4648      	mov	r0, r9
 23fbef2:	f7fe fabd 	bl	23fa470 <scalbn>
 23fbef6:	2200      	movs	r2, #0
 23fbef8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fbefc:	ee10 0a10 	vmov	r0, s0
 23fbf00:	ec55 4b10 	vmov	r4, r5, d0
 23fbf04:	4629      	mov	r1, r5
 23fbf06:	f7e8 fb1b 	bl	23e4540 <__aeabi_dmul>
 23fbf0a:	ec41 0b10 	vmov	d0, r0, r1
 23fbf0e:	f000 fc2f 	bl	23fc770 <floor>
 23fbf12:	2200      	movs	r2, #0
 23fbf14:	4b59      	ldr	r3, [pc, #356]	; (23fc07c <__kernel_rem_pio2+0x2fc>)
 23fbf16:	ec51 0b10 	vmov	r0, r1, d0
 23fbf1a:	f7e8 fb11 	bl	23e4540 <__aeabi_dmul>
 23fbf1e:	4602      	mov	r2, r0
 23fbf20:	460b      	mov	r3, r1
 23fbf22:	4620      	mov	r0, r4
 23fbf24:	4629      	mov	r1, r5
 23fbf26:	f7e8 f953 	bl	23e41d0 <__aeabi_dsub>
 23fbf2a:	460d      	mov	r5, r1
 23fbf2c:	4604      	mov	r4, r0
 23fbf2e:	f7e8 fdb7 	bl	23e4aa0 <__aeabi_d2iz>
 23fbf32:	4680      	mov	r8, r0
 23fbf34:	f7e8 fa9a 	bl	23e446c <__aeabi_i2d>
 23fbf38:	460b      	mov	r3, r1
 23fbf3a:	4602      	mov	r2, r0
 23fbf3c:	4629      	mov	r1, r5
 23fbf3e:	4620      	mov	r0, r4
 23fbf40:	f7e8 f946 	bl	23e41d0 <__aeabi_dsub>
 23fbf44:	464b      	mov	r3, r9
 23fbf46:	4606      	mov	r6, r0
 23fbf48:	460f      	mov	r7, r1
 23fbf4a:	2b00      	cmp	r3, #0
 23fbf4c:	f340 8098 	ble.w	23fc080 <__kernel_rem_pio2+0x300>
 23fbf50:	9a01      	ldr	r2, [sp, #4]
 23fbf52:	a90c      	add	r1, sp, #48	; 0x30
 23fbf54:	f1c9 0318 	rsb	r3, r9, #24
 23fbf58:	f1c9 0517 	rsb	r5, r9, #23
 23fbf5c:	3a01      	subs	r2, #1
 23fbf5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fbf62:	fa41 f003 	asr.w	r0, r1, r3
 23fbf66:	fa00 f303 	lsl.w	r3, r0, r3
 23fbf6a:	4480      	add	r8, r0
 23fbf6c:	1acb      	subs	r3, r1, r3
 23fbf6e:	a90c      	add	r1, sp, #48	; 0x30
 23fbf70:	fa43 f505 	asr.w	r5, r3, r5
 23fbf74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fbf78:	2d00      	cmp	r5, #0
 23fbf7a:	f300 808b 	bgt.w	23fc094 <__kernel_rem_pio2+0x314>
 23fbf7e:	2200      	movs	r2, #0
 23fbf80:	2300      	movs	r3, #0
 23fbf82:	4630      	mov	r0, r6
 23fbf84:	4639      	mov	r1, r7
 23fbf86:	f7e8 fd43 	bl	23e4a10 <__aeabi_dcmpeq>
 23fbf8a:	2800      	cmp	r0, #0
 23fbf8c:	f000 824d 	beq.w	23fc42a <__kernel_rem_pio2+0x6aa>
 23fbf90:	9a01      	ldr	r2, [sp, #4]
 23fbf92:	9b05      	ldr	r3, [sp, #20]
 23fbf94:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fbf98:	4553      	cmp	r3, sl
 23fbf9a:	dc10      	bgt.n	23fbfbe <__kernel_rem_pio2+0x23e>
 23fbf9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fbfa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fbfa2:	4413      	add	r3, r2
 23fbfa4:	aa0c      	add	r2, sp, #48	; 0x30
 23fbfa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fbfaa:	2200      	movs	r2, #0
 23fbfac:	f853 1904 	ldr.w	r1, [r3], #-4
 23fbfb0:	4283      	cmp	r3, r0
 23fbfb2:	ea42 0201 	orr.w	r2, r2, r1
 23fbfb6:	d1f9      	bne.n	23fbfac <__kernel_rem_pio2+0x22c>
 23fbfb8:	2a00      	cmp	r2, #0
 23fbfba:	f040 80df 	bne.w	23fc17c <__kernel_rem_pio2+0x3fc>
 23fbfbe:	9b05      	ldr	r3, [sp, #20]
 23fbfc0:	aa0c      	add	r2, sp, #48	; 0x30
 23fbfc2:	3b01      	subs	r3, #1
 23fbfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fbfc8:	2b00      	cmp	r3, #0
 23fbfca:	f040 80cf 	bne.w	23fc16c <__kernel_rem_pio2+0x3ec>
 23fbfce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fbfd0:	2301      	movs	r3, #1
 23fbfd2:	f852 1904 	ldr.w	r1, [r2], #-4
 23fbfd6:	3301      	adds	r3, #1
 23fbfd8:	2900      	cmp	r1, #0
 23fbfda:	d0fa      	beq.n	23fbfd2 <__kernel_rem_pio2+0x252>
 23fbfdc:	9a01      	ldr	r2, [sp, #4]
 23fbfde:	18d3      	adds	r3, r2, r3
 23fbfe0:	9302      	str	r3, [sp, #8]
 23fbfe2:	1c53      	adds	r3, r2, #1
 23fbfe4:	4699      	mov	r9, r3
 23fbfe6:	9a01      	ldr	r2, [sp, #4]
 23fbfe8:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fbfec:	9908      	ldr	r1, [sp, #32]
 23fbfee:	440a      	add	r2, r1
 23fbff0:	4690      	mov	r8, r2
 23fbff2:	9a07      	ldr	r2, [sp, #28]
 23fbff4:	441a      	add	r2, r3
 23fbff6:	4492      	add	sl, r2
 23fbff8:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fbffa:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fbffe:	aa20      	add	r2, sp, #128	; 0x80
 23fc000:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fc004:	aa70      	add	r2, sp, #448	; 0x1c0
 23fc006:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fc00a:	9301      	str	r3, [sp, #4]
 23fc00c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fc010:	4647      	mov	r7, r8
 23fc012:	f7e8 fa2b 	bl	23e446c <__aeabi_i2d>
 23fc016:	460b      	mov	r3, r1
 23fc018:	9903      	ldr	r1, [sp, #12]
 23fc01a:	4602      	mov	r2, r0
 23fc01c:	f108 0808 	add.w	r8, r8, #8
 23fc020:	2900      	cmp	r1, #0
 23fc022:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fc026:	db1e      	blt.n	23fc066 <__kernel_rem_pio2+0x2e6>
 23fc028:	9e04      	ldr	r6, [sp, #16]
 23fc02a:	2400      	movs	r4, #0
 23fc02c:	2500      	movs	r5, #0
 23fc02e:	e001      	b.n	23fc034 <__kernel_rem_pio2+0x2b4>
 23fc030:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fc034:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fc038:	f7e8 fa82 	bl	23e4540 <__aeabi_dmul>
 23fc03c:	4602      	mov	r2, r0
 23fc03e:	460b      	mov	r3, r1
 23fc040:	4620      	mov	r0, r4
 23fc042:	4629      	mov	r1, r5
 23fc044:	f7e8 f8c6 	bl	23e41d4 <__adddf3>
 23fc048:	455e      	cmp	r6, fp
 23fc04a:	4604      	mov	r4, r0
 23fc04c:	460d      	mov	r5, r1
 23fc04e:	d1ef      	bne.n	23fc030 <__kernel_rem_pio2+0x2b0>
 23fc050:	9b01      	ldr	r3, [sp, #4]
 23fc052:	f109 0901 	add.w	r9, r9, #1
 23fc056:	e8e3 4502 	strd	r4, r5, [r3], #8
 23fc05a:	9301      	str	r3, [sp, #4]
 23fc05c:	9b02      	ldr	r3, [sp, #8]
 23fc05e:	4599      	cmp	r9, r3
 23fc060:	ddd4      	ble.n	23fc00c <__kernel_rem_pio2+0x28c>
 23fc062:	9301      	str	r3, [sp, #4]
 23fc064:	e70e      	b.n	23fbe84 <__kernel_rem_pio2+0x104>
 23fc066:	2400      	movs	r4, #0
 23fc068:	2500      	movs	r5, #0
 23fc06a:	e7f1      	b.n	23fc050 <__kernel_rem_pio2+0x2d0>
 23fc06c:	023ffd78 	.word	0x023ffd78
 23fc070:	2aaaaaab 	.word	0x2aaaaaab
 23fc074:	3e700000 	.word	0x3e700000
 23fc078:	41700000 	.word	0x41700000
 23fc07c:	40200000 	.word	0x40200000
 23fc080:	d16b      	bne.n	23fc15a <__kernel_rem_pio2+0x3da>
 23fc082:	9b01      	ldr	r3, [sp, #4]
 23fc084:	aa0c      	add	r2, sp, #48	; 0x30
 23fc086:	3b01      	subs	r3, #1
 23fc088:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23fc08c:	15ed      	asrs	r5, r5, #23
 23fc08e:	2d00      	cmp	r5, #0
 23fc090:	f77f af75 	ble.w	23fbf7e <__kernel_rem_pio2+0x1fe>
 23fc094:	9b01      	ldr	r3, [sp, #4]
 23fc096:	f108 0801 	add.w	r8, r8, #1
 23fc09a:	2b00      	cmp	r3, #0
 23fc09c:	f340 81c3 	ble.w	23fc426 <__kernel_rem_pio2+0x6a6>
 23fc0a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23fc0a2:	2c00      	cmp	r4, #0
 23fc0a4:	d151      	bne.n	23fc14a <__kernel_rem_pio2+0x3ca>
 23fc0a6:	9b01      	ldr	r3, [sp, #4]
 23fc0a8:	2b01      	cmp	r3, #1
 23fc0aa:	d020      	beq.n	23fc0ee <__kernel_rem_pio2+0x36e>
 23fc0ac:	ab0c      	add	r3, sp, #48	; 0x30
 23fc0ae:	2201      	movs	r2, #1
 23fc0b0:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fc0b4:	2c00      	cmp	r4, #0
 23fc0b6:	d04b      	beq.n	23fc150 <__kernel_rem_pio2+0x3d0>
 23fc0b8:	1c53      	adds	r3, r2, #1
 23fc0ba:	a90c      	add	r1, sp, #48	; 0x30
 23fc0bc:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fc0c0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fc0c4:	9901      	ldr	r1, [sp, #4]
 23fc0c6:	4299      	cmp	r1, r3
 23fc0c8:	dd10      	ble.n	23fc0ec <__kernel_rem_pio2+0x36c>
 23fc0ca:	a80c      	add	r0, sp, #48	; 0x30
 23fc0cc:	aa0c      	add	r2, sp, #48	; 0x30
 23fc0ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fc0d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fc0d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fc0da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fc0de:	e000      	b.n	23fc0e2 <__kernel_rem_pio2+0x362>
 23fc0e0:	681a      	ldr	r2, [r3, #0]
 23fc0e2:	1a8a      	subs	r2, r1, r2
 23fc0e4:	f843 2b04 	str.w	r2, [r3], #4
 23fc0e8:	4283      	cmp	r3, r0
 23fc0ea:	d1f9      	bne.n	23fc0e0 <__kernel_rem_pio2+0x360>
 23fc0ec:	2401      	movs	r4, #1
 23fc0ee:	9b06      	ldr	r3, [sp, #24]
 23fc0f0:	2b00      	cmp	r3, #0
 23fc0f2:	dd0e      	ble.n	23fc112 <__kernel_rem_pio2+0x392>
 23fc0f4:	2b01      	cmp	r3, #1
 23fc0f6:	f000 816b 	beq.w	23fc3d0 <__kernel_rem_pio2+0x650>
 23fc0fa:	2b02      	cmp	r3, #2
 23fc0fc:	d109      	bne.n	23fc112 <__kernel_rem_pio2+0x392>
 23fc0fe:	9b01      	ldr	r3, [sp, #4]
 23fc100:	a90c      	add	r1, sp, #48	; 0x30
 23fc102:	1e5a      	subs	r2, r3, #1
 23fc104:	ab0c      	add	r3, sp, #48	; 0x30
 23fc106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fc10a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fc10e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc112:	2d02      	cmp	r5, #2
 23fc114:	f47f af33 	bne.w	23fbf7e <__kernel_rem_pio2+0x1fe>
 23fc118:	4632      	mov	r2, r6
 23fc11a:	463b      	mov	r3, r7
 23fc11c:	2000      	movs	r0, #0
 23fc11e:	49b6      	ldr	r1, [pc, #728]	; (23fc3f8 <__kernel_rem_pio2+0x678>)
 23fc120:	f7e8 f856 	bl	23e41d0 <__aeabi_dsub>
 23fc124:	4606      	mov	r6, r0
 23fc126:	460f      	mov	r7, r1
 23fc128:	2c00      	cmp	r4, #0
 23fc12a:	f43f af28 	beq.w	23fbf7e <__kernel_rem_pio2+0x1fe>
 23fc12e:	9806      	ldr	r0, [sp, #24]
 23fc130:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fc3e8 <__kernel_rem_pio2+0x668>
 23fc134:	f7fe f99c 	bl	23fa470 <scalbn>
 23fc138:	4630      	mov	r0, r6
 23fc13a:	4639      	mov	r1, r7
 23fc13c:	ec53 2b10 	vmov	r2, r3, d0
 23fc140:	f7e8 f846 	bl	23e41d0 <__aeabi_dsub>
 23fc144:	4606      	mov	r6, r0
 23fc146:	460f      	mov	r7, r1
 23fc148:	e719      	b.n	23fbf7e <__kernel_rem_pio2+0x1fe>
 23fc14a:	2301      	movs	r3, #1
 23fc14c:	2200      	movs	r2, #0
 23fc14e:	e7b4      	b.n	23fc0ba <__kernel_rem_pio2+0x33a>
 23fc150:	3201      	adds	r2, #1
 23fc152:	9901      	ldr	r1, [sp, #4]
 23fc154:	428a      	cmp	r2, r1
 23fc156:	d1ab      	bne.n	23fc0b0 <__kernel_rem_pio2+0x330>
 23fc158:	e7c9      	b.n	23fc0ee <__kernel_rem_pio2+0x36e>
 23fc15a:	2200      	movs	r2, #0
 23fc15c:	4ba7      	ldr	r3, [pc, #668]	; (23fc3fc <__kernel_rem_pio2+0x67c>)
 23fc15e:	f7e8 fc75 	bl	23e4a4c <__aeabi_dcmpge>
 23fc162:	2800      	cmp	r0, #0
 23fc164:	f040 8152 	bne.w	23fc40c <__kernel_rem_pio2+0x68c>
 23fc168:	4605      	mov	r5, r0
 23fc16a:	e708      	b.n	23fbf7e <__kernel_rem_pio2+0x1fe>
 23fc16c:	9b01      	ldr	r3, [sp, #4]
 23fc16e:	3301      	adds	r3, #1
 23fc170:	4699      	mov	r9, r3
 23fc172:	9302      	str	r3, [sp, #8]
 23fc174:	e737      	b.n	23fbfe6 <__kernel_rem_pio2+0x266>
 23fc176:	2400      	movs	r4, #0
 23fc178:	2500      	movs	r5, #0
 23fc17a:	e66a      	b.n	23fbe52 <__kernel_rem_pio2+0xd2>
 23fc17c:	9b06      	ldr	r3, [sp, #24]
 23fc17e:	9503      	str	r5, [sp, #12]
 23fc180:	f1a3 0218 	sub.w	r2, r3, #24
 23fc184:	ab0c      	add	r3, sp, #48	; 0x30
 23fc186:	f8cd 801c 	str.w	r8, [sp, #28]
 23fc18a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fc18e:	9206      	str	r2, [sp, #24]
 23fc190:	b973      	cbnz	r3, 23fc1b0 <__kernel_rem_pio2+0x430>
 23fc192:	4b9b      	ldr	r3, [pc, #620]	; (23fc400 <__kernel_rem_pio2+0x680>)
 23fc194:	9901      	ldr	r1, [sp, #4]
 23fc196:	4419      	add	r1, r3
 23fc198:	460b      	mov	r3, r1
 23fc19a:	a90c      	add	r1, sp, #48	; 0x30
 23fc19c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fc1a0:	f853 1904 	ldr.w	r1, [r3], #-4
 23fc1a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fc1a8:	3a18      	subs	r2, #24
 23fc1aa:	2900      	cmp	r1, #0
 23fc1ac:	d0f8      	beq.n	23fc1a0 <__kernel_rem_pio2+0x420>
 23fc1ae:	9206      	str	r2, [sp, #24]
 23fc1b0:	9806      	ldr	r0, [sp, #24]
 23fc1b2:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fc3e8 <__kernel_rem_pio2+0x668>
 23fc1b6:	f7fe f95b 	bl	23fa470 <scalbn>
 23fc1ba:	f1ba 0f00 	cmp.w	sl, #0
 23fc1be:	ec55 4b10 	vmov	r4, r5, d0
 23fc1c2:	f2c0 81db 	blt.w	23fc57c <__kernel_rem_pio2+0x7fc>
 23fc1c6:	ab70      	add	r3, sp, #448	; 0x1c0
 23fc1c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fc1cc:	f04f 0800 	mov.w	r8, #0
 23fc1d0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fc404 <__kernel_rem_pio2+0x684>
 23fc1d4:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fc1d8:	9204      	str	r2, [sp, #16]
 23fc1da:	f10a 0301 	add.w	r3, sl, #1
 23fc1de:	aa0c      	add	r2, sp, #48	; 0x30
 23fc1e0:	f10b 0708 	add.w	r7, fp, #8
 23fc1e4:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fc1e8:	9306      	str	r3, [sp, #24]
 23fc1ea:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fc1ee:	f7e8 f93d 	bl	23e446c <__aeabi_i2d>
 23fc1f2:	4622      	mov	r2, r4
 23fc1f4:	462b      	mov	r3, r5
 23fc1f6:	f7e8 f9a3 	bl	23e4540 <__aeabi_dmul>
 23fc1fa:	464b      	mov	r3, r9
 23fc1fc:	4642      	mov	r2, r8
 23fc1fe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fc202:	4620      	mov	r0, r4
 23fc204:	4629      	mov	r1, r5
 23fc206:	f7e8 f99b 	bl	23e4540 <__aeabi_dmul>
 23fc20a:	ab0c      	add	r3, sp, #48	; 0x30
 23fc20c:	4604      	mov	r4, r0
 23fc20e:	460d      	mov	r5, r1
 23fc210:	429e      	cmp	r6, r3
 23fc212:	d1ea      	bne.n	23fc1ea <__kernel_rem_pio2+0x46a>
 23fc214:	ab48      	add	r3, sp, #288	; 0x120
 23fc216:	f04f 0900 	mov.w	r9, #0
 23fc21a:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fc21e:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fc222:	f1ba 0f00 	cmp.w	sl, #0
 23fc226:	db2c      	blt.n	23fc282 <__kernel_rem_pio2+0x502>
 23fc228:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fc408 <__kernel_rem_pio2+0x688>
 23fc22c:	465f      	mov	r7, fp
 23fc22e:	2600      	movs	r6, #0
 23fc230:	2400      	movs	r4, #0
 23fc232:	2500      	movs	r5, #0
 23fc234:	a36e      	add	r3, pc, #440	; (adr r3, 23fc3f0 <__kernel_rem_pio2+0x670>)
 23fc236:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc23a:	e003      	b.n	23fc244 <__kernel_rem_pio2+0x4c4>
 23fc23c:	45b1      	cmp	r9, r6
 23fc23e:	db10      	blt.n	23fc262 <__kernel_rem_pio2+0x4e2>
 23fc240:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23fc244:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23fc248:	3601      	adds	r6, #1
 23fc24a:	f7e8 f979 	bl	23e4540 <__aeabi_dmul>
 23fc24e:	4602      	mov	r2, r0
 23fc250:	460b      	mov	r3, r1
 23fc252:	4620      	mov	r0, r4
 23fc254:	4629      	mov	r1, r5
 23fc256:	f7e7 ffbd 	bl	23e41d4 <__adddf3>
 23fc25a:	45b2      	cmp	sl, r6
 23fc25c:	4604      	mov	r4, r0
 23fc25e:	460d      	mov	r5, r1
 23fc260:	daec      	bge.n	23fc23c <__kernel_rem_pio2+0x4bc>
 23fc262:	9b01      	ldr	r3, [sp, #4]
 23fc264:	f1ab 0b08 	sub.w	fp, fp, #8
 23fc268:	9a02      	ldr	r2, [sp, #8]
 23fc26a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23fc26e:	454a      	cmp	r2, r9
 23fc270:	e9c3 4500 	strd	r4, r5, [r3]
 23fc274:	f109 0301 	add.w	r3, r9, #1
 23fc278:	d006      	beq.n	23fc288 <__kernel_rem_pio2+0x508>
 23fc27a:	f1ba 0f00 	cmp.w	sl, #0
 23fc27e:	4699      	mov	r9, r3
 23fc280:	dad2      	bge.n	23fc228 <__kernel_rem_pio2+0x4a8>
 23fc282:	2400      	movs	r4, #0
 23fc284:	2500      	movs	r5, #0
 23fc286:	e7ec      	b.n	23fc262 <__kernel_rem_pio2+0x4e2>
 23fc288:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc28a:	f8dd a008 	ldr.w	sl, [sp, #8]
 23fc28e:	2b02      	cmp	r3, #2
 23fc290:	dc1e      	bgt.n	23fc2d0 <__kernel_rem_pio2+0x550>
 23fc292:	2b00      	cmp	r3, #0
 23fc294:	f300 80ff 	bgt.w	23fc496 <__kernel_rem_pio2+0x716>
 23fc298:	d113      	bne.n	23fc2c2 <__kernel_rem_pio2+0x542>
 23fc29a:	9c04      	ldr	r4, [sp, #16]
 23fc29c:	2000      	movs	r0, #0
 23fc29e:	9d01      	ldr	r5, [sp, #4]
 23fc2a0:	2100      	movs	r1, #0
 23fc2a2:	3408      	adds	r4, #8
 23fc2a4:	442c      	add	r4, r5
 23fc2a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc2aa:	f7e7 ff93 	bl	23e41d4 <__adddf3>
 23fc2ae:	42a5      	cmp	r5, r4
 23fc2b0:	d1f9      	bne.n	23fc2a6 <__kernel_rem_pio2+0x526>
 23fc2b2:	9b03      	ldr	r3, [sp, #12]
 23fc2b4:	b113      	cbz	r3, 23fc2bc <__kernel_rem_pio2+0x53c>
 23fc2b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc2ba:	4619      	mov	r1, r3
 23fc2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc2be:	e9c3 0100 	strd	r0, r1, [r3]
 23fc2c2:	9b07      	ldr	r3, [sp, #28]
 23fc2c4:	f003 0007 	and.w	r0, r3, #7
 23fc2c8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc2d0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc2d2:	2b03      	cmp	r3, #3
 23fc2d4:	d1f5      	bne.n	23fc2c2 <__kernel_rem_pio2+0x542>
 23fc2d6:	f1ba 0f00 	cmp.w	sl, #0
 23fc2da:	f000 816b 	beq.w	23fc5b4 <__kernel_rem_pio2+0x834>
 23fc2de:	9a01      	ldr	r2, [sp, #4]
 23fc2e0:	9b04      	ldr	r3, [sp, #16]
 23fc2e2:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23fc2e6:	18d3      	adds	r3, r2, r3
 23fc2e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 23fc2ec:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23fc2f0:	4620      	mov	r0, r4
 23fc2f2:	4629      	mov	r1, r5
 23fc2f4:	4632      	mov	r2, r6
 23fc2f6:	463b      	mov	r3, r7
 23fc2f8:	f7e7 ff6c 	bl	23e41d4 <__adddf3>
 23fc2fc:	46a0      	mov	r8, r4
 23fc2fe:	46a9      	mov	r9, r5
 23fc300:	4604      	mov	r4, r0
 23fc302:	460d      	mov	r5, r1
 23fc304:	4630      	mov	r0, r6
 23fc306:	4622      	mov	r2, r4
 23fc308:	4639      	mov	r1, r7
 23fc30a:	462b      	mov	r3, r5
 23fc30c:	f7e7 ff60 	bl	23e41d0 <__aeabi_dsub>
 23fc310:	464b      	mov	r3, r9
 23fc312:	4642      	mov	r2, r8
 23fc314:	f7e7 ff5e 	bl	23e41d4 <__adddf3>
 23fc318:	9b01      	ldr	r3, [sp, #4]
 23fc31a:	455b      	cmp	r3, fp
 23fc31c:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23fc320:	e9cb 4500 	strd	r4, r5, [fp]
 23fc324:	d1e2      	bne.n	23fc2ec <__kernel_rem_pio2+0x56c>
 23fc326:	f1ba 0f01 	cmp.w	sl, #1
 23fc32a:	f340 8143 	ble.w	23fc5b4 <__kernel_rem_pio2+0x834>
 23fc32e:	9b04      	ldr	r3, [sp, #16]
 23fc330:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23fc334:	9901      	ldr	r1, [sp, #4]
 23fc336:	461a      	mov	r2, r3
 23fc338:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23fc33c:	4453      	add	r3, sl
 23fc33e:	440a      	add	r2, r1
 23fc340:	00db      	lsls	r3, r3, #3
 23fc342:	f103 0a08 	add.w	sl, r3, #8
 23fc346:	9302      	str	r3, [sp, #8]
 23fc348:	e9d2 4500 	ldrd	r4, r5, [r2]
 23fc34c:	448a      	add	sl, r1
 23fc34e:	4620      	mov	r0, r4
 23fc350:	4629      	mov	r1, r5
 23fc352:	46a0      	mov	r8, r4
 23fc354:	46a9      	mov	r9, r5
 23fc356:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23fc35a:	4632      	mov	r2, r6
 23fc35c:	463b      	mov	r3, r7
 23fc35e:	f7e7 ff39 	bl	23e41d4 <__adddf3>
 23fc362:	4604      	mov	r4, r0
 23fc364:	460d      	mov	r5, r1
 23fc366:	4630      	mov	r0, r6
 23fc368:	4622      	mov	r2, r4
 23fc36a:	4639      	mov	r1, r7
 23fc36c:	462b      	mov	r3, r5
 23fc36e:	f7e7 ff2f 	bl	23e41d0 <__aeabi_dsub>
 23fc372:	4642      	mov	r2, r8
 23fc374:	464b      	mov	r3, r9
 23fc376:	f7e7 ff2d 	bl	23e41d4 <__adddf3>
 23fc37a:	45d3      	cmp	fp, sl
 23fc37c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23fc380:	e9ca 4500 	strd	r4, r5, [sl]
 23fc384:	d1e3      	bne.n	23fc34e <__kernel_rem_pio2+0x5ce>
 23fc386:	9c02      	ldr	r4, [sp, #8]
 23fc388:	2000      	movs	r0, #0
 23fc38a:	9b01      	ldr	r3, [sp, #4]
 23fc38c:	2100      	movs	r1, #0
 23fc38e:	3410      	adds	r4, #16
 23fc390:	f103 0510 	add.w	r5, r3, #16
 23fc394:	441c      	add	r4, r3
 23fc396:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc39a:	f7e7 ff1b 	bl	23e41d4 <__adddf3>
 23fc39e:	42a5      	cmp	r5, r4
 23fc3a0:	d1f9      	bne.n	23fc396 <__kernel_rem_pio2+0x616>
 23fc3a2:	9b03      	ldr	r3, [sp, #12]
 23fc3a4:	2b00      	cmp	r3, #0
 23fc3a6:	f040 80b4 	bne.w	23fc512 <__kernel_rem_pio2+0x792>
 23fc3aa:	9d01      	ldr	r5, [sp, #4]
 23fc3ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fc3ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fc3b2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fc3b6:	e9c4 2300 	strd	r2, r3, [r4]
 23fc3ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fc3be:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fc3c2:	9b07      	ldr	r3, [sp, #28]
 23fc3c4:	f003 0007 	and.w	r0, r3, #7
 23fc3c8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc3d0:	9b01      	ldr	r3, [sp, #4]
 23fc3d2:	a90c      	add	r1, sp, #48	; 0x30
 23fc3d4:	1e5a      	subs	r2, r3, #1
 23fc3d6:	ab0c      	add	r3, sp, #48	; 0x30
 23fc3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fc3dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fc3e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc3e4:	e695      	b.n	23fc112 <__kernel_rem_pio2+0x392>
 23fc3e6:	bf00      	nop
 23fc3e8:	00000000 	.word	0x00000000
 23fc3ec:	3ff00000 	.word	0x3ff00000
 23fc3f0:	40000000 	.word	0x40000000
 23fc3f4:	3ff921fb 	.word	0x3ff921fb
 23fc3f8:	3ff00000 	.word	0x3ff00000
 23fc3fc:	3fe00000 	.word	0x3fe00000
 23fc400:	3ffffffe 	.word	0x3ffffffe
 23fc404:	3e700000 	.word	0x3e700000
 23fc408:	023ffd40 	.word	0x023ffd40
 23fc40c:	9b01      	ldr	r3, [sp, #4]
 23fc40e:	f108 0801 	add.w	r8, r8, #1
 23fc412:	2b00      	cmp	r3, #0
 23fc414:	f340 80a8 	ble.w	23fc568 <__kernel_rem_pio2+0x7e8>
 23fc418:	2502      	movs	r5, #2
 23fc41a:	e641      	b.n	23fc0a0 <__kernel_rem_pio2+0x320>
 23fc41c:	2100      	movs	r1, #0
 23fc41e:	f06f 0317 	mvn.w	r3, #23
 23fc422:	9107      	str	r1, [sp, #28]
 23fc424:	e4cc      	b.n	23fbdc0 <__kernel_rem_pio2+0x40>
 23fc426:	2400      	movs	r4, #0
 23fc428:	e661      	b.n	23fc0ee <__kernel_rem_pio2+0x36e>
 23fc42a:	ec47 6b10 	vmov	d0, r6, r7
 23fc42e:	9e06      	ldr	r6, [sp, #24]
 23fc430:	9503      	str	r5, [sp, #12]
 23fc432:	4270      	negs	r0, r6
 23fc434:	f8cd 801c 	str.w	r8, [sp, #28]
 23fc438:	f7fe f81a 	bl	23fa470 <scalbn>
 23fc43c:	2200      	movs	r2, #0
 23fc43e:	4b5f      	ldr	r3, [pc, #380]	; (23fc5bc <__kernel_rem_pio2+0x83c>)
 23fc440:	ee10 0a10 	vmov	r0, s0
 23fc444:	ec55 4b10 	vmov	r4, r5, d0
 23fc448:	4629      	mov	r1, r5
 23fc44a:	f7e8 faff 	bl	23e4a4c <__aeabi_dcmpge>
 23fc44e:	2800      	cmp	r0, #0
 23fc450:	d055      	beq.n	23fc4fe <__kernel_rem_pio2+0x77e>
 23fc452:	3618      	adds	r6, #24
 23fc454:	2200      	movs	r2, #0
 23fc456:	4b5a      	ldr	r3, [pc, #360]	; (23fc5c0 <__kernel_rem_pio2+0x840>)
 23fc458:	4620      	mov	r0, r4
 23fc45a:	4629      	mov	r1, r5
 23fc45c:	9606      	str	r6, [sp, #24]
 23fc45e:	f7e8 f86f 	bl	23e4540 <__aeabi_dmul>
 23fc462:	9f01      	ldr	r7, [sp, #4]
 23fc464:	f7e8 fb1c 	bl	23e4aa0 <__aeabi_d2iz>
 23fc468:	4606      	mov	r6, r0
 23fc46a:	f7e7 ffff 	bl	23e446c <__aeabi_i2d>
 23fc46e:	2200      	movs	r2, #0
 23fc470:	4b52      	ldr	r3, [pc, #328]	; (23fc5bc <__kernel_rem_pio2+0x83c>)
 23fc472:	f107 0a01 	add.w	sl, r7, #1
 23fc476:	f7e8 f863 	bl	23e4540 <__aeabi_dmul>
 23fc47a:	460b      	mov	r3, r1
 23fc47c:	4602      	mov	r2, r0
 23fc47e:	4629      	mov	r1, r5
 23fc480:	4620      	mov	r0, r4
 23fc482:	f7e7 fea5 	bl	23e41d0 <__aeabi_dsub>
 23fc486:	f7e8 fb0b 	bl	23e4aa0 <__aeabi_d2iz>
 23fc48a:	ab0c      	add	r3, sp, #48	; 0x30
 23fc48c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fc490:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fc494:	e68c      	b.n	23fc1b0 <__kernel_rem_pio2+0x430>
 23fc496:	9d01      	ldr	r5, [sp, #4]
 23fc498:	2000      	movs	r0, #0
 23fc49a:	9a06      	ldr	r2, [sp, #24]
 23fc49c:	2100      	movs	r1, #0
 23fc49e:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fc4a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc4a6:	f7e7 fe95 	bl	23e41d4 <__adddf3>
 23fc4aa:	42a5      	cmp	r5, r4
 23fc4ac:	d1f9      	bne.n	23fc4a2 <__kernel_rem_pio2+0x722>
 23fc4ae:	9b03      	ldr	r3, [sp, #12]
 23fc4b0:	2b00      	cmp	r3, #0
 23fc4b2:	d149      	bne.n	23fc548 <__kernel_rem_pio2+0x7c8>
 23fc4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc4b6:	4602      	mov	r2, r0
 23fc4b8:	e9c3 0100 	strd	r0, r1, [r3]
 23fc4bc:	460b      	mov	r3, r1
 23fc4be:	9901      	ldr	r1, [sp, #4]
 23fc4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc4c4:	f7e7 fe84 	bl	23e41d0 <__aeabi_dsub>
 23fc4c8:	f1ba 0f00 	cmp.w	sl, #0
 23fc4cc:	dd0d      	ble.n	23fc4ea <__kernel_rem_pio2+0x76a>
 23fc4ce:	ad4a      	add	r5, sp, #296	; 0x128
 23fc4d0:	2401      	movs	r4, #1
 23fc4d2:	3401      	adds	r4, #1
 23fc4d4:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fc4d8:	f7e7 fe7c 	bl	23e41d4 <__adddf3>
 23fc4dc:	45a2      	cmp	sl, r4
 23fc4de:	daf8      	bge.n	23fc4d2 <__kernel_rem_pio2+0x752>
 23fc4e0:	9b03      	ldr	r3, [sp, #12]
 23fc4e2:	b113      	cbz	r3, 23fc4ea <__kernel_rem_pio2+0x76a>
 23fc4e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc4e8:	4619      	mov	r1, r3
 23fc4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc4ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fc4f0:	9b07      	ldr	r3, [sp, #28]
 23fc4f2:	f003 0007 	and.w	r0, r3, #7
 23fc4f6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc4fe:	4620      	mov	r0, r4
 23fc500:	4629      	mov	r1, r5
 23fc502:	f7e8 facd 	bl	23e4aa0 <__aeabi_d2iz>
 23fc506:	9b01      	ldr	r3, [sp, #4]
 23fc508:	aa0c      	add	r2, sp, #48	; 0x30
 23fc50a:	469a      	mov	sl, r3
 23fc50c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fc510:	e64e      	b.n	23fc1b0 <__kernel_rem_pio2+0x430>
 23fc512:	9b01      	ldr	r3, [sp, #4]
 23fc514:	4602      	mov	r2, r0
 23fc516:	461e      	mov	r6, r3
 23fc518:	685c      	ldr	r4, [r3, #4]
 23fc51a:	68dd      	ldr	r5, [r3, #12]
 23fc51c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fc522:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23fc526:	6832      	ldr	r2, [r6, #0]
 23fc528:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23fc52c:	e9c1 2300 	strd	r2, r3, [r1]
 23fc530:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fc534:	68b2      	ldr	r2, [r6, #8]
 23fc536:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23fc53a:	9b07      	ldr	r3, [sp, #28]
 23fc53c:	f003 0007 	and.w	r0, r3, #7
 23fc540:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc54a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc54e:	6053      	str	r3, [r2, #4]
 23fc550:	460b      	mov	r3, r1
 23fc552:	9901      	ldr	r1, [sp, #4]
 23fc554:	6010      	str	r0, [r2, #0]
 23fc556:	4602      	mov	r2, r0
 23fc558:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc55c:	f7e7 fe38 	bl	23e41d0 <__aeabi_dsub>
 23fc560:	f1ba 0f00 	cmp.w	sl, #0
 23fc564:	dcb3      	bgt.n	23fc4ce <__kernel_rem_pio2+0x74e>
 23fc566:	e7bd      	b.n	23fc4e4 <__kernel_rem_pio2+0x764>
 23fc568:	4632      	mov	r2, r6
 23fc56a:	463b      	mov	r3, r7
 23fc56c:	2000      	movs	r0, #0
 23fc56e:	4915      	ldr	r1, [pc, #84]	; (23fc5c4 <__kernel_rem_pio2+0x844>)
 23fc570:	f7e7 fe2e 	bl	23e41d0 <__aeabi_dsub>
 23fc574:	2502      	movs	r5, #2
 23fc576:	4606      	mov	r6, r0
 23fc578:	460f      	mov	r7, r1
 23fc57a:	e500      	b.n	23fbf7e <__kernel_rem_pio2+0x1fe>
 23fc57c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc57e:	2b02      	cmp	r3, #2
 23fc580:	dc0a      	bgt.n	23fc598 <__kernel_rem_pio2+0x818>
 23fc582:	2b00      	cmp	r3, #0
 23fc584:	dc11      	bgt.n	23fc5aa <__kernel_rem_pio2+0x82a>
 23fc586:	f47f ae9c 	bne.w	23fc2c2 <__kernel_rem_pio2+0x542>
 23fc58a:	2000      	movs	r0, #0
 23fc58c:	2100      	movs	r1, #0
 23fc58e:	e690      	b.n	23fc2b2 <__kernel_rem_pio2+0x532>
 23fc590:	9b08      	ldr	r3, [sp, #32]
 23fc592:	00db      	lsls	r3, r3, #3
 23fc594:	9302      	str	r3, [sp, #8]
 23fc596:	e465      	b.n	23fbe64 <__kernel_rem_pio2+0xe4>
 23fc598:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc59a:	2b03      	cmp	r3, #3
 23fc59c:	f47f ae91 	bne.w	23fc2c2 <__kernel_rem_pio2+0x542>
 23fc5a0:	ab48      	add	r3, sp, #288	; 0x120
 23fc5a2:	2000      	movs	r0, #0
 23fc5a4:	2100      	movs	r1, #0
 23fc5a6:	9301      	str	r3, [sp, #4]
 23fc5a8:	e6fb      	b.n	23fc3a2 <__kernel_rem_pio2+0x622>
 23fc5aa:	ab48      	add	r3, sp, #288	; 0x120
 23fc5ac:	2000      	movs	r0, #0
 23fc5ae:	2100      	movs	r1, #0
 23fc5b0:	9301      	str	r3, [sp, #4]
 23fc5b2:	e77c      	b.n	23fc4ae <__kernel_rem_pio2+0x72e>
 23fc5b4:	2000      	movs	r0, #0
 23fc5b6:	2100      	movs	r1, #0
 23fc5b8:	e6f3      	b.n	23fc3a2 <__kernel_rem_pio2+0x622>
 23fc5ba:	bf00      	nop
 23fc5bc:	41700000 	.word	0x41700000
 23fc5c0:	3e700000 	.word	0x3e700000
 23fc5c4:	3ff00000 	.word	0x3ff00000

023fc5c8 <__kernel_sin>:
 23fc5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc5cc:	ec5b ab10 	vmov	sl, fp, d0
 23fc5d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fc5d4:	4680      	mov	r8, r0
 23fc5d6:	ed2d 8b02 	vpush	{d8}
 23fc5da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fc5de:	b083      	sub	sp, #12
 23fc5e0:	ed8d 1b00 	vstr	d1, [sp]
 23fc5e4:	da07      	bge.n	23fc5f6 <__kernel_sin+0x2e>
 23fc5e6:	ee10 0a10 	vmov	r0, s0
 23fc5ea:	4659      	mov	r1, fp
 23fc5ec:	f7e8 fa58 	bl	23e4aa0 <__aeabi_d2iz>
 23fc5f0:	2800      	cmp	r0, #0
 23fc5f2:	f000 808e 	beq.w	23fc712 <__kernel_sin+0x14a>
 23fc5f6:	4652      	mov	r2, sl
 23fc5f8:	465b      	mov	r3, fp
 23fc5fa:	4650      	mov	r0, sl
 23fc5fc:	4659      	mov	r1, fp
 23fc5fe:	f7e7 ff9f 	bl	23e4540 <__aeabi_dmul>
 23fc602:	4604      	mov	r4, r0
 23fc604:	460d      	mov	r5, r1
 23fc606:	4650      	mov	r0, sl
 23fc608:	4622      	mov	r2, r4
 23fc60a:	4659      	mov	r1, fp
 23fc60c:	462b      	mov	r3, r5
 23fc60e:	f7e7 ff97 	bl	23e4540 <__aeabi_dmul>
 23fc612:	4606      	mov	r6, r0
 23fc614:	460f      	mov	r7, r1
 23fc616:	4620      	mov	r0, r4
 23fc618:	4629      	mov	r1, r5
 23fc61a:	a344      	add	r3, pc, #272	; (adr r3, 23fc72c <__kernel_sin+0x164>)
 23fc61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc620:	f7e7 ff8e 	bl	23e4540 <__aeabi_dmul>
 23fc624:	a343      	add	r3, pc, #268	; (adr r3, 23fc734 <__kernel_sin+0x16c>)
 23fc626:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc62a:	f7e7 fdd1 	bl	23e41d0 <__aeabi_dsub>
 23fc62e:	4622      	mov	r2, r4
 23fc630:	462b      	mov	r3, r5
 23fc632:	f7e7 ff85 	bl	23e4540 <__aeabi_dmul>
 23fc636:	a341      	add	r3, pc, #260	; (adr r3, 23fc73c <__kernel_sin+0x174>)
 23fc638:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc63c:	f7e7 fdca 	bl	23e41d4 <__adddf3>
 23fc640:	4622      	mov	r2, r4
 23fc642:	462b      	mov	r3, r5
 23fc644:	f7e7 ff7c 	bl	23e4540 <__aeabi_dmul>
 23fc648:	a33e      	add	r3, pc, #248	; (adr r3, 23fc744 <__kernel_sin+0x17c>)
 23fc64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc64e:	f7e7 fdbf 	bl	23e41d0 <__aeabi_dsub>
 23fc652:	4622      	mov	r2, r4
 23fc654:	462b      	mov	r3, r5
 23fc656:	f7e7 ff73 	bl	23e4540 <__aeabi_dmul>
 23fc65a:	a33c      	add	r3, pc, #240	; (adr r3, 23fc74c <__kernel_sin+0x184>)
 23fc65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc660:	f7e7 fdb8 	bl	23e41d4 <__adddf3>
 23fc664:	ec41 0b18 	vmov	d8, r0, r1
 23fc668:	f1b8 0f00 	cmp.w	r8, #0
 23fc66c:	d037      	beq.n	23fc6de <__kernel_sin+0x116>
 23fc66e:	2200      	movs	r2, #0
 23fc670:	4b2d      	ldr	r3, [pc, #180]	; (23fc728 <__kernel_sin+0x160>)
 23fc672:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc676:	f7e7 ff63 	bl	23e4540 <__aeabi_dmul>
 23fc67a:	4680      	mov	r8, r0
 23fc67c:	4689      	mov	r9, r1
 23fc67e:	4630      	mov	r0, r6
 23fc680:	4639      	mov	r1, r7
 23fc682:	ec53 2b18 	vmov	r2, r3, d8
 23fc686:	f7e7 ff5b 	bl	23e4540 <__aeabi_dmul>
 23fc68a:	4602      	mov	r2, r0
 23fc68c:	460b      	mov	r3, r1
 23fc68e:	4640      	mov	r0, r8
 23fc690:	4649      	mov	r1, r9
 23fc692:	f7e7 fd9d 	bl	23e41d0 <__aeabi_dsub>
 23fc696:	4622      	mov	r2, r4
 23fc698:	462b      	mov	r3, r5
 23fc69a:	f7e7 ff51 	bl	23e4540 <__aeabi_dmul>
 23fc69e:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fc6a2:	f7e7 fd95 	bl	23e41d0 <__aeabi_dsub>
 23fc6a6:	4604      	mov	r4, r0
 23fc6a8:	460d      	mov	r5, r1
 23fc6aa:	4630      	mov	r0, r6
 23fc6ac:	4639      	mov	r1, r7
 23fc6ae:	a31c      	add	r3, pc, #112	; (adr r3, 23fc720 <__kernel_sin+0x158>)
 23fc6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc6b4:	f7e7 ff44 	bl	23e4540 <__aeabi_dmul>
 23fc6b8:	4602      	mov	r2, r0
 23fc6ba:	460b      	mov	r3, r1
 23fc6bc:	4620      	mov	r0, r4
 23fc6be:	4629      	mov	r1, r5
 23fc6c0:	f7e7 fd88 	bl	23e41d4 <__adddf3>
 23fc6c4:	4602      	mov	r2, r0
 23fc6c6:	460b      	mov	r3, r1
 23fc6c8:	4650      	mov	r0, sl
 23fc6ca:	4659      	mov	r1, fp
 23fc6cc:	f7e7 fd80 	bl	23e41d0 <__aeabi_dsub>
 23fc6d0:	ec41 0b10 	vmov	d0, r0, r1
 23fc6d4:	b003      	add	sp, #12
 23fc6d6:	ecbd 8b02 	vpop	{d8}
 23fc6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc6de:	4602      	mov	r2, r0
 23fc6e0:	460b      	mov	r3, r1
 23fc6e2:	4620      	mov	r0, r4
 23fc6e4:	4629      	mov	r1, r5
 23fc6e6:	f7e7 ff2b 	bl	23e4540 <__aeabi_dmul>
 23fc6ea:	a30d      	add	r3, pc, #52	; (adr r3, 23fc720 <__kernel_sin+0x158>)
 23fc6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc6f0:	f7e7 fd6e 	bl	23e41d0 <__aeabi_dsub>
 23fc6f4:	4632      	mov	r2, r6
 23fc6f6:	463b      	mov	r3, r7
 23fc6f8:	f7e7 ff22 	bl	23e4540 <__aeabi_dmul>
 23fc6fc:	4652      	mov	r2, sl
 23fc6fe:	465b      	mov	r3, fp
 23fc700:	f7e7 fd68 	bl	23e41d4 <__adddf3>
 23fc704:	ec41 0b10 	vmov	d0, r0, r1
 23fc708:	b003      	add	sp, #12
 23fc70a:	ecbd 8b02 	vpop	{d8}
 23fc70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc712:	ec4b ab10 	vmov	d0, sl, fp
 23fc716:	b003      	add	sp, #12
 23fc718:	ecbd 8b02 	vpop	{d8}
 23fc71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc720:	55555549 	.word	0x55555549
 23fc724:	3fc55555 	.word	0x3fc55555
 23fc728:	3fe00000 	.word	0x3fe00000
 23fc72c:	5acfd57c 	.word	0x5acfd57c
 23fc730:	3de5d93a 	.word	0x3de5d93a
 23fc734:	8a2b9ceb 	.word	0x8a2b9ceb
 23fc738:	3e5ae5e6 	.word	0x3e5ae5e6
 23fc73c:	57b1fe7d 	.word	0x57b1fe7d
 23fc740:	3ec71de3 	.word	0x3ec71de3
 23fc744:	19c161d5 	.word	0x19c161d5
 23fc748:	3f2a01a0 	.word	0x3f2a01a0
 23fc74c:	1110f8a6 	.word	0x1110f8a6
 23fc750:	3f811111 	.word	0x3f811111

023fc754 <finite>:
 23fc754:	b082      	sub	sp, #8
 23fc756:	4805      	ldr	r0, [pc, #20]	; (23fc76c <finite+0x18>)
 23fc758:	ed8d 0b00 	vstr	d0, [sp]
 23fc75c:	9b01      	ldr	r3, [sp, #4]
 23fc75e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23fc762:	4418      	add	r0, r3
 23fc764:	0fc0      	lsrs	r0, r0, #31
 23fc766:	b002      	add	sp, #8
 23fc768:	4770      	bx	lr
 23fc76a:	bf00      	nop
 23fc76c:	80100000 	.word	0x80100000

023fc770 <floor>:
 23fc770:	ec51 0b10 	vmov	r0, r1, d0
 23fc774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc776:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fc77a:	460c      	mov	r4, r1
 23fc77c:	ee10 6a10 	vmov	r6, s0
 23fc780:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23fc784:	2d13      	cmp	r5, #19
 23fc786:	dc30      	bgt.n	23fc7ea <floor+0x7a>
 23fc788:	2d00      	cmp	r5, #0
 23fc78a:	db1e      	blt.n	23fc7ca <floor+0x5a>
 23fc78c:	4f38      	ldr	r7, [pc, #224]	; (23fc870 <floor+0x100>)
 23fc78e:	412f      	asrs	r7, r5
 23fc790:	ea01 0307 	and.w	r3, r1, r7
 23fc794:	4303      	orrs	r3, r0
 23fc796:	d02d      	beq.n	23fc7f4 <floor+0x84>
 23fc798:	a333      	add	r3, pc, #204	; (adr r3, 23fc868 <floor+0xf8>)
 23fc79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc79e:	f7e7 fd19 	bl	23e41d4 <__adddf3>
 23fc7a2:	2200      	movs	r2, #0
 23fc7a4:	2300      	movs	r3, #0
 23fc7a6:	f7e8 f95b 	bl	23e4a60 <__aeabi_dcmpgt>
 23fc7aa:	b148      	cbz	r0, 23fc7c0 <floor+0x50>
 23fc7ac:	2c00      	cmp	r4, #0
 23fc7ae:	da04      	bge.n	23fc7ba <floor+0x4a>
 23fc7b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23fc7b4:	fa43 f505 	asr.w	r5, r3, r5
 23fc7b8:	442c      	add	r4, r5
 23fc7ba:	ea24 0407 	bic.w	r4, r4, r7
 23fc7be:	2600      	movs	r6, #0
 23fc7c0:	4623      	mov	r3, r4
 23fc7c2:	4632      	mov	r2, r6
 23fc7c4:	ec43 2b10 	vmov	d0, r2, r3
 23fc7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc7ca:	a327      	add	r3, pc, #156	; (adr r3, 23fc868 <floor+0xf8>)
 23fc7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc7d0:	f7e7 fd00 	bl	23e41d4 <__adddf3>
 23fc7d4:	2200      	movs	r2, #0
 23fc7d6:	2300      	movs	r3, #0
 23fc7d8:	f7e8 f942 	bl	23e4a60 <__aeabi_dcmpgt>
 23fc7dc:	2800      	cmp	r0, #0
 23fc7de:	d0ef      	beq.n	23fc7c0 <floor+0x50>
 23fc7e0:	2c00      	cmp	r4, #0
 23fc7e2:	db29      	blt.n	23fc838 <floor+0xc8>
 23fc7e4:	2600      	movs	r6, #0
 23fc7e6:	4634      	mov	r4, r6
 23fc7e8:	e7ea      	b.n	23fc7c0 <floor+0x50>
 23fc7ea:	2d33      	cmp	r5, #51	; 0x33
 23fc7ec:	dd05      	ble.n	23fc7fa <floor+0x8a>
 23fc7ee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23fc7f2:	d019      	beq.n	23fc828 <floor+0xb8>
 23fc7f4:	ec41 0b10 	vmov	d0, r0, r1
 23fc7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc7fa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23fc7fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23fc802:	40df      	lsrs	r7, r3
 23fc804:	4207      	tst	r7, r0
 23fc806:	d0f5      	beq.n	23fc7f4 <floor+0x84>
 23fc808:	a317      	add	r3, pc, #92	; (adr r3, 23fc868 <floor+0xf8>)
 23fc80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc80e:	f7e7 fce1 	bl	23e41d4 <__adddf3>
 23fc812:	2200      	movs	r2, #0
 23fc814:	2300      	movs	r3, #0
 23fc816:	f7e8 f923 	bl	23e4a60 <__aeabi_dcmpgt>
 23fc81a:	2800      	cmp	r0, #0
 23fc81c:	d0d0      	beq.n	23fc7c0 <floor+0x50>
 23fc81e:	2c00      	cmp	r4, #0
 23fc820:	db13      	blt.n	23fc84a <floor+0xda>
 23fc822:	ea26 0607 	bic.w	r6, r6, r7
 23fc826:	e7cb      	b.n	23fc7c0 <floor+0x50>
 23fc828:	ee10 2a10 	vmov	r2, s0
 23fc82c:	460b      	mov	r3, r1
 23fc82e:	f7e7 fcd1 	bl	23e41d4 <__adddf3>
 23fc832:	ec41 0b10 	vmov	d0, r0, r1
 23fc836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc838:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23fc83c:	4a0d      	ldr	r2, [pc, #52]	; (23fc874 <floor+0x104>)
 23fc83e:	4333      	orrs	r3, r6
 23fc840:	2600      	movs	r6, #0
 23fc842:	42b3      	cmp	r3, r6
 23fc844:	bf18      	it	ne
 23fc846:	4614      	movne	r4, r2
 23fc848:	e7ba      	b.n	23fc7c0 <floor+0x50>
 23fc84a:	2d14      	cmp	r5, #20
 23fc84c:	d008      	beq.n	23fc860 <floor+0xf0>
 23fc84e:	2301      	movs	r3, #1
 23fc850:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23fc854:	fa03 f505 	lsl.w	r5, r3, r5
 23fc858:	19ae      	adds	r6, r5, r6
 23fc85a:	bf28      	it	cs
 23fc85c:	18e4      	addcs	r4, r4, r3
 23fc85e:	e7e0      	b.n	23fc822 <floor+0xb2>
 23fc860:	3401      	adds	r4, #1
 23fc862:	e7de      	b.n	23fc822 <floor+0xb2>
 23fc864:	f3af 8000 	nop.w
 23fc868:	8800759c 	.word	0x8800759c
 23fc86c:	7e37e43c 	.word	0x7e37e43c
 23fc870:	000fffff 	.word	0x000fffff
 23fc874:	bff00000 	.word	0xbff00000

023fc878 <nan>:
 23fc878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fc880 <nan+0x8>
 23fc87c:	4770      	bx	lr
 23fc87e:	bf00      	nop
 23fc880:	00000000 	.word	0x00000000
 23fc884:	7ff80000 	.word	0x7ff80000

023fc888 <rint>:
 23fc888:	ec53 2b10 	vmov	r2, r3, d0
 23fc88c:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23fc890:	ee10 0a10 	vmov	r0, s0
 23fc894:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23fc898:	2913      	cmp	r1, #19
 23fc89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc89c:	461c      	mov	r4, r3
 23fc89e:	b083      	sub	sp, #12
 23fc8a0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23fc8a4:	dc3a      	bgt.n	23fc91c <rint+0x94>
 23fc8a6:	2900      	cmp	r1, #0
 23fc8a8:	db30      	blt.n	23fc90c <rint+0x84>
 23fc8aa:	4d42      	ldr	r5, [pc, #264]	; (23fc9b4 <rint+0x12c>)
 23fc8ac:	fa45 fc01 	asr.w	ip, r5, r1
 23fc8b0:	ea03 050c 	and.w	r5, r3, ip
 23fc8b4:	4315      	orrs	r5, r2
 23fc8b6:	d02d      	beq.n	23fc914 <rint+0x8c>
 23fc8b8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23fc8bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23fc8c0:	4318      	orrs	r0, r3
 23fc8c2:	d00c      	beq.n	23fc8de <rint+0x56>
 23fc8c4:	ea24 0c0c 	bic.w	ip, r4, ip
 23fc8c8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23fc8cc:	2913      	cmp	r1, #19
 23fc8ce:	fa44 f101 	asr.w	r1, r4, r1
 23fc8d2:	bf0c      	ite	eq
 23fc8d4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23fc8d8:	2000      	movne	r0, #0
 23fc8da:	ea4c 0401 	orr.w	r4, ip, r1
 23fc8de:	4936      	ldr	r1, [pc, #216]	; (23fc9b8 <rint+0x130>)
 23fc8e0:	4623      	mov	r3, r4
 23fc8e2:	4602      	mov	r2, r0
 23fc8e4:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23fc8e8:	e9de 4500 	ldrd	r4, r5, [lr]
 23fc8ec:	4620      	mov	r0, r4
 23fc8ee:	4629      	mov	r1, r5
 23fc8f0:	f7e7 fc70 	bl	23e41d4 <__adddf3>
 23fc8f4:	4622      	mov	r2, r4
 23fc8f6:	462b      	mov	r3, r5
 23fc8f8:	e9cd 0100 	strd	r0, r1, [sp]
 23fc8fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc900:	f7e7 fc66 	bl	23e41d0 <__aeabi_dsub>
 23fc904:	ec41 0b10 	vmov	d0, r0, r1
 23fc908:	b003      	add	sp, #12
 23fc90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc90c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23fc910:	4311      	orrs	r1, r2
 23fc912:	d124      	bne.n	23fc95e <rint+0xd6>
 23fc914:	ec43 2b10 	vmov	d0, r2, r3
 23fc918:	b003      	add	sp, #12
 23fc91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc91c:	2933      	cmp	r1, #51	; 0x33
 23fc91e:	dd08      	ble.n	23fc932 <rint+0xaa>
 23fc920:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23fc924:	d1f6      	bne.n	23fc914 <rint+0x8c>
 23fc926:	4619      	mov	r1, r3
 23fc928:	f7e7 fc54 	bl	23e41d4 <__adddf3>
 23fc92c:	ec41 0b10 	vmov	d0, r0, r1
 23fc930:	e7f2      	b.n	23fc918 <rint+0x90>
 23fc932:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23fc936:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fc93a:	fa21 f10c 	lsr.w	r1, r1, ip
 23fc93e:	420a      	tst	r2, r1
 23fc940:	d0e8      	beq.n	23fc914 <rint+0x8c>
 23fc942:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23fc946:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23fc94a:	d0c8      	beq.n	23fc8de <rint+0x56>
 23fc94c:	ea20 0303 	bic.w	r3, r0, r3
 23fc950:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23fc954:	fa40 fc0c 	asr.w	ip, r0, ip
 23fc958:	ea43 000c 	orr.w	r0, r3, ip
 23fc95c:	e7bf      	b.n	23fc8de <rint+0x56>
 23fc95e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fc962:	4a16      	ldr	r2, [pc, #88]	; (23fc9bc <rint+0x134>)
 23fc964:	4318      	orrs	r0, r3
 23fc966:	4022      	ands	r2, r4
 23fc968:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23fc96c:	4243      	negs	r3, r0
 23fc96e:	4303      	orrs	r3, r0
 23fc970:	0b1b      	lsrs	r3, r3, #12
 23fc972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23fc976:	ea43 0702 	orr.w	r7, r3, r2
 23fc97a:	4b0f      	ldr	r3, [pc, #60]	; (23fc9b8 <rint+0x130>)
 23fc97c:	ee10 2a10 	vmov	r2, s0
 23fc980:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23fc984:	463b      	mov	r3, r7
 23fc986:	e9de 6700 	ldrd	r6, r7, [lr]
 23fc98a:	4630      	mov	r0, r6
 23fc98c:	4639      	mov	r1, r7
 23fc98e:	f7e7 fc21 	bl	23e41d4 <__adddf3>
 23fc992:	4632      	mov	r2, r6
 23fc994:	463b      	mov	r3, r7
 23fc996:	e9cd 0100 	strd	r0, r1, [sp]
 23fc99a:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc99e:	f7e7 fc17 	bl	23e41d0 <__aeabi_dsub>
 23fc9a2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc9a6:	4602      	mov	r2, r0
 23fc9a8:	ea41 0304 	orr.w	r3, r1, r4
 23fc9ac:	ec43 2b10 	vmov	d0, r2, r3
 23fc9b0:	b003      	add	sp, #12
 23fc9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc9b4:	000fffff 	.word	0x000fffff
 23fc9b8:	023ffd88 	.word	0x023ffd88
 23fc9bc:	fffe0000 	.word	0xfffe0000

023fc9c0 <asctime_r>:
 23fc9c0:	b510      	push	{r4, lr}
 23fc9c2:	460c      	mov	r4, r1
 23fc9c4:	6941      	ldr	r1, [r0, #20]
 23fc9c6:	b086      	sub	sp, #24
 23fc9c8:	6903      	ldr	r3, [r0, #16]
 23fc9ca:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23fc9ce:	6982      	ldr	r2, [r0, #24]
 23fc9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fc9d4:	9104      	str	r1, [sp, #16]
 23fc9d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23fc9da:	6801      	ldr	r1, [r0, #0]
 23fc9dc:	9103      	str	r1, [sp, #12]
 23fc9de:	6841      	ldr	r1, [r0, #4]
 23fc9e0:	9102      	str	r1, [sp, #8]
 23fc9e2:	6881      	ldr	r1, [r0, #8]
 23fc9e4:	9101      	str	r1, [sp, #4]
 23fc9e6:	68c1      	ldr	r1, [r0, #12]
 23fc9e8:	4620      	mov	r0, r4
 23fc9ea:	9100      	str	r1, [sp, #0]
 23fc9ec:	4904      	ldr	r1, [pc, #16]	; (23fca00 <asctime_r+0x40>)
 23fc9ee:	440b      	add	r3, r1
 23fc9f0:	4904      	ldr	r1, [pc, #16]	; (23fca04 <asctime_r+0x44>)
 23fc9f2:	440a      	add	r2, r1
 23fc9f4:	4904      	ldr	r1, [pc, #16]	; (23fca08 <asctime_r+0x48>)
 23fc9f6:	f7fb f873 	bl	23f7ae0 <siprintf>
 23fc9fa:	4620      	mov	r0, r4
 23fc9fc:	b006      	add	sp, #24
 23fc9fe:	bd10      	pop	{r4, pc}
 23fca00:	023ffdcd 	.word	0x023ffdcd
 23fca04:	023ffdb8 	.word	0x023ffdb8
 23fca08:	023ffd98 	.word	0x023ffd98

023fca0c <atexit>:
 23fca0c:	2300      	movs	r3, #0
 23fca0e:	4601      	mov	r1, r0
 23fca10:	461a      	mov	r2, r3
 23fca12:	4618      	mov	r0, r3
 23fca14:	f7e8 bc18 	b.w	23e5248 <__register_exitproc>

023fca18 <atoi>:
 23fca18:	220a      	movs	r2, #10
 23fca1a:	2100      	movs	r1, #0
 23fca1c:	f000 b9b2 	b.w	23fcd84 <strtol>

023fca20 <gmtime>:
 23fca20:	b538      	push	{r3, r4, r5, lr}
 23fca22:	4b0b      	ldr	r3, [pc, #44]	; (23fca50 <gmtime+0x30>)
 23fca24:	4604      	mov	r4, r0
 23fca26:	681d      	ldr	r5, [r3, #0]
 23fca28:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23fca2a:	b953      	cbnz	r3, 23fca42 <gmtime+0x22>
 23fca2c:	2024      	movs	r0, #36	; 0x24
 23fca2e:	f7fb f81f 	bl	23f7a70 <malloc>
 23fca32:	4602      	mov	r2, r0
 23fca34:	63e8      	str	r0, [r5, #60]	; 0x3c
 23fca36:	b920      	cbnz	r0, 23fca42 <gmtime+0x22>
 23fca38:	4b06      	ldr	r3, [pc, #24]	; (23fca54 <gmtime+0x34>)
 23fca3a:	2139      	movs	r1, #57	; 0x39
 23fca3c:	4806      	ldr	r0, [pc, #24]	; (23fca58 <gmtime+0x38>)
 23fca3e:	f7fb f8b1 	bl	23f7ba4 <__assert_func>
 23fca42:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 23fca44:	4620      	mov	r0, r4
 23fca46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fca4a:	f7fb b8e3 	b.w	23f7c14 <gmtime_r>
 23fca4e:	bf00      	nop
 23fca50:	1006a1d0 	.word	0x1006a1d0
 23fca54:	023ffdf1 	.word	0x023ffdf1
 23fca58:	023ffe08 	.word	0x023ffe08

023fca5c <isprint>:
 23fca5c:	4b02      	ldr	r3, [pc, #8]	; (23fca68 <isprint+0xc>)
 23fca5e:	4418      	add	r0, r3
 23fca60:	7840      	ldrb	r0, [r0, #1]
 23fca62:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fca66:	4770      	bx	lr
 23fca68:	023ffeba 	.word	0x023ffeba

023fca6c <memcmp>:
 23fca6c:	3901      	subs	r1, #1
 23fca6e:	4402      	add	r2, r0
 23fca70:	b510      	push	{r4, lr}
 23fca72:	4290      	cmp	r0, r2
 23fca74:	d101      	bne.n	23fca7a <memcmp+0xe>
 23fca76:	2000      	movs	r0, #0
 23fca78:	e005      	b.n	23fca86 <memcmp+0x1a>
 23fca7a:	7803      	ldrb	r3, [r0, #0]
 23fca7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fca80:	42a3      	cmp	r3, r4
 23fca82:	d001      	beq.n	23fca88 <memcmp+0x1c>
 23fca84:	1b18      	subs	r0, r3, r4
 23fca86:	bd10      	pop	{r4, pc}
 23fca88:	3001      	adds	r0, #1
 23fca8a:	e7f2      	b.n	23fca72 <memcmp+0x6>

023fca8c <memcpy>:
 23fca8c:	440a      	add	r2, r1
 23fca8e:	1e43      	subs	r3, r0, #1
 23fca90:	4291      	cmp	r1, r2
 23fca92:	d100      	bne.n	23fca96 <memcpy+0xa>
 23fca94:	4770      	bx	lr
 23fca96:	b510      	push	{r4, lr}
 23fca98:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fca9c:	4291      	cmp	r1, r2
 23fca9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fcaa2:	d1f9      	bne.n	23fca98 <memcpy+0xc>
 23fcaa4:	bd10      	pop	{r4, pc}

023fcaa6 <memset>:
 23fcaa6:	4402      	add	r2, r0
 23fcaa8:	4603      	mov	r3, r0
 23fcaaa:	4293      	cmp	r3, r2
 23fcaac:	d100      	bne.n	23fcab0 <memset+0xa>
 23fcaae:	4770      	bx	lr
 23fcab0:	f803 1b01 	strb.w	r1, [r3], #1
 23fcab4:	e7f9      	b.n	23fcaaa <memset+0x4>
	...

023fcab8 <srand>:
 23fcab8:	b538      	push	{r3, r4, r5, lr}
 23fcaba:	4b10      	ldr	r3, [pc, #64]	; (23fcafc <srand+0x44>)
 23fcabc:	4604      	mov	r4, r0
 23fcabe:	681d      	ldr	r5, [r3, #0]
 23fcac0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fcac2:	b9b3      	cbnz	r3, 23fcaf2 <srand+0x3a>
 23fcac4:	2018      	movs	r0, #24
 23fcac6:	f7fa ffd3 	bl	23f7a70 <malloc>
 23fcaca:	4602      	mov	r2, r0
 23fcacc:	63a8      	str	r0, [r5, #56]	; 0x38
 23fcace:	b920      	cbnz	r0, 23fcada <srand+0x22>
 23fcad0:	4b0b      	ldr	r3, [pc, #44]	; (23fcb00 <srand+0x48>)
 23fcad2:	2142      	movs	r1, #66	; 0x42
 23fcad4:	480b      	ldr	r0, [pc, #44]	; (23fcb04 <srand+0x4c>)
 23fcad6:	f7fb f865 	bl	23f7ba4 <__assert_func>
 23fcada:	490b      	ldr	r1, [pc, #44]	; (23fcb08 <srand+0x50>)
 23fcadc:	4b0b      	ldr	r3, [pc, #44]	; (23fcb0c <srand+0x54>)
 23fcade:	e9c0 1300 	strd	r1, r3, [r0]
 23fcae2:	4b0b      	ldr	r3, [pc, #44]	; (23fcb10 <srand+0x58>)
 23fcae4:	2100      	movs	r1, #0
 23fcae6:	6083      	str	r3, [r0, #8]
 23fcae8:	230b      	movs	r3, #11
 23fcaea:	8183      	strh	r3, [r0, #12]
 23fcaec:	2001      	movs	r0, #1
 23fcaee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fcaf2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fcaf4:	2200      	movs	r2, #0
 23fcaf6:	611c      	str	r4, [r3, #16]
 23fcaf8:	615a      	str	r2, [r3, #20]
 23fcafa:	bd38      	pop	{r3, r4, r5, pc}
 23fcafc:	1006a1d0 	.word	0x1006a1d0
 23fcb00:	023ffdf1 	.word	0x023ffdf1
 23fcb04:	023ffe61 	.word	0x023ffe61
 23fcb08:	abcd330e 	.word	0xabcd330e
 23fcb0c:	e66d1234 	.word	0xe66d1234
 23fcb10:	0005deec 	.word	0x0005deec

023fcb14 <rand>:
 23fcb14:	4b16      	ldr	r3, [pc, #88]	; (23fcb70 <rand+0x5c>)
 23fcb16:	b510      	push	{r4, lr}
 23fcb18:	681c      	ldr	r4, [r3, #0]
 23fcb1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fcb1c:	b9b3      	cbnz	r3, 23fcb4c <rand+0x38>
 23fcb1e:	2018      	movs	r0, #24
 23fcb20:	f7fa ffa6 	bl	23f7a70 <malloc>
 23fcb24:	63a0      	str	r0, [r4, #56]	; 0x38
 23fcb26:	b928      	cbnz	r0, 23fcb34 <rand+0x20>
 23fcb28:	4602      	mov	r2, r0
 23fcb2a:	4b12      	ldr	r3, [pc, #72]	; (23fcb74 <rand+0x60>)
 23fcb2c:	214e      	movs	r1, #78	; 0x4e
 23fcb2e:	4812      	ldr	r0, [pc, #72]	; (23fcb78 <rand+0x64>)
 23fcb30:	f7fb f838 	bl	23f7ba4 <__assert_func>
 23fcb34:	4a11      	ldr	r2, [pc, #68]	; (23fcb7c <rand+0x68>)
 23fcb36:	4b12      	ldr	r3, [pc, #72]	; (23fcb80 <rand+0x6c>)
 23fcb38:	e9c0 2300 	strd	r2, r3, [r0]
 23fcb3c:	4b11      	ldr	r3, [pc, #68]	; (23fcb84 <rand+0x70>)
 23fcb3e:	2201      	movs	r2, #1
 23fcb40:	6083      	str	r3, [r0, #8]
 23fcb42:	230b      	movs	r3, #11
 23fcb44:	8183      	strh	r3, [r0, #12]
 23fcb46:	2300      	movs	r3, #0
 23fcb48:	e9c0 2304 	strd	r2, r3, [r0, #16]
 23fcb4c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fcb4e:	4a0e      	ldr	r2, [pc, #56]	; (23fcb88 <rand+0x74>)
 23fcb50:	6920      	ldr	r0, [r4, #16]
 23fcb52:	6963      	ldr	r3, [r4, #20]
 23fcb54:	490d      	ldr	r1, [pc, #52]	; (23fcb8c <rand+0x78>)
 23fcb56:	4342      	muls	r2, r0
 23fcb58:	fb01 2203 	mla	r2, r1, r3, r2
 23fcb5c:	fba0 0101 	umull	r0, r1, r0, r1
 23fcb60:	1c43      	adds	r3, r0, #1
 23fcb62:	eb42 0001 	adc.w	r0, r2, r1
 23fcb66:	e9c4 3004 	strd	r3, r0, [r4, #16]
 23fcb6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fcb6e:	bd10      	pop	{r4, pc}
 23fcb70:	1006a1d0 	.word	0x1006a1d0
 23fcb74:	023ffdf1 	.word	0x023ffdf1
 23fcb78:	023ffe61 	.word	0x023ffe61
 23fcb7c:	abcd330e 	.word	0xabcd330e
 23fcb80:	e66d1234 	.word	0xe66d1234
 23fcb84:	0005deec 	.word	0x0005deec
 23fcb88:	5851f42d 	.word	0x5851f42d
 23fcb8c:	4c957f2d 	.word	0x4c957f2d

023fcb90 <strcpy>:
 23fcb90:	4603      	mov	r3, r0
 23fcb92:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fcb96:	f803 2b01 	strb.w	r2, [r3], #1
 23fcb9a:	2a00      	cmp	r2, #0
 23fcb9c:	d1f9      	bne.n	23fcb92 <strcpy+0x2>
 23fcb9e:	4770      	bx	lr

023fcba0 <strdup>:
 23fcba0:	4b02      	ldr	r3, [pc, #8]	; (23fcbac <strdup+0xc>)
 23fcba2:	4601      	mov	r1, r0
 23fcba4:	6818      	ldr	r0, [r3, #0]
 23fcba6:	f000 b803 	b.w	23fcbb0 <_strdup_r>
 23fcbaa:	bf00      	nop
 23fcbac:	1006a1d0 	.word	0x1006a1d0

023fcbb0 <_strdup_r>:
 23fcbb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcbb2:	4604      	mov	r4, r0
 23fcbb4:	4608      	mov	r0, r1
 23fcbb6:	460d      	mov	r5, r1
 23fcbb8:	f7e8 fb02 	bl	23e51c0 <strlen>
 23fcbbc:	1c42      	adds	r2, r0, #1
 23fcbbe:	4620      	mov	r0, r4
 23fcbc0:	4611      	mov	r1, r2
 23fcbc2:	9201      	str	r2, [sp, #4]
 23fcbc4:	f7fa ffd2 	bl	23f7b6c <_malloc_r>
 23fcbc8:	4604      	mov	r4, r0
 23fcbca:	b118      	cbz	r0, 23fcbd4 <_strdup_r+0x24>
 23fcbcc:	9a01      	ldr	r2, [sp, #4]
 23fcbce:	4629      	mov	r1, r5
 23fcbd0:	f7ff ff5c 	bl	23fca8c <memcpy>
 23fcbd4:	4620      	mov	r0, r4
 23fcbd6:	b003      	add	sp, #12
 23fcbd8:	bd30      	pop	{r4, r5, pc}

023fcbda <strncmp>:
 23fcbda:	b510      	push	{r4, lr}
 23fcbdc:	b17a      	cbz	r2, 23fcbfe <strncmp+0x24>
 23fcbde:	4603      	mov	r3, r0
 23fcbe0:	3901      	subs	r1, #1
 23fcbe2:	1884      	adds	r4, r0, r2
 23fcbe4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fcbe8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fcbec:	4290      	cmp	r0, r2
 23fcbee:	d101      	bne.n	23fcbf4 <strncmp+0x1a>
 23fcbf0:	42a3      	cmp	r3, r4
 23fcbf2:	d101      	bne.n	23fcbf8 <strncmp+0x1e>
 23fcbf4:	1a80      	subs	r0, r0, r2
 23fcbf6:	bd10      	pop	{r4, pc}
 23fcbf8:	2800      	cmp	r0, #0
 23fcbfa:	d1f3      	bne.n	23fcbe4 <strncmp+0xa>
 23fcbfc:	e7fa      	b.n	23fcbf4 <strncmp+0x1a>
 23fcbfe:	4610      	mov	r0, r2
 23fcc00:	e7f9      	b.n	23fcbf6 <strncmp+0x1c>

023fcc02 <strncpy>:
 23fcc02:	3901      	subs	r1, #1
 23fcc04:	4603      	mov	r3, r0
 23fcc06:	b510      	push	{r4, lr}
 23fcc08:	b132      	cbz	r2, 23fcc18 <strncpy+0x16>
 23fcc0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fcc0e:	3a01      	subs	r2, #1
 23fcc10:	f803 4b01 	strb.w	r4, [r3], #1
 23fcc14:	2c00      	cmp	r4, #0
 23fcc16:	d1f7      	bne.n	23fcc08 <strncpy+0x6>
 23fcc18:	441a      	add	r2, r3
 23fcc1a:	2100      	movs	r1, #0
 23fcc1c:	4293      	cmp	r3, r2
 23fcc1e:	d100      	bne.n	23fcc22 <strncpy+0x20>
 23fcc20:	bd10      	pop	{r4, pc}
 23fcc22:	f803 1b01 	strb.w	r1, [r3], #1
 23fcc26:	e7f9      	b.n	23fcc1c <strncpy+0x1a>

023fcc28 <__strtok_r>:
 23fcc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcc2a:	b908      	cbnz	r0, 23fcc30 <__strtok_r+0x8>
 23fcc2c:	6810      	ldr	r0, [r2, #0]
 23fcc2e:	b188      	cbz	r0, 23fcc54 <__strtok_r+0x2c>
 23fcc30:	4604      	mov	r4, r0
 23fcc32:	4620      	mov	r0, r4
 23fcc34:	460f      	mov	r7, r1
 23fcc36:	f814 5b01 	ldrb.w	r5, [r4], #1
 23fcc3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 23fcc3e:	b91e      	cbnz	r6, 23fcc48 <__strtok_r+0x20>
 23fcc40:	b965      	cbnz	r5, 23fcc5c <__strtok_r+0x34>
 23fcc42:	4628      	mov	r0, r5
 23fcc44:	6015      	str	r5, [r2, #0]
 23fcc46:	e005      	b.n	23fcc54 <__strtok_r+0x2c>
 23fcc48:	42b5      	cmp	r5, r6
 23fcc4a:	d1f6      	bne.n	23fcc3a <__strtok_r+0x12>
 23fcc4c:	2b00      	cmp	r3, #0
 23fcc4e:	d1f0      	bne.n	23fcc32 <__strtok_r+0xa>
 23fcc50:	6014      	str	r4, [r2, #0]
 23fcc52:	7003      	strb	r3, [r0, #0]
 23fcc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcc56:	461c      	mov	r4, r3
 23fcc58:	e00c      	b.n	23fcc74 <__strtok_r+0x4c>
 23fcc5a:	b915      	cbnz	r5, 23fcc62 <__strtok_r+0x3a>
 23fcc5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fcc60:	460e      	mov	r6, r1
 23fcc62:	f816 5b01 	ldrb.w	r5, [r6], #1
 23fcc66:	42ab      	cmp	r3, r5
 23fcc68:	d1f7      	bne.n	23fcc5a <__strtok_r+0x32>
 23fcc6a:	2b00      	cmp	r3, #0
 23fcc6c:	d0f3      	beq.n	23fcc56 <__strtok_r+0x2e>
 23fcc6e:	2300      	movs	r3, #0
 23fcc70:	f804 3c01 	strb.w	r3, [r4, #-1]
 23fcc74:	6014      	str	r4, [r2, #0]
 23fcc76:	e7ed      	b.n	23fcc54 <__strtok_r+0x2c>

023fcc78 <strtok_r>:
 23fcc78:	2301      	movs	r3, #1
 23fcc7a:	f7ff bfd5 	b.w	23fcc28 <__strtok_r>
	...

023fcc80 <_strtol_l.constprop.0>:
 23fcc80:	2b01      	cmp	r3, #1
 23fcc82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcc86:	d001      	beq.n	23fcc8c <_strtol_l.constprop.0+0xc>
 23fcc88:	2b24      	cmp	r3, #36	; 0x24
 23fcc8a:	d906      	bls.n	23fcc9a <_strtol_l.constprop.0+0x1a>
 23fcc8c:	f7fa ff7c 	bl	23f7b88 <__errno>
 23fcc90:	2316      	movs	r3, #22
 23fcc92:	6003      	str	r3, [r0, #0]
 23fcc94:	2000      	movs	r0, #0
 23fcc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fcc9a:	460d      	mov	r5, r1
 23fcc9c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fcd80 <_strtol_l.constprop.0+0x100>
 23fcca0:	462e      	mov	r6, r5
 23fcca2:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fcca6:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fccaa:	f017 0708 	ands.w	r7, r7, #8
 23fccae:	d1f7      	bne.n	23fcca0 <_strtol_l.constprop.0+0x20>
 23fccb0:	2c2d      	cmp	r4, #45	; 0x2d
 23fccb2:	d132      	bne.n	23fcd1a <_strtol_l.constprop.0+0x9a>
 23fccb4:	782c      	ldrb	r4, [r5, #0]
 23fccb6:	2701      	movs	r7, #1
 23fccb8:	1cb5      	adds	r5, r6, #2
 23fccba:	2b00      	cmp	r3, #0
 23fccbc:	d05b      	beq.n	23fcd76 <_strtol_l.constprop.0+0xf6>
 23fccbe:	2b10      	cmp	r3, #16
 23fccc0:	d109      	bne.n	23fccd6 <_strtol_l.constprop.0+0x56>
 23fccc2:	2c30      	cmp	r4, #48	; 0x30
 23fccc4:	d107      	bne.n	23fccd6 <_strtol_l.constprop.0+0x56>
 23fccc6:	782c      	ldrb	r4, [r5, #0]
 23fccc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fcccc:	2c58      	cmp	r4, #88	; 0x58
 23fccce:	d14d      	bne.n	23fcd6c <_strtol_l.constprop.0+0xec>
 23fccd0:	786c      	ldrb	r4, [r5, #1]
 23fccd2:	2310      	movs	r3, #16
 23fccd4:	3502      	adds	r5, #2
 23fccd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fccda:	f04f 0c00 	mov.w	ip, #0
 23fccde:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fcce2:	4666      	mov	r6, ip
 23fcce4:	fbb8 f9f3 	udiv	r9, r8, r3
 23fcce8:	fb03 8a19 	mls	sl, r3, r9, r8
 23fccec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fccf0:	f1be 0f09 	cmp.w	lr, #9
 23fccf4:	d816      	bhi.n	23fcd24 <_strtol_l.constprop.0+0xa4>
 23fccf6:	4674      	mov	r4, lr
 23fccf8:	42a3      	cmp	r3, r4
 23fccfa:	dd24      	ble.n	23fcd46 <_strtol_l.constprop.0+0xc6>
 23fccfc:	f1bc 0f00 	cmp.w	ip, #0
 23fcd00:	db1e      	blt.n	23fcd40 <_strtol_l.constprop.0+0xc0>
 23fcd02:	45b1      	cmp	r9, r6
 23fcd04:	d31c      	bcc.n	23fcd40 <_strtol_l.constprop.0+0xc0>
 23fcd06:	d101      	bne.n	23fcd0c <_strtol_l.constprop.0+0x8c>
 23fcd08:	45a2      	cmp	sl, r4
 23fcd0a:	db19      	blt.n	23fcd40 <_strtol_l.constprop.0+0xc0>
 23fcd0c:	fb06 4603 	mla	r6, r6, r3, r4
 23fcd10:	f04f 0c01 	mov.w	ip, #1
 23fcd14:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fcd18:	e7e8      	b.n	23fccec <_strtol_l.constprop.0+0x6c>
 23fcd1a:	2c2b      	cmp	r4, #43	; 0x2b
 23fcd1c:	bf04      	itt	eq
 23fcd1e:	782c      	ldrbeq	r4, [r5, #0]
 23fcd20:	1cb5      	addeq	r5, r6, #2
 23fcd22:	e7ca      	b.n	23fccba <_strtol_l.constprop.0+0x3a>
 23fcd24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fcd28:	f1be 0f19 	cmp.w	lr, #25
 23fcd2c:	d801      	bhi.n	23fcd32 <_strtol_l.constprop.0+0xb2>
 23fcd2e:	3c37      	subs	r4, #55	; 0x37
 23fcd30:	e7e2      	b.n	23fccf8 <_strtol_l.constprop.0+0x78>
 23fcd32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fcd36:	f1be 0f19 	cmp.w	lr, #25
 23fcd3a:	d804      	bhi.n	23fcd46 <_strtol_l.constprop.0+0xc6>
 23fcd3c:	3c57      	subs	r4, #87	; 0x57
 23fcd3e:	e7db      	b.n	23fccf8 <_strtol_l.constprop.0+0x78>
 23fcd40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fcd44:	e7e6      	b.n	23fcd14 <_strtol_l.constprop.0+0x94>
 23fcd46:	f1bc 0f00 	cmp.w	ip, #0
 23fcd4a:	da05      	bge.n	23fcd58 <_strtol_l.constprop.0+0xd8>
 23fcd4c:	2322      	movs	r3, #34	; 0x22
 23fcd4e:	4646      	mov	r6, r8
 23fcd50:	6003      	str	r3, [r0, #0]
 23fcd52:	b942      	cbnz	r2, 23fcd66 <_strtol_l.constprop.0+0xe6>
 23fcd54:	4630      	mov	r0, r6
 23fcd56:	e79e      	b.n	23fcc96 <_strtol_l.constprop.0+0x16>
 23fcd58:	b107      	cbz	r7, 23fcd5c <_strtol_l.constprop.0+0xdc>
 23fcd5a:	4276      	negs	r6, r6
 23fcd5c:	2a00      	cmp	r2, #0
 23fcd5e:	d0f9      	beq.n	23fcd54 <_strtol_l.constprop.0+0xd4>
 23fcd60:	f1bc 0f00 	cmp.w	ip, #0
 23fcd64:	d000      	beq.n	23fcd68 <_strtol_l.constprop.0+0xe8>
 23fcd66:	1e69      	subs	r1, r5, #1
 23fcd68:	6011      	str	r1, [r2, #0]
 23fcd6a:	e7f3      	b.n	23fcd54 <_strtol_l.constprop.0+0xd4>
 23fcd6c:	2430      	movs	r4, #48	; 0x30
 23fcd6e:	2b00      	cmp	r3, #0
 23fcd70:	d1b1      	bne.n	23fccd6 <_strtol_l.constprop.0+0x56>
 23fcd72:	2308      	movs	r3, #8
 23fcd74:	e7af      	b.n	23fccd6 <_strtol_l.constprop.0+0x56>
 23fcd76:	2c30      	cmp	r4, #48	; 0x30
 23fcd78:	d0a5      	beq.n	23fccc6 <_strtol_l.constprop.0+0x46>
 23fcd7a:	230a      	movs	r3, #10
 23fcd7c:	e7ab      	b.n	23fccd6 <_strtol_l.constprop.0+0x56>
 23fcd7e:	bf00      	nop
 23fcd80:	023ffebb 	.word	0x023ffebb

023fcd84 <strtol>:
 23fcd84:	4613      	mov	r3, r2
 23fcd86:	460a      	mov	r2, r1
 23fcd88:	4601      	mov	r1, r0
 23fcd8a:	4802      	ldr	r0, [pc, #8]	; (23fcd94 <strtol+0x10>)
 23fcd8c:	6800      	ldr	r0, [r0, #0]
 23fcd8e:	f7ff bf77 	b.w	23fcc80 <_strtol_l.constprop.0>
 23fcd92:	bf00      	nop
 23fcd94:	1006a1d0 	.word	0x1006a1d0

023fcd98 <link_const_data_start>:
 23fcd98:	00001388 	.word	0x00001388
 23fcd9c:	00002710 	.word	0x00002710
 23fcda0:	00004e20 	.word	0x00004e20
 23fcda4:	00009c40 	.word	0x00009c40
 23fcda8:	00013880 	.word	0x00013880
 23fcdac:	00027100 	.word	0x00027100
 23fcdb0:	0004e200 	.word	0x0004e200
 23fcdb4:	0009c400 	.word	0x0009c400
 23fcdb8:	00138800 	.word	0x00138800
 23fcdbc:	00271000 	.word	0x00271000
 23fcdc0:	004e2000 	.word	0x004e2000
 23fcdc4:	009c4000 	.word	0x009c4000
 23fcdc8:	01388000 	.word	0x01388000
 23fcdcc:	02710000 	.word	0x02710000
 23fcdd0:	04e20000 	.word	0x04e20000
 23fcdd4:	09c40000 	.word	0x09c40000
 23fcdd8:	13880000 	.word	0x13880000
 23fcddc:	27100000 	.word	0x27100000
 23fcde0:	00000000 	.word	0x00000000
 23fcde4:	00000013 	.word	0x00000013
 23fcde8:	023fcf95 	.word	0x023fcf95
 23fcdec:	00000012 	.word	0x00000012
 23fcdf0:	023fcf98 	.word	0x023fcf98
 23fcdf4:	00000011 	.word	0x00000011
 23fcdf8:	023fcf9b 	.word	0x023fcf9b
 23fcdfc:	0000000e 	.word	0x0000000e
 23fce00:	023fcf9e 	.word	0x023fcf9e
 23fce04:	0000001d 	.word	0x0000001d
 23fce08:	023fcfa1 	.word	0x023fcfa1
 23fce0c:	00000000 	.word	0x00000000
 23fce10:	023fcfa4 	.word	0x023fcfa4
 23fce14:	00000001 	.word	0x00000001
 23fce18:	023fcfa7 	.word	0x023fcfa7
 23fce1c:	00000002 	.word	0x00000002
 23fce20:	023fcfaa 	.word	0x023fcfaa
 23fce24:	00000003 	.word	0x00000003
 23fce28:	023fcfad 	.word	0x023fcfad
 23fce2c:	00000004 	.word	0x00000004
 23fce30:	023fcfb0 	.word	0x023fcfb0
 23fce34:	00000005 	.word	0x00000005
 23fce38:	023fcfb3 	.word	0x023fcfb3
 23fce3c:	00000006 	.word	0x00000006
 23fce40:	023fcfb6 	.word	0x023fcfb6
 23fce44:	00000009 	.word	0x00000009
 23fce48:	023fcfb9 	.word	0x023fcfb9
 23fce4c:	0000000a 	.word	0x0000000a
 23fce50:	023fcfbc 	.word	0x023fcfbc
 23fce54:	0000000b 	.word	0x0000000b
 23fce58:	023fcfc0 	.word	0x023fcfc0
 23fce5c:	0000000c 	.word	0x0000000c
 23fce60:	023fcfc4 	.word	0x023fcfc4
 23fce64:	0000000d 	.word	0x0000000d
 23fce68:	023fcfc8 	.word	0x023fcfc8
 23fce6c:	00000014 	.word	0x00000014
 23fce70:	023fcfcc 	.word	0x023fcfcc
 23fce74:	00000015 	.word	0x00000015
 23fce78:	023fcfd0 	.word	0x023fcfd0
 23fce7c:	00000016 	.word	0x00000016
 23fce80:	023fcfd4 	.word	0x023fcfd4
 23fce84:	00000018 	.word	0x00000018
 23fce88:	023fcfd8 	.word	0x023fcfd8
 23fce8c:	00000019 	.word	0x00000019
 23fce90:	023fcfdc 	.word	0x023fcfdc
 23fce94:	0000001a 	.word	0x0000001a
 23fce98:	023fcfe0 	.word	0x023fcfe0
 23fce9c:	0000001b 	.word	0x0000001b
 23fcea0:	023fcfe4 	.word	0x023fcfe4
 23fcea4:	00000000 	.word	0x00000000
 23fcea8:	023fcfe8 	.word	0x023fcfe8
 23fceac:	0000000a 	.word	0x0000000a
 23fceb0:	023fcff7 	.word	0x023fcff7
 23fceb4:	00000014 	.word	0x00000014
 23fceb8:	023fd00c 	.word	0x023fd00c
 23fcebc:	0000001e 	.word	0x0000001e
 23fcec0:	023fd026 	.word	0x023fd026
 23fcec4:	00000028 	.word	0x00000028
 23fcec8:	023fd041 	.word	0x023fd041
 23fcecc:	00000032 	.word	0x00000032
 23fced0:	023fd052 	.word	0x023fd052
 23fced4:	0000003c 	.word	0x0000003c
 23fced8:	023fd061 	.word	0x023fd061
 23fcedc:	00000046 	.word	0x00000046
 23fcee0:	023fd079 	.word	0x023fd079
 23fcee4:	00000050 	.word	0x00000050
 23fcee8:	023fd094 	.word	0x023fd094
 23fceec:	0000005a 	.word	0x0000005a
 23fcef0:	023fd0b7 	.word	0x023fd0b7
 23fcef4:	00000064 	.word	0x00000064
 23fcef8:	023fd0cf 	.word	0x023fd0cf
 23fcefc:	0000006e 	.word	0x0000006e
 23fcf00:	023fd0e7 	.word	0x023fd0e7
 23fcf04:	00000078 	.word	0x00000078
 23fcf08:	023fd0fb 	.word	0x023fd0fb
 23fcf0c:	00000082 	.word	0x00000082
 23fcf10:	023fd10e 	.word	0x023fd10e
 23fcf14:	0000008c 	.word	0x0000008c
 23fcf18:	023fd126 	.word	0x023fd126
 23fcf1c:	023fd141 	.word	0x023fd141
 23fcf20:	023fd146 	.word	0x023fd146
 23fcf24:	023fd14a 	.word	0x023fd14a
 23fcf28:	023fd153 	.word	0x023fd153
 23fcf2c:	023fd15f 	.word	0x023fd15f
 23fcf30:	023fd167 	.word	0x023fd167
 23fcf34:	023fd141 	.word	0x023fd141
 23fcf38:	023fd16f 	.word	0x023fd16f
 23fcf3c:	023fd170 	.word	0x023fd170
 23fcf40:	023fd179 	.word	0x023fd179
 23fcf44:	023fd181 	.word	0x023fd181
 23fcf48:	023fd18d 	.word	0x023fd18d
 23fcf4c:	023fd193 	.word	0x023fd193
 23fcf50:	04030201 	.word	0x04030201
 23fcf54:	08070605 	.word	0x08070605
 23fcf58:	0c0b0a09 	.word	0x0c0b0a09
 23fcf5c:	100f0e0d 	.word	0x100f0e0d
 23fcf60:	00000000 	.word	0x00000000
 23fcf64:	01000000 	.word	0x01000000
 23fcf68:	0100080c 	.word	0x0100080c
 23fcf6c:	00000302 	.word	0x00000302

023fcf70 <dynalib_user>:
 23fcf70:	023e51d1 023e51f9 023e51fd 00000000     .Q>..Q>..Q>.....
 23fcf80:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fcf90:	6c617574 00304100 41003141 35410032     tual.A0.A1.A2.A5
 23fcfa0:	00364100 44003044 32440031 00334400     .A6.D0.D1.D2.D3.
 23fcfb0:	44003444 36440035 00394400 00303144     D4.D5.D6.D9.D10.
 23fcfc0:	00313144 00323144 00333144 00303244     D11.D12.D13.D20.
 23fcfd0:	00313244 00323244 00343244 00353244     D21.D22.D24.D25.
 23fcfe0:	00363244 00373244 656e6f4e 55202f20     D26.D27.None / U
 23fcff0:	6f6e6b6e 55006e77 6f6e6b6e 52206e77     nknown.Unknown R
 23fd000:	74657365 61655220 006e6f73 65736552     eset Reason.Rese
 23fd010:	69502074 6228206e 6f747475 726f206e     t Pin (button or
 23fd020:	6e697020 6f4c0029 6f502077 20726577      pin).Low Power 
 23fd030:	616e614d 656d6567 5220746e 74657365     Management Reset
 23fd040:	776f5000 44207265 206e776f 65736552     .Power Down Rese
 23fd050:	72420074 6f6e776f 52207475 74657365     t.Brownout Reset
 23fd060:	72614800 72617764 61572065 64686374     .Hardware Watchd
 23fd070:	5220676f 74657365 63755300 73736563     og Reset.Success
 23fd080:	206c7566 6d726946 65726177 64705520     ful Firmware Upd
 23fd090:	00657461 6d726946 65726177 64705520     ate.Firmware Upd
 23fd0a0:	20657461 6f727245 64282072 65727065     ate Error (depre
 23fd0b0:	65746163 46002964 776d7269 20657261     cated).Firmware 
 23fd0c0:	61647055 54206574 6f656d69 46007475     Update Timeout.F
 23fd0d0:	6f746361 52207972 74657365 71655220     actory Reset Req
 23fd0e0:	74736575 53006465 20656661 65646f4d     uested.Safe Mode
 23fd0f0:	71655220 74736575 44006465 4d205546      Requested.DFU M
 23fd100:	2065646f 75716552 65747365 79530064     ode Requested.Sy
 23fd110:	6d657473 6e615020 28206369 20534f53     stem Panic (SOS 
 23fd120:	65646f43 73550029 52207265 74657365     Code).User Reset
 23fd130:	6f732820 61777466 63206572 296c6c61      (software call)
 23fd140:	4b4e5500 4956004e 5355004e 4f485f42     .UNKN.VIN.USB_HO
 23fd150:	55005453 415f4253 54504144 55005245     ST.USB_ADAPTER.U
 23fd160:	4f5f4253 42004754 45545441 21005952     SB_OTG.BATTERY.!
 23fd170:	52414843 474e4947 41484300 44454752     CHARGING.CHARGED
 23fd180:	53494400 52414843 474e4947 55414600     .DISCHARGING.FAU
 23fd190:	4d00544c 49535349 4200474e 3832454d     LT.MISSING.BME28
 23fd1a0:	4d420030 30393350 250a0d00 5d0d5e5b     0.BMP390...%[^.]
 23fd1b0:	64000a0d 75616665 0020746c 0042534d     ...default .MSB.
 23fd1c0:	0042534c 4950533c 74746553 73676e69     LSB.<SPISettings
 23fd1d0:	66656420 746c7561 533c003e 65534950      default>.<SPISe
 23fd1e0:	6e697474 25207367 20752573 4d207325     ttings %s%u %s M
 23fd1f0:	2545444f 7c003e75 2d002f00 4f005c00     ODE%u>.|./.-.\.O
 23fd200:	3344454c 4b4f3a32 454c4f00 3a343644     LED32:OK.OLED64:
 23fd210:	25004b4f 30252d64 252d6432 54643230     OK.%d-%02d-%02dT
 23fd220:	64323025 3230253a 30253a64 30006432     %02d:%02d:%02d.0
 23fd230:	2d303030 302d3030 30305430 3a30303a     000-00-00T00:00:
 23fd240:	52003030 493a4354 4e204332 4f46544f     00.RTC:I2C NOTFO
 23fd250:	00444e55 00527325 3a435452 494c4156     UND.%sR.RTC:VALI
 23fd260:	54520044 454e3a43 20534445 204d5347     D.RTC:NEEDS GSM 
 23fd270:	454d4954 43545200 5445533a 43545200     TIME.RTC:SET.RTC
 23fd280:	5453313a 4e595320 54520043 48323a43     :1ST SYNC.RTC:2H
 23fd290:	59532052 4100434e 50205345 2059454b     R SYNC.AES PKEY 
 23fd2a0:	54455321 53454100 454b5020 31212059     !SET.AES PKEY !1
 23fd2b0:	79422036 00736574 20534541 5649594d     6 Bytes.AES MYIV
 23fd2c0:	45532120 4f4c0054 50204152 45205257      !SET.LORA PWR E
 23fd2d0:	4c005252 2041524f 51455246 52524520     RR.LORA FREQ ERR
 23fd2e0:	524f4c00 44412041 45205244 41005252     .LORA ADDR ERR.A
 23fd2f0:	4b5f5345 255b5945 41005d73 4d5f5345     ES_KEY[%s].AES_M
 23fd300:	5b564959 005d7525 41524f4c 56464320     YIV[%u].LORA CFV
 23fd310:	004b4f20 5f746567 63736f42 68435f68      OK.get_Bosch_Ch
 23fd320:	44497069 20002928 43324920 3230253a     ipID().  I2C:%02
 23fd330:	65522058 30253a67 20005832 52524520     X Reg:%02X.  ERR
 23fd340:	3a54455f 20006425 49484320 3a444950     _ET:%d.  CHIPID:
 23fd350:	58323025 504d4220 00303832 48432020     %02X BMP280.  CH
 23fd360:	44495049 3230253a 4d422058 38383350     IPID:%02X BMP388
 23fd370:	43202000 49504948 30253a44 42205832     .  CHIPID:%02X B
 23fd380:	332f454d 20003039 49484320 3a444950     ME/390.  CHIPID:
 23fd390:	58323025 566e4920 64696c61 45202000     %02X InValid.  E
 23fd3a0:	525f5252 00303a46 3a584d42 54494e49     RR_RF:0.BMX:INIT
 23fd3b0:	504d4200 52452031 4d420052 4f203150     .BMP1 ERR.BMP1 O
 23fd3c0:	4d42004b 45203158 42005252 3933504d     K.BMX1 ERR.BMP39
 23fd3d0:	20315f30 42004b4f 3832454d 20315f30     0_1 OK.BME280_1 
 23fd3e0:	42004b4f 2031334d 00525245 31334d42     OK.BM31 ERR.BM31
 23fd3f0:	004b4f20 5f584d42 464e2031 504d4200      OK.BMX_1 NF.BMP
 23fd400:	52452032 4d420052 4f203250 4d42004b     2 ERR.BMP2 OK.BM
 23fd410:	45203258 42005252 3933504d 20325f30     X2 ERR.BMP390_2 
 23fd420:	42004b4f 3832454d 20325f30 42004b4f     OK.BME280_2 OK.B
 23fd430:	2032334d 00525245 32334d42 004b4f20     M32 ERR.BM32 OK.
 23fd440:	5f584d42 464e2032 55544800 3a443132     BMX_2 NF.HTU21D:
 23fd450:	54494e49 55544800 00464e20 20555448     INIT.HTU NF.HTU 
 23fd460:	4d004b4f 38395043 493a3830 0054494e     OK.MCP9808:INIT.
 23fd470:	3150434d 00464e20 3150434d 004b4f20     MCP1 NF.MCP1 OK.
 23fd480:	3250434d 00464e20 3250434d 004b4f20     MCP2 NF.MCP2 OK.
 23fd490:	3350434d 00464e20 3350434d 004b4f20     MCP3 NF.MCP3 OK.
 23fd4a0:	3450434d 00464e20 3450434d 004b4f20     MCP4 NF.MCP4 OK.
 23fd4b0:	3a544853 54494e49 54485300 464e2031     SHT:INIT.SHT1 NF
 23fd4c0:	54485300 4b4f2031 54485300 464e2032     .SHT1 OK.SHT2 NF
 23fd4d0:	54485300 4b4f2032 48494800 4e493a38     .SHT2 OK.HIH8:IN
 23fd4e0:	48005449 20384849 48004b4f 20384849     IT.HIH8 OK.HIH8 
 23fd4f0:	5700464e 493a5442 0054494e 3a544257     NF.WBT:INIT.WBT:
 23fd500:	57004b4f 4e3a5442 49480046 494e493a     OK.WBT:NF.HI:INI
 23fd510:	49480054 004b4f3a 4e3a4948 42570046     T.HI:OK.HI:NF.WB
 23fd520:	493a5447 0054494e 54474257 204b4f3a     GT:INIT.WBGT:OK 
 23fd530:	6c472f77 0065626f 54474257 204b4f3a     w/Globe.WBGT:OK 
 23fd540:	472f6f77 65626f6c 47425700 464e3a54     wo/Globe.WBGT:NF
 23fd550:	31495300 3a353431 54494e49 3a495300     .SI1145:INIT.SI:
 23fd560:	53004b4f 49563a49 2e64255b 64323025     OK.SI:VI[%d.%02d
 23fd570:	4953005d 5b52493a 252e6425 5d643230     ].SI:IR[%d.%02d]
 23fd580:	3a495300 255b5655 30252e64 005d6432     .SI:UV[%d.%02d].
 23fd590:	3a584c56 54494e49 584c5600 004b4f20     VLX:INIT.VLX OK.
 23fd5a0:	20584c56 4200464e 493a584c 0054494e     VLX NF.BLX:INIT.
 23fd5b0:	3a584c42 42004b4f 4e3a584c 4d500046     BLX:OK.BLX:NF.PM
 23fd5c0:	51413532 4e493a49 50005449 464e3a4d     25AQI:INIT.PM:NF
 23fd5d0:	3a4d5000 69676542 464e206e 3a4d5000     .PM:Begin NF.PM:
 23fd5e0:	50004b4f 464f204d 4e494c46 44480045     OK.PM OFFLINE.HD
 23fd5f0:	4e493a43 48005449 20314344 4800464e     C:INIT.HDC1 NF.H
 23fd600:	20314344 48004b4f 20324344 4800464e     DC1 OK.HDC2 NF.H
 23fd610:	20324344 4c004b4f 493a5350 0054494e     DC2 OK.LPS:INIT.
 23fd620:	3153504c 00464e20 3153504c 004b4f20     LPS1 NF.LPS1 OK.
 23fd630:	3253504c 00464e20 3253504c 004b4f20     LPS2 NF.LPS2 OK.
 23fd640:	3a574c54 54494e49 574c5400 00464e20     TLW:INIT.TLW NF.
 23fd650:	20574c54 54004b4f 493a4d53 0054494e     TLW OK.TSM:INIT.
 23fd660:	204d5354 5400464e 4f204d53 4d54004b     TSM NF.TSM OK.TM
 23fd670:	493a4d53 0054494e 4d534d54 00464e20     SM:INIT.TMSM NF.
 23fd680:	4d534d54 004b4f20 53544d50 494e493a     TMSM OK.PMTS:INI
 23fd690:	4d500054 4e205354 4d500046 4f205354     T.PMTS NF.PMTS O
 23fd6a0:	3d54204b 252e6425 00643230 36355341     K T=%d.%02d.AS56
 23fd6b0:	493a3030 0054494e 4e3a4457 44570046     00:INIT.WD:NF.WD
 23fd6c0:	004b4f3a 493a3441 0054494e 443d3441     :OK.A4:INIT.A4=D
 23fd6d0:	00545349 54534944 004d353d 54534944     IST.DIST=5M.DIST
 23fd6e0:	4d30313d 3d344100 4e494152 3d344100     =10M.A4=RAIN.A4=
 23fd6f0:	00574152 4e3d3441 004c4c55 4e3d3441     RAW.A4=NULL.A4=N
 23fd700:	2c4c4c55 4e204453 35410046 494e493a     ULL,SD NF.A5:INI
 23fd710:	35410054 5741523d 3d354100 4c4c554e     T.A5=RAW.A5=NULL
 23fd720:	3d354100 4c4c554e 2044532c 5700464e     .A5=NULL,SD NF.W
 23fd730:	664f2044 6e696c66 004c5f65 4f204457     D Offline_L.WD O
 23fd740:	696c6666 485f656e 20445700 696c6e4f     ffline_H.WD Onli
 23fd750:	4200656e 2031504d 494c4e4f 4200454e     ne.BMP1 ONLINE.B
 23fd760:	2031454d 494c4e4f 4200454e 3933504d     ME1 ONLINE.BMP39
 23fd770:	20315f30 494c4e4f 4200454e 2031334d     0_1 ONLINE.BM31 
 23fd780:	494c4e4f 4200454e 2031584d 4c46464f     ONLINE.BMX1 OFFL
 23fd790:	00454e49 32504d42 4c4e4f20 00454e49     INE.BMP2 ONLINE.
 23fd7a0:	32454d42 4c4e4f20 00454e49 32334d42     BME2 ONLINE.BM32
 23fd7b0:	4c4e4f20 00454e49 32584d42 46464f20      ONLINE.BMX2 OFF
 23fd7c0:	454e494c 55544800 4c4e4f20 00454e49     LINE.HTU ONLINE.
 23fd7d0:	20555448 4c46464f 00454e49 4f204953     HTU OFFLINE.SI O
 23fd7e0:	4e494c4e 49530045 46464f20 454e494c     NLINE.SI OFFLINE
 23fd7f0:	20445700 494c4e4f 5700454e 464f2044     .WD ONLINE.WD OF
 23fd800:	4e494c46 4c560045 4e4f2058 454e494c     FLINE.VLX ONLINE
 23fd810:	584c5600 46464f20 454e494c 204d5000     .VLX OFFLINE.PM 
 23fd820:	494c4e4f 4500454e 4f525045 4c43204d     ONLINE.EEPROM CL
 23fd830:	20524145 4f525245 3e540052 52202c36     EAR ERROR.T>6, R
 23fd840:	20363e54 4b4f202d 363e5400 5452202c     T>6 - OK.T>6, RT
 23fd850:	20363d3c 20202626 363e5452 4d202d59     <=6 &&  RT>6Y- M
 23fd860:	0065766f 2c363c54 3c545220 20262036     ove.T<6, RT<6 & 
 23fd870:	363e5452 73655920 64726574 2d207961     RT>6 Yesterday -
 23fd880:	004b4f20 2c363c54 3c545220 26262036      OK.T<6, RT<6 &&
 23fd890:	3e545220 64322d36 4d202d20 0065766f      RT>6-2d - Move.
 23fd8a0:	2c363c54 3c545220 26262036 3c545220     T<6, RT<6 && RT<
 23fd8b0:	322d363d 202d2064 61656c43 45450072     =6-2d - Clear.EE
 23fd8c0:	4d4f5250 494e4920 52452054 00524f52     PROM INIT ERROR.
 23fd8d0:	52504545 52204d4f 50552054 45544144     EEPROM RT UPDATE
 23fd8e0:	45450044 4d4f5250 44505520 44455441     D.EEPROM UPDATED
 23fd8f0:	50454500 204d4f52 504d5544 454c2000     .EEPROM DUMP. LE
 23fd900:	64253a4e 54522000 64253a31 3230252e     N:%d. RT1:%d.%02
 23fd910:	52200064 253a3150 30252e64 20006432     d. RP1:%d.%02d. 
 23fd920:	3a325452 252e6425 00643230 32505220     RT2:%d.%02d. RP2
 23fd930:	2e64253a 64323025 47522000 253a5354     :%d.%02d. RGTS:%
 23fd940:	2000756c 4653324e 6c253a50 43200075     lu. N2SFP:%lu. C
 23fd950:	6c253a53 43200075 253a4353 5300756c     S:%lu. CSC:%lu.S
 23fd960:	464e3a44 3a445300 49444b4d 424f2052     D:NF.SD:MKDIR OB
 23fd970:	4b4f2053 3a445300 696c6e4f 5300656e     S OK.SD:Online.S
 23fd980:	4b4d3a44 20524944 2053424f 00525245     D:MKDIR OBS ERR.
 23fd990:	4f3a4453 696c6666 5300656e 424f3a44     SD:Offline.SD:OB
 23fd9a0:	49442053 78452052 73747369 2f732500     S DIR Exists.%s/
 23fd9b0:	25643425 25643230 2e643230 00676f6c     %4d%02d%02d.log.
 23fd9c0:	4f3a4453 286e6570 29676f4c 00525245     SD:Open(Log)ERR.
 23fd9d0:	2d53324e 4c45443e 00464e3a 2d53324e     N2S->DEL:NF.N2S-
 23fd9e0:	4c45443e 004b4f3a 2d53324e 4c45443e     >DEL:OK.N2S->DEL
 23fd9f0:	5252453a 53324e00 6c75463a 324e006c     :ERR.N2S:Full.N2
 23fda00:	424f3a53 64412053 00646564 3a53324e     S:OBS Added.N2S:
 23fda10:	6e65704f 72724520 2500726f 73252c73     Open Error.%s,%s
 23fda20:	526f4c00 67734d61 5d64255b 324e3e2d     .LoRaMsg[%d]->N2
 23fda30:	4f4c0053 52204152 79616c65 25632520     S.LORA Relay %c%
 23fda40:	6e552063 2c006e6b 6c655200 25207961     c Unkn.,.Relay %
 23fda50:	44492073 2064253a 3a544e43 4c006425     s ID:%d CNT:%d.L
 23fda60:	2041524f 616c6552 6f4e2079 63617053     ORA Relay NoSpac
 23fda70:	4f4c0065 52204152 79616c65 67734d20     e.LORA Relay Msg
 23fda80:	74736f4c 524f4c00 65522041 2079616c     Lost.LORA Relay 
 23fda90:	2d207325 7551203e 64657565 0064253a     %s -> Queued:%d.
 23fdaa0:	464e4f43 542e4749 53005458 61432044     CONFIG.TXT.SD Ca
 23fdab0:	203a6472 6f727265 6e6f2072 65706f20     rd: error on ope
 23fdac0:	676e696e 6c696620 61002065 705f7365     ning file .aes_p
 23fdad0:	0079656b 613a4643 705f7365 3d79656b     key.CF:aes_pkey=
 23fdae0:	5d73255b 73656100 69796d5f 46430076     [%s].aes_myiv.CF
 23fdaf0:	7365613a 69796d5f 255b3d76 005d756c     :aes_myiv=[%lu].
 23fdb00:	61726f6c 696e755f 00646974 6c3a4643     lora_unitid.CF:l
 23fdb10:	5f61726f 74696e75 5b3d6469 005d6425     ora_unitid=[%d].
 23fdb20:	61726f6c 7078745f 7265776f 3a464300     lora_txpower.CF:
 23fdb30:	61726f6c 7078745f 7265776f 64255b3d     lora_txpower=[%d
 23fdb40:	6f6c005d 665f6172 00716572 6c3a4643     ].lora_freq.CF:l
 23fdb50:	5f61726f 71657266 64255b3d 7461005d     ora_freq=[%d].at
 23fdb60:	73736300 68746800 79685700 48496d41     .css.hth.WhyAmIH
 23fdb70:	3f657265 53462c00 53424f00 64253e2d     ere?.,FS.OBS->%d
 23fdb80:	64644120 53324e20 53424f00 5d64255b      Add N2S.OBS[%d]
 23fdb90:	44533e2d 25202c00 524c0073 324e3e2d     ->SD., %s.LR->N2
 23fdba0:	424f0053 4c415b53 3e2d5d4c 0053324e     S.OBS[ALL]->N2S.
 23fdbb0:	253a5252 25282073 6c252c64 44002975     RR:%s (%d,%lu).D
 23fdbc0:	7463416f 3a6e6f69 4f424552 4400544f     oAction:REBOOT.D
 23fdbd0:	7463416f 3a6e6f69 4f464e49 416f4400     oAction:INFO.DoA
 23fdbe0:	6f697463 45533a6e 4400444e 7463416f     ction:SEND.DoAct
 23fdbf0:	3a6e6f69 00545243 63416f44 6e6f6974     ion:CRT.DoAction
 23fdc00:	4434413a 00545349 443d3441 2c545349     :A4DIST.A4=DIST,
 23fdc10:	4c454420 49415220 4b4f3a4e 3d344100      DEL RAIN:OK.A4=
 23fdc20:	54534944 4544202c 4152204c 453a4e49     DIST, DEL RAIN:E
 23fdc30:	41005252 49443d34 202c5453 45524c41     RR.A4=DIST, ALRE
 23fdc40:	20594441 53495845 41005354 49443d34     ADY EXISTS.A4=DI
 23fdc50:	202c5453 00544553 443d3441 2c545349     ST, SET.A4=DIST,
 23fdc60:	45504f20 5245204e 34410052 5349443d      OPEN ERR.A4=DIS
 23fdc70:	44202c54 35204c45 4b4f3a4d 3031202c     T, DEL 5M:OK, 10
 23fdc80:	4553204d 34410054 5349443d 44202c54     M SET.A4=DIST, D
 23fdc90:	35204c45 52453a4d 34410052 5349443d     EL 5M:ERR.A4=DIS
 23fdca0:	31202c54 41004d30 49443d34 202c5453     T, 10M.A4=DIST, 
 23fdcb0:	4e204453 6f440046 69746341 413a6e6f     SD NF.DoAction:A
 23fdcc0:	49415234 3441004e 4941523d 44202c4e     4RAIN.A4=RAIN, D
 23fdcd0:	44204c45 3a545349 41004b4f 41523d34     EL DIST:OK.A4=RA
 23fdce0:	202c4e49 204c4544 54534944 5252453a     IN, DEL DIST:ERR
 23fdcf0:	3d344100 4e494152 4544202c 4d35204c     .A4=RAIN, DEL 5M
 23fdd00:	004b4f3a 523d3441 2c4e4941 4c454420     :OK.A4=RAIN, DEL
 23fdd10:	3a4d3520 00525245 523d3441 2c4e4941      5M:ERR.A4=RAIN,
 23fdd20:	524c4120 59444145 49584520 00535453      ALREADY EXISTS.
 23fdd30:	523d3441 2c4e4941 54455320 3d344100     A4=RAIN, SET.A4=
 23fdd40:	4e494152 504f202c 45204e45 41005252     RAIN, OPEN ERR.A
 23fdd50:	41523d34 202c4e49 4e204453 6f440046     4=RAIN, SD NF.Do
 23fdd60:	69746341 353a6e6f 5349444d 4d350054     Action:5MDIST.5M
 23fdd70:	54534944 4c41202c 44414552 58452059     DIST, ALREADY EX
 23fdd80:	53545349 444d3500 20545349 00544553     ISTS.5MDIST SET.
 23fdd90:	49444d35 4f205453 204e4550 00525245     5MDIST OPEN ERR.
 23fdda0:	49444d35 202c5453 4e204453 6f440046     5MDIST, SD NF.Do
 23fddb0:	69746341 413a6e6f 57415234 3d344100     Action:A4RAW.A4=
 23fddc0:	54534944 4544202c 4944204c 4f3a5453     DIST, DEL DIST:O
 23fddd0:	3441004b 5349443d 44202c54 44204c45     K.A4=DIST, DEL D
 23fdde0:	3a545349 00525245 443d3441 2c545349     IST:ERR.A4=DIST,
 23fddf0:	4c454420 3a4d3520 41004b4f 41523d34      DEL 5M:OK.A4=RA
 23fde00:	41202c57 4145524c 45205944 54534958     W, ALREADY EXIST
 23fde10:	34410053 5741523d 4553202c 34410054     S.A4=RAW, SET.A4
 23fde20:	5741523d 504f202c 45204e45 41005252     =RAW, OPEN ERR.A
 23fde30:	41523d34 53202c57 464e2044 416f4400     4=RAW, SD NF.DoA
 23fde40:	6f697463 34413a6e 00524c43 433d3441     ction:A4CLR.A4=C
 23fde50:	202c524c 204c4544 54534944 004b4f3a     LR, DEL DIST:OK.
 23fde60:	433d3441 202c524c 204c4544 54534944     A4=CLR, DEL DIST
 23fde70:	5252453a 3d344100 2c524c43 4c454420     :ERR.A4=CLR, DEL
 23fde80:	49415220 464e3a4e 3d344100 2c524c43      RAIN:NF.A4=CLR,
 23fde90:	4c454420 49415220 4b4f3a4e 3d344100      DEL RAIN:OK.A4=
 23fdea0:	2c524c43 4c454420 49415220 52453a4e     CLR, DEL RAIN:ER
 23fdeb0:	34410052 524c433d 4544202c 4152204c     R.A4=CLR, DEL RA
 23fdec0:	4b4f3a57 3d344100 2c524c43 4c454420     W:OK.A4=CLR, DEL
 23fded0:	57415220 5252453a 3d344100 2c524c43      RAW:ERR.A4=CLR,
 23fdee0:	4c454420 3a4d3520 41004b4f 4c433d34      DEL 5M:OK.A4=CL
 23fdef0:	44202c52 35204c45 52453a4d 34410052     R, DEL 5M:ERR.A4
 23fdf00:	524c433d 4453202c 00464e20 63416f44     =CLR, SD NF.DoAc
 23fdf10:	6e6f6974 5235413a 41005741 41523d35     tion:A5RAW.A5=RA
 23fdf20:	41202c57 4145524c 45205944 54534958     W, ALREADY EXIST
 23fdf30:	35410053 5741523d 4553202c 35410054     S.A5=RAW, SET.A5
 23fdf40:	5741523d 504f202c 45204e45 41005252     =RAW, OPEN ERR.A
 23fdf50:	41523d35 53202c57 464e2044 416f4400     5=RAW, SD NF.DoA
 23fdf60:	6f697463 35413a6e 00524c43 433d3541     ction:A5CLR.A5=C
 23fdf70:	202c524c 204c4544 3a574152 41004b4f     LR, DEL RAW:OK.A
 23fdf80:	4c433d35 44202c52 52204c45 453a5741     5=CLR, DEL RAW:E
 23fdf90:	41005252 4c433d35 44202c52 41204c45     RR.A5=CLR, DEL A
 23fdfa0:	57415235 00464e3a 433d3541 202c524c     5RAW:NF.A5=CLR, 
 23fdfb0:	4e204453 6f440046 69746341 543a6e6f     SD NF.DoAction:T
 23fdfc0:	4d354958 49585400 202c4d35 45524c41     XI5M.TXI5M, ALRE
 23fdfd0:	20594441 00544553 35495854 4553204d     ADY SET.TXI5M SE
 23fdfe0:	58540054 204d3549 4e45504f 52524520     T.TXI5M OPEN ERR
 23fdff0:	49585400 203a4d35 6f6d6552 20646576     .TXI5M: Removed 
 23fe000:	30315854 6946204d 5400656c 4d354958     TX10M File.TXI5M
 23fe010:	4453202c 00464e20 63416f44 6e6f6974     , SD NF.DoAction
 23fe020:	4958543a 004d3031 31495854 202c4d30     :TXI10M.TXI10M, 
 23fe030:	45524c41 20594441 00544553 31495854     ALREADY SET.TXI1
 23fe040:	53204d30 54005445 30314958 504f204d     0M SET.TXI10M OP
 23fe050:	45204e45 54005252 4d354958 6552203a     EN ERR.TXI5M: Re
 23fe060:	65766f6d 58542064 46204d35 00656c69     moved TX5M File.
 23fe070:	31495854 202c4d30 4e204453 6f440046     TXI10M, SD NF.Do
 23fe080:	69746341 543a6e6f 35314958 5854004d     Action:TXI15M.TX
 23fe090:	4d353149 4c41202c 44414552 45532059     I15M, ALREADY SE
 23fe0a0:	58540054 4d353149 6552203a 65766f6d     T.TXI15M: Remove
 23fe0b0:	58542064 46204d35 00656c69 31495854     d TX5M File.TXI1
 23fe0c0:	203a4d35 6f6d6552 20646576 30315854     5M: Removed TX10
 23fe0d0:	6946204d 5400656c 35314958 4553204d     M File.TXI15M SE
 23fe0e0:	58540054 4d353149 4453202c 00464e20     T.TXI15M, SD NF.
 23fe0f0:	63416f44 6e6f6974 4e4b553a 49585400     DoAction:UKN.TXI
 23fe100:	494e493a 58540054 204d3549 6e756f46     :INIT.TXI5M Foun
 23fe110:	58540064 4d523a49 4d303120 49585400     d.TXI:RM 10M.TXI
 23fe120:	204d3031 6e756f46 58540064 4d523a49     10M Found.TXI:RM
 23fe130:	004d3520 3d495854 004d6425 74696157      5M.TXI=%dM.Wait
 23fe140:	65532034 6c616972 6e6f4320 656c6f73     4 Serial Console
 23fe150:	454c4f00 6e453a44 656c6261 4c4f0064     .OLED:Enabled.OL
 23fe160:	443a4445 62617369 0064656c 453a4353     ED:Disabled.SC:E
 23fe170:	6c62616e 53006465 493a5245 0074696e     nabled.SER:Init.
 23fe180:	3a524553 46004b4f 632e4d53 363a7070     SER:OK.FSM.cpp:6
 23fe190:	73203231 26206372 72732026 633e2d63     12 src && src->c
 23fe1a0:	626c6c61 006b6361 5f53424f 203a6f44     allback.OBS_Do: 
 23fe1b0:	656d6954 00564e20 00736362 00637062     Time NV.bcs.bpc.
 23fe1c0:	00726663 72006772 72007467 77007067     cfr.rg.rgt.rgp.w
 23fe1d0:	64770073 00677700 00646777 00317062     s.wd.wg.wgd.bp1.
 23fe1e0:	00317462 00316862 00327062 00327462     bt1.bh1.bp2.bt2.
 23fe1f0:	00326862 00316868 00317468 00317473     bh2.hh1.ht1.st1.
 23fe200:	00316873 00327473 00326873 3a525245     sh1.st2.sh2.ERR:
 23fe210:	31434448 61655220 64680064 68003174     HDC1 Read.hdt1.h
 23fe220:	00316864 32746468 68646800 706c0032     dh1.hdt2.hdh2.lp
 23fe230:	6c003174 00317070 3274706c 70706c00     t1.lpp1.lpt2.lpp
 23fe240:	74680032 68680032 49530032 53455220     2.ht2.hh2.SI RES
 23fe250:	73005445 73003176 73003169 76003175     ET.sv1.si1.su1.v
 23fe260:	6200786c 7300786c 34610067 67720072     lx.blx.sg.a4r.rg
 23fe270:	67720032 72003274 00327067 00723561     2.rgt2.rgp2.a5r.
 23fe280:	73316d70 70003031 3273316d 6d700035     pm1s10.pm1s25.pm
 23fe290:	30317331 6d700030 30316531 316d7000     1s100.pm1e10.pm1
 23fe2a0:	00353265 65316d70 00303031 77006968     e25.pm1e100.hi.w
 23fe2b0:	77007462 00746762 77776c74 776c7400     bt.wbgt.tlww.tlw
 23fe2c0:	73740074 3532656d 6d737400 74006365     t.tsme25.tsmec.t
 23fe2d0:	77766d73 73740063 7400746d 736d736d     smvwc.tsmt.tmsms
 23fe2e0:	6d740031 32736d73 736d7400 0033736d     1.tmsms2.tmsms3.
 23fe2f0:	6d736d74 74003473 746d736d 6d740031     tmsms4.tmsmt1.tm
 23fe300:	32746d73 746d7000 53430073 2e64253a     smt2.pmts.CS:%d.
 23fe310:	64323025 253a4220 64252c64 3230252e     %02d B:%d,%d.%02
 23fe320:	4f4c0064 4f204152 4f4c004b 4e204152     d.LORA OK.LORA N
 23fe330:	4f4c0046 49204152 2054494e 00525245     F.LORA INIT ERR.
 23fe340:	41524f4c 2d534320 00525245 41524f4c     LORA CS-ERR.LORA
 23fe350:	696e4920 69570074 6944646e 49207473      Init.WindDist I
 23fe360:	2874696e 002e0029 74726150 656c6369     nit()...Particle
 23fe370:	746f4e3a 64616552 53460079 5d64255b     :NotReady.FS[%d]
 23fe380:	55503e2d 4b4f2042 5d64255b 5b534600     ->PUB OK[%d].FS[
 23fe390:	2d5d6425 4255503e 52524520 4c455200     %d]->PUB ERR.REL
 23fe3a0:	255b5941 3e2d5d73 20425550 52004b4f     AY[%s]->PUB OK.R
 23fe3b0:	59414c45 5d73255b 55503e2d 52452042     ELAY[%s]->PUB ER
 23fe3c0:	45520052 2059414c 45505954 5d64255b     R.RELAY TYPE[%d]
 23fe3d0:	564e4920 44494c41 00323300 44003436      INVALID.32.64.D
 23fe3e0:	42415349 0044454c 42414e45 0044454c     ISABLED.ENABLED.
 23fe3f0:	45555254 4c414600 49004553 5f4f464e     TRUE.FALSE.INFO_
 23fe400:	29284f44 76656400 64006469 736f7665     DO().devid.devos
 23fe410:	65726600 6d656d65 74707500 00656d69     .freemem.uptime.
 23fe420:	00726576 322d5346 32373035 00317631     ver.FS-250721v1.
 23fe430:	252d6425 72720064 73642500 73626f00     %d-%d.rr.%ds.obs
 23fe440:	64250069 626f006d 00697473 746e3274     i.%dm.obsti.t2nt
 23fe450:	63726400 326e0074 73700073 71736300     .drct.n2s.ps.csq
 23fe460:	736d6900 34610069 53494400 4d352054     .imsi.a4.DIST 5M
 23fe470:	53494400 30312054 4752004d 534e0032     .DIST 10M.RG2.NS
 23fe480:	00356100 4d427325 25283158 25002973     .a5.%sBMX1(%s).%
 23fe490:	584d4273 73252832 73250029 3150434d     sBMX2(%s).%sMCP1
 23fe4a0:	4d732500 00325043 434d7325 672f3350     .%sMCP2.%sMCP3/g
 23fe4b0:	25003174 50434d73 74672f34 73250032     t1.%sMCP4/gt2.%s
 23fe4c0:	31544853 53732500 00325448 44487325     SHT1.%sSHT2.%sHD
 23fe4d0:	25003143 43444873 73250032 3153504c     C1.%sHDC2.%sLPS1
 23fe4e0:	4c732500 00325350 49487325 25003848     .%sLPS2.%sHIH8.%
 23fe4f0:	00495373 45567325 25004c4d 584c4273     sSI.%sVEML.%sBLX
 23fe500:	41732500 30363553 73250030 00574c54     .%sAS5600.%sTLW.
 23fe510:	53547325 7325004d 4d534d54 48732500     %sTSM.%sTMSM.%sH
 23fe520:	73250049 00544257 42577325 57205447     I.%sWBT.%sWBGT W
 23fe530:	4f4c472f 25004542 47425773 4f572054     /GLOBE.%sWBGT WO
 23fe540:	4f4c472f 25004542 324d5073 00514135     /GLOBE.%sPM25AQ.
 23fe550:	47527325 29732528 6e657300 73726f73     %sRG(%s).sensors
 23fe560:	2c642500 252c6425 7a484d64 726f6c00     .%d,%d,%dMHz.lor
 23fe570:	6c6f0061 73006465 69706563 7325286e     a.oled.scepin(%s
 23fe580:	63730029 44530065 65704f3a 6e49286e     ).sce.SD:Open(In
 23fe590:	45296f66 49005252 2d4f464e 4255503e     fo)ERR.INFO->PUB
 23fe5a0:	5b4b4f20 005d6425 4f464e49 55503e2d      OK[%d].INFO->PU
 23fe5b0:	52452042 324e0052 75503a53 73696c62     B ERR.N2S:Publis
 23fe5c0:	324e0068 6d453a53 00797470 5b53324e     h.N2S:Empty.N2S[
 23fe5d0:	255d6425 503e2d73 4f3a4255 324e004b     %d]%s->PUB:OK.N2
 23fe5e0:	64255b53 2d73255d 4255503e 5445523a     S[%d]%s->PUB:RET
 23fe5f0:	4e005952 255b5332 73255d64 55503e2d     RY.N2S[%d]%s->PU
 23fe600:	52453a42 324e0052 424f3a53 654e2053     B:ERR.N2S:OBS Ne
 23fe610:	64656465 53324e00 53424f3a 4c554620     eded.N2S:OBS FUL
 23fe620:	324e004c 64255b53 423e2d5d 453a524f     L.N2S[%d]->BOR:E
 23fe630:	4e005252 3e2d5332 4e45504f 5252453a     RR.N2S->OPEN:ERR
 23fe640:	4c455200 3e2d5941 0053324e 79706f43     .RELAY->N2S.Copy
 23fe650:	68676972 325b2074 5d353230 6e555b20     right [2025] [Un
 23fe660:	72657669 79746973 726f4320 61726f70     iversity Corpora
 23fe670:	6e6f6974 726f6620 6d744120 6870736f     tion for Atmosph
 23fe680:	63697265 73655220 63726165 4e005d68     eric Research].N
 23fe690:	453a5332 74736978 324e0073 6f4e3a53     2S:Exists.N2S:No
 23fe6a0:	4300656e 4f4e3a46 00732520 00537325     ne.CF:NO %s.%sS.
 23fe6b0:	3a435453 494c4156 54530044 56213a43     STC:VALID.STC:!V
 23fe6c0:	44494c41 3a535000 42006425 64253a53     ALID.PS:%d.BS:%d
 23fe6d0:	43504200 2e64253a 64323025 416f4400     .BPC:%d.%02d.DoA
 23fe6e0:	6f697463 6f44006e 69746341 4f3a6e6f     ction.DoAction:O
 23fe6f0:	6f44004b 69746341 453a6e6f 41005252     K.DoAction:ERR.A
 23fe700:	49432b54 0a0d494d 534d4900 464e3a49     T+CIMI...IMSI:NF
 23fe710:	534d4900 73253a49 6e6f4300 7463656e     .IMSI:%s.Connect
 23fe720:	57006465 65522053 73657266 65522068     ed.WS Refresh Re
 23fe730:	72697571 45006465 203a5252 43206f4e     quired.ERR: No C
 23fe740:	6b636f6c 69614400 5220796c 6f6f6265     lock.Daily Reboo
 23fe750:	65520074 746f6f62 00676e69 206d2749     t.Rebooting.I'm 
 23fe760:	76696c41 57202165 003f7968 20776f4c     Alive! Why?.Low 
 23fe770:	65776f50 50002172 7265776f 20676e69     Power!.Powering 
 23fe780:	6e776f44 776f5000 52207265 70612d65     Down.Power Re-ap
 23fe790:	65696c70 00000064                       plied...

023fe798 <_ZTVN8particle11SPISettingsE>:
	...
 23fe7a0:	023e5d79 023e5cad 023e5cc3              y]>..\>..\>.

023fe7ac <_ZTV6FsFile>:
	...
 23fe7b4:	023e5cc1 023e5cd1 023e6043 023e6039     .\>..\>.C`>.9`>.
 23fe7c4:	023e5fb1 023e601b 023e5d21 023e5cdf     ._>..`>.!]>..\>.
 23fe7d4:	023f939d                                ..?.

023fe7d8 <_ZL5s_fwd>:
 23fe7d8:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 23fe7e8:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 23fe7f8:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 23fe808:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 23fe818:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 23fe828:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 23fe838:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 23fe848:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 23fe858:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 23fe868:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 23fe878:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 23fe888:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 23fe898:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 23fe8a8:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 23fe8b8:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 23fe8c8:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

023fe8d8 <_ZL5s_inv>:
 23fe8d8:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 23fe8e8:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 23fe8f8:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 23fe908:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 23fe918:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 23fe928:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 23fe938:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 23fe948:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 23fe958:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 23fe968:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 23fe978:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 23fe988:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 23fe998:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 23fe9a8:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 23fe9b8:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 23fe9c8:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

023fe9d8 <_ZTV20Adafruit_BMP280_Temp>:
	...
 23fe9e0:	023ef1c3 023ef1c5 023ee95b 023ef7ed     ..>...>.[.>...>.
 23fe9f0:	023ef1e1                                ..>.

023fe9f4 <_ZTV24Adafruit_BMP280_Pressure>:
	...
 23fe9fc:	023ef1c1 023ef1d3 023ee95b 023ef9ad     ..>...>.[.>...>.
 23fea0c:	023ef229                                ).>.

023fea10 <_ZL4font>:
 23fea10:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
 23fea20:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
 23fea30:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
 23fea40:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
 23fea50:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
 23fea60:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
 23fea70:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
 23fea80:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
 23fea90:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
 23feaa0:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
 23feab0:	00000000 5f000000 07000000 14000700     ......._........
 23feac0:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 23fead0:	00502056 00030708 41221c00 22410000     V P......."A..A"
 23feae0:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
 23feaf0:	08080800 00000808 20006060 02040810     ........``. ....
 23feb00:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
 23feb10:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
 23feb20:	41314949 07091121 49494936 49494636     II1A!...6III6FII
 23feb30:	00001e29 00000014 00003440 22140800     ).......@4....."
 23feb40:	14141441 41001414 02081422 06095901     A......A"....Y..
 23feb50:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
 23feb60:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
 23feb70:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
 23feb80:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 23feb90:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 23feba0:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
 23febb0:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
 23febc0:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
 23febd0:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
 23febe0:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
 23febf0:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
 23fec00:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
 23fec10:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
 23fec20:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
 23fec30:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
 23fec40:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
 23fec50:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
 23fec60:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
 23fec70:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
 23fec80:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
 23fec90:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
 23feca0:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
 23fecb0:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
 23fecc0:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
 23fecd0:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
 23fece0:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
 23fecf0:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
 23fed00:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
 23fed10:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
 23fed20:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
 23fed30:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
 23fed40:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
 23fed50:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
 23fed60:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
 23fed70:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
 23fed80:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
 23fed90:	00ff0000 ff101010 14141400 101000ff     ................
 23feda0:	10ff00ff f010f010 fc141414 f7141400     ................
 23fedb0:	0000ff00 14ff00ff fc04f414 10171414     ................
 23fedc0:	1f10101f 14141f10 10001f14 00f01010     ................
 23fedd0:	1f000000 10101010 1010101f 0010f010     ................
 23fede0:	10ff0000 10101010 10101010 000010ff     ................
 23fedf0:	0014ff00 ff00ff00 101f0000 fc000017     ................
 23fee00:	1414f404 14171017 f404f414 00ff0000     ................
 23fee10:	141414f7 14141414 14f700f7 14171414     ................
 23fee20:	101f1010 1414141f 101014f4 00f010f0     ................
 23fee30:	1f101f00 1f000000 00000014 000014fc     ................
 23fee40:	10f010f0 ff10ff10 ff141414 10101014     ................
 23fee50:	0000001f ff10f000 ffffffff f0f0f0f0     ................
 23fee60:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
 23fee70:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
 23fee80:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
 23fee90:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
 23feea0:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
 23feeb0:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
 23feec0:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
 23feed0:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
 23feee0:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
 23feef0:	00000018 30001010 0101ff40 01011f00     .......0@.......
 23fef00:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

023fef10 <_ZTV12Adafruit_GFX>:
	...
 23fef20:	023f0891 023f9033 023e5219 023f0299     ..?.3.?..R>...?.
 23fef30:	023f029b 023f02cd 023f02a9 023f02bb     ..?...?...?...?.
 23fef40:	023f01db 023f0299 023f04c3 023f04c1     ..?...?...?...?.
 23fef50:	023f02e5 023f0323 023f035d 023f03a3     ..?.#.?.].?...?.
 23fef60:	023f03bf 023f0441 3950434d 00383038     ..?.A.?.MCP9808.

023fef70 <_ZTV16Adafruit_MCP9808>:
	...
 23fef78:	023f0f55 023f0f57 023ee95b 023f10c5     U.?.W.?.[.>...?.
 23fef88:	023f0f65                                e.?.

023fef8c <_ZL12splash1_data>:
 23fef8c:	00000000 00800100 00000000 00000000     ................
 23fef9c:	00008003 00000000 07000000 000000c0     ................
 23fefac:	00000000 c0070000 00000000 00000000     ................
 23fefbc:	00c00f00 00000000 00000000 0000e01f     ................
 23fefcc:	00000000 1f000000 000000e0 00000000     ................
 23fefdc:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
 23feff4:	0000f07f 00000000 7ff81f00 000000f0     ................
 23ff004:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
 23ff014:	00f07fff 00000000 ff1f0000 0000e0fb     ................
 23ff024:	00000000 f9ff0f00 0000c0ff 00000000     ................
 23ff034:	fff9ff0f 000000f8 07000000 fffff1ff     ................
 23ff044:	00000000 fc030000 80ffff73 00000000     ........s.......
 23ff054:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
 23ff064:	000000ff 00000000 fc1ffe7f 00000000     ................
 23ff074:	3f000000 00f8ffff 00000000 df0f0000     ...?............
 23ff084:	0000e0ff 00000000 ff191f00 000000c0     ................
 23ff094:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
 23ff0a4:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
 23ff0b4:	00000000 fcffff00 00000000 00000000     ................
 23ff0c4:	00feffff 00000000 ff000000 0000feff     ................
 23ff0d4:	00000000 efff0100 000000fe 00000000     ................
 23ff0e4:	fecfff01 00000000 03000000 00fe07ff     ................
 23ff0f4:	00000000 fc030000 0000fe07 00000000     ................
 23ff104:	03f00300 000000fe 00000000 fe008001     ................
	...
 23ff11c:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
 23ff134:	0000000c 07000000 00fc0080 00c00300     ................
 23ff144:	80070000 0000fc01 0000c003 01800700     ................
 23ff154:	030000fc 000000c0 e0018007 1e000000     ................
 23ff164:	07000000 00e00180 001e0000 9ff7e37f     ................
 23ff174:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
 23ff184:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
 23ff194:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
 23ff1a4:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
 23ff1b4:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
 23ff1c4:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
 23ff1d4:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
 23ff1e4:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
 23ff1f4:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
 23ff204:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
 23ff214:	ffffff00 ffffffff c0ffffff ffffffff     ................
 23ff224:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
 23ff234:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
 23ff244:	5b6bfdff c0fd6adb                       ..k[.j..

023ff24c <_ZL12splash2_data>:
 23ff24c:	00600000 00000000 00000000 00000000     ..`.............
 23ff25c:	0000e000 00000000 00000000 01000000     ................
 23ff26c:	000000e0 00000000 00000000 f0010000     ................
	...
 23ff288:	00f00300 00000000 00000000 00000000     ................
 23ff298:	0000f007 00000000 00000000 07000000     ................
 23ff2a8:	000000f8 00000000 00000000 f80f0000     ................
 23ff2b8:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
 23ff2c8:	c0030000 0000fe00 ff00e001 0000f8ef     ................
 23ff2d8:	00c00300 010000fe ffff00e0 000000f8     ................
 23ff2e8:	f000c003 0f000000 7ffe7f00 030000c0     ................
 23ff2f8:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
 23ff308:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
 23ff318:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
 23ff328:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
 23ff338:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
 23ff348:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
 23ff358:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
 23ff368:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
 23ff378:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
 23ff388:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
 23ff398:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
 23ff3a8:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
 23ff3b8:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
 23ff3c8:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
 23ff3e0:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
 23ff3f0:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
 23ff400:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
 23ff410:	ff7f000f a5feffff 198d9dad 060000e0     ................
 23ff420:	ffff7f00 adb5feff e07eb5ed              ..........~.

023ff42c <_ZTV16Adafruit_SSD1306>:
	...
 23ff434:	023f1649 023f1661 023f0891 023f9033     I.?.a.?...?.3.?.
 23ff444:	023f1675 023f0299 023f029b 023f02cd     u.?...?...?...?.
 23ff454:	023f02a9 023f02bb 023f01db 023f0299     ..?...?...?...?.
 23ff464:	023f04c3 023f1813 023f1ecf 023f1e81     ..?...?...?...?.
 23ff474:	023f035d 023f03a3 023f03bf 023f0441     ].?...?...?.A.?.

023ff484 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 23ff484:	e0c08000 fefcf8f0                       ........

023ff48c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 23ff48c:	07030100 7f3f1f0f                       ......?.

023ff494 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 23ff494:	a880d5ae                                ....

023ff498 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 23ff498:	8d4000d3                                ..@.

023ff49c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 23ff49c:	c8a10020                                 ...

023ff4a0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 23ff4a0:	a6a440db                                 .@....

023ff4a6 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 23ff4a6:	21ff0022                                 "..!..

023ff4ac <CSWTCH.30>:
 23ff4ac:	00c80064 03200190 ffffffff ffffffff     d..... .........
 23ff4bc:	ffff0032 ffffffff 00000019              2...........

023ff4c8 <CSWTCH.35>:
 23ff4c8:	3f800000 40000000 3e000000 3e800000     ...?...@...>...>

023ff4d8 <_ZTV15RHGenericDriver>:
	...
 23ff4e0:	023f26a9 023e5219 023e5219 023e5219     .&?..R>..R>..R>.
 23ff4f0:	023e5219 023f26ad 023f26bf 023f2745     .R>..&?..&?.E'?.
 23ff500:	023f271d 023f2769 023f26c9 023f26d1     .'?.i'?..&?..&?.
 23ff510:	023f26d5 023f26d9 023f26dd 023f26e1     .&?..&?..&?..&?.
 23ff520:	023f26cd 023f26ed 023f26f1 023f26f5     .&?..&?..&?..&?.
 23ff530:	023f26f9 023f26fd 023f2703 023f2707     .&?..&?..'?..'?.
 23ff540:	023f26c9 023f270b 023f2711 023f2717     .&?..'?..'?..'?.

023ff550 <_ZTV12RHGenericSPI>:
	...
 23ff558:	023e5219 023f27c9 023f27cb 023e5219     .R>..'?..'?..R>.
 23ff568:	023e5219 023f27d3 023f27d7 023f27db     .R>..'?..'?..'?.
 23ff578:	023f27cd 023f27cf 023f27d1              .'?..'?..'?.

023ff584 <_ZTV13RHHardwareSPI>:
	...
 23ff58c:	023f2851 023f2865 023f2873 023f2881     Q(?.e(?.s(?..(?.
 23ff59c:	023f28ed 023f27d3 023f27d7 023f27db     .(?..'?..'?..'?.
 23ff5ac:	023f28fb 023f290f 023f27f5              .(?..)?..'?.

023ff5b8 <_ZTV11RHSPIDriver>:
	...
 23ff5c0:	023f292d 023e5219 023e5219 023e5219     -)?..R>..R>..R>.
 23ff5d0:	023e5219 023f26ad 023f26bf 023f2745     .R>..&?..&?.E'?.
 23ff5e0:	023f271d 023f2769 023f26c9 023f26d1     .'?.i'?..&?..&?.
 23ff5f0:	023f26d5 023f26d9 023f26dd 023f26e1     .&?..&?..&?..&?.
 23ff600:	023f26cd 023f26ed 023f26f1 023f26f5     .&?..&?..&?..&?.
 23ff610:	023f26f9 023f26fd 023f2703 023f2707     .&?..&?..'?..'?.
 23ff620:	023f26c9 023f270b 023f2711 023f2717     .&?..'?..'?..'?.

023ff630 <_ZL18MODEM_CONFIG_TABLE>:
 23ff630:	92047472 94480474 0cc47804              rt..t.H..x..

023ff63c <_ZTV7RH_RF95>:
	...
 23ff644:	023f2f41 023f2df7 023f2af1 023f2e33     A/?..-?..*?.3.?.
 23ff654:	023f2aa9 023f26ad 023f26bf 023f2745     .*?..&?..&?.E'?.
 23ff664:	023f271d 023f2769 023f2aad 023f26d1     .'?.i'?..*?..&?.
 23ff674:	023f26d5 023f26d9 023f26dd 023f26e1     .&?..&?..&?..&?.
 23ff684:	023f26cd 023f26ed 023f26f1 023f26f5     .&?..&?..&?..&?.
 23ff694:	023f26f9 023f26fd 023f2703 023f2707     .&?..&?..'?..'?.
 23ff6a4:	023f2ad7 023f270b 023f2711 023f2717     .*?..'?..'?..'?.
 23ff6b4:	41465845 61660054 64656c69 206f7420     EXFAT.failed to 
 23ff6c4:	64616572 67657220 72646441 3230253d     read regAddr=%02
 23ff6d4:	6f632078 3d746e75 66007525 656c6961     x count=%u.faile
 23ff6e4:	6f742064 61657220 65722064 64644167     d to read regAdd
 23ff6f4:	30253d72 73207832 3d746174 46006425     r=%02x stat=%d.F
 23ff704:	2054554f 20646964 20746f6e 48206f67     OUT did not go H
 23ff714:	00484749 20746f6e 65746564 64657463     IGH.not detected
 23ff724:	69616600 2064656c 77206f74 65746972     .failed to write
 23ff734:	67657220 72646441 3230253d 74732078      regAddr=%02x st
 23ff744:	253d7461 65730064 54445774 00642520     at=%d.setWDT %d.
 23ff754:	63746177 676f6468 656c6320 64657261     watchdog cleared
 23ff764:	65526220 746c7573 0064253d 63746177      bResult=%d.watc
 23ff774:	676f6468 74657320 756f6620 63655372     hdog set fourSec
 23ff784:	64253d73 65526220 746c7573 0064253d     s=%d bResult=%d.
 23ff794:	43544157 474f4448 45454400 4f505f50     WATCHDOG.DEEP_PO
 23ff7a4:	5f524557 4e574f44 554f4300 4f44544e     WER_DOWN.COUNTDO
 23ff7b4:	545f4e57 52454d49 414c4100 66004d52     WN_TIMER.ALARM.f
 23ff7c4:	756c6961 69206572 7075206e 65746164     ailure in update
 23ff7d4:	656b6157 73616552 25206e6f 61770064     WakeReason %d.wa
 23ff7e4:	7220656b 6f736165 203d206e 25007325     ke reason = %s.%
 23ff7f4:	2d643430 64323025 3230252d 30252064     04d-%02d-%02d %0
 23ff804:	253a6432 3a643230 64323025 74656700     2d:%02d:%02d.get
 23ff814:	41637452 206d5473 73007325 74527465     RtcAsTm %s.setRt
 23ff824:	54734163 7325206d 69616600 6572756c     cAsTm %s.failure
 23ff834:	206e6920 52746573 72466374 6d546d6f      in setRtcFromTm
 23ff844:	00642520 20746573 74737973 63206d65      %d.set system c
 23ff854:	6b636f6c 6f726620 5452206d 73252043     lock from RTC %s
 23ff864:	69616600 2064656c 64206f74 63657465     .failed to detec
 23ff874:	42412074 35303831 70706100 3162612e     t AB1805.app.ab1
 23ff884:	00353038                                805.

023ff888 <_ZTV6AB1805>:
	...
 23ff890:	023f62dd 023f62df 023f67ef 023f6875     .b?..b?..g?.uh?.

023ff8a0 <_ZTVN5spark13CellularClassE>:
	...
 23ff8a8:	023f7d5b 023f7d51 023f7d47 023f7d15     [}?.Q}?.G}?..}?.
 23ff8b8:	023e5dcd 023e5dd9 023f8d75 023f8d7d     .]>..]>.u.?.}.?.
 23ff8c8:	023f7d3b 023f7d33 023f7d29 023f7d1f     ;}?.3}?.)}?..}?.
 23ff8d8:	023f8ec9 023f8dad 023f8db5 006e616e     ..?...?...?.nan.
 23ff8e8:	00666e69 0066766f                       inf.ovf.

023ff8f0 <_ZTV14CellularSignal>:
	...
 23ff8f8:	023f7de9 023f7e11 023f7deb 023f7e21     .}?..~?..}?.!~?.
 23ff908:	023f7e55 023f7e81 023f7eb5 023f8079     U~?..~?..~?.y.?.
 23ff918:	023f7def 023f7e0b fffffffc 00000000     .}?..~?.........
 23ff928:	023f80c5                                ..?.

023ff92c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff934:	023f80e5 023f80eb 023f8129 023f80f9     ..?...?.).?...?.
 23ff944:	023f80e7                                ..?.

023ff948 <_ZTVN5spark13EthernetClassE>:
	...
 23ff950:	023f8733 023f8729 023f871f 023f8715     3.?.).?...?...?.
 23ff960:	023f8709 023f86fd 023f8d75 023f8d7d     ..?...?.u.?.}.?.
 23ff970:	023f86f1 023f86e9 023f86df 023f86d5     ..?...?...?...?.
 23ff980:	023f8ec9 023f8dad 023f8db5              ..?...?...?.

023ff98c <_ZTV7TwoWire>:
	...
 23ff994:	023f8751 023f879b 023f8773 023f8753     Q.?...?.s.?.S.?.
 23ff9a4:	023f877b 023f8783 023f878b 023f8793     {.?...?...?...?.
 23ff9b4:	023f939d                                ..?.

023ff9b8 <_ZTV9IPAddress>:
	...
 23ff9c0:	023f8965 023f8955 023f8957 756c6c25     e.?.U.?.W.?.%llu
 23ff9d0:	2a2e2500 7500666c 78343025 00000000     .%.*lf.u%04x....

023ff9e0 <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ff9e8:	023f8a45 023f8a47 023f8a55 023f8a7b     E.?.G.?.U.?.{.?.
 23ff9f8:	00707061                                app.

023ff9fc <CSWTCH.165>:
 23ff9fc:	1007aef4 1007aeb8 1007af98 1007af14     ................

023ffa0c <_ZTVN5spark12NetworkClassE>:
	...
 23ffa14:	023f8d35 023f8d3f 023f8d49 023f8d53     5.?.?.?.I.?.S.?.
 23ffa24:	023f8d5d 023f8d69 023f8d75 023f8d7d     ].?.i.?.u.?.}.?.
 23ffa34:	023f8d85 023f8d91 023f8d99 023f8da3     ..?...?...?...?.
 23ffa44:	023f8ec9 023f8dad 023f8db5              ..?...?...?.

023ffa50 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffa50:	18100800 38302820 2b25005a 3a643330     .... (08Z.%+03d:
 23ffa60:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 23ffa70:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 23ffa80:	00000000                                ....

023ffa84 <_ZTV11USARTSerial>:
	...
 23ffa8c:	023f9981 023f99ed 023f99c5 023f9033     ..?...?...?.3.?.
 23ffa9c:	023f9995 023f99b1 023f99a3 023f99bf     ..?...?...?...?.
 23ffaac:	023f939d 023f9983 023f9987              ..?...?...?.

023ffab8 <_ZTV9USBSerial>:
	...
 23ffac0:	023f9a31 023f9a99 023f9a6f 023f9033     1.?...?.o.?.3.?.
 23ffad0:	023f9a61 023f9a33 023f9a43 023f9a93     a.?.3.?.C.?...?.
 23ffae0:	023f939d 023f9a53 023f9a2b              ..?.S.?.+.?.

023ffaec <_ZTVN5spark9WiFiClassE>:
	...
 23ffaf4:	023f9bb1 023f9ba7 023f9b9d 023f9b53     ..?...?...?.S.?.
 23ffb04:	023f9b91 023f9b85 023f8d75 023f8d7d     ..?...?.u.?.}.?.
 23ffb14:	023f9b79 023f9b71 023f9b67 023f9b5d     y.?.q.?.g.?.].?.
 23ffb24:	023f8ec9 023f8dad 023f8db5              ..?...?...?.

023ffb30 <_ZSt7nothrow>:
	...

023ffb38 <atanhi>:
 23ffb38:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 23ffb48:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

023ffb58 <atanlo>:
 23ffb58:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 23ffb68:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

023ffb78 <CSWTCH.8>:
 23ffb78:	54442d18 bfe921fb 7f3321d2 4002d97c     .-DT.!...!3.|..@
 23ffb88:	7f3321d2 c002d97c                       .!3.|...

023ffb90 <CSWTCH.9>:
 23ffb90:	00000000 80000000 54442d18 400921fb     .........-DT.!.@
 23ffba0:	54442d18 c00921fb 00000000              .-DT.!......

023ffbac <npio2_hw>:
 23ffbac:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffbbc:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffbcc:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffbdc:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffbec:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffbfc:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffc0c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffc1c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffc2c <two_over_pi>:
 23ffc2c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffc3c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffc4c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffc5c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffc6c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffc7c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffc8c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffc9c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffcac:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffcbc:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffccc:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffcdc:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffcec:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffcfc:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffd0c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffd1c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffd2c:	0060e27b 00c08c6b 00000000              {.`.k.......

023ffd38 <PIo2>:
 23ffd38:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffd48:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffd58:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffd68:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffd78 <init_jk>:
 23ffd78:	00000002 00000003 00000004 00000006     ................

023ffd88 <TWO52>:
 23ffd88:	00000000 43300000 00000000 c3300000     ......0C......0.
 23ffd98:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
 23ffda8:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

023ffdb8 <day_name.1>:
 23ffdb8:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 23ffdc8:	61536972                                 riSat

023ffdcd <mon_name.0>:
 23ffdcd:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 23ffddd:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 23ffded:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 23ffdfd:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
 23ffe0d:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffe1d:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffe2d:	5f343231 36303631 36303831 732f3933     124_1606180639/s
 23ffe3d:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffe4d:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
 23ffe5d:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
 23ffe6d:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
 23ffe7d:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
 23ffe8d:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
 23ffe9d:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
 23ffead:	696c6474 61722f62 632e646e               tdlib/rand.c.

023ffeba <_ctype_>:
 23ffeba:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffeca:	20202020 20202020 20202020 20202020                     
 23ffeda:	10108820 10101010 10101010 10101010      ...............
 23ffeea:	04040410 04040404 10040404 10101010     ................
 23ffefa:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff0a:	01010101 01010101 01010101 10101010     ................
 23fff1a:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff2a:	02020202 02020202 02020202 10101010     ................
 23fff3a:	00000020 00000000 00000000 00000000      ...............
	...

023fffbb <link_const_data_end>:
	...

023fffbc <link_constructors_location>:
 23fffbc:	023ec781 	.word	0x023ec781
 23fffc0:	023f291d 	.word	0x023f291d
 23fffc4:	023f6d79 	.word	0x023f6d79
 23fffc8:	023f7d05 	.word	0x023f7d05
 23fffcc:	023f7db9 	.word	0x023f7db9
 23fffd0:	023f86c5 	.word	0x023f86c5
 23fffd4:	023f873d 	.word	0x023f873d
 23fffd8:	023f88e5 	.word	0x023f88e5
 23fffdc:	023f8d25 	.word	0x023f8d25
 23fffe0:	023f8edd 	.word	0x023f8edd
 23fffe4:	023f918d 	.word	0x023f918d
 23fffe8:	023f9581 	.word	0x023f9581
 23fffec:	023f996d 	.word	0x023f996d
 23ffff0:	023f9bbd 	.word	0x023f9bbd
